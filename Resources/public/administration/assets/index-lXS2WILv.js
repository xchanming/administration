import{e as d}from"./error-config-GuG5GfBO.js";import{C as n}from"./sw-customer.constant-v-M3S1F-.js";const u=`{% block sw_customer_detail %} <sw-page class="sw-customer-detail"> {% block sw_customer_detail_header %} <template v-if="!isLoading" #smart-bar-header > <h2> {{ salutation(customer) }} </h2> <sw-label v-if="customer?.createdById" appearance="pill" size="small" class="sw-customer-detail__created-by-admin-label" > {{ $tc('sw-customer.detail.labelCreatedByAdmin') }} </sw-label> </template> {% endblock %} {% block sw_customer_detail_actions %} <template #smart-bar-actions> {% block sw_customer_detail_actions_edit %} <span v-if="!editMode"> <sw-button v-tooltip="{ message: $tc('sw-privileges.tooltip.warning'), disabled: acl.can('customer.editor'), showOnDisabledElements: true }" class="sw-customer-detail__open-edit-mode-action" variant="primary" :disabled="isLoading || !acl.can('customer.editor')" @click.prevent="onActivateCustomerEditMode" > {{ $tc('sw-customer.detail.buttonEdit') }} </sw-button> </span> {% endblock %} <span v-else> {% block sw_customer_detail_actions_cancel %} <sw-button :disabled="isLoading" @click="onAbortButtonClick" > {{ $tc('global.default.cancel') }} </sw-button> {% endblock %} {% block sw_customer_detail_actions_save %} <sw-button-process class="sw-customer-detail__save-action" :is-loading="isLoading" :process-success="isSaveSuccessful" :disabled="isLoading" variant="primary" @update:process-success="saveFinish" @click.prevent="onSave" > {{ $tc('sw-customer.detail.buttonSave') }} </sw-button-process> {% endblock %} </span> </template> {% endblock %} <template #language-switch> <sw-language-switch :abort-change-function="abortOnLanguageChange" :save-changes-function="saveOnLanguageChange" @on-change="onChangeLanguage" /> </template> {% block sw_customer_detail_content %} <template #content> <sw-card-view> {% block sw_customer_detail_content_customer_group_registration %} <div class="sw-customer-detail__customer-registration-alert"> <mt-banner v-if="customer && customer.requestedGroup" variant="info" > {% block sw_customer_detail_content_customer_group_registration_content %} <div class="sw-customer-detail__customer-registration-alert-text"> {% block sw_customer_detail_content_customer_group_registration_message %} {{ $tc('sw-customer.customerGroupRegistration.alert', { name: customer.requestedGroup.translated.name }, 0) }} {% endblock %} </div> <div class="sw-customer-detail__customer-registration-alert-actions"> {% block sw_customer_detail_content_customer_group_registration_actions %} <sw-button variant="danger" size="small" @click="declineCustomerGroupRegistration" > {{ $tc('sw-customer.customerGroupRegistration.decline') }} </sw-button> <sw-button variant="primary" size="small" @click="acceptCustomerGroupRegistration" > {{ $tc('sw-customer.customerGroupRegistration.accept') }} </sw-button> {% endblock %} </div> {% endblock %} </mt-banner> </div> {% endblock %} {% block sw_customer_detail_content_tabs %} <sw-tabs class="sw-customer-detail-page__tabs" position-identifier="sw-customer-detail-tabs" > {% block sw_customer_detail_content_tab_general %} <sw-tabs-item class="sw-customer-detail__tab-general" :route="generalRoute" :title="$tc('sw-customer.detail.tabGeneral')" :has-error="swCustomerDetailBaseError" > {{ $tc('sw-customer.detail.tabGeneral') }} </sw-tabs-item> {% endblock %} {% block sw_customer_detail_content_tab_addresses %} <sw-tabs-item class="sw-customer-detail__tab-addresses" :route="addressesRoute" :title="$tc('sw-customer.detail.tabAddresses')" > {{ $tc('sw-customer.detail.tabAddresses') }} </sw-tabs-item> {% endblock %} {% block sw_customer_detail_content_tab_order %} <sw-tabs-item class="sw-customer-detail__tab-order" :route="ordersRoute" :title="$tc('sw-customer.detailBase.labelOrderCard')" > {{ $tc('sw-customer.detailBase.labelOrderCard') }} </sw-tabs-item> {% endblock %} {% block sw_customer_detail_content_tab_after %}{% endblock %} </sw-tabs> {% endblock %} <sw-extension-component-section position-identifier="sw-customer-detail__before-content" /> {% block sw_customer_detail_content_view %} <template v-if="isLoading"> <sw-skeleton variant="detail-bold" /> <sw-skeleton /> </template> <router-view v-if="customer" v-slot="{ Component }" > {# v-show is used here as underlying components influence the loading state and v-if would destroy this behaviour #} <component :is="Component" v-show="!isLoading" :customer="customer" :customer-edit-mode="editMode" /> </router-view> {% endblock %} </sw-card-view> </template> {% endblock %} </sw-page> {% endblock %}`,{Mixin:i}=Shopware,{Criteria:r}=Shopware.Data,{ShopwareError:c}=Shopware.Classes,{mapPageErrors:l}=Shopware.Component.getComponentHelper(),p={template:u,inject:["repositoryFactory","customerGroupRegistrationService","acl","customerValidationService"],mixins:[i.getByName("notification"),i.getByName("salutation"),i.getByName("discard-detail-page-changes")("customer")],shortcuts:{"SYSTEMKEY+S":"onSave",ESCAPE:"onAbortButtonClick"},props:{customerId:{type:String,required:!0}},data(){return{isLoading:!1,isSaveSuccessful:!1,customer:null,customerAddressCustomFieldSets:[],customerCustomFieldSets:[],errorEmailCustomer:null}},metaInfo(){return{title:this.$createTitle(this.identifier)}},computed:{identifier(){return this.customer!==null?this.salutation(this.customer):""},customerRepository(){return this.repositoryFactory.create("customer")},editMode:{get(){return typeof this.$route.query.edit=="boolean"?this.$route.query.edit:this.$route.query.edit==="true"},set(e){this.$router.push({name:this.$route.name,query:{edit:e}})}},defaultCriteria(){const e=new r(1,25);return e.addAssociation("addresses").addAssociation("group").addAssociation("salutation").addAssociation("salesChannel.domains").addAssociation("boundSalesChannel.domains").addAssociation("lastPaymentMethod").addAssociation("defaultBillingAddress.country").addAssociation("defaultBillingAddress.countryState").addAssociation("defaultBillingAddress.salutation").addAssociation("defaultShippingAddress.country").addAssociation("defaultShippingAddress.countryState").addAssociation("defaultShippingAddress.salutation").addAssociation("tags").addAssociation("requestedGroup").addAssociation("boundSalesChannel"),e.getAssociation("addresses").addSorting(r.sort("firstName"),"ASC",!1),e},generalRoute(){return{name:"sw.customer.detail.base",params:{id:this.customerId},query:{edit:this.editMode}}},addressesRoute(){return{name:"sw.customer.detail.addresses",params:{id:this.customerId},query:{edit:this.editMode}}},ordersRoute(){return{name:"sw.customer.detail.order",params:{id:this.customerId},query:{edit:this.editMode}}},emailHasChanged(){const e=this.customer.getOrigin();return this.customer.isNew()||!e.email?!0:e.email!==this.customer.email},validCompanyField(){var e;return this.customer.accountType===n.ACCOUNT_TYPE_BUSINESS?(e=this.customer.company)==null?void 0:e.trim().length:!0},salutationRepository(){return this.repositoryFactory.create("salutation")},salutationCriteria(){const e=new r(1,1);return e.addFilter(r.equals("salutationKey","not_specified")),e},...l(d)},watch:{customerId(){this.createdComponent()}},created(){this.createdComponent()},methods:{async loadCustomer(){const e=await this.getDefaultSalutation();Shopware.ExtensionAPI.publishData({id:"sw-customer-detail__customer",path:"customer",scope:this}),this.isLoading=!0,this.customerRepository.get(this.customerId,Shopware.Context.api,this.defaultCriteria).then(t=>{var s,o;this.customer=t,(s=this.customer)!=null&&s.salutationId||(this.customer.salutationId=e),(o=this.customer.addresses)==null||o.map(a=>(a.salutationId||(a.salutationId=e),a)),this.isLoading=!1})},async createdComponent(){await this.loadCustomer()},saveFinish(){this.isSaveSuccessful=!1,this.editMode=!1,this.createdComponent(),this.isLoading=!1},validateEmail(){const{id:e,email:t,boundSalesChannelId:s}=this.customer;return this.customerValidationService.checkCustomerEmail({id:e,email:t,boundSalesChannelId:s}).then(o=>(this.errorEmailCustomer&&Shopware.Store.get("error").addApiError({expression:`customer.${this.customer.id}.email`,error:null}),o)).catch(o=>{this.emailIsValid=!1,Shopware.Store.get("error").addApiError({expression:`customer.${this.customer.id}.email`,error:new c(o.response.data.errors[0])})})},async onSave(){if(this.isLoading=!0,!this.editMode)return!1;let e=!1;if(this.customer.email&&this.emailHasChanged){const t=await this.validateEmail();(!t||!t.isValid)&&(e=!0)}return this.validCompanyField||(this.createErrorMessageForCompanyField(),e=!0),await this.validPassword(this.customer)||(e=!0),e?(this.createNotificationError({message:this.$tc("sw-customer.detail.messageSaveError")}),this.isLoading=!1,!1):(this.isSaveSuccessful=!1,this.customer.birthday||(this.customer.birthday=null),this.customer.passwordNew&&(this.customer.password=this.customer.passwordNew),this.customer.accountType===n.ACCOUNT_TYPE_PRIVATE&&(this.customer.vatIds=[]),this.customerRepository.save(this.customer).then(()=>{this.isSaveSuccessful=!0,this.createNotificationSuccess({message:this.$tc("sw-customer.detail.messageSaveSuccess",{name:`${this.customer.firstName} ${this.customer.lastName}`},0)})}).catch(t=>{throw this.createNotificationError({message:this.$tc("sw-customer.detail.messageSaveError")}),this.isLoading=!1,t}))},async onAbortButtonClick(){this.discardChanges(),this.editMode=!1,await this.loadCustomer()},onActivateCustomerEditMode(){this.editMode=!0},abortOnLanguageChange(){return this.customerRepository.hasChanges(this.customer)},saveOnLanguageChange(){return this.onSave()},onChangeLanguage(e){Shopware.Store.get("context").setApiLanguageId(e),this.createdComponent()},async validPassword(e){const{passwordNew:t,passwordConfirm:s}=e;return(t||s)&&t!==s?(Shopware.Store.get("error").addApiError({expression:`customer.${this.customer.id}.passwordConfirm`,error:new c({detail:this.$tc("sw-customer.error.passwordDoNotMatch"),code:"password_not_match"})}),!1):!0},acceptCustomerGroupRegistration(){this.customerGroupRegistrationService.accept(this.customer.id).then(()=>{this.createNotificationSuccess({message:this.$tc("sw-customer.customerGroupRegistration.acceptMessage")})}).catch(()=>{this.createNotificationError({message:this.$tc("sw-customer.customerGroupRegistration.errorMessage")})}).finally(()=>{this.createdComponent()})},declineCustomerGroupRegistration(){this.customerGroupRegistrationService.decline(this.customer.id).then(()=>{this.createNotificationSuccess({message:this.$tc("sw-customer.customerGroupRegistration.declineMessage")})}).catch(()=>{this.createNotificationError({message:this.$tc("sw-customer.customerGroupRegistration.errorMessage")})}).finally(()=>{this.createdComponent()})},createErrorMessageForCompanyField(){this.isLoading=!1,Shopware.Store.get("error").addApiError({expression:`customer.${this.customer.id}.company`,error:new c({code:"c1051bb4-d103-4f74-8988-acbcafc7fdc3"})})},async getDefaultSalutation(){var t;return(t=(await this.salutationRepository.searchIds(this.salutationCriteria)).data)==null?void 0:t[0]}}};export{p as default};
