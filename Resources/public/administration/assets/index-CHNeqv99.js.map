{"version":3,"file":"index-CHNeqv99.js","sources":["../../../app/administration/src/module/sw-settings-country/page/sw-settings-country-detail/sw-settings-country-detail.html.twig","../../../app/administration/src/module/sw-settings-country/page/sw-settings-country-detail/index.js"],"sourcesContent":["<!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n{% block sw_settings_country_detail %}\n<sw-page class=\"sw-settings-country-detail\">\n\n    <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n    {% block sw_settings_country_detail_header %}\n    <template #smart-bar-header>\n        <h2>{{ placeholder(country, 'name', $tc('sw-settings-country.detail.textHeadline')) }}</h2>\n    </template>\n    {% endblock %}\n\n    <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n    {% block sw_settings_country_detail_actions %}\n    <template #smart-bar-actions>\n        <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n        {% block sw_settings_country_detail_actions_abort %}\n        <sw-button\n            v-tooltip.bottom=\"{\n                message: 'ESC',\n                appearance: 'light'\n            }\"\n            :disabled=\"isLoading\"\n            @click=\"onCancel\"\n        >\n            {{ $tc('global.default.cancel') }}\n        </sw-button>\n        {% endblock %}\n\n        <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n        {% block sw_settings_country_detail_actions_save %}\n        <sw-button-process\n            v-tooltip.bottom=\"tooltipSave\"\n            class=\"sw-settings-country-detail__save-action\"\n            :is-loading=\"isLoading\"\n            :process-success=\"isSaveSuccessful\"\n            :disabled=\"!country || !allowSave || undefined\"\n            variant=\"primary\"\n            @update:process-success=\"saveFinish\"\n            @click.prevent=\"onSave\"\n        >\n            {{ $tc('sw-settings-country.detail.buttonSave') }}\n        </sw-button-process>\n        {% endblock %}\n    </template>\n    {% endblock %}\n\n    <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n    {% block sw_settings_country_detail_language_switch %}\n    <template #language-switch>\n        <sw-language-switch\n            :save-changes-function=\"saveOnLanguageChange\"\n            :abort-change-function=\"abortOnLanguageChange\"\n            @on-change=\"onChangeLanguage\"\n        />\n    </template>\n    {% endblock %}\n\n    <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n    {% block sw_settings_country_detail_content %}\n    <template #content>\n        <sw-card-view>\n            <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n            {% block sw_settings_country_detail_content_language_info %}\n            <sw-language-info\n                :entity-description=\"placeholder(country, 'name', $tc('sw-settings-country.detail.textHeadline'))\"\n            />\n            {% endblock %}\n\n            <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n            {% block sw_settings_country_tabs_header %}\n            <sw-tabs position-identifier=\"sw-settings-country-detail-header\">\n                <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n                {% block sw_setting_country_tabs_setting %}\n                <sw-tabs-item\n                    v-bind=\"$props\"\n                    class=\"sw-settings-country__setting-tab\"\n                    :route=\"{ name: isNewCountry ? 'sw.settings.country.create.general' : 'sw.settings.country.detail.general' }\"\n                >\n                    {{ $tc('sw-settings-country.page.generalTab') }}\n                </sw-tabs-item>\n                {% endblock %}\n\n                <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n                {% block sw_setting_country_tabs_state %}\n                <sw-tabs-item\n                    v-bind=\"$props\"\n                    class=\"sw-settings-country__state-tab\"\n                    :route=\"{ name: isNewCountry ? 'sw.settings.country.create.state' : 'sw.settings.country.detail.state' }\"\n                >\n                    {{ $tc('sw-settings-country.page.stateTab') }}\n                </sw-tabs-item>\n                {% endblock %}\n\n                <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n                {% block sw_setting_country_tabs_address_handling %}\n                <sw-tabs-item\n                    v-bind=\"$props\"\n                    class=\"sw-settings-country__address-handling-tab\"\n                    :route=\"{ name: isNewCountry ? 'sw.settings.country.create.address-handling' : 'sw.settings.country.detail.address-handling' }\"\n                >\n                    {{ $tc('sw-settings-country.page.addressHandlingTab') }}\n                </sw-tabs-item>\n                {% endblock %}\n\n                <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n                {% block sw_setting_country_tabs_extension %}{% endblock %}\n            </sw-tabs>\n            {% endblock %}\n\n            <template v-if=\"isLoading\">\n                <sw-skeleton />\n                <sw-skeleton />\n            </template>\n\n            <template v-else>\n                <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n                {% block sw_settings_country_tabs_content %}\n                <router-view\n                    v-slot=\"{ Component }\"\n                >\n                    <component\n                        :is=\"Component\"\n                        :country=\"country\"\n                        :country-state-repository=\"countryStateRepository\"\n                        :is-loading=\"isLoading\"\n                        :user-config=\"userConfig\"\n                        :user-config-values=\"userConfigValues\"\n                        @modal-save=\"onSaveModal\"\n                        @update:country=\"onUpdateCountry\"\n                    />\n                </router-view>\n                {% endblock %}\n\n                <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n                {% block sw_settings_country_detail_custom_field_sets %}\n                <sw-card\n                    v-if=\"showCustomFields\"\n                    position-identifier=\"sw-settings-country-detail-custom-field-sets\"\n                    :title=\"$tc('sw-settings-custom-field.general.mainMenuItemGeneral')\"\n                    :is-loading=\"isLoading\"\n                >\n                    <sw-custom-field-set-renderer\n                        :entity=\"country\"\n                        :disabled=\"!acl.can('country.editor')\"\n                        :sets=\"customFieldSets\"\n                    />\n                </sw-card>\n                {% endblock %}\n            </template>\n        </sw-card-view>\n    </template>\n    {% endblock %}\n</sw-page>\n{% endblock %}\n","/**\n * @package buyers-experience\n */\nimport template from './sw-settings-country-detail.html.twig';\nimport './sw-settings-country-detail.scss';\n\nconst { Component, Mixin } = Cicada;\nconst { mapPropertyErrors } = Component.getComponentHelper();\nconst { Criteria } = Cicada.Data;\n\n// eslint-disable-next-line sw-deprecation-rules/private-feature-declarations\nexport default {\n    template,\n\n    compatConfig: Cicada.compatConfig,\n\n    inject: [\n        'repositoryFactory',\n        'acl',\n        'customFieldDataProviderService',\n    ],\n\n    mixins: [\n        Mixin.getByName('notification'),\n        Mixin.getByName('placeholder'),\n        Mixin.getByName('discard-detail-page-changes')('country'),\n    ],\n\n    shortcuts: {\n        'SYSTEMKEY+S': {\n            active() {\n                return this.allowSave;\n            },\n            method: 'onSave',\n        },\n        ESCAPE: 'onCancel',\n    },\n\n    data() {\n        return {\n            country: {\n                customerTax: {\n                    enabled: false,\n                },\n                companyTax: {\n                    enabled: false,\n                },\n            },\n            countryId: null,\n            isLoading: false,\n            countryStateRepository: null,\n            isSaveSuccessful: false,\n            customFieldSets: null,\n            userConfig: {\n                value: {},\n            },\n            userConfigValues: {},\n            showPreviewModal: false,\n            previewData: null,\n        };\n    },\n\n    metaInfo() {\n        return {\n            title: this.$createTitle(this.identifier),\n        };\n    },\n\n    computed: {\n        currentUserId() {\n            return Cicada.State.get('session').currentUser.id;\n        },\n\n        countryRepository() {\n            return this.repositoryFactory.create('country');\n        },\n\n        userConfigRepository() {\n            return this.repositoryFactory.create('user_config');\n        },\n\n        identifier() {\n            return this.placeholder(this.country, 'name');\n        },\n\n        stateColumns() {\n            return this.getStateColumns();\n        },\n\n        isNewCountry() {\n            return typeof this.country.isNew === 'function' ? this.country.isNew() : false;\n        },\n\n        allowSave() {\n            return this.isNewCountry ? this.acl.can('country.creator') : this.acl.can('country.editor');\n        },\n\n        tooltipSave() {\n            if (!this.allowSave) {\n                return {\n                    message: this.$tc('sw-privileges.tooltip.warning'),\n                    disabled: this.allowSave,\n                    showOnDisabledElements: true,\n                };\n            }\n\n            const systemKey = this.$device.getSystemKey();\n\n            return {\n                message: `${systemKey} + S`,\n                appearance: 'light',\n            };\n        },\n\n        userConfigCriteria() {\n            return new Criteria(1, 25).addFilter(\n                Criteria.multi('AND', [\n                    Criteria.equals('userId', this.currentUserId),\n                    Criteria.equals('key', 'setting-country'),\n                ]),\n            );\n        },\n\n        ...mapPropertyErrors('country', ['name']),\n\n        showCustomFields() {\n            return this.customFieldSets && this.customFieldSets.length > 0;\n        },\n    },\n\n    created() {\n        this.createdComponent();\n    },\n\n    methods: {\n        createdComponent() {\n            if (!this.$route.params.id) {\n                return;\n            }\n\n            this.countryId = this.$route.params.id;\n\n            Promise.all([\n                this.loadEntityData(),\n                this.loadCustomFieldSets(),\n                this.loadUserConfig(),\n            ]);\n        },\n\n        loadEntityData() {\n            if (typeof this.country.isNew === 'function' && this.country.isNew()) {\n                return false;\n            }\n\n            this.isLoading = true;\n            return this.countryRepository\n                .get(this.countryId)\n                .then((country) => {\n                    this.country = country;\n\n                    this.isLoading = false;\n\n                    this.countryStateRepository = this.repositoryFactory.create(\n                        this.country.states.entity,\n                        this.country.states.source,\n                    );\n                })\n                .catch(() => {\n                    this.isLoading = false;\n                });\n        },\n\n        loadCustomFieldSets() {\n            this.customFieldDataProviderService.getCustomFieldSets('country').then((sets) => {\n                this.customFieldSets = sets;\n            });\n        },\n\n        loadUserConfig() {\n            return this.userConfigRepository.search(this.userConfigCriteria, Cicada.Context.api).then((userConfigs) => {\n                if (userConfigs.length === 0) {\n                    this.userConfig = this.userConfigRepository.create(Cicada.Context.api);\n                    this.userConfig.userId = this.currentUserId;\n                    this.userConfig.key = 'setting-country';\n                    this.userConfig.value = [];\n                    return;\n                }\n                this.userConfig = userConfigs.first();\n                this.userConfigValues = this.userConfig.value[this.countryId];\n\n                if (!this.userConfigValues) {\n                    this.userConfig.value[this.countryId] = {};\n                    this.userConfigValues = this.userConfig.value[this.countryId];\n                }\n            });\n        },\n\n        saveFinish() {\n            this.isSaveSuccessful = false;\n        },\n\n        onSave() {\n            this.isSaveSuccessful = false;\n            this.isLoading = true;\n\n            const userConfigValue = this.userConfig.value[this.countryId];\n\n            return this.countryRepository\n                .save(this.country, Cicada.Context.api)\n                .then(() => {\n                    if (userConfigValue && Object.keys(userConfigValue).length > 0) {\n                        this.userConfigRepository.save(this.userConfig, Cicada.Context.api).then(() => {\n                            this.loadUserConfig();\n                        });\n                    }\n                    this.loadEntityData();\n                    this.isLoading = false;\n                    this.isSaveSuccessful = true;\n                })\n                .catch(() => {\n                    this.isLoading = false;\n                });\n        },\n\n        onCancel() {\n            this.$router.push({ name: 'sw.settings.country.index' });\n        },\n\n        abortOnLanguageChange() {\n            return this.countryRepository.hasChanges(this.country);\n        },\n\n        saveOnLanguageChange() {\n            return this.onSave();\n        },\n\n        onChangeLanguage() {\n            this.loadEntityData();\n        },\n\n        getStateColumns() {\n            return [\n                {\n                    property: 'name',\n                    label: this.$tc('sw-settings-country.detail.columnStateNameLabel'),\n                    inlineEdit: 'string',\n                    primary: true,\n                },\n                {\n                    property: 'shortCode',\n                    label: this.$tc('sw-settings-country.detail.columnStateShortCodeLabel'),\n                    inlineEdit: 'string',\n                },\n            ];\n        },\n\n        onSaveModal() {\n            return this.onSave();\n        },\n\n        /**\n         * @param path - Lodash set path\n         * @param value\n         */\n        onUpdateCountry(path, value) {\n            Cicada.Utils.object.set(this.country, path, value);\n        },\n    },\n};\n"],"names":["template","Component","Mixin","mapPropertyErrors","Criteria","index","country","sets","userConfigs","userConfigValue","path","value"],"mappings":"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"}