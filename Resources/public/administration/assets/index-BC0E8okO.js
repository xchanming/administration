const r=`{% block sw_text_field %} {% block sw_number_field %} <sw-contextual-field class="sw-field--number" v-bind="{ ...$attrs, ...inheritanceAttrs }" :name="formFieldName" @inheritance-restore="$emit('inheritance-restore', $event)" @inheritance-remove="$emit('inheritance-remove', $event)" > <template v-if="hasPrefix" #sw-contextual-field-prefix="{ disabled, identification }" > <slot name="prefix" v-bind="{ disabled, identification }" ></slot> </template> <template #sw-field-input="{ identification, error, disabled, size, setFocusClass, removeFocusClass }"> <input :id="identification" :name="identification" type="text" :value="stringRepresentation" :class="numberAlignEnd ? 'sw-field--number__align-end' : ''" :placeholder="placeholder" :disabled="disabled" autocomplete="off" @input="onInput" @keydown.up="increaseNumberByStep" @keydown.down="decreaseNumberByStep" @change="onChange" @focus="setFocusClass" @blur="removeFocusClass" > </template> <template v-if="copyable || hasSuffix" #sw-contextual-field-suffix="{ disabled, identification }" > <slot name="suffix" v-bind="{ identification }" ></slot> <sw-field-copyable v-if="copyable" :display-name="identification" :copyable-text="stringRepresentation" :tooltip="copyableTooltip" /> </template> <template #label> <slot name="label"></slot> </template> <template #hint> <slot name="hint"></slot> </template> </sw-contextual-field> {% endblock %} {% endblock %}`,{Component:a}=Cicada,{warn:l}=Cicada.Utils.debug;a.extend("sw-number-field-deprecated","sw-text-field-deprecated",{template:r,inheritAttrs:!1,inject:["feature"],emits:["update:value","input-change","inheritance-restore","inheritance-remove","ends-with-decimal-separator"],props:{numberType:{type:String,required:!1,default:"float",validValues:["float","int"],validator(e){return["float","int"].includes(e)}},step:{type:Number,required:!1,default:null},min:{type:Number,required:!1,default:null},max:{type:Number,required:!1,default:null},value:{type:Number,required:!1,default:null},digits:{type:Number,required:!1,default:2,validator(e){const t=e===Math.floor(e);return t||l("sw-number-field","Provided prop digits must be of type integer"),t}},fillDigits:{type:Boolean,required:!1,default:!1},allowEmpty:{type:Boolean,required:!1,default:!1},numberAlignEnd:{type:Boolean,required:!1,default:!1}},data(){return{currentValue:this.value}},computed:{realStep(){return this.step===null?this.numberType==="int"?1:.01:this.numberType==="int"?Math.round(this.step):this.step},realMinimum(){return this.min===null?null:this.numberType==="int"?Math.ceil(this.min):this.min},realMaximum(){return this.max===null?null:this.numberType==="int"?Math.floor(this.max):this.max},stringRepresentation(){return this.currentValue===null?"":this.value!==null&&/\d+\.?\d*e[+-]*\d+/i.test(this.value)?this.value.toLocaleString("fullwide",{useGrouping:!1}):this.fillDigits&&this.numberType!=="int"?this.currentValue.toFixed(this.digits):this.currentValue.toString()}},watch:{value:{handler(){if(this.value===null||this.value===void 0){this.currentValue=null;return}this.computeValue(this.value.toString())},immediate:!0}},methods:{onChange(e){this.computeValue(e.target.value),this.$emit("update:value",this.currentValue)},onInput(e){const t=e.target.value;let i=this.getNumberFromString(e.target.value);Number.isNaN(i)?this.allowEmpty===!0?(this.currentValue=i,this.$emit("input-change",i)):(this.currentValue=this.min??0,this.$emit("input-change",this.min??0)):(this.max&&i>this.max&&(i=this.max),this.min&&i<this.min&&(i=this.min),this.currentValue=i,this.$emit("input-change",i)),t.endsWith(".")||t.endsWith(",")?this.$emit("ends-with-decimal-separator",!0):this.$emit("ends-with-decimal-separator",!1)},increaseNumberByStep(){this.computeValue((this.currentValue+this.realStep).toString()),this.$emit("update:value",this.currentValue)},decreaseNumberByStep(){this.computeValue((this.currentValue-this.realStep).toString()),this.$emit("update:value",this.currentValue)},computeValue(e){const t=this.getNumberFromString(e);this.currentValue=this.parseValue(t)},parseValue(e){return e===null||Number.isNaN(e)||!Number.isFinite(e)?this.allowEmpty?null:this.parseValue(0):this.checkForInteger(this.checkBoundaries(e))},checkBoundaries(e){return this.realMaximum!==null&&e>this.realMaximum&&(e=this.realMaximum),this.realMinimum!==null&&e<this.realMinimum&&(e=this.realMinimum),e},getNumberFromString(e){let t=e.split("e").shift();if(t=t.replace(/,/g,".").split("."),t.length===1)return parseFloat(t[0]);if(this.numberType==="int")return parseInt(t.join(""),10);const i=t[t.length-1].length,n=parseFloat(t.join(".")).toFixed(i);return i>this.digits?Math.round(n*10**this.digits)/10**this.digits:Number(n)},checkForInteger(e){if(this.numberType!=="int")return e;const t=Math.floor(e);return t!==e&&this.$nextTick(()=>{this.$forceUpdate()}),t}}});
//# sourceMappingURL=index-BC0E8okO.js.map
