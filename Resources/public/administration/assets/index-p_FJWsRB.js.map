{"version":3,"file":"index-p_FJWsRB.js","sources":["../../../app/administration/src/module/sw-settings-cicada-updates/page/sw-settings-cicada-updates-wizard/sw-settings-cicada-updates-wizard.html.twig","../../../app/administration/src/module/sw-settings-cicada-updates/page/sw-settings-cicada-updates-wizard/index.js","../../../app/administration/src/module/sw-settings-cicada-updates/page/sw-settings-cicada-updates-index/sw-settings-cicada-updates-index.html.twig","../../../app/administration/src/module/sw-settings-cicada-updates/page/sw-settings-cicada-updates-index/index.js","../../../app/administration/src/module/sw-settings-cicada-updates/view/sw-settings-cicada-updates-info/sw-cicada-updates-info.html.twig","../../../app/administration/src/module/sw-settings-cicada-updates/view/sw-settings-cicada-updates-info/index.js","../../../app/administration/src/module/sw-settings-cicada-updates/view/sw-settings-cicada-updates-requirements/sw-cicada-updates-requirements.html.twig","../../../app/administration/src/module/sw-settings-cicada-updates/view/sw-settings-cicada-updates-requirements/index.js","../../../app/administration/src/module/sw-settings-cicada-updates/view/sw-settings-cicada-updates-plugins/sw-cicada-updates-plugins.html.twig","../../../app/administration/src/module/sw-settings-cicada-updates/view/sw-settings-cicada-updates-plugins/index.js","../../../app/administration/src/module/sw-settings-cicada-updates/acl/index.js","../../../app/administration/src/module/sw-settings-cicada-updates/index.js"],"sourcesContent":["<!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n{% block sw_settings_cicada_updates_wizard %}\n<sw-page class=\"sw-settings-cicada-updates-wizard\">\n    <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n    {% block sw_settings_cicada_updates_wizard_smart_bar_header %}\n    <template #smart-bar-header>\n        <h2 v-if=\"updateInfo.version\">\n            {{ $t('sw-settings-cicada-updates.general.title', {version: updateInfo.version }) }}\n        </h2>\n        <h2 v-if=\"!updateInfo.version\">\n            {{ $t('sw-settings-cicada-updates.general.emptyTitle') }}\n        </h2>\n    </template>\n    {% endblock %}\n\n    <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n    {% block sw_settings_cicada_updates_wizard_smart_bar_actions %}\n    <template #smart-bar-actions>\n        <div\n            :key=\"updatePossible\"\n            v-tooltip=\"updateButtonTooltip\"\n        >\n            <sw-button\n                v-if=\"updateInfo.version\"\n                :disabled=\"!updatePossible\"\n                :is-loading=\"updaterIsRunning\"\n                variant=\"primary\"\n                class=\"sw-settings-cicada-updates-wizard__start-update\"\n                @click=\"updateModalShown = true\"\n            >\n                {{ $t('sw-settings-cicada-updates.infos.startUpdate') }}\n            </sw-button>\n        </div>\n    </template>\n    {% endblock %}\n\n    <template #content>\n        <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n        {% block sw_settings_cicada_updates_wizard_content %}\n        <sw-card-view v-if=\"isLoading || updateInfo.version\">\n            <sw-settings-cicada-updates-info\n                v-if=\"updateInfo\"\n                :is-loading=\"isLoading\"\n                :changelog=\"updateInfo.body\"\n            />\n            <sw-settings-cicada-updates-requirements\n                :is-loading=\"isLoading\"\n                :update-info=\"updateInfo\"\n                :requirements=\"requirements\"\n            />\n            <sw-settings-cicada-updates-plugins\n                :plugins=\"plugins\"\n                :is-loading=\"isLoading\"\n            />\n        </sw-card-view>\n\n        <sw-empty-state\n            v-if=\"!isLoading && !updateInfo.version\"\n            :title=\"$tc('sw-settings-cicada-updates.general.emptyState')\"\n        />\n\n        <sw-modal\n            v-if=\"updaterIsRunning\"\n            :title=\"$t('sw-settings-cicada-updates.cards.updating')\"\n            variant=\"small\"\n            class=\"sw-cicada-updates-progressbar\"\n        >\n            <div class=\"progress-wrapper\">\n                <sw-progress-bar\n                    :value=\"progressbarValue\"\n                    :max-value=\"100\"\n                />\n                <span class=\"progress-title\">\n                    <p v-if=\"step === 'download'\">{{ $t('sw-settings-cicada-updates.infos.progress.download') }}</p>\n                    <p v-if=\"step === 'unpack'\">{{ $t('sw-settings-cicada-updates.infos.progress.unpack') }}</p>\n                    <p v-if=\"step === 'deactivate'\">{{ $t('sw-settings-cicada-updates.infos.progress.deactivate') }}</p>\n                </span>\n            </div>\n        </sw-modal>\n\n        <sw-modal\n            v-if=\"updateModalShown\"\n            class=\"sw-settings-cicada-updates-check__start-update\"\n            :title=\"$t('sw-settings-cicada-updates.general.emptyTitle')\"\n            variant=\"small\"\n            @modal-close=\"updateModalShown = false\"\n        >\n            <sw-alert\n                v-if=\"displayUnknownPluginsWarning\"\n                variant=\"warning\"\n            >\n                {{ $tc('sw-settings-cicada-updates.updateModal.messageNotInStore') }}\n            </sw-alert>\n\n            <sw-alert\n                v-if=\"displayIncompatiblePluginsWarning\"\n                variant=\"warning\"\n            >\n                {{ $tc('sw-settings-cicada-updates.updateModal.messageIncompatible') }}\n            </sw-alert>\n\n            <sw-radio-field\n                v-if=\"displayIncompatiblePluginsWarning\"\n                v-model:value=\"chosenPluginBehaviour\"\n                :options=\"[\n                    {'value': 'all', 'name': optionDeactivateAllTranslation },\n                    {'value': 'notCompatible', 'name': optionDeactivateIncompatibleTranslation },\n                    {'value': '', 'name': $tc('sw-settings-cicada-updates.plugins.actions.deactivateNone')}]\"\n            />\n\n            <template v-if=\"displayAllPluginsOkayInfo\">\n                {{ $tc('sw-settings-cicada-updates.updateModal.messageOkay') }}\n            </template>\n\n            <template #modal-footer>\n                <sw-checkbox-field\n                    v-model:value=\"checkedBackupCheckbox\"\n                    class=\"sw-settings-cicada-updates-check__start-update-backup-checkbox\"\n                    :label=\"$tc('sw-settings-cicada-updates.updateModal.backupLabel')\"\n                />\n\n                <div class=\"sw-settings-cicada-updates-check__start-update-actions\">\n                    <sw-button\n                        size=\"small\"\n                        @click=\"updateModalShown = false\"\n                    >\n                        {{ $tc('global.default.cancel') }}\n                    </sw-button>\n\n                    <sw-button\n                        :disabled=\"!checkedBackupCheckbox\"\n                        variant=\"primary\"\n                        size=\"small\"\n                        class=\"sw-settings-cicada-updates-check__start-update-button\"\n                        @click=\"startUpdateProcess()\"\n                    >\n                        {{ $tc('sw-settings-cicada-updates.updateModal.actions.install') }}\n                    </sw-button>\n                </div>\n            </template>\n        </sw-modal>\n        {% endblock %}\n    </template>\n</sw-page>\n{% endblock %}\n","import template from './sw-settings-cicada-updates-wizard.html.twig';\nimport './sw-settings-cicada-updates-wizard.scss';\n\nconst { Component, Mixin } = Cicada;\n\n/**\n * @package services-settings\n * @private\n */\nComponent.register('sw-settings-cicada-updates-wizard', {\n    template,\n\n    compatConfig: Cicada.compatConfig,\n\n    inject: ['updateService'],\n\n    emits: [\n        'update-started',\n        'update-stopped',\n    ],\n\n    mixins: [\n        Mixin.getByName('notification'),\n    ],\n\n    data() {\n        return {\n            updateInfo: {\n                version: null,\n                changelog: null,\n            },\n            requirements: [],\n            plugins: [],\n            isLoading: true,\n            checkedBackupCheckbox: false,\n            updateRunning: false,\n            progressbarValue: 0,\n            step: 'download',\n            updaterIsRunning: false,\n            updateModalShown: false,\n            chosenPluginBehaviour: '',\n        };\n    },\n\n    metaInfo() {\n        return {\n            title: this.$createTitle(),\n        };\n    },\n    computed: {\n        updatePossible() {\n            // Check if the result of every requirement is true. If it's the case, return true, otherwise return false.\n            return this.requirements.every((requirement) => requirement.result === true);\n        },\n\n        updateButtonTooltip() {\n            if (this.updatePossible) {\n                return {\n                    message: '',\n                    disabled: true,\n                };\n            }\n\n            return {\n                message: this.$tc('sw-settings-cicada-updates.infos.requirementsNotMet'),\n                position: 'bottom',\n            };\n        },\n\n        displayIncompatiblePluginsWarning() {\n            return this.plugins.some((plugin) => {\n                return plugin.statusName !== 'compatible' && plugin.statusName !== 'notInStore';\n            });\n        },\n\n        displayUnknownPluginsWarning() {\n            return this.plugins.some((plugin) => {\n                return plugin.statusName === 'notInStore';\n            });\n        },\n\n        displayAllPluginsOkayInfo() {\n            return !(this.displayIncompatiblePluginsWarning || this.displayUnknownPluginsWarning);\n        },\n\n        optionDeactivateIncompatibleTranslation() {\n            const deactivateIncompatTrans = this.$tc('sw-settings-cicada-updates.plugins.actions.deactivateIncompatible');\n            const isRecommended =\n                this.displayIncompatiblePluginsWarning && !this.displayUnknownPluginsWarning\n                    ? this.$tc('sw-settings-cicada-updates.plugins.actions.recommended')\n                    : '';\n\n            return `${deactivateIncompatTrans} ${isRecommended}`;\n        },\n\n        optionDeactivateAllTranslation() {\n            const deactiveAllTrans = this.$tc('sw-settings-cicada-updates.plugins.actions.deactivateAll');\n            const isRecommended =\n                this.displayIncompatiblePluginsWarning && this.displayUnknownPluginsWarning\n                    ? this.$tc('sw-settings-cicada-updates.plugins.actions.recommended')\n                    : '';\n\n            return `${deactiveAllTrans} ${isRecommended}`;\n        },\n    },\n\n    created() {\n        this.createdComponent();\n    },\n\n    methods: {\n        createdComponent() {\n            this.updateService.checkForUpdates().then((response) => {\n                this.updateInfo = response;\n\n                if (response.version) {\n                    this.updateService.checkRequirements().then((requirementsStore) => {\n                        this.onRequirementsResponse(requirementsStore);\n                    });\n                } else {\n                    this.isLoading = false;\n                }\n            });\n        },\n\n        onRequirementsResponse(requirementsStore) {\n            this.requirements = requirementsStore;\n            this.updateService.extensionCompatibility().then((plugins) => {\n                this.plugins = plugins;\n\n                if (this.displayUnknownPluginsWarning && this.displayIncompatiblePluginsWarning) {\n                    this.chosenPluginBehaviour = 'all';\n                } else if (this.displayIncompatiblePluginsWarning) {\n                    this.chosenPluginBehaviour = 'notCompatible';\n                }\n\n                this.isLoading = false;\n            });\n        },\n\n        startUpdateProcess() {\n            this.updateModalShown = false;\n            this.$emit('update-started');\n            this.updaterIsRunning = true;\n            this.createNotificationSuccess({\n                message: this.$tc('sw-settings-cicada-updates.notifications.updateStarted'),\n            });\n\n            this.downloadRecovery();\n        },\n\n        stopUpdateProcess() {\n            this.updateModalShown = false;\n            this.$emit('update-stopped');\n            this.updaterIsRunning = false;\n            this.createNotificationInfo({\n                message: this.$tc('sw-settings-cicada-updates.notifications.updateStopped'),\n            });\n        },\n\n        downloadRecovery(offset) {\n            this.updateService\n                .downloadRecovery(offset)\n                .then(() => {\n                    this.progressbarValue = 0;\n                    this.deactivatePlugins(0);\n                })\n                .catch(() => {\n                    this.createNotificationError({\n                        message: this.$tc('sw-settings-cicada-updates.notifications.downloadFailed'),\n                    });\n                });\n        },\n\n        deactivatePlugins(offset) {\n            this.step = 'deactivate';\n            this.updateService\n                .deactivatePlugins(offset, this.chosenPluginBehaviour)\n                .then((response) => {\n                    this.progressbarValue = Math.floor((response.offset / response.total) * 100);\n\n                    if (response.offset === response.total) {\n                        this.redirectToPage(`${Cicada.Context.api.basePath}/cicada-installer.phar.php`);\n                    } else {\n                        this.deactivatePlugins(response.offset);\n                    }\n                })\n                .catch((e) => {\n                    this.stopUpdateProcess();\n\n                    const context = {\n                        code: e.response.data.errors[0].code,\n                        meta: e.response.data.errors[0].meta,\n                    };\n\n                    if (context.code === 'FRAMEWORK__PLUGIN_HAS_DEPENDANTS') {\n                        this.createNotificationWarning({\n                            message: this.$tc('sw-extension.errors.messageDeactivationFailedDependencies', null, null, {\n                                dependency: context.meta.parameters.dependency,\n                                dependantNames: context.meta.parameters.dependantNames,\n                            }),\n                        });\n                    } else if (context.code === 'THEME__THEME_ASSIGNMENT') {\n                        this.createNotificationWarning({\n                            message: this.$tc('sw-extension.errors.messageDeactivationFailedThemeAssignment', null, null, {\n                                themeName: context.meta.parameters.themeName,\n                                assignments: context.meta.parameters.assignments,\n                            }),\n                        });\n                    } else {\n                        this.createNotificationError({\n                            message: this.$tc('sw-settings-cicada-updates.notifications.deactivationFailed'),\n                        });\n                    }\n                });\n        },\n\n        redirectToPage(url) {\n            window.location.href = url;\n        },\n    },\n});\n","<!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n{% block sw_settings_showare_updates_index %}\n<sw-page class=\"sw-settings-cicada-updates\">\n\n    <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n    {% block sw_settings_showare_updates_smart_bar_header %}\n    <template #smart-bar-header>\n        <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n        {% block sw_settings_showare_updates_smart_bar_header_title %}\n        <h2>\n            <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n            {% block sw_settings_showare_updates_smart_bar_header_title_text %}\n            {{ $tc('sw-settings.index.title') }}\n            <sw-icon\n                name=\"regular-chevron-right-xs\"\n                small\n            />\n            {{ $tc('sw-settings-cicada-updates.general.emptyTitle') }}\n            {% endblock %}\n        </h2>\n        {% endblock %}\n    </template>\n    {% endblock %}\n\n    <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n    {% block sw_settings_showare_updates_smart_bar_actions %}\n    <template #smart-bar-actions>\n        <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n        {% block sw_settings_showare_updates_actions_save %}\n        <sw-button-process\n            class=\"sw-store-detail__save-action\"\n            :is-loading=\"isLoading\"\n            :process-success=\"isSaveSuccessful\"\n            :disabled=\"isLoading\"\n            variant=\"primary\"\n            @update:process-success=\"saveFinish\"\n            @click=\"onSave()\"\n        >\n            {{ $tc('sw-settings-store.general.buttonSave') }}\n        </sw-button-process>\n        {% endblock %}\n    </template>\n    {% endblock %}\n\n    <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n    {% block sw_settings_showare_updates_content %}\n    <template #content>\n        <sw-card-view>\n            <sw-skeleton v-if=\"isLoading\" />\n\n            {# v-show is used here as underlying components influence the loading state and v-if would destroy this behaviour #}\n            <sw-system-config\n                v-show=\"!isLoading\"\n                ref=\"systemConfig\"\n                domain=\"core.update\"\n                @loading-changed=\"onLoadingChanged\"\n            >\n                <template #card-element-last>\n                    <div class=\"sw-settings-cicada-updates-index__check-for-updates-btn\">\n                        <sw-button\n                            variant=\"ghost\"\n                            :is-loading=\"isSearchingForUpdates\"\n                            @click=\"searchForUpdates\"\n                        >\n                            {{ $t('sw-settings-cicada-updates.general.checkForUpdates') }}\n                        </sw-button>\n                        <span class=\"sw-settings-cicada-updates-index__current-version\">\n                            {{ $t('sw-settings-cicada-updates.general.currentVersion') }} {{ cicadaVersion }}\n                        </span>\n                    </div>\n                </template>\n            </sw-system-config>\n        </sw-card-view>\n\n        <sw-modal\n            v-if=\"updateModalShown\"\n            :title=\"$t('sw-settings-cicada-updates.general.emptyTitle')\"\n            variant=\"small\"\n            @modal-close=\"updateModalShown = false\"\n        >\n            {{ $t('sw-settings-cicada-updates.updateModal.messageUpdateCheck', {version: updateInfo.version}) }}\n\n            <template #modal-footer>\n                <sw-button\n                    size=\"small\"\n                    @click=\"updateModalShown = false\"\n                >\n                    {{ $tc('global.default.cancel') }}\n                </sw-button>\n\n                <sw-button\n                    variant=\"primary\"\n                    size=\"small\"\n                    @click=\"openUpdateWizard()\"\n                >\n                    {{ $tc('sw-settings-cicada-updates.updateModal.actions.goToUpdate') }}\n                </sw-button>\n            </template>\n        </sw-modal>\n    </template>\n    {% endblock %}\n</sw-page>\n{% endblock %}\n","import template from './sw-settings-cicada-updates-index.html.twig';\nimport './sw-settings-cicada-updates-index.scss';\n\nconst { Component, Mixin } = Cicada;\n\n/**\n * @package services-settings\n * @private\n */\nComponent.register('sw-settings-cicada-updates-index', {\n    template,\n\n    compatConfig: Cicada.compatConfig,\n\n    inject: ['updateService'],\n\n    mixins: [\n        Mixin.getByName('notification'),\n    ],\n    data() {\n        return {\n            isLoading: false,\n            isSaveSuccessful: false,\n            isSearchingForUpdates: false,\n            updateModalShown: false,\n            updateInfo: null,\n        };\n    },\n\n    metaInfo() {\n        return {\n            title: this.$createTitle(),\n        };\n    },\n\n    computed: {\n        cicadaVersion() {\n            return Cicada.Context.app.config.version;\n        },\n    },\n\n    methods: {\n        searchForUpdates() {\n            this.isSearchingForUpdates = true;\n            this.updateService.checkForUpdates().then((response) => {\n                this.isSearchingForUpdates = false;\n\n                if (response.version) {\n                    this.updateInfo = response;\n                    this.updateModalShown = true;\n                } else {\n                    this.createNotificationInfo({\n                        message: this.$tc('sw-settings-cicada-updates.notifications.alreadyUpToDate'),\n                    });\n                }\n            });\n        },\n\n        openUpdateWizard() {\n            this.updateModalShown = false;\n\n            this.$nextTick(() => {\n                this.$router.push({\n                    name: 'sw.settings.cicada.updates.wizard',\n                });\n            });\n        },\n\n        saveFinish() {\n            this.isSaveSuccessful = false;\n        },\n\n        onSave() {\n            this.isSaveSuccessful = false;\n            this.isLoading = true;\n\n            this.$refs.systemConfig\n                .saveAll()\n                .then(() => {\n                    this.isLoading = false;\n                    this.isSaveSuccessful = true;\n                })\n                .catch((err) => {\n                    this.isLoading = false;\n                    this.createNotificationError({\n                        message: err,\n                    });\n                });\n        },\n\n        onLoadingChanged(loading) {\n            this.isLoading = loading;\n        },\n    },\n});\n","<!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n{% block sw_cicada_updates_info %}\n<sw-card\n    position-identifier=\"sw-cicada-updates-info\"\n    :title=\"$t('sw-settings-cicada-updates.cards.info')\"\n    :is-loading=\"isLoading\"\n>\n    <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n    {% block sw_cicada_updates_info_content %}\n    <div\n        class=\"sw-changelog\"\n        v-html=\"changelog\"\n    ></div>\n    {% endblock %}\n</sw-card>\n{% endblock %}\n","import './sw-cicada-updates-info.scss';\nimport template from './sw-cicada-updates-info.html.twig';\n\nconst { Component } = Cicada;\n\n/**\n * @package services-settings\n * @private\n */\nComponent.register('sw-settings-cicada-updates-info', {\n    template,\n\n    compatConfig: Cicada.compatConfig,\n\n    props: {\n        changelog: {\n            type: String,\n            required: true,\n        },\n        isLoading: {\n            type: Boolean,\n        },\n    },\n});\n","<!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n{% block sw_cicada_updates_requirements %}\n<sw-card\n    position-identifier=\"sw-cicada-updates-requirements\"\n    :title=\"$t('sw-settings-cicada-updates.cards.requirements')\"\n    :is-loading=\"isLoading\"\n>\n    <template #grid>\n        <sw-data-grid\n\n            :show-actions=\"false\"\n            :show-selection=\"false\"\n            :columns=\"columns\"\n            :data-source=\"requirements\"\n        >\n\n            <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n            {% block sw_cicada_updates_requirements_column_result %}\n            <template\n                #column-result=\"{ item, isInlineEdit }\"\n            >\n                <template v-if=\"item.result\">\n                    <sw-color-badge\n                        variant=\"success\"\n                        :rounded=\"true\"\n                    />&nbsp;\n                    {{ $t('sw-settings-cicada-updates.requirements.ready') }}\n                </template>\n\n                <template v-else>\n                    <sw-color-badge\n                        variant=\"error\"\n                        :rounded=\"true\"\n                    />&nbsp;\n                    {{ $t('sw-settings-cicada-updates.requirements.notReady') }}\n                </template>\n            </template>\n            {% endblock %}\n\n            <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n            {% block sw_cicada_updates_requirements_column_message %}\n            <template\n                #column-message=\"{ item, isInlineEdit }\"\n            >\n                <span v-html=\"$t('sw-settings-cicada-updates.requirements.message.' + item.message, item.vars)\"></span>\n            </template>\n            {% endblock %}\n        </sw-data-grid>\n    </template>\n</sw-card>\n{% endblock %}\n","import template from './sw-cicada-updates-requirements.html.twig';\n\nconst { Component } = Cicada;\n\n/**\n * @package services-settings\n * @private\n */\nComponent.register('sw-settings-cicada-updates-requirements', {\n    template,\n\n    compatConfig: Cicada.compatConfig,\n\n    props: {\n        updateInfo: {\n            type: Object,\n            required: true,\n            default: () => {},\n        },\n        requirements: {\n            type: Array,\n            required: true,\n            default: () => [],\n        },\n        isLoading: {\n            type: Boolean,\n        },\n    },\n\n    data() {\n        return {\n            columns: [\n                {\n                    property: 'message',\n                    label: this.$t('sw-settings-cicada-updates.requirements.columns.message'),\n                    rawData: true,\n                },\n                {\n                    property: 'result',\n                    label: this.$t('sw-settings-cicada-updates.requirements.columns.status'),\n                    rawData: true,\n                },\n            ],\n        };\n    },\n});\n","<!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n{% block sw_cicada_updates_plugins %}\n<sw-card\n    position-identifier=\"sw-cicada-updates-plugins\"\n    :title=\"$t('sw-settings-cicada-updates.cards.extensions')\"\n    :is-loading=\"isLoading\"\n>\n    <template #grid>\n        <sw-data-grid\n            :show-selection=\"false\"\n            :data-source=\"plugins\"\n            :columns=\"columns\"\n        >\n\n            <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n            {% block sw_cicada_updates_plugins_column_icon %}\n            <template\n                #column-icon=\"{ item, isInlineEdit }\"\n            >\n                <sw-color-badge\n                    v-if=\"item.statusVariant\"\n                    :variant=\"item.statusVariant\"\n                    :rounded=\"true\"\n                />\n                <sw-color-badge\n                    v-else\n                    :color=\"item.statusColor\"\n                    :rounded=\"true\"\n                />&nbsp;\n\n                <template v-if=\"item.statusMessage === 'notCompatible'\">\n                    {{ item.statusMessage }} {{ $t('sw-settings-cicada-updates.plugins.pluginWillBeDeactivatedHint') }}\n                </template>\n                <template v-else-if=\"item.statusMessage\">\n                    {{ item.statusMessage }}\n                </template>\n                <template v-else>\n                    {{ $t('sw-settings-cicada-updates.plugins.pluginNotInStore') }}\n                </template>\n            </template>\n            {% endblock %}\n\n            <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n            {% block sw_cicada_updates_plugins_column_action %}\n            <template #actions=\"{item}\">\n                <sw-context-menu-item @click=\"openMyExtensions()\">\n                    {{ $t('sw-settings-cicada-updates.plugins.actions.openMyExtensions') }}\n                </sw-context-menu-item>\n            </template>\n            {% endblock %}\n        </sw-data-grid>\n    </template>\n</sw-card>\n{% endblock %}\n","import template from './sw-cicada-updates-plugins.html.twig';\n\nconst { Component } = Cicada;\n\n/**\n * @package services-settings\n * @private\n */\nComponent.register('sw-settings-cicada-updates-plugins', {\n    template,\n\n    compatConfig: Cicada.compatConfig,\n\n    inject: ['feature'],\n\n    props: {\n        isLoading: {\n            type: Boolean,\n        },\n        plugins: {\n            type: Array,\n            default: () => [],\n        },\n    },\n    computed: {\n        columns() {\n            return [\n                {\n                    property: 'name',\n                    label: this.$tc('sw-settings-cicada-updates.plugins.columns.name'),\n                    rawData: true,\n                },\n                {\n                    property: 'icon',\n                    label: this.$tc('sw-settings-cicada-updates.plugins.columns.available'),\n                    rawData: true,\n                },\n            ];\n        },\n    },\n\n    methods: {\n        openMyExtensions() {\n            this.$router.push({\n                name: 'sw.extension.my-extensions.listing.app',\n            });\n        },\n    },\n});\n","/**\n * @package services-settings\n */\nCicada.Service('privileges')\n    .addPrivilegeMappingEntry({\n        category: 'additional_permissions',\n        parent: null,\n        key: 'system',\n        roles: {\n            core_update: {\n                privileges: [\n                    'system:core:update',\n                    'system_config:read',\n                ],\n                dependencies: [],\n            },\n        },\n    })\n    .addPrivilegeMappingEntry({\n        category: 'additional_permissions',\n        parent: null,\n        key: 'system',\n        roles: {\n            plugin_maintain: {\n                privileges: [\n                    'system:plugin:maintain',\n                    'plugin:update',\n                    'system:clear:cache',\n                    'system_config:read',\n                ],\n                dependencies: [],\n            },\n            plugin_upload: {\n                privileges: [\n                    'user_config:read',\n                    'user_config:update',\n                    'user_config:create',\n                ],\n                dependencies: ['system.plugin_maintain'],\n            },\n        },\n    });\n","import './page/sw-settings-cicada-updates-wizard';\nimport './page/sw-settings-cicada-updates-index';\nimport './view/sw-settings-cicada-updates-info';\nimport './view/sw-settings-cicada-updates-requirements';\nimport './view/sw-settings-cicada-updates-plugins';\nimport './acl';\n\nconst { Module } = Cicada;\n\n/**\n * @private\n */\nModule.register('sw-settings-cicada-updates', {\n    type: 'core',\n    name: 'settings-cicada-updates',\n    title: 'sw-settings-cicada-updates.general.emptyTitle',\n    description: 'sw-settings-cicada-updates.general.emptyTitle',\n    version: '1.0.0',\n    targetVersion: '1.0.0',\n    color: '#9AA8B5',\n    icon: 'regular-cog',\n    favicon: 'icon-module-settings.png',\n\n    routes: {\n        wizard: {\n            component: 'sw-settings-cicada-updates-wizard',\n            path: 'wizard',\n            meta: {\n                parentPath: 'sw.settings.index.system',\n                privilege: 'system.core_update',\n            },\n        },\n    },\n\n    settingsItem: {\n        privilege: 'system.core_update',\n        group: 'system',\n        to: 'sw.settings.cicada.updates.wizard',\n        icon: 'regular-sync',\n    },\n});\n"],"names":["template$4","Component","Mixin","template","requirement","plugin","deactivateIncompatTrans","isRecommended","deactiveAllTrans","response","requirementsStore","plugins","offset","e","context","url","template$3","err","loading","template$2","template$1","Module"],"mappings":"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"}