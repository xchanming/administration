{"version":3,"file":"index-CgyH9UCz.js","sources":["../../../app/administration/src/module/sw-profile/page/sw-profile-index/sw-profile-index.html.twig","../../../app/administration/src/module/sw-profile/state/sw-profile.state.js","../../../app/administration/src/module/sw-profile/page/sw-profile-index/index.js"],"sourcesContent":["<!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n{% block sw_profile_index %}\n<sw-page class=\"sw-profile-index\">\n    <template #smart-bar-back>\n        <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n        {% block sw_profile_index_smart_bar_back %}\n        <span></span>\n        {% endblock %}\n    </template>\n\n    <template #smart-bar-header>\n        <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n        {% block sw_profile_index_headline %}\n        <h2>{{ $tc('sw-profile.general.headlineProfile') }}</h2>\n        {% endblock %}\n    </template>\n\n    <template #smart-bar-actions>\n        <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n        {% block sw_profile_index_actions %}\n        <sw-button-process\n            class=\"sw-profile__save-action\"\n            variant=\"primary\"\n            :is-loading=\"isLoading || isUserLoading\"\n            :process-success=\"isSaveSuccessful\"\n            :disabled=\"isLoading || isUserLoading || !acl.can('user.update_profile') || undefined\"\n            @update:process-success=\"saveFinish\"\n            @click.prevent=\"onSave\"\n        >\n            {{ $tc('sw-profile.index.buttonSaveLabel') }}\n        </sw-button-process>\n        {% endblock %}\n    </template>\n\n    <template #content>\n        <sw-card-view>\n            <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n            {% block sw_profile_index_tabs %}\n            <sw-tabs\n                position-identifier=\"sw-profile-index\"\n            >\n                <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n                {% block sw_profile_index_tabs_item_general %}\n                <sw-tabs-item\n                    :route=\"{ name: 'sw.profile.index.general' }\"\n                    :title=\"$tc('sw-profile.tabGeneral.title')\"\n                >\n                    {{ $tc('sw-profile.tabGeneral.title') }}\n                </sw-tabs-item>\n                {% endblock %}\n\n                <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n                {% block sw_profile_index_tabs_item_search_preferences %}\n                <sw-tabs-item\n                    :route=\"{ name: 'sw.profile.index.searchPreferences' }\"\n                    :title=\"$tc('sw-profile.tabSearchPreferences.title')\"\n                >\n                    {{ $tc('sw-profile.tabSearchPreferences.title') }}\n                </sw-tabs-item>\n                {% endblock %}\n            </sw-tabs>\n            {% endblock %}\n\n            <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n            {% block sw_profile_index_router_view %}\n            <template v-if=\"isUserLoading\">\n                <sw-skeleton />\n                <sw-skeleton />\n            </template>\n\n            <template v-else>\n                <router-view\n                    v-slot=\"{ Component }\"\n                >\n                    <component\n                        :is=\"Component\"\n                        v-bind=\"{\n                            user,\n                            timezoneOptions,\n                            languages,\n                            newPassword,\n                            newPasswordConfirm,\n                            avatarMediaItem,\n                            isUserLoading,\n                            languageId,\n                            isDisabled,\n                            userRepository,\n                        }\"\n                        @new-password-change=\"onChangeNewPassword\"\n                        @new-password-confirm-change=\"onChangeNewPasswordConfirm\"\n                        @media-upload=\"setMediaItem\"\n                        @media-remove=\"onUnlinkAvatar\"\n                        @media-open=\"openMediaModal\"\n                    />\n                </router-view>\n            </template>\n            {% endblock %}\n        </sw-card-view>\n\n        <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n        {% block sw_profile_index_content_confirm_password_modal %}\n        <sw-verify-user-modal\n            v-if=\"confirmPasswordModal\"\n            @verified=\"onVerifyPasswordFinished\"\n            @close=\"onCloseConfirmPasswordModal\"\n        />\n        {% endblock %}\n\n        <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n        {% block sw_profile_index_media_upload_actions_media_modal %}\n        <sw-media-modal-v2\n            v-if=\"showMediaModal\"\n            :allow-multi-select=\"false\"\n            :initial-folder-id=\"mediaDefaultFolderId\"\n            :entity-context=\"user.getEntityName()\"\n            @modal-close=\"showMediaModal = false\"\n            @media-modal-selection-change=\"onMediaSelectionChange\"\n        />\n        {% endblock %}\n    </template>\n</sw-page>\n{% endblock %}\n","/**\n * @package services-settings\n * @deprecated tag:v6.7.0 - Will be replaced with Pinia store\n */\n// eslint-disable-next-line sw-deprecation-rules/private-feature-declarations\nexport default {\n    namespaced: true,\n\n    state() {\n        return {\n            searchPreferences: [],\n            userSearchPreferences: null,\n        };\n    },\n\n    mutations: {\n        setSearchPreferences(state, searchPreferences) {\n            state.searchPreferences = searchPreferences;\n        },\n        setUserSearchPreferences(state, userSearchPreferences) {\n            state.userSearchPreferences = userSearchPreferences;\n        },\n    },\n};\n","/**\n * @package services-settings\n */\nimport { email } from 'src/core/service/validation.service';\nimport { KEY_USER_SEARCH_PREFERENCE } from 'src/app/service/search-ranking.service';\nimport template from './sw-profile-index.html.twig';\nimport swProfileState from '../../state/sw-profile.state';\n\nconst { Component, Mixin, State } = Cicada;\nconst { Criteria } = Cicada.Data;\nconst { mapState, mapPropertyErrors } = Component.getComponentHelper();\n\n// eslint-disable-next-line sw-deprecation-rules/private-feature-declarations\nexport default {\n    template,\n\n    compatConfig: Cicada.compatConfig,\n\n    inject: [\n        'userService',\n        'loginService',\n        'mediaDefaultFolderService',\n        'repositoryFactory',\n        'acl',\n        'searchPreferencesService',\n        'searchRankingService',\n        'userConfigService',\n    ],\n\n    mixins: [\n        Mixin.getByName('notification'),\n    ],\n\n    data() {\n        return {\n            user: { username: '', email: '' },\n            languages: [],\n            imageSize: 140,\n            newPassword: null,\n            newPasswordConfirm: null,\n            confirmPassword: null,\n            avatarMediaItem: null,\n            uploadTag: 'sw-profile-upload-tag',\n            isLoading: false,\n            isUserLoading: true,\n            isSaveSuccessful: false,\n            confirmPasswordModal: false,\n            mediaDefaultFolderId: null,\n            showMediaModal: false,\n            timezoneOptions: [],\n        };\n    },\n\n    metaInfo() {\n        return {\n            title: this.$createTitle(),\n        };\n    },\n\n    computed: {\n        ...mapState('swProfile', [\n            'searchPreferences',\n        ]),\n\n        ...mapPropertyErrors('user', [\n            'email',\n            'timeZone',\n        ]),\n\n        userSearchPreferences: {\n            get() {\n                return State.get('swProfile').userSearchPreferences;\n            },\n            set(userSearchPreferences) {\n                State.commit('swProfile/setUserSearchPreferences', userSearchPreferences);\n            },\n        },\n\n        isDisabled() {\n            return true;\n        },\n\n        userRepository() {\n            return this.repositoryFactory.create('user');\n        },\n\n        languageRepository() {\n            return this.repositoryFactory.create('language');\n        },\n\n        localeRepository() {\n            return this.repositoryFactory.create('locale');\n        },\n\n        mediaRepository() {\n            return this.repositoryFactory.create('media');\n        },\n\n        languageId() {\n            return Cicada.State.get('session').languageId;\n        },\n    },\n\n    watch: {\n        $route(newValue) {\n            if (!newValue || newValue.name === 'sw.profile.index.searchPreferences') {\n                return;\n            }\n\n            this.resetGeneralData();\n        },\n\n        'user.avatarMedia.id'() {\n            if (!this.user.avatarMedia?.id) {\n                return;\n            }\n\n            if (!this.acl.can('media.creator')) {\n                return;\n            }\n\n            this.setMediaItem({ targetId: this.user.avatarMedia.id });\n        },\n\n        languageId() {\n            this.createdComponent();\n        },\n    },\n\n    beforeCreate() {\n        State.registerModule('swProfile', swProfileState);\n    },\n\n    created() {\n        this.createdComponent();\n    },\n\n    beforeMount() {\n        this.beforeMountComponent();\n    },\n\n    beforeUnmount() {\n        State.unregisterModule('swProfile');\n    },\n\n    methods: {\n        createdComponent() {\n            this.isUserLoading = true;\n\n            const languagePromise = new Promise((resolve) => {\n                resolve(this.languageId);\n            });\n\n            this.userPromise = this.getUserData();\n            this.timezoneOptions = Cicada.Service('timezoneService').getTimezoneOptions();\n\n            const promises = [\n                languagePromise,\n                this.userPromise,\n            ];\n\n            if (this.acl.can('media.creator')) {\n                this.getMediaDefaultFolderId()\n                    .then((id) => {\n                        this.mediaDefaultFolderId = id;\n                    })\n                    .catch(() => {\n                        this.mediaDefaultFolderId = null;\n                    });\n            }\n\n            Promise.all(promises)\n                .then(() => {\n                    this.loadLanguages();\n                })\n                .then(() => {\n                    this.isUserLoading = false;\n                });\n        },\n\n        beforeMountComponent() {\n            this.userPromise.then((user) => {\n                this.user = user;\n\n                if (this.user.avatarId) {\n                    this.loadMediaItem(this.user.avatarId);\n                }\n            });\n        },\n\n        loadLanguages() {\n            const factoryContainer = Cicada.Application.getContainer('factory');\n            const localeFactory = factoryContainer.locale;\n            const registeredLocales = Array.from(localeFactory.getLocaleRegistry().keys());\n\n            const languageCriteria = new Criteria(1, 500);\n            languageCriteria.addAssociation('locale');\n            languageCriteria.addSorting(Criteria.sort('locale.name', 'ASC'));\n            languageCriteria.addSorting(Criteria.sort('locale.territory', 'ASC'));\n            languageCriteria.addFilter(Criteria.equalsAny('locale.code', registeredLocales));\n\n            return this.languageRepository.search(languageCriteria).then((result) => {\n                this.languages = [];\n                const localeIds = [];\n                let fallbackId = '';\n\n                result.forEach((lang) => {\n                    lang.customLabel = `${lang.locale.translated.name} (${lang.locale.translated.territory})`;\n                    this.languages.push(lang);\n\n                    localeIds.push(lang.localeId);\n                    if (lang.locale.code === Cicada.Context.app.fallbackLocale) {\n                        fallbackId = lang.localeId;\n                    }\n                });\n\n                if (!localeIds.includes(this.user.localeId)) {\n                    this.user.localeId = fallbackId;\n                }\n                this.isUserLoading = false;\n\n                return this.languages;\n            });\n        },\n\n        async getUserData() {\n            const routeUser = this.$route.params.user;\n            if (routeUser) {\n                return this.userRepository.get(routeUser.id);\n            }\n\n            const user = await this.userService.getUser();\n            return this.userRepository.get(user.data.id);\n        },\n\n        resetGeneralData() {\n            this.newPassword = null;\n            this.newPasswordConfirm = null;\n\n            this.createdComponent();\n            this.beforeMountComponent();\n        },\n\n        async saveFinish() {\n            this.isSaveSuccessful = false;\n            this.user = await this.getUserData();\n        },\n\n        onSave() {\n            if (this.$route.name === 'sw.profile.index.searchPreferences') {\n                this.saveUserSearchPreferences();\n\n                return;\n            }\n\n            if (this.checkEmail() === false) {\n                return;\n            }\n\n            const passwordCheck = this.checkPassword();\n\n            if (passwordCheck === null || passwordCheck === true) {\n                this.confirmPasswordModal = true;\n            }\n        },\n\n        checkEmail() {\n            if (!this.user.email || !email(this.user.email)) {\n                this.createErrorMessage(this.$tc('sw-profile.index.notificationInvalidEmailErrorMessage'));\n\n                return false;\n            }\n            return true;\n        },\n\n        checkPassword() {\n            if (this.newPassword && this.newPassword.length > 0) {\n                if (this.newPassword !== this.newPasswordConfirm) {\n                    this.createErrorMessage(this.$tc('sw-profile.index.notificationPasswordErrorMessage'));\n                    return false;\n                }\n\n                this.user.password = this.newPassword;\n\n                return true;\n            }\n\n            return null;\n        },\n\n        createErrorMessage(errorMessage) {\n            this.createNotificationError({\n                message: errorMessage,\n            });\n        },\n\n        saveUser(context) {\n            if (!this.acl.can('user:editor')) {\n                const changes = this.userRepository.getSyncChangeset([\n                    this.user,\n                ]);\n                delete changes.changeset[0].changes.id;\n\n                this.userService\n                    .updateUser(changes.changeset[0].changes)\n                    .then(async () => {\n                        await this.updateCurrentUser();\n\n                        this.isLoading = false;\n                        this.isSaveSuccessful = true;\n\n                        Cicada.Service('localeHelper').setLocaleWithId(this.user.localeId);\n                    })\n                    .catch((error) => {\n                        State.dispatch('error/addApiError', {\n                            expression: `user.${this.user?.id}.password`,\n                            error: new Cicada.Classes.CicadaError(error.response.data.errors[0]),\n                        });\n                        this.createNotificationError({\n                            message: this.$tc('sw-profile.index.notificationSaveErrorMessage'),\n                        });\n                        this.isLoading = false;\n                        this.isSaveSuccessful = false;\n                    });\n\n                return;\n            }\n\n            this.userRepository\n                .save(this.user, context)\n                .then(async () => {\n                    await this.updateCurrentUser();\n                    Cicada.Service('localeHelper').setLocaleWithId(this.user.localeId);\n\n                    if (this.newPassword) {\n                        // re-issue a valid jwt token, as all user tokens were invalidated on password change\n                        this.loginService\n                            .loginByUsername(this.user.username, this.newPassword)\n                            .then(() => {\n                                this.isSaveSuccessful = true;\n                            })\n                            .catch(() => {\n                                this.handleUserSaveError();\n                            })\n                            .finally(() => {\n                                this.isLoading = false;\n                            });\n                    } else {\n                        this.isLoading = false;\n                        this.isSaveSuccessful = true;\n                    }\n\n                    this.confirmPassword = '';\n                    this.newPassword = '';\n                    this.newPasswordConfirm = '';\n                })\n                .catch(() => {\n                    this.handleUserSaveError();\n                    this.isLoading = false;\n                    this.isSaveSuccessful = false;\n                });\n        },\n\n        updateCurrentUser() {\n            return this.userService.getUser().then((response) => {\n                const data = response.data;\n                delete data.password;\n\n                return Cicada.State.commit('setCurrentUser', data);\n            });\n        },\n\n        loadMediaItem(targetId) {\n            this.mediaRepository.get(targetId).then((media) => {\n                this.avatarMediaItem = media;\n            });\n        },\n\n        setMediaItem({ targetId }) {\n            this.user.avatarId = targetId;\n            this.loadMediaItem(targetId);\n        },\n\n        onDropMedia(mediaItem) {\n            this.setMediaItem({ targetId: mediaItem.id });\n        },\n\n        onCloseConfirmPasswordModal() {\n            this.confirmPassword = '';\n            this.confirmPasswordModal = false;\n        },\n\n        onUnlinkAvatar() {\n            this.avatarMediaItem = null;\n            this.user.avatarId = null;\n        },\n\n        openMediaModal() {\n            this.showMediaModal = true;\n        },\n\n        handleUserSaveError() {\n            if (this.$route.name.includes('sw.profile.index')) {\n                this.createNotificationError({\n                    message: this.$tc('sw-profile.index.notificationSaveErrorMessage'),\n                });\n            }\n            this.isLoading = false;\n        },\n\n        onChangeNewPassword(newPassword) {\n            this.newPassword = newPassword;\n        },\n\n        onChangeNewPasswordConfirm(newPasswordConfirm) {\n            this.newPasswordConfirm = newPasswordConfirm;\n        },\n\n        onMediaSelectionChange([mediaEntity]) {\n            this.avatarMediaItem = mediaEntity;\n            this.user.avatarId = mediaEntity.id;\n        },\n\n        getMediaDefaultFolderId() {\n            return this.mediaDefaultFolderService.getDefaultFolderId('user');\n        },\n\n        saveUserSearchPreferences() {\n            // eslint-disable-next-line max-len\n            this.userSearchPreferences =\n                this.userSearchPreferences ?? this.searchPreferencesService.createUserSearchPreferences();\n            this.userSearchPreferences.value = this.searchPreferences.map(({ entityName, _searchable, fields }) => {\n                return {\n                    [entityName]: {\n                        _searchable,\n                        ...this.searchPreferencesService.processSearchPreferencesFields(fields),\n                    },\n                };\n            });\n\n            this.searchRankingService.clearCacheUserSearchConfiguration();\n\n            this.isLoading = true;\n            this.isSaveSuccessful = false;\n            return this.userConfigService\n                .upsert({\n                    [KEY_USER_SEARCH_PREFERENCE]: this.userSearchPreferences.value,\n                })\n                .then(() => {\n                    this.isLoading = false;\n                    this.isSaveSuccessful = true;\n                })\n                .catch((error) => {\n                    this.isLoading = false;\n                    this.isSaveSuccessful = false;\n                    this.createNotificationError({ message: error.message });\n                });\n        },\n\n        onVerifyPasswordFinished(context) {\n            this.confirmPasswordModal = false;\n            this.isSaveSuccessful = false;\n            this.isLoading = true;\n\n            this.saveUser(context);\n        },\n    },\n};\n"],"names":["template","swProfileState","state","searchPreferences","userSearchPreferences","Component","Mixin","State","Criteria","mapState","mapPropertyErrors","index","newValue","_a","languagePromise","resolve","promises","id","user","localeFactory","registeredLocales","languageCriteria","result","localeIds","fallbackId","lang","routeUser","passwordCheck","email","errorMessage","context","changes","error","response","data","targetId","media","mediaItem","newPassword","newPasswordConfirm","mediaEntity","entityName","_searchable","fields","KEY_USER_SEARCH_PREFERENCE"],"mappings":"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"}