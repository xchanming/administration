const a=`{% block sw_settings_shopware_updates_wizard %} <sw-page class="sw-settings-shopware-updates-wizard"> {% block sw_settings_shopware_updates_wizard_smart_bar_header %} <template #smart-bar-header> <h2 v-if="updateInfo.version"> {{ $t('sw-settings-shopware-updates.general.title', {version: updateInfo.version }) }} </h2> <h2 v-if="!updateInfo.version"> {{ $t('sw-settings-shopware-updates.general.emptyTitle') }} </h2> </template> {% endblock %} {% block sw_settings_shopware_updates_wizard_smart_bar_actions %} <template #smart-bar-actions> <div :key="updatePossible" v-tooltip="updateButtonTooltip" > <sw-button v-if="updateInfo.version" :disabled="!updatePossible" :is-loading="updaterIsRunning" variant="primary" class="sw-settings-shopware-updates-wizard__start-update" @click="updateModalShown = true" > {{ $t('sw-settings-shopware-updates.infos.startUpdate') }} </sw-button> </div> </template> {% endblock %} <template #content> {% block sw_settings_shopware_updates_wizard_content %} <sw-card-view v-if="isLoading || updateInfo.version"> <sw-settings-shopware-updates-info v-if="updateInfo" :is-loading="isLoading" :changelog="updateInfo.body" /> <sw-settings-shopware-updates-requirements :is-loading="isLoading" :update-info="updateInfo" :requirements="requirements" /> <sw-settings-shopware-updates-plugins :plugins="plugins" :is-loading="isLoading" /> </sw-card-view> <sw-empty-state v-if="!isLoading && !updateInfo.version" :title="$tc('sw-settings-shopware-updates.general.emptyState')" /> <sw-modal v-if="updaterIsRunning" :title="$t('sw-settings-shopware-updates.cards.updating')" variant="small" class="sw-shopware-updates-progressbar" > <div class="progress-wrapper"> <sw-progress-bar :value="progressbarValue" :max-value="100" /> <span class="progress-title"> <p v-if="step === 'download'">{{ $t('sw-settings-shopware-updates.infos.progress.download') }}</p> <p v-if="step === 'unpack'">{{ $t('sw-settings-shopware-updates.infos.progress.unpack') }}</p> <p v-if="step === 'deactivate'">{{ $t('sw-settings-shopware-updates.infos.progress.deactivate') }}</p> </span> </div> </sw-modal> <sw-modal v-if="updateModalShown" class="sw-settings-shopware-updates-check__start-update" :title="$t('sw-settings-shopware-updates.general.emptyTitle')" variant="small" @modal-close="updateModalShown = false" > <mt-banner v-if="displayUnknownPluginsWarning" variant="attention" > {{ $tc('sw-settings-shopware-updates.updateModal.messageNotInStore') }} </mt-banner> <mt-banner v-if="displayIncompatiblePluginsWarning" variant="attention" > {{ $tc('sw-settings-shopware-updates.updateModal.messageIncompatible') }} </mt-banner> <sw-radio-field v-if="displayIncompatiblePluginsWarning" v-model:value="chosenPluginBehaviour" :options="[ {'value': 'all', 'name': optionDeactivateAllTranslation }, {'value': 'notCompatible', 'name': optionDeactivateIncompatibleTranslation }, {'value': '', 'name': $tc('sw-settings-shopware-updates.plugins.actions.deactivateNone')}]" /> <template v-if="displayAllPluginsOkayInfo"> {{ $tc('sw-settings-shopware-updates.updateModal.messageOkay') }} </template> <template #modal-footer> <sw-checkbox-field v-model:value="checkedBackupCheckbox" class="sw-settings-shopware-updates-check__start-update-backup-checkbox" :label="$tc('sw-settings-shopware-updates.updateModal.backupLabel')" /> <div class="sw-settings-shopware-updates-check__start-update-actions"> <sw-button size="small" @click="updateModalShown = false" > {{ $tc('global.default.cancel') }} </sw-button> <sw-button :disabled="!checkedBackupCheckbox" variant="primary" size="small" class="sw-settings-shopware-updates-check__start-update-button" @click="startUpdateProcess()" > {{ $tc('sw-settings-shopware-updates.updateModal.actions.install') }} </sw-button> </div> </template> </sw-modal> {% endblock %} </template> </sw-page> {% endblock %}`,{Component:i,Mixin:n}=Shopware;i.register("sw-settings-shopware-updates-wizard",{template:a,inject:["updateService"],emits:["update-started","update-stopped"],mixins:[n.getByName("notification")],data(){return{updateInfo:{version:null,changelog:null},requirements:[],plugins:[],isLoading:!0,checkedBackupCheckbox:!1,updateRunning:!1,progressbarValue:0,step:"download",updaterIsRunning:!1,updateModalShown:!1,chosenPluginBehaviour:""}},metaInfo(){return{title:this.$createTitle()}},computed:{updatePossible(){return this.requirements.every(e=>e.result===!0)},updateButtonTooltip(){return this.updatePossible?{message:"",disabled:!0}:{message:this.$tc("sw-settings-shopware-updates.infos.requirementsNotMet"),position:"bottom"}},displayIncompatiblePluginsWarning(){return this.plugins.some(e=>e.statusName!=="compatible"&&e.statusName!=="notInStore")},displayUnknownPluginsWarning(){return this.plugins.some(e=>e.statusName==="notInStore")},displayAllPluginsOkayInfo(){return!(this.displayIncompatiblePluginsWarning||this.displayUnknownPluginsWarning)},optionDeactivateIncompatibleTranslation(){const e=this.$tc("sw-settings-shopware-updates.plugins.actions.deactivateIncompatible"),s=this.displayIncompatiblePluginsWarning&&!this.displayUnknownPluginsWarning?this.$tc("sw-settings-shopware-updates.plugins.actions.recommended"):"";return`${e} ${s}`},optionDeactivateAllTranslation(){const e=this.$tc("sw-settings-shopware-updates.plugins.actions.deactivateAll"),s=this.displayIncompatiblePluginsWarning&&this.displayUnknownPluginsWarning?this.$tc("sw-settings-shopware-updates.plugins.actions.recommended"):"";return`${e} ${s}`}},created(){this.createdComponent()},methods:{createdComponent(){this.updateService.checkForUpdates().then(e=>{this.updateInfo=e,e.version?this.updateService.checkRequirements().then(s=>{this.onRequirementsResponse(s)}):this.isLoading=!1})},onRequirementsResponse(e){this.requirements=e,this.updateService.extensionCompatibility().then(s=>{this.plugins=s,this.displayUnknownPluginsWarning&&this.displayIncompatiblePluginsWarning?this.chosenPluginBehaviour="all":this.displayIncompatiblePluginsWarning&&(this.chosenPluginBehaviour="notCompatible"),this.isLoading=!1})},startUpdateProcess(){this.updateModalShown=!1,this.$emit("update-started"),this.updaterIsRunning=!0,this.createNotificationSuccess({message:this.$tc("sw-settings-shopware-updates.notifications.updateStarted")}),this.downloadRecovery()},stopUpdateProcess(){this.updateModalShown=!1,this.$emit("update-stopped"),this.updaterIsRunning=!1,this.createNotificationInfo({message:this.$tc("sw-settings-shopware-updates.notifications.updateStopped")})},downloadRecovery(e){this.updateService.downloadRecovery(e).then(()=>{this.progressbarValue=0,this.deactivatePlugins(0)}).catch(()=>{this.createNotificationError({message:this.$tc("sw-settings-shopware-updates.notifications.downloadFailed")})})},deactivatePlugins(e){this.step="deactivate",this.updateService.deactivatePlugins(e,this.chosenPluginBehaviour).then(s=>{this.progressbarValue=Math.floor(s.offset/s.total*100),s.offset===s.total?this.redirectToPage(`${Shopware.Context.api.basePath}/shopware-installer.phar.php`):this.deactivatePlugins(s.offset)}).catch(s=>{this.stopUpdateProcess();const t={code:s.response.data.errors[0].code,meta:s.response.data.errors[0].meta};t.code==="FRAMEWORK__PLUGIN_HAS_DEPENDANTS"?this.createNotificationWarning({message:this.$tc("sw-extension.errors.messageDeactivationFailedDependencies",null,null,{dependency:t.meta.parameters.dependency,dependantNames:t.meta.parameters.dependantNames})}):t.code==="THEME__THEME_ASSIGNMENT"?this.createNotificationWarning({message:this.$tc("sw-extension.errors.messageDeactivationFailedThemeAssignment",null,null,{themeName:t.meta.parameters.themeName,assignments:t.meta.parameters.assignments})}):this.createNotificationError({message:this.$tc("sw-settings-shopware-updates.notifications.deactivationFailed")})})},redirectToPage(e){window.location.href=e}}});const o=`{% block sw_settings_showare_updates_index %} <sw-page class="sw-settings-shopware-updates"> {% block sw_settings_showare_updates_smart_bar_header %} <template #smart-bar-header> {% block sw_settings_showare_updates_smart_bar_header_title %} <h2> {% block sw_settings_showare_updates_smart_bar_header_title_text %} {{ $tc('sw-settings.index.title') }} <sw-icon name="regular-chevron-right-xs" small /> {{ $tc('sw-settings-shopware-updates.general.emptyTitle') }} {% endblock %} </h2> {% endblock %} </template> {% endblock %} {% block sw_settings_showare_updates_smart_bar_actions %} <template #smart-bar-actions> {% block sw_settings_showare_updates_actions_save %} <sw-button-process class="sw-store-detail__save-action" :is-loading="isLoading" :process-success="isSaveSuccessful" :disabled="isLoading" variant="primary" @update:process-success="saveFinish" @click="onSave()" > {{ $tc('sw-settings-store.general.buttonSave') }} </sw-button-process> {% endblock %} </template> {% endblock %} {% block sw_settings_showare_updates_content %} <template #content> <sw-card-view> <sw-skeleton v-if="isLoading" /> {# v-show is used here as underlying components influence the loading state and v-if would destroy this behaviour #} <sw-system-config v-show="!isLoading" ref="systemConfig" domain="core.update" @loading-changed="onLoadingChanged" > <template #card-element-last> <div class="sw-settings-shopware-updates-index__check-for-updates-btn"> <sw-button variant="ghost" :is-loading="isSearchingForUpdates" @click="searchForUpdates" > {{ $t('sw-settings-shopware-updates.general.checkForUpdates') }} </sw-button> <span class="sw-settings-shopware-updates-index__current-version"> {{ $t('sw-settings-shopware-updates.general.currentVersion') }} {{ shopwareVersion }} </span> </div> </template> </sw-system-config> </sw-card-view> <sw-modal v-if="updateModalShown" :title="$t('sw-settings-shopware-updates.general.emptyTitle')" variant="small" @modal-close="updateModalShown = false" > {{ $t('sw-settings-shopware-updates.updateModal.messageUpdateCheck', {version: updateInfo.version}) }} <template #modal-footer> <sw-button size="small" @click="updateModalShown = false" > {{ $tc('global.default.cancel') }} </sw-button> <sw-button variant="primary" size="small" @click="openUpdateWizard()" > {{ $tc('sw-settings-shopware-updates.updateModal.actions.goToUpdate') }} </sw-button> </template> </sw-modal> </template> {% endblock %} </sw-page> {% endblock %}`,{Component:r,Mixin:p}=Shopware;r.register("sw-settings-shopware-updates-index",{template:o,inject:["updateService"],mixins:[p.getByName("notification")],data(){return{isLoading:!1,isSaveSuccessful:!1,isSearchingForUpdates:!1,updateModalShown:!1,updateInfo:null}},metaInfo(){return{title:this.$createTitle()}},computed:{shopwareVersion(){return Shopware.Context.app.config.version}},methods:{searchForUpdates(){this.isSearchingForUpdates=!0,this.updateService.checkForUpdates().then(e=>{this.isSearchingForUpdates=!1,e.version?(this.updateInfo=e,this.updateModalShown=!0):this.createNotificationInfo({message:this.$tc("sw-settings-shopware-updates.notifications.alreadyUpToDate")})})},openUpdateWizard(){this.updateModalShown=!1,this.$nextTick(()=>{this.$router.push({name:"sw.settings.shopware.updates.wizard"})})},saveFinish(){this.isSaveSuccessful=!1},onSave(){this.isSaveSuccessful=!1,this.isLoading=!0,this.$refs.systemConfig.saveAll().then(()=>{this.isLoading=!1,this.isSaveSuccessful=!0}).catch(e=>{this.isLoading=!1,this.createNotificationError({message:e})})},onLoadingChanged(e){this.isLoading=e}}});const l=`{% block sw_shopware_updates_info %} <sw-card position-identifier="sw-shopware-updates-info" :title="$t('sw-settings-shopware-updates.cards.info')" :is-loading="isLoading" > {% block sw_shopware_updates_info_content %} <div class="sw-changelog" v-html="changelog" ></div> {% endblock %} </sw-card> {% endblock %}`,{Component:d}=Shopware;d.register("sw-settings-shopware-updates-info",{template:l,props:{changelog:{type:String,required:!0},isLoading:{type:Boolean}}});const u=`{% block sw_shopware_updates_requirements %} <sw-card position-identifier="sw-shopware-updates-requirements" :title="$t('sw-settings-shopware-updates.cards.requirements')" :is-loading="isLoading" > <template #grid> <sw-data-grid :show-actions="false" :show-selection="false" :columns="columns" :data-source="requirements" > {% block sw_shopware_updates_requirements_column_result %} <template #column-result="{ item, isInlineEdit }" > <template v-if="item.result"> <sw-color-badge variant="success" :rounded="true" />&nbsp; {{ $t('sw-settings-shopware-updates.requirements.ready') }} </template> <template v-else> <sw-color-badge variant="error" :rounded="true" />&nbsp; {{ $t('sw-settings-shopware-updates.requirements.notReady') }} </template> </template> {% endblock %} {% block sw_shopware_updates_requirements_column_message %} <template #column-message="{ item, isInlineEdit }" > <span v-html="$t('sw-settings-shopware-updates.requirements.message.' + item.message, item.vars)"></span> </template> {% endblock %} </sw-data-grid> </template> </sw-card> {% endblock %}`,{Component:c}=Shopware;c.register("sw-settings-shopware-updates-requirements",{template:u,props:{updateInfo:{type:Object,required:!0,default:()=>{}},requirements:{type:Array,required:!0,default:()=>[]},isLoading:{type:Boolean}},data(){return{columns:[{property:"message",label:this.$t("sw-settings-shopware-updates.requirements.columns.message"),rawData:!0},{property:"result",label:this.$t("sw-settings-shopware-updates.requirements.columns.status"),rawData:!0}]}}});const g=`{% block sw_shopware_updates_plugins %} <sw-card position-identifier="sw-shopware-updates-plugins" :title="$t('sw-settings-shopware-updates.cards.extensions')" :is-loading="isLoading" > <template #grid> <sw-data-grid :show-selection="false" :data-source="plugins" :columns="columns" > {% block sw_shopware_updates_plugins_column_icon %} <template #column-icon="{ item, isInlineEdit }" > <sw-color-badge v-if="item.statusVariant" :variant="item.statusVariant" :rounded="true" /> <sw-color-badge v-else :color="item.statusColor" :rounded="true" />&nbsp; <template v-if="item.statusMessage === 'notCompatible'"> {{ item.statusMessage }} {{ $t('sw-settings-shopware-updates.plugins.pluginWillBeDeactivatedHint') }} </template> <template v-else-if="item.statusMessage"> {{ item.statusMessage }} </template> <template v-else> {{ $t('sw-settings-shopware-updates.plugins.pluginNotInStore') }} </template> </template> {% endblock %} {% block sw_shopware_updates_plugins_column_action %} <template #actions="{item}"> <sw-context-menu-item @click="openMyExtensions()"> {{ $t('sw-settings-shopware-updates.plugins.actions.openMyExtensions') }} </sw-context-menu-item> </template> {% endblock %} </sw-data-grid> </template> </sw-card> {% endblock %}`,{Component:w}=Shopware;w.register("sw-settings-shopware-updates-plugins",{template:g,inject:["feature"],props:{isLoading:{type:Boolean},plugins:{type:Array,default:()=>[]}},computed:{columns(){return[{property:"name",label:this.$tc("sw-settings-shopware-updates.plugins.columns.name"),rawData:!0},{property:"icon",label:this.$tc("sw-settings-shopware-updates.plugins.columns.available"),rawData:!0}]}},methods:{openMyExtensions(){this.$router.push({name:"sw.extension.my-extensions.listing.app"})}}});Shopware.Service("privileges").addPrivilegeMappingEntry({category:"additional_permissions",parent:null,key:"system",roles:{core_update:{privileges:["system:core:update","system_config:read"],dependencies:[]}}}).addPrivilegeMappingEntry({category:"additional_permissions",parent:null,key:"system",roles:{plugin_maintain:{privileges:["system:plugin:maintain","plugin:update","system:clear:cache","system_config:read"],dependencies:[]},plugin_upload:{privileges:["user_config:read","user_config:update","user_config:create"],dependencies:["system.plugin_maintain"]}}});const{Module:h}=Shopware;h.register("sw-settings-shopware-updates",{type:"core",name:"settings-shopware-updates",title:"sw-settings-shopware-updates.general.emptyTitle",description:"sw-settings-shopware-updates.general.emptyTitle",version:"1.0.0",targetVersion:"1.0.0",color:"#9AA8B5",icon:"regular-cog",favicon:"icon-module-settings.png",routes:{wizard:{component:"sw-settings-shopware-updates-wizard",path:"wizard",meta:{parentPath:"sw.settings.index.system",privilege:"system.core_update"}}},settingsItem:{privilege:"system.core_update",group:"system",to:"sw.settings.shopware.updates.wizard",icon:"regular-sync"}});
