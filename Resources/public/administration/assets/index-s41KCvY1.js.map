{"version":3,"file":"index-s41KCvY1.js","sources":["../../../app/administration/src/app/component/meteor/sw-meteor-single-select/sw-meteor-single-select.html.twig","../../../app/administration/src/app/component/meteor/sw-meteor-single-select/index.js"],"sourcesContent":["<div class=\"sw-meteor-single-select\">\n    <div\n        class=\"sw-meteor-single-select__preview\"\n        role=\"button\"\n        tabindex=\"0\"\n        @click=\"toggleResultList\"\n        @keydown.enter=\"toggleResultList\"\n    >\n        <span class=\"sw-meteor-single-select__label\">\n            {{ label }}:\n        </span>\n\n        <span class=\"sw-meteor-single-select__selected-value-label\">\n            {{ selectedValueLabel }}\n        </span>\n\n        <sw-icon name=\"regular-chevron-down-xxs\" />\n    </div>\n\n    <div class=\"sw-meteor-single-select__result-list\">\n        <sw-select-result-list\n            v-if=\"isExpanded\"\n            :popover-classes=\"['sw-meteor-single-select__popover']\"\n            :popover-resize-width=\"false\"\n            :options=\"results\"\n            :is-loading=\"isLoading\"\n            :empty-message=\"$tc('global.sw-meteor-single-select.messageNoResults', 0, { term: searchTerm })\"\n            @paginate=\"$emit('paginate')\"\n            @item-select=\"setValue\"\n            @outside-click=\"closeResultList\"\n        >\n\n            <template\n                v-if=\"searchable\"\n                #before-item-list\n            >\n                <slot name=\"before-item-list\">\n                    <sw-simple-search-field\n                        ref=\"searchField\"\n                        :value=\"searchTerm\"\n                        size=\"small\"\n                        variant=\"form\"\n                        @update:value=\"searchTerm = $event\"\n                        @search-term-change=\"onInputSearchTerm\"\n                    />\n                </slot>\n            </template>\n\n            <template #result-item=\"{ item, index }\">\n                <slot\n                    name=\"result-item\"\n                    v-bind=\"{ item, index, labelProperty, searchTerm, highlightSearchTerm, isSelected, setValue, getKey }\"\n                >\n                    <sw-select-result\n                        :class=\"'sw-meteor-select-option--' + item.value\"\n                        :selected=\"isSelected(item)\"\n                        v-bind=\"{ item, index }\"\n                        @item-select=\"setValue\"\n                    >\n                        <slot\n                            name=\"result-label-property\"\n                            v-bind=\"{ item, index, labelProperty, valueProperty, searchTerm, highlightSearchTerm, getKey }\"\n                        >\n                            <sw-highlight-text\n                                v-if=\"highlightSearchTerm && !isSelected(item)\"\n                                :text=\"getKey(item, labelProperty)\"\n                                :search-term=\"searchTerm\"\n                            />\n\n                            <template v-else>\n                                {{ getKey(item, labelProperty) }}\n                            </template>\n                        </slot>\n                    </sw-select-result>\n                </slot>\n            </template>\n\n            <template #after-item-list>\n                <slot name=\"after-item-list\"></slot>\n            </template>\n        </sw-select-result-list>\n    </div>\n</div>\n","/**\n * @package admin\n */\n\nimport './sw-meteor-single-select.scss';\nimport template from './sw-meteor-single-select.html.twig';\n\nconst { Component, Mixin } = Cicada;\nconst { debounce, get } = Cicada.Utils;\n\n/**\n * @private\n */\nComponent.register('sw-meteor-single-select', {\n    template,\n\n    compatConfig: Cicada.compatConfig,\n\n    inject: ['feature'],\n\n    emits: [\n        'paginate',\n        'update:value',\n        'search',\n    ],\n\n    mixins: [\n        Mixin.getByName('remove-api-error'),\n    ],\n\n    props: {\n        options: {\n            required: true,\n            type: Array,\n        },\n\n        // eslint-disable-next-line vue/require-prop-types\n        value: {\n            required: true,\n        },\n\n        label: {\n            type: String,\n            required: false,\n            default: '',\n        },\n\n        isLoading: {\n            type: Boolean,\n            required: false,\n            default: false,\n        },\n\n        highlightSearchTerm: {\n            type: Boolean,\n            required: false,\n            // eslint-disable-next-line vue/no-boolean-default\n            default: true,\n        },\n\n        placeholder: {\n            type: String,\n            required: false,\n            default: '',\n        },\n\n        labelProperty: {\n            type: String,\n            required: false,\n            default: 'label',\n        },\n\n        valueProperty: {\n            type: String,\n            required: false,\n            default: 'value',\n        },\n    },\n\n    data() {\n        return {\n            searchTerm: '',\n            isExpanded: false,\n            results: this.options,\n            // used to track if an item was selected before closing the result list\n            itemRecentlySelected: false,\n        };\n    },\n\n    computed: {\n        currentValue: {\n            get() {\n                return this.value;\n            },\n            set(newValue) {\n                this.$emit('update:value', newValue);\n            },\n        },\n\n        inputClasses() {\n            return {\n                'is--expanded': this.isExpanded,\n            };\n        },\n\n        selectionTextClasses() {\n            return {\n                'is--placeholder': !this.singleSelection,\n            };\n        },\n\n        singleSelection: {\n            get() {\n                return this.options.find((option) => {\n                    return this.getKey(option, this.valueProperty) === this.currentValue;\n                });\n            },\n            set(newValue) {\n                this.currentValue = this.getKey(newValue, this.valueProperty);\n            },\n        },\n\n        selectedValueLabel() {\n            if (!this.singleSelection) {\n                return this.placeholder;\n            }\n\n            return this.getKey(this.singleSelection, this.labelProperty);\n        },\n\n        searchable() {\n            return this.options.length >= 7;\n        },\n    },\n\n    methods: {\n        isSelected(item) {\n            return this.getKey(item, this.valueProperty) === this.value;\n        },\n\n        toggleResultList() {\n            if (this.isExpanded) {\n                this.closeResultList();\n            } else {\n                this.openResultList();\n            }\n        },\n\n        openResultList() {\n            // Always start with a fresh list when opening the result list\n            this.results = this.options;\n            this.isExpanded = true;\n        },\n\n        closeResultList() {\n            this.isExpanded = false;\n            this.searchTerm = '';\n        },\n\n        setValue(item) {\n            this.itemRecentlySelected = true;\n            this.singleSelection = item;\n            this.closeResultList();\n        },\n\n        onInputSearchTerm() {\n            this.debouncedSearch();\n        },\n\n        debouncedSearch: debounce(function updateSearchTerm() {\n            this.search();\n        }, 100),\n\n        search() {\n            this.$emit('search', this.searchTerm);\n\n            this.results = this.options.filter((option) => {\n                const label = this.getKey(option, this.labelProperty);\n                if (!label) {\n                    return false;\n                }\n                return label.toLowerCase().includes(this.searchTerm.toLowerCase());\n            });\n        },\n\n        getKey(object, keyPath, defaultValue) {\n            return get(object, keyPath, defaultValue);\n        },\n    },\n});\n"],"names":["template","Component","Mixin","debounce","get","newValue","option","item","label","object","keyPath","defaultValue"],"mappings":"AAAA,MAAeA,EAAA,m1DCOT,CAAE,UAAAC,EAAW,MAAAC,CAAO,EAAG,OACvB,CAAE,SAAAC,EAAU,IAAAC,GAAQ,OAAO,MAKjCH,EAAU,SAAS,0BAA2B,CAC1C,SAAAD,EAEA,aAAc,OAAO,aAErB,OAAQ,CAAC,SAAS,EAElB,MAAO,CACH,WACA,eACA,QACH,EAED,OAAQ,CACJE,EAAM,UAAU,kBAAkB,CACrC,EAED,MAAO,CACH,QAAS,CACL,SAAU,GACV,KAAM,KACT,EAGD,MAAO,CACH,SAAU,EACb,EAED,MAAO,CACH,KAAM,OACN,SAAU,GACV,QAAS,EACZ,EAED,UAAW,CACP,KAAM,QACN,SAAU,GACV,QAAS,EACZ,EAED,oBAAqB,CACjB,KAAM,QACN,SAAU,GAEV,QAAS,EACZ,EAED,YAAa,CACT,KAAM,OACN,SAAU,GACV,QAAS,EACZ,EAED,cAAe,CACX,KAAM,OACN,SAAU,GACV,QAAS,OACZ,EAED,cAAe,CACX,KAAM,OACN,SAAU,GACV,QAAS,OACZ,CACJ,EAED,MAAO,CACH,MAAO,CACH,WAAY,GACZ,WAAY,GACZ,QAAS,KAAK,QAEd,qBAAsB,EAClC,CACK,EAED,SAAU,CACN,aAAc,CACV,KAAM,CACF,OAAO,KAAK,KACf,EACD,IAAIG,EAAU,CACV,KAAK,MAAM,eAAgBA,CAAQ,CACtC,CACJ,EAED,cAAe,CACX,MAAO,CACH,eAAgB,KAAK,UACrC,CACS,EAED,sBAAuB,CACnB,MAAO,CACH,kBAAmB,CAAC,KAAK,eACzC,CACS,EAED,gBAAiB,CACb,KAAM,CACF,OAAO,KAAK,QAAQ,KAAMC,GACf,KAAK,OAAOA,EAAQ,KAAK,aAAa,IAAM,KAAK,YAC3D,CACJ,EACD,IAAID,EAAU,CACV,KAAK,aAAe,KAAK,OAAOA,EAAU,KAAK,aAAa,CAC/D,CACJ,EAED,oBAAqB,CACjB,OAAK,KAAK,gBAIH,KAAK,OAAO,KAAK,gBAAiB,KAAK,aAAa,EAHhD,KAAK,WAInB,EAED,YAAa,CACT,OAAO,KAAK,QAAQ,QAAU,CACjC,CACJ,EAED,QAAS,CACL,WAAWE,EAAM,CACb,OAAO,KAAK,OAAOA,EAAM,KAAK,aAAa,IAAM,KAAK,KACzD,EAED,kBAAmB,CACX,KAAK,WACL,KAAK,gBAAe,EAEpB,KAAK,eAAc,CAE1B,EAED,gBAAiB,CAEb,KAAK,QAAU,KAAK,QACpB,KAAK,WAAa,EACrB,EAED,iBAAkB,CACd,KAAK,WAAa,GAClB,KAAK,WAAa,EACrB,EAED,SAASA,EAAM,CACX,KAAK,qBAAuB,GAC5B,KAAK,gBAAkBA,EACvB,KAAK,gBAAe,CACvB,EAED,mBAAoB,CAChB,KAAK,gBAAe,CACvB,EAED,gBAAiBJ,EAAS,UAA4B,CAClD,KAAK,OAAM,CACd,EAAE,GAAG,EAEN,QAAS,CACL,KAAK,MAAM,SAAU,KAAK,UAAU,EAEpC,KAAK,QAAU,KAAK,QAAQ,OAAQG,GAAW,CAC3C,MAAME,EAAQ,KAAK,OAAOF,EAAQ,KAAK,aAAa,EACpD,OAAKE,EAGEA,EAAM,cAAc,SAAS,KAAK,WAAW,YAAW,CAAE,EAFtD,EAG3B,CAAa,CACJ,EAED,OAAOC,EAAQC,EAASC,EAAc,CAClC,OAAOP,EAAIK,EAAQC,EAASC,CAAY,CAC3C,CACJ,CACL,CAAC"}