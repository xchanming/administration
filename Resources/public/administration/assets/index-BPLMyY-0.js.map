{"version":3,"file":"index-BPLMyY-0.js","sources":["../../../app/administration/src/app/component/base/sw-container/sw-container.html.twig","../../../app/administration/src/app/component/base/sw-container/index.js"],"sourcesContent":["<!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n{% block sw_container %}\n<div\n    class=\"sw-container\"\n    :style=\"currentCssGrid\"\n>\n    <slot>\n        <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n        {% block sw_container_slot_default %}{% endblock %}\n    </slot>\n</div>\n{% endblock %}\n","import template from './sw-container.html.twig';\nimport './sw-container.scss';\n\nconst { Component } = Cicada;\nconst { warn } = Cicada.Utils.debug;\n\n/**\n * @package admin\n *\n * @private\n * @description Provides a container element which is divided in multiple sections with the use of CSS grid.\n * @status ready\n * @example-type static\n * @component-example\n * <sw-container columns=\"1fr 1fr\">\n *     <div>Left content</div>\n *     <div>Right content</div>\n * </sw-container>\n */\nComponent.register('sw-container', {\n    template,\n\n    compatConfig: Cicada.compatConfig,\n\n    props: {\n        columns: {\n            type: String,\n            default: '',\n            required: false,\n        },\n        rows: {\n            type: String,\n            default: '',\n            required: false,\n        },\n        gap: {\n            type: String,\n            default: '',\n            required: false,\n        },\n        justify: {\n            type: String,\n            required: false,\n            default: 'stretch',\n            validValues: [\n                'start',\n                'end',\n                'center',\n                'stretch',\n                'left',\n                'right',\n            ],\n            validator(value) {\n                return [\n                    'start',\n                    'end',\n                    'center',\n                    'stretch',\n                    'left',\n                    'right',\n                ].includes(value);\n            },\n        },\n        align: {\n            type: String,\n            required: false,\n            default: 'stretch',\n            validValues: [\n                'start',\n                'end',\n                'center',\n                'stretch',\n            ],\n            validator(value) {\n                return [\n                    'start',\n                    'end',\n                    'center',\n                    'stretch',\n                ].includes(value);\n            },\n        },\n        breakpoints: {\n            type: Object,\n            default() {\n                return {};\n            },\n            required: false,\n        },\n    },\n\n    data() {\n        return {\n            currentCssGrid: this.buildCssGrid(),\n        };\n    },\n\n    created() {\n        this.createdComponent();\n    },\n\n    methods: {\n        createdComponent() {\n            this.registerResizeListener();\n        },\n\n        registerResizeListener() {\n            const that = this;\n\n            this.$device.onResize({\n                listener() {\n                    that.updateCssGrid();\n                },\n                component: this,\n            });\n        },\n\n        updateCssGrid() {\n            this.currentCssGrid = this.buildCssGrid();\n        },\n\n        buildCssGrid() {\n            let cssGrid = this.buildCssGridProps();\n\n            if (Object.keys(this.breakpoints).length === 0) {\n                return cssGrid;\n            }\n\n            Object.keys(this.breakpoints).find((breakpoint) => {\n                const currentBreakpointWidth = Number.parseInt(breakpoint, 10);\n                const currentBreakpoint = this.breakpoints[breakpoint];\n\n                if (Number.isNaN(currentBreakpointWidth)) {\n                    warn(\n                        this.$options.name,\n                        `Unable to register breakpoint \"${breakpoint}\".\n                        The breakpoint key has to be a number equal to your desired pixel value.`,\n                        currentBreakpoint,\n                    );\n                }\n\n                if (currentBreakpointWidth > this.$device.getViewportWidth()) {\n                    cssGrid = this.buildCssGridProps(currentBreakpoint);\n                    return cssGrid;\n                }\n                return null;\n            });\n\n            return cssGrid;\n        },\n\n        cssGridDefaults() {\n            return {\n                columns: this.columns,\n                rows: this.rows,\n                gap: this.gap,\n                justify: this.justify,\n                align: this.align,\n            };\n        },\n\n        buildCssGridProps(currentBreakpoint = {}) {\n            const grid = Object.assign(this.cssGridDefaults(), currentBreakpoint);\n\n            return {\n                'grid-template-columns': grid.columns,\n                'grid-template-rows': grid.rows,\n                'grid-gap': grid.gap,\n                'justify-items': grid.justify,\n                'align-items': grid.align,\n            };\n        },\n    },\n});\n"],"names":["template","Component","warn","value","that","cssGrid","breakpoint","currentBreakpointWidth","currentBreakpoint","grid"],"mappings":"AAAA,MAAeA,EAAA,wKCGT,CAAE,UAAAC,CAAW,EAAG,OAChB,CAAE,KAAAC,CAAM,EAAG,OAAO,MAAM,MAe9BD,EAAU,SAAS,eAAgB,CAC/B,SAAAD,EAEA,aAAc,OAAO,aAErB,MAAO,CACH,QAAS,CACL,KAAM,OACN,QAAS,GACT,SAAU,EACb,EACD,KAAM,CACF,KAAM,OACN,QAAS,GACT,SAAU,EACb,EACD,IAAK,CACD,KAAM,OACN,QAAS,GACT,SAAU,EACb,EACD,QAAS,CACL,KAAM,OACN,SAAU,GACV,QAAS,UACT,YAAa,CACT,QACA,MACA,SACA,UACA,OACA,OACH,EACD,UAAUG,EAAO,CACb,MAAO,CACH,QACA,MACA,SACA,UACA,OACA,OACpB,EAAkB,SAASA,CAAK,CACnB,CACJ,EACD,MAAO,CACH,KAAM,OACN,SAAU,GACV,QAAS,UACT,YAAa,CACT,QACA,MACA,SACA,SACH,EACD,UAAUA,EAAO,CACb,MAAO,CACH,QACA,MACA,SACA,SACpB,EAAkB,SAASA,CAAK,CACnB,CACJ,EACD,YAAa,CACT,KAAM,OACN,SAAU,CACN,MAAO,EACV,EACD,SAAU,EACb,CACJ,EAED,MAAO,CACH,MAAO,CACH,eAAgB,KAAK,aAAc,CAC/C,CACK,EAED,SAAU,CACN,KAAK,iBAAgB,CACxB,EAED,QAAS,CACL,kBAAmB,CACf,KAAK,uBAAsB,CAC9B,EAED,wBAAyB,CACrB,MAAMC,EAAO,KAEb,KAAK,QAAQ,SAAS,CAClB,UAAW,CACPA,EAAK,cAAa,CACrB,EACD,UAAW,IAC3B,CAAa,CACJ,EAED,eAAgB,CACZ,KAAK,eAAiB,KAAK,cAC9B,EAED,cAAe,CACX,IAAIC,EAAU,KAAK,oBAEnB,OAAI,OAAO,KAAK,KAAK,WAAW,EAAE,SAAW,GAI7C,OAAO,KAAK,KAAK,WAAW,EAAE,KAAMC,GAAe,CAC/C,MAAMC,EAAyB,OAAO,SAASD,EAAY,EAAE,EACvDE,EAAoB,KAAK,YAAYF,CAAU,EAWrD,OATI,OAAO,MAAMC,CAAsB,GACnCL,EACI,KAAK,SAAS,KACd,kCAAkCI,CAAU;AAAA,kGAE5CE,CACxB,EAGoBD,EAAyB,KAAK,QAAQ,iBAAgB,GACtDF,EAAU,KAAK,kBAAkBG,CAAiB,EAC3CH,GAEJ,IACvB,CAAa,EAEMA,CACV,EAED,iBAAkB,CACd,MAAO,CACH,QAAS,KAAK,QACd,KAAM,KAAK,KACX,IAAK,KAAK,IACV,QAAS,KAAK,QACd,MAAO,KAAK,KAC5B,CACS,EAED,kBAAkBG,EAAoB,GAAI,CACtC,MAAMC,EAAO,OAAO,OAAO,KAAK,gBAAe,EAAID,CAAiB,EAEpE,MAAO,CACH,wBAAyBC,EAAK,QAC9B,qBAAsBA,EAAK,KAC3B,WAAYA,EAAK,IACjB,gBAAiBA,EAAK,QACtB,cAAeA,EAAK,KACpC,CACS,CACJ,CACL,CAAC"}