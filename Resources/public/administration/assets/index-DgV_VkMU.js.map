{"version":3,"file":"index-DgV_VkMU.js","sources":["../../../app/administration/src/module/sw-settings-rule/service/rule-assignment-configuration.service.js","../../../app/administration/src/module/sw-settings-rule/view/sw-settings-rule-detail-assignments/sw-settings-rule-detail-assignments.html.twig","../../../app/administration/src/module/sw-settings-rule/view/sw-settings-rule-detail-assignments/index.js"],"sourcesContent":["const { Context } = Cicada;\nconst { Criteria } = Cicada.Data;\n\n/**\n * @module app/service/rule-assignment-configuration\n */\n\n/**\n * @private\n * @package services-settings\n * @memberOf module:core/service/rule-assignment-configuration\n * @constructor\n * @method createRuleAssignmentConfigService\n * @returns {Object}\n */\nexport default function createRuleAssignmentConfigService(ruleId, associationLimit) {\n    const configuration = {\n        product: {\n            id: 'product',\n            associationName: 'productPrices',\n            notAssignedDataTotal: 0,\n            allowAdd: false,\n            entityName: 'product',\n            label: 'sw-settings-rule.detail.associations.products',\n            criteria: () => {\n                const criteria = new Criteria(1, associationLimit);\n                criteria.addFilter(Criteria.equals('prices.rule.id', ruleId));\n                criteria.addAssociation('options.group');\n\n                return criteria;\n            },\n            api: () => {\n                const api = { ...Context.api };\n                api.inheritance = true;\n\n                return api;\n            },\n            detailRoute: 'sw.product.detail.prices',\n            gridColumns: [\n                {\n                    property: 'name',\n                    label: 'Name',\n                    rawData: true,\n                    sortable: true,\n                    routerLink: 'sw.product.detail.prices',\n                    allowEdit: false,\n                },\n            ],\n        },\n        shipping_method_availability_rule: {\n            id: 'shipping_method_availability_rule',\n            associationName: 'shippingMethods',\n            notAssignedDataTotal: 0,\n            allowAdd: true,\n            entityName: 'shipping_method',\n            label: 'sw-settings-rule.detail.associations.shippingMethodAvailabilityRule',\n            criteria: () => {\n                const criteria = new Criteria(1, associationLimit);\n                criteria.addFilter(Criteria.equals('availabilityRuleId', ruleId));\n\n                return criteria;\n            },\n            detailRoute: 'sw.settings.shipping.detail',\n            gridColumns: [\n                {\n                    property: 'name',\n                    label: 'Name',\n                    rawData: true,\n                    sortable: true,\n                    routerLink: 'sw.settings.shipping.detail',\n                    allowEdit: false,\n                },\n            ],\n            addContext: {\n                type: 'one-to-many',\n                entity: 'shipping_method',\n                column: 'availabilityRuleId',\n                searchColumn: 'name',\n                criteria: () => {\n                    const criteria = new Criteria(1, 25);\n                    criteria.addFilter(\n                        Criteria.not('AND', [\n                            Criteria.equals('availabilityRuleId', ruleId),\n                        ]),\n                    );\n\n                    return criteria;\n                },\n                gridColumns: [\n                    {\n                        property: 'name',\n                        label: 'Name',\n                        rawData: true,\n                        sortable: true,\n                        allowEdit: false,\n                    },\n                    {\n                        property: 'description',\n                        label: 'Description',\n                        rawData: true,\n                        sortable: true,\n                        allowEdit: false,\n                    },\n                    {\n                        property: 'taxType',\n                        label: 'Tax calculation',\n                        rawData: true,\n                        sortable: true,\n                        allowEdit: false,\n                    },\n                    {\n                        property: 'active',\n                        label: 'Active',\n                        rawData: true,\n                        sortable: true,\n                        allowEdit: false,\n                    },\n                ],\n            },\n        },\n        shipping_method_prices: {\n            id: 'shipping_method_prices',\n            associationName: 'shippingMethodPrices',\n            notAssignedDataTotal: 0,\n            allowAdd: false,\n            entityName: 'shipping_method',\n            label: 'sw-settings-rule.detail.associations.shippingMethodPrices',\n            criteria: () => {\n                const criteria = new Criteria(1, associationLimit);\n                criteria.addFilter(\n                    Criteria.multi('OR', [\n                        Criteria.equals('prices.ruleId', ruleId),\n                        Criteria.equals('prices.calculationRuleId', ruleId),\n                    ]),\n                );\n\n                return criteria;\n            },\n            detailRoute: 'sw.settings.shipping.detail',\n            gridColumns: [\n                {\n                    property: 'name',\n                    label: 'Name',\n                    rawData: true,\n                    sortable: true,\n                    routerLink: 'sw.settings.shipping.detail',\n                    allowEdit: false,\n                },\n            ],\n        },\n        tax_provider: {\n            id: 'tax_provider',\n            notAssignedDataTotal: 0,\n            allowAdd: true,\n            entityName: 'tax_provider',\n            label: 'sw-settings-rule.detail.associations.taxProviders',\n            criteria: () => {\n                const criteria = new Criteria(1, associationLimit);\n                criteria.addFilter(Criteria.equals('availabilityRuleId', ruleId));\n\n                return criteria;\n            },\n            detailRoute: 'sw.settings.tax.tax_provider.detail',\n            gridColumns: [\n                {\n                    property: 'name',\n                    label: 'Name',\n                    rawData: true,\n                    sortable: true,\n                    routerLink: 'sw.settings.tax.tax_provider.detail',\n                },\n                {\n                    property: 'active',\n                    label: 'Active',\n                    rawData: true,\n                    sortable: true,\n                    allowEdit: false,\n                },\n            ],\n            addContext: {\n                type: 'one-to-many',\n                entity: 'tax_provider',\n                column: 'availabilityRuleId',\n                searchColumn: 'name',\n                criteria: () => {\n                    const criteria = new Criteria(1, 25);\n                    criteria.addFilter(\n                        Criteria.not('AND', [\n                            Criteria.equals('availabilityRuleId', ruleId),\n                        ]),\n                    );\n\n                    return criteria;\n                },\n                gridColumns: [\n                    {\n                        property: 'name',\n                        label: 'Name',\n                        rawData: true,\n                        sortable: true,\n                        allowEdit: false,\n                    },\n                    {\n                        property: 'active',\n                        label: 'Active',\n                        rawData: true,\n                        sortable: true,\n                        allowEdit: false,\n                    },\n                ],\n            },\n        },\n        payment_method: {\n            id: 'payment_method',\n            associationName: 'paymentMethods',\n            notAssignedDataTotal: 0,\n            allowAdd: true,\n            entityName: 'payment_method',\n            label: 'sw-settings-rule.detail.associations.paymentMethods',\n            criteria: () => {\n                const criteria = new Criteria(1, associationLimit);\n                criteria.addFilter(Criteria.equals('availabilityRuleId', ruleId));\n\n                return criteria;\n            },\n            detailRoute: 'sw.settings.payment.detail',\n            gridColumns: [\n                {\n                    property: 'name',\n                    label: 'Name',\n                    rawData: true,\n                    sortable: true,\n                    routerLink: 'sw.settings.payment.detail',\n                    allowEdit: false,\n                },\n            ],\n            deleteContext: {\n                type: 'one-to-many',\n                entity: 'payment_method',\n                column: 'availabilityRuleId',\n            },\n            addContext: {\n                type: 'one-to-many',\n                entity: 'payment_method',\n                column: 'availabilityRuleId',\n                searchColumn: 'name',\n                criteria: () => {\n                    const criteria = new Criteria(1, 25);\n                    criteria.addFilter(\n                        Criteria.not('AND', [\n                            Criteria.equals('availabilityRuleId', ruleId),\n                        ]),\n                    );\n\n                    return criteria;\n                },\n                gridColumns: [\n                    {\n                        property: 'name',\n                        label: 'Name',\n                        rawData: true,\n                        sortable: true,\n                        allowEdit: false,\n                    },\n                    {\n                        property: 'extension',\n                        label: 'Extension',\n                        rawData: true,\n                        sortable: true,\n                        allowEdit: false,\n                    },\n                    {\n                        property: 'active',\n                        label: 'Active',\n                        rawData: true,\n                        sortable: true,\n                        allowEdit: false,\n                    },\n                    {\n                        property: 'position',\n                        label: 'Position',\n                        rawData: true,\n                        sortable: true,\n                        allowEdit: false,\n                    },\n                ],\n            },\n        },\n        promotion_order_rule: {\n            id: 'promotion_order_rule',\n            associationName: 'orderPromotions',\n            notAssignedDataTotal: 0,\n            allowAdd: true,\n            entityName: 'promotion',\n            label: 'sw-settings-rule.detail.associations.promotionOrderRules',\n            criteria: () => {\n                const criteria = new Criteria(1, associationLimit);\n                criteria.addFilter(Criteria.equals('orderRules.id', ruleId));\n                criteria.addAssociation('orderRules');\n\n                return criteria;\n            },\n            detailRoute: 'sw.promotion.v2.detail.conditions',\n            gridColumns: [\n                {\n                    property: 'name',\n                    label: 'Name',\n                    rawData: true,\n                    sortable: true,\n                    routerLink: 'sw.promotion.v2.detail.conditions',\n                },\n            ],\n            deleteContext: {\n                type: 'many-to-many',\n                entity: 'promotion',\n                column: 'orderRules',\n            },\n            addContext: {\n                type: 'many-to-many',\n                entity: 'promotion_order_rule',\n                column: 'promotionId',\n                searchColumn: 'name',\n                association: 'orderRules',\n                criteria: () => {\n                    const criteria = new Criteria(1, 25);\n                    criteria.addFilter(\n                        Criteria.not('AND', [\n                            Criteria.equals('orderRules.id', ruleId),\n                        ]),\n                    );\n\n                    return criteria;\n                },\n                gridColumns: [\n                    {\n                        property: 'name',\n                        label: 'Name',\n                        rawData: true,\n                        sortable: true,\n                        allowEdit: false,\n                    },\n                    {\n                        property: 'active',\n                        label: 'Active',\n                        rawData: true,\n                        sortable: true,\n                        allowEdit: false,\n                    },\n                    {\n                        property: 'validFrom',\n                        label: 'Valid from',\n                        rawData: true,\n                        sortable: true,\n                        allowEdit: false,\n                    },\n                    {\n                        property: 'validTo',\n                        label: 'Valid to',\n                        rawData: true,\n                        sortable: true,\n                        allowEdit: false,\n                    },\n                ],\n            },\n        },\n        promotion_customer_rule: {\n            id: 'promotion_customer_rule',\n            associationName: 'personaPromotions',\n            notAssignedDataTotal: 0,\n            allowAdd: true,\n            entityName: 'promotion',\n            label: 'sw-settings-rule.detail.associations.promotionCustomerRules',\n            criteria: () => {\n                const criteria = new Criteria(1, associationLimit);\n                criteria.addFilter(Criteria.equals('personaRules.id', ruleId));\n                criteria.addAssociation('personaRules');\n\n                return criteria;\n            },\n            detailRoute: 'sw.promotion.v2.detail.conditions',\n            gridColumns: [\n                {\n                    property: 'name',\n                    label: 'Name',\n                    rawData: true,\n                    sortable: true,\n                    routerLink: 'sw.promotion.v2.detail.conditions',\n                },\n            ],\n            deleteContext: {\n                type: 'many-to-many',\n                entity: 'promotion',\n                column: 'personaRules',\n            },\n            addContext: {\n                type: 'many-to-many',\n                entity: 'promotion_persona_rule',\n                column: 'promotionId',\n                searchColumn: 'name',\n                association: 'personaRules',\n                criteria: () => {\n                    const criteria = new Criteria(1, 25);\n                    criteria.addFilter(\n                        Criteria.not('AND', [\n                            Criteria.equals('personaRules.id', ruleId),\n                        ]),\n                    );\n\n                    return criteria;\n                },\n                gridColumns: [\n                    {\n                        property: 'name',\n                        label: 'Name',\n                        rawData: true,\n                        sortable: true,\n                        allowEdit: false,\n                    },\n                    {\n                        property: 'active',\n                        label: 'Active',\n                        rawData: true,\n                        sortable: true,\n                        allowEdit: false,\n                    },\n                    {\n                        property: 'validFrom',\n                        label: 'Valid from',\n                        rawData: true,\n                        sortable: true,\n                        allowEdit: false,\n                    },\n                    {\n                        property: 'validTo',\n                        label: 'Valid to',\n                        rawData: true,\n                        sortable: true,\n                        allowEdit: false,\n                    },\n                ],\n            },\n        },\n        promotion_cart_rule: {\n            id: 'promotion_cart_rule',\n            associationName: 'cartPromotions',\n            notAssignedDataTotal: 0,\n            allowAdd: true,\n            entityName: 'promotion',\n            label: 'sw-settings-rule.detail.associations.promotionCartRules',\n            criteria: () => {\n                const criteria = new Criteria(1, associationLimit);\n                criteria.addFilter(Criteria.equals('cartRules.id', ruleId));\n                criteria.addAssociation('cartRules');\n\n                return criteria;\n            },\n            detailRoute: 'sw.promotion.v2.detail.conditions',\n            gridColumns: [\n                {\n                    property: 'name',\n                    label: 'Name',\n                    rawData: true,\n                    sortable: true,\n                    routerLink: 'sw.promotion.v2.detail.conditions',\n                },\n            ],\n            deleteContext: {\n                type: 'many-to-many',\n                entity: 'promotion',\n                column: 'cartRules',\n            },\n            addContext: {\n                type: 'many-to-many',\n                entity: 'promotion_cart_rule',\n                column: 'promotionId',\n                searchColumn: 'name',\n                association: 'cartRules',\n                criteria: () => {\n                    const criteria = new Criteria(1, 25);\n                    criteria.addFilter(\n                        Criteria.not('AND', [\n                            Criteria.equals('cartRules.id', ruleId),\n                        ]),\n                    );\n\n                    return criteria;\n                },\n                gridColumns: [\n                    {\n                        property: 'name',\n                        label: 'Name',\n                        rawData: true,\n                        sortable: true,\n                        allowEdit: false,\n                    },\n                    {\n                        property: 'active',\n                        label: 'Active',\n                        rawData: true,\n                        sortable: true,\n                        allowEdit: false,\n                    },\n                    {\n                        property: 'validFrom',\n                        label: 'Valid from',\n                        rawData: true,\n                        sortable: true,\n                        allowEdit: false,\n                    },\n                    {\n                        property: 'validTo',\n                        label: 'Valid to',\n                        rawData: true,\n                        sortable: true,\n                        allowEdit: false,\n                    },\n                ],\n            },\n        },\n        promotion_discount_rule: {\n            id: 'promotion_discount_rule',\n            associationName: 'promotionDiscounts',\n            notAssignedDataTotal: 0,\n            allowAdd: false,\n            entityName: 'promotion',\n            label: 'sw-settings-rule.detail.associations.promotionDiscountRules',\n            criteria: () => {\n                const criteria = new Criteria(1, associationLimit);\n                criteria.addFilter(Criteria.equals('discounts.discountRules.id', ruleId));\n\n                return criteria;\n            },\n            detailRoute: 'sw.promotion.v2.detail.conditions',\n            gridColumns: [\n                {\n                    property: 'name',\n                    label: 'Name',\n                    rawData: true,\n                    sortable: true,\n                    routerLink: 'sw.promotion.v2.detail.conditions',\n                },\n            ],\n        },\n        promotion_group_rule: {\n            id: 'promotion_group_rule',\n            associationName: 'promotionSetGroups',\n            notAssignedDataTotal: 0,\n            allowAdd: false,\n            entityName: 'promotion',\n            label: 'sw-settings-rule.detail.associations.promotionGroupRules',\n            criteria: () => {\n                const criteria = new Criteria(1, associationLimit);\n                criteria.addFilter(Criteria.equals('setgroups.setGroupRules.id', ruleId));\n\n                return criteria;\n            },\n            detailRoute: 'sw.promotion.v2.detail.conditions',\n            gridColumns: [\n                {\n                    property: 'name',\n                    label: 'Name',\n                    rawData: true,\n                    sortable: true,\n                    routerLink: 'sw.promotion.v2.detail.conditions',\n                },\n            ],\n        },\n        flow: {\n            id: 'flow',\n            notAssignedDataTotal: 0,\n            allowAdd: false,\n            entityName: 'flow',\n            label: 'sw-settings-rule.detail.associations.flows',\n            criteria: () => {\n                const criteria = new Criteria(1, associationLimit);\n                criteria.addFilter(Criteria.equals('sequences.rule.id', ruleId));\n\n                return criteria;\n            },\n            detailRoute: 'sw.flow.detail',\n            gridColumns: [\n                {\n                    property: 'name',\n                    label: 'Flow',\n                    rawData: true,\n                    sortable: true,\n                    width: '50%',\n                    routerLink: 'sw.flow.detail',\n                },\n                {\n                    property: 'eventName',\n                    label: 'Trigger',\n                    rawData: true,\n                    sortable: true,\n                    width: '50%',\n                    routerLink: false,\n                },\n            ],\n        },\n    };\n\n    function getConfiguration() {\n        return configuration;\n    }\n\n    return {\n        getConfiguration,\n    };\n}\n","<!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n{% block sw_settings_rule_detail_assignments %}\n<div class=\"sw-settings-rule-detail-assignments\">\n    <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n    {% block sw_settings_rule_detail_assignments_entity_cards %}\n    <sw-card\n        v-for=\"entity in associationEntities\"\n        :key=\"entity.id\"\n        class=\"sw-settings-rule-detail-assignments__card\"\n        position-identifier=\"sw-settings-rule-detail-assignments-entity\"\n        :class=\"`sw-settings-rule-detail-assignments__card-${entity.id}`\"\n        :title=\"$tc(entity.label)\"\n    >\n        <template #toolbar>\n            <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n            {% block sw_settings_rule_detail_assignments_toolbar %}\n            <sw-card-filter\n                placeholder=\"\"\n                @sw-card-filter-term-change=\"onFilterEntity(entity, $event)\"\n            >\n                <template #filter>\n                    <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n                    {% block sw_settings_rule_detail_assignments_add_button %}\n                    <sw-button\n                        v-if=\"entity.allowAdd\"\n                        v-tooltip=\"getTooltipConfig(entity)\"\n                        :disabled=\"disableAdd(entity) || !acl.can('rule.editor')\"\n                        variant=\"ghost\"\n                        size=\"small\"\n                        class=\"sw-settings-rule-detail-assignments__add-button\"\n                        @click=\"onOpenAddModal(entity)\"\n                    >\n                        {{ $tc('sw-settings-rule.detail.buttonAddAssignment') }}\n                    </sw-button>\n                    {% endblock %}\n                </template>\n            </sw-card-filter>\n            {% endblock %}\n        </template>\n\n        <template #grid>\n            <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n            {% block sw_settings_rule_detail_assignments_entity_listing %}\n            <sw-settings-rule-assignment-listing\n                v-if=\"entity.loadedData && entity.loadedData.length > 0\"\n                class=\"sw-settings-rule-detail-assignments__entity-listing\"\n                :class=\"`sw-settings-rule-detail-assignments__entity-listing-${entity.id}`\"\n                :is-loading=\"isLoading\"\n                :detail-route=\"entity.detailRoute\"\n                :items=\"entity.loadedData\"\n                :repository=\"entity.repository\"\n                :local-mode=\"false\"\n                :criteria-limit=\"5\"\n                :allow-delete=\"allowDeletion(entity) && acl.can('rule.editor')\"\n                :allow-inline-edit=\"false\"\n                :show-settings=\"false\"\n                :show-selection=\"allowDeletion(entity) && acl.can('rule.editor')\"\n                :allow-column-edit=\"false\"\n                :steps=\"associationSteps\"\n                :columns=\"entity.gridColumns\"\n                :full-page=\"false\"\n                @delete-items=\"(event) => onDeleteItems(entity, event)\"\n            >\n                <template #link-column=\"{ item, column, renderColumn }\">\n                    <router-link\n                        v-if=\"column.routerLink\"\n                        :to=\"getRouterLink(entity, item)\"\n                    >\n                        <sw-product-variant-info\n                            v-if=\"item.variation\"\n                            :variations=\"item.variation\"\n                        >\n                            {{ renderColumn(item, column) }}\n                        </sw-product-variant-info>\n                        <span v-if=\"!item.variation\">\n                            {{ renderColumn(item, column) }}\n                        </span>\n                    </router-link>\n                    <span v-else>\n                        <sw-product-variant-info\n                            v-if=\"item.variation\"\n                            :variations=\"item.variation\"\n                        >\n                            {{ renderColumn(item, column) }}\n                        </sw-product-variant-info>\n                        <span v-else>\n                            {{ renderColumn(item, column) }}\n                        </span>\n                    </span>\n                </template>\n                <template #actions=\"{ item }\">\n                    <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n                    {% block sw_settings_rule_detail_assignments_entity_listing_actions %}\n                    <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n                    {% block sw_settings_rule_detail_assignments_entity_listing_view_action %}\n                    <sw-context-menu-item :router-link=\"getRouterLink(entity, item)\">\n                        {{ $tc('global.default.view') }}\n                    </sw-context-menu-item>\n                    {% endblock %}\n                    <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n                    {% block sw_settings_rule_detail_assignments_entity_listing_delete_action %}\n                    <sw-context-menu-item\n                        v-if=\"entity.deleteContext && acl.can('rule.editor')\"\n                        variant=\"danger\"\n                        @click=\"onOpenDeleteModal(entity, item)\"\n                    >\n                        {{ $tc('global.default.remove') }}\n                    </sw-context-menu-item>\n                    {% endblock %}\n                    {% endblock %}\n                </template>\n\n                <template #bulk-modal-delete-confirm-text=\"{ selectionCount }\">\n                    {{ $tc('sw-settings-rule.detail.textModalBulkDelete', selectionCount, { count: selectionCount }) }}\n                </template>\n\n                <template #bulk-modal-delete-items=\"{ isBulkLoading, deleteItems }\">\n                    <sw-button\n                        variant=\"danger\"\n                        size=\"small\"\n                        :is-loading=\"isBulkLoading\"\n                        @click=\"deleteItems\"\n                    >\n                        {{ $tc('global.default.remove') }}\n                    </sw-button>\n                </template>\n            </sw-settings-rule-assignment-listing>\n\n            <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n            {% block sw_settings_rule_detail_assignments_empty_state %}\n            <sw-empty-state\n                v-else\n                class=\"sw-settings-rule-detail-assignments__entity-empty-state\"\n                :class=\"`sw-settings-rule-detail-assignments__entity-empty-state-${entity.id}`\"\n                :title=\"$tc('sw-settings-rule.detail.hasNoAssociations')\"\n                :absolute=\"false\"\n                :show-description=\"false\"\n            >\n                <template #icon>\n                    <img\n                        :src=\"assetFilter('administration/static/img/empty-states/settings-empty-state.svg')\"\n                        :alt=\"$tc('sw-settings-rule.detail.hasNoAssociations')\"\n                    >\n                </template>\n            </sw-empty-state>\n            {% endblock %}\n            {% endblock %}\n        </template>\n    </sw-card>\n    {% endblock %}\n\n    <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n    {% block sw_settings_rule_detail_assignments_delete_modal %}\n    <sw-modal\n        v-if=\"deleteModal\"\n        class=\"sw-settings-rule-detail-assignments__delete-modal\"\n        :title=\"$tc('sw-settings-rule.detail.titleModalDelete')\"\n        variant=\"small\"\n        @modal-close=\"onCloseDeleteModal\"\n    >\n\n        <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n        {% block sw_settings_rule_detail_assignments_delete_modal_text %}\n        <p class=\"sw-settings-rule-detail-assignments__delete-text\">\n            {{ $tc('sw-settings-rule.detail.textModalDelete') }}\n        </p>\n        {% endblock %}\n\n        <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n        {% block sw_settings_rule_detail_assignments_delete_modal_footer %}\n        <template #modal-footer>\n\n            <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n            {% block sw_settings_rule_detail_assignments_delete_modal_cancel %}\n            <sw-button\n                class=\"sw-settings-rule-detail-assignments__delete-modal-cancel-button\"\n                size=\"small\"\n                @click=\"onCloseDeleteModal\"\n            >\n                {{ $tc('global.default.cancel') }}\n            </sw-button>\n            {% endblock %}\n\n            <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n            {% block sw_settings_rule_detail_assignments_delete_modal_confirm %}\n            <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n            {% block sw_settings_rule_detail_assignments_delete_modal_confirm_single %}\n            <sw-button\n                class=\"sw-settings-rule-detail-assignments__delete-modal-delete-button\"\n                size=\"small\"\n                variant=\"danger\"\n                @click=\"onDelete\"\n            >\n                {{ $tc('global.default.remove') }}\n            </sw-button>\n            {% endblock %}\n            {% endblock %}\n        </template>\n        {% endblock %}\n    </sw-modal>\n    {% endblock %}\n\n    <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n    {% block sw_settings_rule_detail_assignments_add_modal %}\n    <sw-settings-rule-add-assignment-modal\n        v-if=\"addModal\"\n        :rule=\"rule\"\n        :entity-context=\"addEntityContext\"\n        @entities-saved=\"onEntitiesSaved\"\n        @close-add-modal=\"onCloseAddModal\"\n    />\n    {% endblock %}\n</div>\n{% endblock %}\n","import RuleAssignmentConfigurationService from 'src/module/sw-settings-rule/service/rule-assignment-configuration.service';\nimport template from './sw-settings-rule-detail-assignments.html.twig';\nimport './sw-settings-rule-detail-assignments.scss';\n\nconst { Mixin, Context, Utils } = Cicada;\nconst { Criteria } = Cicada.Data;\n\n/**\n * @private\n * @package services-settings\n */\nexport default {\n    template,\n\n    compatConfig: Cicada.compatConfig,\n\n    inject: [\n        'repositoryFactory',\n        'ruleConditionDataProviderService',\n        'feature',\n        'acl',\n    ],\n\n    mixins: [\n        Mixin.getByName('notification'),\n    ],\n\n    props: {\n        rule: {\n            type: Object,\n            required: true,\n        },\n\n        conditions: {\n            type: Array,\n            required: false,\n            default: null,\n        },\n\n        detailPageLoading: {\n            type: Boolean,\n            required: false,\n            default: false,\n        },\n    },\n\n    data() {\n        return {\n            associationLimit: 5,\n            isLoading: false,\n            ruleAssociationsLoaded: false,\n            products: null,\n            shippingMethods: null,\n            paymentMethods: null,\n            promotions: null,\n            associationSteps: [\n                5,\n                10,\n            ],\n            associationEntities: null,\n            deleteModal: false,\n            deleteEntity: null,\n            deleteItem: null,\n            addModal: false,\n            addEntityContext: null,\n        };\n    },\n\n    computed: {\n        getRuleAssignmentConfiguration() {\n            return RuleAssignmentConfigurationService(this.rule.id, this.associationLimit).getConfiguration();\n        },\n\n        /* eslint-disable max-len */\n        /**\n         * Definition of the associated entities of the current rule.\n         * The component will render a sw-entity-listing for each association entity,\n         * if results are given.\n         *\n         * @type {[{id: String, notAssignedDataTotal: int, entityName: String, label: String, criteria: Function, api: Function, detailRoute: String, gridColumns: Array<Object>, deleteContext: Object, addContext: Object }]}\n         * @returns {Array<Object>}\n         */\n        /* eslint-enable max-len */\n        associationEntitiesConfig() {\n            return Object.values(this.getRuleAssignmentConfiguration);\n        },\n\n        assetFilter() {\n            return Cicada.Filter.getByName('asset');\n        },\n    },\n\n    created() {\n        this.createdComponent();\n    },\n\n    methods: {\n        createdComponent() {\n            this.prepareAssociationEntitiesList();\n            this.loadAssociationData();\n        },\n\n        disableAdd(entity) {\n            const association = entity.associationName ?? null;\n\n            if (this.ruleConditionDataProviderService.isRuleRestricted(this.conditions, association)) {\n                return true;\n            }\n\n            return entity.notAssignedDataTotal === 0;\n        },\n\n        getTooltipConfig(entity) {\n            const association = entity.associationName ?? null;\n\n            return this.ruleConditionDataProviderService.getRestrictedRuleTooltipConfig(this.conditions, association);\n        },\n\n        allowDeletion(entity) {\n            return !!entity.deleteContext;\n        },\n\n        prepareAssociationEntitiesList() {\n            this.associationEntities = this.associationEntitiesConfig.map((item) => {\n                return {\n                    repository: this.repositoryFactory.create(item.entityName),\n                    loadedData: null,\n                    ...item,\n                };\n            });\n        },\n\n        onOpenDeleteModal(entity, item) {\n            this.deleteModal = true;\n            this.deleteEntity = entity;\n            this.deleteItem = item;\n        },\n\n        onCloseDeleteModal() {\n            this.deleteModal = false;\n            this.deleteContext = null;\n            this.deleteItem = null;\n        },\n\n        onOpenAddModal(entityContext) {\n            this.addModal = true;\n            this.addEntityContext = entityContext;\n        },\n\n        onCloseAddModal() {\n            this.addModal = false;\n            this.addEntityContext = null;\n        },\n\n        onEntitiesSaved() {\n            this.addModal = false;\n\n            return this.refreshAssignmentData(this.addEntityContext);\n        },\n\n        async onDeleteItems(entity, selection) {\n            await Promise.all(\n                Object.values(selection).map(async (item) => {\n                    this.deleteEntity = entity;\n                    this.deleteItem = item;\n\n                    await this.doDeleteItem();\n                }),\n            );\n\n            return this.refreshAssignmentData(entity).then(() => {\n                this.onCloseDeleteModal();\n            });\n        },\n\n        onDelete() {\n            return this.doDeleteItem().then(() => {\n                return this.refreshAssignmentData(this.deleteEntity).then(() => {\n                    this.onCloseDeleteModal();\n                });\n            });\n        },\n\n        doDeleteItem() {\n            const api = this.deleteEntity.api ? this.deleteEntity.api() : Context.api;\n            const repository = this.repositoryFactory.create(this.deleteItem.getEntityName());\n\n            if (this.deleteEntity.deleteContext.type === 'one-to-many') {\n                Utils.object.set(this.deleteItem, this.deleteEntity.deleteContext.column, null);\n            } else {\n                Utils.object.get(this.deleteItem, this.deleteEntity.deleteContext.column).remove(this.rule.id);\n            }\n\n            this.isLoading = true;\n            return repository.save(this.deleteItem, api).finally(() => {\n                this.isLoading = false;\n            });\n        },\n\n        async refreshAssignmentData(entity) {\n            this.isLoading = true;\n            const api = entity.api ? entity.api() : Context.api;\n            const result = await entity.repository.search(entity.criteria(), api);\n            const total = await this.loadNotAssignedDataTotals(entity, api);\n\n            this.associationEntities.forEach((currentEntity) => {\n                if (entity.id === currentEntity.id) {\n                    currentEntity.loadedData = result;\n                    currentEntity.notAssignedDataTotal = total;\n                }\n            });\n            this.isLoading = false;\n        },\n\n        onFilterEntity(item, term) {\n            const api = item.api ? item.api() : Context.api;\n            const criteria = item.criteria();\n\n            criteria.setPage(1);\n            criteria.setTerm(term);\n\n            this.isLoading = true;\n            return item.repository\n                .search(criteria, api)\n                .then((result) => {\n                    item.loadedData = result;\n                })\n                .finally(() => {\n                    this.isLoading = false;\n                });\n        },\n\n        async loadNotAssignedDataTotals(item, api) {\n            if (!item.deleteContext && !item.addContext) {\n                return Promise.resolve(item.notAssignedDataTotal);\n            }\n\n            const criteria = new Criteria(1, 1);\n            criteria.addFilter(Criteria.not('AND', item.criteria().filters));\n\n            this.isLoading = true;\n            return item.repository\n                .search(criteria, api)\n                .then((notAssignedDataResult) => {\n                    return Promise.resolve(notAssignedDataResult.total);\n                })\n                .finally(() => {\n                    this.isLoading = false;\n                });\n        },\n\n        getRouterLink(entity, item) {\n            return { name: entity.detailRoute, params: { id: item.id } };\n        },\n\n        loadAssociationData() {\n            this.isLoading = true;\n\n            return Promise.all(\n                this.associationEntities.map((item) => {\n                    const api = item.api ? item.api() : Context.api;\n\n                    return item.repository.search(item.criteria(), api).then(async (result) => {\n                        item.loadedData = result;\n\n                        item.notAssignedDataTotal = await this.loadNotAssignedDataTotals(item, api);\n                    });\n                }),\n            )\n                .catch(() => {\n                    this.createNotificationError({\n                        message: this.$tc('sw-settings-rule.detail.associationsLoadingError'),\n                    });\n                })\n                .finally(() => {\n                    this.isLoading = false;\n                });\n        },\n    },\n};\n"],"names":["Context","Criteria","createRuleAssignmentConfigService","ruleId","associationLimit","configuration","criteria","api","getConfiguration","template","Mixin","Utils","index","RuleAssignmentConfigurationService","entity","association","item","entityContext","selection","repository","result","total","currentEntity","term","notAssignedDataResult"],"mappings":"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"}