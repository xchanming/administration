const n=`{% block sw_cms_element_cross_selling %} <div class="sw-cms-el-cross-selling"> {% block sw_cms_element_cross_selling_title %} <h2 class="sw-cms-el-cross-selling__title"> {{ placeholder(crossSelling, 'name', crossSelling.name) }} </h2> {% endblock %} {% block sw_cms_element_cross_selling_content %} <div class="sw-cms-el-cross-selling__content"> {% block sw_cms_element_cross_selling_arrow_left %} <div class="sw-cms-el-cross-selling__navigation"> <sw-icon class="sw-cms-el-cross-selling__navigation-button" name="regular-chevron-left" size="24" /> </div> {% endblock %} {% block sw_cms_element_cross_selling_product_holder %} <div ref="productHolder" class="sw-cms-el-cross-selling__product-holder" :style="sliderBoxMinWidth" > <template v-if="!element.data.product || !element.data.product.crossSellings.length"> {% block sw_cms_element_cross_selling_demo_data %} <sw-cms-el-product-box v-for="index in sliderBoxLimit" :key="index" :element="demoProductElement" /> {% endblock %} </template> <template v-else> {% block sw_cms_element_cross_selling_products %} <template v-for="(crossSelling, index) in crossSellingProducts" :key="index" > <sw-cms-el-product-box v-if="index < sliderBoxLimit" :element="getProductEl(crossSelling.product)" /> </template> {% endblock %} </template> </div> {% endblock %} {% block sw_cms_element_cross_selling_arrow_right %} <div class="sw-cms-el-cross-selling__navigation"> <sw-icon class="sw-cms-el-cross-selling__navigation-button" name="regular-chevron-right" size="24" /> </div> {% endblock %} </div> {% endblock %} </div> {% endblock %}`,{Mixin:s}=Shopware,{isEmpty:o}=Shopware.Utils.types,c={template:n,mixins:[s.getByName("cms-element"),s.getByName("placeholder")],data(){return{sliderBoxLimit:3}},computed:{demoProductElement(){return{config:{boxLayout:{source:"static",value:this.element.config.boxLayout.value},displayMode:{source:"static",value:this.element.config.displayMode.value},elMinWidth:{source:"static",value:this.element.config.elMinWidth.value}}}},sliderBoxMinWidth(){return this.element.config.elMinWidth.value&&this.element.config.elMinWidth.value.indexOf("px")>-1?`repeat(auto-fit, minmax(${this.element.config.elMinWidth.value}, 1fr))`:null},currentDeviceView(){return this.cmsPageState.currentCmsDeviceView},crossSelling(){return!this.element.data.product||!this.element.data.product.crossSellings.length?{name:"Cross selling title"}:this.element.data.product.crossSellings[0]},crossSellingProducts(){return this.element.data.product.crossSellings.length?this.element.data.product.crossSellings[0].assignedProducts:[]},currentDemoEntity(){return this.cmsPageState.currentMappingEntity==="product"?this.cmsPageState.currentDemoEntity:null}},watch:{"element.config.elMinWidth.value":{handler(){this.setSliderRowLimit()}},currentDeviceView(){setTimeout(()=>{this.setSliderRowLimit()},400)}},created(){this.createdComponent()},mounted(){this.mountedComponent()},methods:{createdComponent(){this.initElementConfig("cross-selling"),this.initElementData("cross-selling")},mountedComponent(){this.setSliderRowLimit()},setSliderRowLimit(){if(o(this.element.config)&&this.createdComponent(),this.currentDeviceView==="mobile"||this.$refs.productHolder&&this.$refs.productHolder.offsetWidth<500){this.sliderBoxLimit=1;return}if(!this.element.config.elMinWidth.value||this.element.config.elMinWidth.value==="px"||this.element.config.elMinWidth.value.indexOf("px")===-1){this.sliderBoxLimit=3;return}if(parseInt(this.element.config.elMinWidth.value.replace("px",""),10)<=0)return;const e=100,i=this.$refs.productHolder.offsetWidth,l=32;let t=parseInt(this.element.config.elMinWidth.value.replace("px",""),10);t>=300&&(t-=e),this.sliderBoxLimit=Math.floor(i/(t+l))},getProductEl(e){return{config:{boxLayout:{source:"static",value:this.element.config.boxLayout.value},displayMode:{source:"static",value:this.element.config.displayMode.value}},data:{product:e}}}}};export{c as default};
