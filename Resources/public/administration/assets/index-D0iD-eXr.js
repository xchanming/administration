const{Service:o}=Shopware;function l(e){return e.filter(t=>t.label==="")}function c(e){return e.slice().reverse()}function m(e,t){return c(t),[...e,...t]}Shopware.Store.register({id:"swOrder",state:()=>({customer:null,defaultSalesChannel:null,cart:{token:null,lineItems:[],price:{totalPrice:null},deliveries:[]},context:{token:"",customer:null,paymentMethod:{translated:{distinguishableName:""}},shippingMethod:{translated:{name:""}},currency:{isoCode:"EUR",symbol:"â‚¬",totalRounding:{decimals:2}},salesChannel:{id:""},context:{currencyId:"",languageIdChain:[]}},promotionCodes:[],disabledAutoPromotion:!1}),getters:{isCustomerActive(e){var t;return!!((t=e==null?void 0:e.context.customer)!=null&&t.active)},isCartTokenAvailable(e){var t;return!!((t=e==null?void 0:e.cart)!=null&&t.token)},currencyId(e){return(e==null?void 0:e.context.context.currencyId)??""},invalidPromotionCodes(e){return e.promotionCodes.filter(t=>t.isInvalid)},cartErrors(e){var t;return((t=e==null?void 0:e.cart)==null?void 0:t.errors)??null}},actions:{setCustomer(e){this.context.customer=e,this.customer=e},setDefaultSalesChannel(e){this.defaultSalesChannel=e},setCartToken(e){this.cart.token=e},setCart(e){const t=l(this.cart.lineItems);this.cart=e,this.cart.lineItems=m(t,this.cart.lineItems)},setCartLineItems(e){this.cart.lineItems=e},setCurrency(e){this.context.currency=e},setContext(e){this.context=e},setPromotionCodes(e){this.promotionCodes=e},removeEmptyLineItem(e){this.cart.lineItems=this.cart.lineItems.filter(t=>t.id!==e)},removeInvalidPromotionCodes(){this.promotionCodes=this.promotionCodes.filter(e=>!e.isInvalid)},setDisabledAutoPromotion(e){this.disabledAutoPromotion=e},selectExistingCustomer({customer:e}){this.setCustomer(e),this.setDefaultSalesChannel((e==null?void 0:e.salesChannel)??null)},createCart({salesChannelId:e}){return o("cartStoreService").createCart(e).then(t=>{const r=t.data.token;return this.setCartToken(r),r}).then(t=>o("contextStoreService").getSalesChannelContext(e,t).then(r=>this.setContext(r.data)))},getCart({salesChannelId:e,contextToken:t}){if(`${t}`.length!==32)throw new Error("Invalid context token");return Promise.all([o("cartStoreService").getCart(e,t).then(r=>this.setCart(r.data)),o("contextStoreService").getSalesChannelContext(e,t).then(r=>this.setContext(r.data))])},cancelCart({salesChannelId:e,contextToken:t}){if(`${t}`.length!==32)throw new Error("Invalid context token");return o("cartStoreService").cancelCart(e,t)},updateCustomerContext({customerId:e,salesChannelId:t,contextToken:r}){return o("contextStoreService").updateCustomerContext(e,t,r)},updateOrderContext({context:e,salesChannelId:t,contextToken:r}){return o("contextStoreService").updateContext(e,t,r)},getContext({salesChannelId:e,contextToken:t}){return o("contextStoreService").getSalesChannelContext(e,t)},saveOrder({salesChannelId:e,contextToken:t}){return o("checkoutStoreService").checkout(e,t)},removeLineItems({salesChannelId:e,contextToken:t,lineItemKeys:r}){return o("cartStoreService").removeLineItems(e,t,r).then(a=>this.setCart(a.data))},saveLineItem({salesChannelId:e,contextToken:t,item:r}){return o("cartStoreService").saveLineItem(e,t,r).then(a=>this.setCart(a.data))},saveMultipleLineItems({salesChannelId:e,contextToken:t,items:r}){return o("cartStoreService").addMultipleLineItems(e,t,r).then(a=>this.setCart(a.data))},addPromotionCode({salesChannelId:e,contextToken:t,code:r}){return o("cartStoreService").addPromotionCode(e,t,r).then(a=>this.setCart(a.data))},modifyShippingCosts({salesChannelId:e,contextToken:t,shippingCosts:r}){var a;return(a=o("cartStoreService"))==null?void 0:a.modifyShippingCosts(e,t,r).then(s=>this.setCart(s.data.data))},remindPayment({orderTransactionId:e}){return o("orderStateMachineService").transitionOrderTransactionState(e,"remind")}}});const h=`{% block sw_order_create %} <sw-page class="sw-order-create"> {% block sw_order_create_smart_bar_header %} <template #smart-bar-header> {% block sw_order_create_smart_bar_header_title %} <h2 v-if="!showInitialModal"> {% block sw_order_create_smart_bar_header_title_text %} {{ $tc('sw-order.create.textNewOrder') }} {% endblock %} </h2> {% endblock %} </template> {% endblock %} {% block sw_order_create_smart_bar_actions %} <template #smart-bar-actions> {% block sw_order_create_smart_bar_actions_slot %} <template v-if="!showInitialModal"> {% block sw_order_create_smart_bar_actions_cancel %} <sw-button @click="onCancelOrder"> {{ $tc('global.default.cancel') }} </sw-button> {% endblock %} {% block sw_order_create_smart_bar_actions_add %} <sw-button-process variant="primary" :disabled="isLoading" :is-loading="isLoading" :process-success="isSaveSuccessful" @update:process-success="saveFinish" @click.prevent="onSaveOrder" > {{ $tc('sw-order.create.buttonSaveOrder') }} </sw-button-process> {% endblock %} </template> {% endblock %} </template> {% endblock %} {% block sw_order_create_language_switch %} <template #language-switch> <sw-language-switch disabled /> </template> {% endblock %} {% block sw_order_create_content %} <template #content> {% block sw_order_create_content_view %} <sw-card-view> {% block sw_order_create_content_tabs %} <sw-tabs v-if="!showInitialModal" class="sw-order-create__tabs" position-identifier="sw-order-create" > {% block sw_order_create_content_tabs_general %} <sw-tabs-item class="sw-order-create__tab-general" :route="{ name: 'sw.order.create.general' }" :title="$tc('sw-order.detail.tabGeneral')" > {{ $tc('sw-order.detail.tabGeneral') }} </sw-tabs-item> {% endblock %} {% block sw_order_create_content_tabs_details %} <sw-tabs-item class="sw-order-create__tab-details" :route="{ name: 'sw.order.create.details' }" :title="$tc('sw-order.detail.tabDetails')" > {{ $tc('sw-order.detail.tabDetails') }} </sw-tabs-item> {% endblock %} </sw-tabs> {% endblock %} {% block sw_order_create_content_view %} <router-view v-slot="{ Component }" > <component :is="Component" @error="showError" /> </router-view> {% endblock %} </sw-card-view> {% endblock %} {% block sw_order_create_invalid_promotion_modal %} <sw-order-create-invalid-promotion-modal v-if="showInvalidCodeModal" @confirm="removeInvalidCode" @close="closeInvalidCodeModal" /> {% endblock %} {% block sw_order_create_remind_payment_modal %} <sw-modal v-if="showRemindPaymentModal" class="sw-order-create__remind-payment-modal" :title="$tc('sw-order.create.remindPaymentModal.title')" :is-loading="remindPaymentModalLoading" @modal-close="onRemindPaymentModalClose" > {% block sw_order_create_remind_payment_modal_content %} <p>{{ $tc('sw-order.create.remindPaymentModal.text', {paymentMethodName: paymentMethodName }, 0) }}</p> {% endblock %} <template #modal-footer> {% block sw_order_create_remind_payment_modal_footer %} <sw-button class="sw-order-create__remind-payment-modal-decline" size="small" @click="onRemindPaymentModalClose" > {{ $tc('global.default.no') }} </sw-button> <sw-button class="sw-order-create__remind-payment-modal-remind" variant="primary" size="small" @click="onRemindCustomer" > {{ $tc('sw-order.create.remindPaymentModal.primaryAction') }} </sw-button> {% endblock %} </template> </sw-modal> {% endblock %} </template> {% endblock %} </sw-page> {% endblock %}`,{Context:u,Store:n,Mixin:w}=Shopware,{Criteria:_}=Shopware.Data,C=Shopware.Component.wrapComponentConfig({template:h,inject:["repositoryFactory"],mixins:[w.getByName("notification")],data(){return{isLoading:!1,isSaveSuccessful:!1,showInvalidCodeModal:!1,showRemindPaymentModal:!1,remindPaymentModalLoading:!1,orderId:null,orderTransaction:null,paymentMethodName:""}},computed:{customer(){return n.get("swOrder").customer},cart(){return n.get("swOrder").cart},invalidPromotionCodes(){return n.get("swOrder").invalidPromotionCodes},isSaveOrderValid(){return this.customer&&this.cart.token&&this.cart.lineItems.length&&!this.invalidPromotionCodes.length},paymentMethodRepository(){return this.repositoryFactory.create("payment_method")},showInitialModal(){return this.$route.name==="sw.order.create.initial"}},created(){this.createdComponent()},methods:{createdComponent(){n.get("context").isSystemDefaultLanguage||n.get("context").resetLanguageToDefault()},redirectToOrderList(){this.$router.push({name:"sw.order.index"})},saveFinish(){this.orderId&&(this.isSaveSuccessful=!1,Shopware.Store.get("context").api.languageId=localStorage.getItem("sw-admin-current-language")||Shopware.Defaults.systemLanguageId,this.$router.push({name:"sw.order.detail",params:{id:this.orderId}}))},async onSaveOrder(){var e;if(this.isSaveOrderValid){if(this.isLoading=!0,this.isSaveSuccessful=!1,!this.customer)return;await n.get("swOrder").saveOrder({salesChannelId:(e=this.customer)==null?void 0:e.salesChannelId,contextToken:this.cart.token}).then(t=>{var r,a,s;this.orderId=(r=t==null?void 0:t.data)==null?void 0:r.id,this.orderTransaction=(s=(a=t==null?void 0:t.data)==null?void 0:a.transactions)==null?void 0:s[0],this.orderTransaction&&(this.paymentMethodRepository.get(this.orderTransaction.paymentMethodId,u.api,new _(1,1)).then(i=>{var d;this.paymentMethodName=((d=i==null?void 0:i.translated)==null?void 0:d.distinguishableName)??""}),this.showRemindPaymentModal=!0)}).catch(t=>this.showError(t)).finally(()=>{this.isLoading=!1})}this.invalidPromotionCodes.length>0?this.openInvalidCodeModal():this.showError()},onCancelOrder(){if(this.customer===null||this.cart===null){this.redirectToOrderList();return}n.get("swOrder").cancelCart({salesChannelId:this.customer.salesChannelId,contextToken:this.cart.token}).then(()=>this.redirectToOrderList())},showError(e=null){var r,a,s,i;const t=((i=(s=(a=(r=e==null?void 0:e.response)==null?void 0:r.data)==null?void 0:a.errors)==null?void 0:s[0])==null?void 0:i.detail)||null;this.createNotificationError({message:t||this.$tc("sw-order.create.messageSaveError")})},openInvalidCodeModal(){this.showInvalidCodeModal=!0},closeInvalidCodeModal(){this.showInvalidCodeModal=!1},removeInvalidCode(){n.get("swOrder").removeInvalidPromotionCodes(),this.closeInvalidCodeModal()},onRemindPaymentModalClose(){this.isSaveSuccessful=!0,this.showRemindPaymentModal=!1},onRemindCustomer(){this.remindPaymentModalLoading=!0,this.orderTransaction&&n.get("swOrder").remindPayment({orderTransactionId:this.orderTransaction.id}).then(()=>{this.remindPaymentModalLoading=!1,this.onRemindPaymentModalClose()})}}});export{C as default};
