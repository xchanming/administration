const a=`{% block sw_property_search %} <div class="sw-property-search" :class="swPropertySearchClasses" > {% block sw_property_search_inner_before %}{% endblock %} {% block sw_property_search_field %} <div class="sw-property-search__toolbar"> <slot name="toolbar" :focus="onFocusSearch" :input="onSearchOptions" :search-term="searchTerm" > <div class="sw-property-search__search-field-container"> <slot name="toolbar-search-field"> <sw-text-field ref="searchField" v-model:value="searchTerm" name="sw-field--searchTerm" class="sw-property-search__search-field" :disabled="disabled" :placeholder="$tc('sw-property-search.placeholderSearch')" autocomplete="off" @focus="onFocusSearch" @update:value="onSearchOptions" /> </slot> </div> <slot name="toolbar-items"> {% block sw_property_toolbar_items %}{% endblock %} </slot> </slot> </div> {% endblock %} {% block sw_property_search_tree %} <div v-if="displayTree" class="sw-property-search__tree-selection" > {% block sw_property_search_tree_container %} <sw-container columns="50% 50%" class="sw-property-search__tree-selection-container" > {% block sw_property_search_tree_group_grid %} <sw-grid ref="groupGrid" class="sw-property-search__tree-selection__group_grid" :header="false" :all-selectable="false" :show-selection-checkbox="false" :selectable="false" :items="groups" :is-fullpage="false" table > {% block sw_property_search_tree_group_grid_columns %} <template #columns="{ item }" > {% block sw_property_search_tree_group_grid_columns_name %} <sw-grid-column truncate class="group_grid__column-name" flex="auto" data-index="name" @click="selectGroup(item)" > <sw-icon name="regular-folder" size="16px" /> {{ item.translated.name }} </sw-grid-column> {% endblock %} {% block sw_property_search_tree_group_grid_columns_options %} <sw-grid-column truncate align="right" flex="1fr" class="sw-property-search__tree-selection__column-items-selected" data-index="assignedOptions" > <span v-if="item.optionCount > 0">{{ $tc('sw-property-search.selected', item.optionCount, { count: item.optionCount }) }}</span> </sw-grid-column> {% endblock %} </template> {% endblock %} <template #pagination> {% block sw_property_search_tree_group_grid_pagination %} <sw-pagination :page="groupPage" :limit="10" :total="groupTotal" :total-visible="7" :auto-hide="false" :steps="[10]" @page-change="onGroupPageChange" /> {% endblock %} </template> </sw-grid> {% endblock %} {% block sw_property_search_tree_option_grid %} <sw-grid ref="optionGrid" class="sw-property-search__tree-selection__option_grid" :header="false" :all-selectable="false" :items="groupOptions" :is-fullpage="false" table @sw-grid-select-item="onOptionSelect" > {% block sw_property_search_tree_option_grid_columns %} <template #columns="{ item }" > {% block sw_property_search_tree_option_grid_columns_name %} <sw-grid-column class="sw-property-search__tree-selection__option_grid--option-value" truncate flex="minmax(0, 1fr)" data-index="name" :title="item.translated.name" > <label :for="\`sw-field--\${item.id}\`">{{ item.translated.name }}</label> </sw-grid-column> {% endblock %} </template> {% endblock %} <template #pagination> {% block sw_property_search_tree_option_grid_pagination %} <sw-pagination :page="optionPage" :limit="10" :total="optionTotal" :total-visible="7" :steps="[10]" @page-change="onOptionPageChange" /> {% endblock %} </template> </sw-grid> {% endblock %} </sw-container> {% endblock %} </div> {% endblock %} {% block sw_property_search_option_search %} <div v-if="displaySearch" class="sw-property-search__search-selection" > {% block sw_property_search_option_search_grid %} <sw-grid v-if="groupOptions.length > 0" ref="optionSearchGrid" class="sw-property-search__search-selection__option_grid" :items="groupOptions" :header="false" :all-selectable="false" :is-fullpage="false" table @sw-grid-select-item="onOptionSelect" > {% block sw_property_search_option_search_grid_columns %} <template #columns="{ item }" > {% block sw_property_search_option_search_grid_columns_name %} <sw-grid-column flex="300px" data-index="name" > {{ item.group.translated.name }} / {{ item.translated.name }} </sw-grid-column> {% endblock %} </template> {% endblock %} <template #pagination> {% block sw_property_search_option_search_grid_pagination %} <sw-pagination :page="optionPage" :limit="10" :total="optionTotal" :total-visible="7" :steps="[10]" @page-change="onOptionSearchPageChange" /> {% endblock %} </template> </sw-grid> {% endblock %} {% block sw_property_search_empty %} <sw-empty-state v-else :absolute="false" :title="$tc('sw-property-search.noPropertiesFound')" :subline="$tc('sw-property-search.noPropertiesFoundDescription')" > <template #icon> {% block sw_property_search_empty_image %} <img :src="assetFilter('/administration/static/img/empty-states/products-empty-state.svg')" :alt="$tc('sw-property-search.noPropertiesFound')" > {% endblock %} </template> </sw-empty-state> {% endblock %} </div> {% endblock %} {% block sw_property_search_inner_after %}{% endblock %} </div> {% endblock %}`,{Component:n}=Shopware,{Criteria:o}=Shopware.Data,p=Shopware.Utils;n.register("sw-property-search",{template:a,inject:["repositoryFactory"],emits:["option-select"],props:{collapsible:{type:Boolean,required:!1,default:!0},overlay:{type:Boolean,required:!1,default:!0},options:{type:Array,required:!0,default(){return[]}},disabled:{type:Boolean,required:!1,default:!1},isAddOnly:{type:Boolean,required:!1,default:!1}},data(){return{groups:[],groupOptions:[],displayTree:!1,preventSelection:!1,displaySearch:!1,currentGroup:null,searchTerm:"",groupPage:1,optionPage:1,groupTotal:1,optionTotal:1,prevSearchTerm:""}},computed:{swPropertySearchClasses(){return{overlay:this.overlay}},propertyGroupRepository(){return this.repositoryFactory.create("property_group")},propertyGroupCriteria(){const e=new o(this.groupPage,10);return e.addSorting(o.sort("name","ASC",!1)),e.setTotalCountMode(1),e},propertyGroupOptionRepository(){return this.repositoryFactory.create("property_group_option")},propertyGroupOptionCriteria(){const e=new o(this.optionPage,10);return e.addSorting(o.sort("name","ASC")),this.currentGroup&&e.addFilter(o.equals("groupId",this.currentGroup.id)),this.searchTerm.length>0&&(this.searchTerm.trim().split(" ").forEach(t=>{t.trim().length!==0&&(e.addQuery(o.contains("name",t.trim()),1e3),e.addQuery(o.contains("group.name",t.trim()),800))}),e.addAssociation("group")),e},assetFilter(){return Shopware.Filter.getByName("asset")}},watch:{isAddOnly(){this.addOptionCount()}},created(){this.createdComponent()},unmounted(){this.destroyedComponent()},methods:{createdComponent(){this.collapsible?(document.addEventListener("click",this.closeOnClickOutside),document.addEventListener("keyup",this.closeOnClickOutside)):this.showTree()},destroyedComponent(){this.collapsible&&(document.removeEventListener("click",this.closeOnClickOutside),document.removeEventListener("keyup",this.closeOnClickOutside))},selectGroup(e){if(this.$refs.groupGrid.selectAll(!1),this.$refs.groupGrid.selectItem(!0,e),!e){this.groupOptions=[];return}this.currentGroup=e,this.optionPage=1,this.loadOptions()},onOptionSelect(e,t,r){this.preventSelection||(this.$emit("option-select",{item:t,selected:r}),this.addOptionCount())},onGroupPageChange(e){this.groupPage=e.page,this.loadGroups()},onOptionPageChange(e){this.optionPage=e.page,this.loadOptions()},onOptionSearchPageChange(e){this.optionPage=e.page,this.showSearch()},onFocusSearch(){if(this.searchTerm.length>0){this.showSearch();return}this.showTree()},onSearchOptions:p.debounce(function(t){const r=t||"";this.prevSearchTerm!==r&&(this.prevSearchTerm=r,this.searchTerm=r,this.optionPage=1,this.onFocusSearch())},400),closeOnClickOutside(e){if(e.type==="keyup"&&e.key.toLowerCase()!=="tab")return;e.target.closest(".sw-property-search")===null&&(this.displaySearch=!1,this.displayTree=!1)},selectOptions(e){e&&(e.selectAll(!1),this.preventSelection=!0,this.options.forEach(t=>{e.selectItem(!t.isDeleted,t)}),this.preventSelection=!1)},showSearch(){this.currentGroup=null,this.propertyGroupOptionRepository.search(this.propertyGroupOptionCriteria,Shopware.Context.api).then(e=>{this.groupOptions=e,this.optionTotal=e.total,this.displaySearch=!0,this.displayTree=!1}).then(()=>{this.$refs.optionSearchGrid&&this.selectOptions(this.$refs.optionSearchGrid)}).catch(e=>{this.createNotificationError({message:e.message})})},showTree(){this.displaySearch=!1,this.displayTree=!0,this.groupPage=1,this.optionPage=1,this.groupOptions=[],this.loadGroups()},loadGroups(){this.propertyGroupRepository.search(this.propertyGroupCriteria,Shopware.Context.api).then(e=>{this.groups=e,this.groupTotal=e.total,this.addOptionCount()})},loadOptions(){this.propertyGroupOptionRepository.search(this.propertyGroupOptionCriteria,Shopware.Context.api).then(e=>{this.groupOptions=e,this.optionTotal=e.total,this.selectOptions(this.$refs.optionGrid)})},sortOptions(e){e.length>0&&e[0].group.sortingType==="alphanumeric"?e.sort((s,i)=>s.translated.name.localeCompare(i.translated.name,void 0,{numeric:!0})):e.sort((s,i)=>s.position-i.position);const t=(this.optionPage-1)*10,r=t+10;return e=e.slice(t,r),e},refreshSelection(){this.displayTree?this.selectOptions(this.$refs.optionGrid):this.displaySearch&&this.selectOptions(this.$refs.optionSearchGrid)},addOptionCount(){this.groups.forEach(e=>{const t=this.options.filter(r=>r.groupId===e.id&&!r.isDeleted);e.optionCount=t.length})}}});
