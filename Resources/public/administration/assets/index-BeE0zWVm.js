const c=`{% block sw_cms_section %} <div class="sw-cms-section" :class="[sectionClasses, customSectionClass, sectionTypeClass]" > {% block sw_cms_section_actions %} <sw-cms-section-actions :section="section" :disabled="disabled || undefined" /> {% endblock %} <div class="sw-cms-section__wrapper" :style="sectionStyles" > <sw-cms-visibility-toggle v-if="isVisible" :text="toggleButtonText" :is-collapsed="isCollapsed" :class="expandedClass" @toggle="toggleVisibility" /> {% block sw_cms_section_sidebar %} <div v-if="isSideBarType && (!isCollapsed || !isVisible)" class="sw-cms-section__sidebar" :class="sectionSidebarClasses" > <template v-if="sideBarEmpty"> {% block sw_cms_section_sidebar_block_empty %} <div v-droppable="{ dragGroup: 'cms-stage', data: getDropData(blockCount, 'sidebar') }" class="sw-cms-section__empty-stage" role="button" tabindex="0" @click="openBlockBar" @keydown.enter="openBlockBar" > <sw-icon name="regular-plus-circle" size="24" /> <p>{{ $tc('sw-cms.detail.label.addBlocks') }}</p> </div> {% endblock %} </template> <template v-else> {% block sw_cms_section_sidebar_add_first_block %} <sw-cms-stage-add-block v-if="isSystemDefaultLanguage && !disabled" :key="0" v-droppable="{ dragGroup: 'cms-stage', data: getDropData(0, 'sidebar') }" @stage-block-add="onAddSectionBlock" /> {% endblock %} <template v-for="(block, index) in sideBarBlocks" :key="block.id" > {% block sw_cms_section_sidebar_block %} <sw-cms-block class="sw-cms-stage-block" :block="block" :disabled="disabled || undefined" :active="selectedBlock !== null && selectedBlock.id === block.id" :has-errors="hasBlockErrors(block)" @block-overlay-click="onBlockSelection(block)" > {% block sw_cms_section_sidebar_block_component %} <component :is="\`sw-cms-block-\${block.type}\`"> {% block sw_cms_section_content_block_slot %} <template v-for="el in block.slots" :key="el.id" #[el.slot] > <sw-cms-slot :element="el" :disabled="disabled || undefined" :active="selectedBlock !== null && selectedBlock.id === block.id" /> </template> {% endblock %} </component> {% endblock %} </sw-cms-block> {% endblock %} {% block sw_cms_section_add_sidebar_block %} <sw-cms-stage-add-block v-if="isSystemDefaultLanguage && !disabled" :key="index + 1" v-droppable="{ dragGroup: 'cms-stage', data: getDropData(block.position + 1, 'sidebar') }" @stage-block-add="onAddSectionBlock" /> {% endblock %} </template> </template> </div> {% endblock %} {% block sw_cms_section_content %} <div v-if="!isCollapsed || !isVisible" class="sw-cms-section__content" :class="sectionContentClasses" > <template v-if="mainContentEmpty"> {% block sw_cms_section_content_block_empty %} <div v-droppable="{ dragGroup: 'cms-stage', data: getDropData(blockCount, 'main') }" class="sw-cms-section__empty-stage" role="button" tabindex="0" @click="openBlockBar" @keydown.enter="openBlockBar" > <sw-icon name="regular-plus-circle" size="24" /> <p>{{ $tc('sw-cms.detail.label.addBlocks') }}</p> </div> {% endblock %} </template> <template v-else> {% block sw_cms_section_content_add_first_block %} <sw-cms-stage-add-block v-if="isSystemDefaultLanguage && !disabled" :key="0" v-droppable="{ dragGroup: 'cms-stage', data: getDropData(0) }" @stage-block-add="onAddSectionBlock" /> {% endblock %} <template v-for="(block, index) in mainContentBlocks" :key="block.id" > {% block sw_cms_section_content_block %} <sw-cms-block class="sw-cms-stage-block" :block="block" :disabled="disabled || undefined" :active="selectedBlock !== null && selectedBlock.id === block.id" :has-errors="hasBlockErrors(block)" @block-overlay-click="onBlockSelection(block)" > {% block sw_cms_section_content_block_component %} <component :is="\`sw-cms-block-\${block.type}\`" :block="block" > {% block sw_cms_section_content_block_component_slot %} <template v-for="el in block.slots" :key="el.id" #[el.slot] > <sw-cms-slot :element="el" :disabled="disabled || undefined" :active="selectedBlock !== null && selectedBlock.id === block.id" /> </template> {% endblock %} </component> {% endblock %} </sw-cms-block> {% endblock %} {% block sw_cms_section_add_content_block %} <sw-cms-stage-add-block v-if="isSystemDefaultLanguage && !disabled" :key="index + 1" v-droppable="{ dragGroup: 'cms-stage', data: getDropData(block.position + 1) }" @stage-block-add="onAddSectionBlock" /> {% endblock %} </template> </template> </div> {% endblock %} </div> </div> {% endblock %}`,{Component:l,Mixin:n,Filter:a}=Shopware,{mapPropertyErrors:d}=l.getComponentHelper(),r=Shopware.Component.wrapComponentConfig({template:c,inject:["cmsService","repositoryFactory"],provide(){return{swCmsSectionEmitPageConfigOpen:this.emitPageConfigOpen.bind(this)}},emits:["page-config-open","block-duplicate"],mixins:[n.getByName("cms-state")],props:{page:{type:Object,required:!0},section:{type:Object,required:!0},active:{type:Boolean,required:!1,default:!1},disabled:{type:Boolean,required:!1,default:!1}},data(){return{isCollapsed:!0,pageSlotconfigError:null}},computed:{blockRepository(){return this.repositoryFactory.create("cms_block")},slotRepository(){return this.repositoryFactory.create("cms_slot")},sectionClasses(){return{"is--active":this.active,"is--boxed":this.section.sizingMode==="boxed"}},sectionTypeClass(){return`is--${this.section.type}`},customSectionClass(){return this.section.cssClass},sectionStyles(){let e=null;if(this.section.backgroundMedia){const s=this.section.backgroundMedia.url;this.section.backgroundMedia.id?e=`url("${s}")`:e=`url('${this.assetFilter(s)}')`}return{"background-color":this.section.backgroundColor||"transparent","background-image":e,"background-size":this.section.backgroundMediaMode}},sectionSidebarClasses(){return{"is--empty":this.sideBarEmpty,"is--hidden":this.sectionMobileAndHidden,"is--expanded":this.expandedClass}},sectionMobileAndHidden(){return Shopware.Store.get("cmsPage").currentCmsDeviceView==="mobile"&&this.section.mobileBehavior==="hidden"},isSideBarType(){return this.section.type==="sidebar"},sideBarEmpty(){return this.sideBarBlocks.length===0},blockCount(){return this.section.blocks.length},mainContentEmpty(){return this.mainContentBlocks.length===0},sideBarBlocks(){return this.section.blocks.filter(s=>this.blockTypeExists(s.type)&&s.sectionPosition==="sidebar").sort((s,t)=>s.position-t.position)},mainContentBlocks(){return this.section.blocks.filter(s=>this.blockTypeExists(s.type)&&s.sectionPosition!=="sidebar").sort((s,t)=>s.position-t.position)},assetFilter(){return a.getByName("asset")},blockTypes(){return Object.keys(this.cmsService.getCmsBlockRegistry())},isVisible(){const e=Shopware.Store.get("cmsPage").currentCmsDeviceView,s=this.section.visibility;return e==="desktop"&&!s.desktop||e==="tablet-landscape"&&!s.tablet||e==="mobile"&&!s.mobile},toggleButtonText(){return this.$tc("sw-cms.sidebar.contentMenu.visibilitySectionTextButton",this.isCollapsed?0:1)},expandedClass(){return{"is--expanded":this.isVisible&&!this.isCollapsed}},sectionContentClasses(){return{"is--empty":this.mainContentEmpty,"is--expanded":this.isVisible&&!this.isCollapsed}},...d("page",["slots","slotConfig"])},created(){this.createdComponent()},methods:{createdComponent(){this.section.backgroundMediaMode||(this.section.backgroundMediaMode="cover")},openBlockBar(){this.disabled||this.$emit("page-config-open","blocks")},emitPageConfigOpen(e){this.$emit("page-config-open",e)},onAddSectionBlock(){this.openBlockBar()},onBlockSelection(e){Shopware.Store.get("cmsPage").setBlock(e),this.$emit("page-config-open","itemConfig")},onBlockDuplicate(e,s){this.$emit("block-duplicate",e,s)},onBlockDelete(e){this.section.blocks.remove(e),this.selectedBlock&&this.selectedBlock.id===e&&Shopware.Store.get("cmsPage").removeSelectedBlock(),this.updateBlockPositions()},updateBlockPositions(){this.section.blocks.forEach((e,s)=>{e.position=s})},getDropData(e,s="main"){return{dropIndex:e,section:this.section,sectionPosition:s}},blockTypeExists(e){return this.blockTypes.includes(e)},hasBlockErrors(e){return[this.hasUniqueBlockErrors(e),this.hasSlotConfigErrors(e)].some(s=>s)},hasUniqueBlockErrors(e){var t,o;const s=(o=(t=this.pageSlotsError)==null?void 0:t.parameters)==null?void 0:o.elements;return s?s.some(i=>i.blockIds.includes(e.id)):!1},hasSlotConfigErrors(e){var t,o;const s=(o=(t=this.pageSlotconfigError)==null?void 0:t.parameters)==null?void 0:o.elements;return s?s.some(i=>i.blockId===e.id):!1},toggleVisibility(){this.isCollapsed=!this.isCollapsed}}});export{r as default};
