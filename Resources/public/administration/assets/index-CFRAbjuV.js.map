{"version":3,"file":"index-CFRAbjuV.js","sources":["../../../app/administration/src/module/sw-customer/page/sw-customer-list/sw-customer-list.html.twig","../../../app/administration/src/module/sw-customer/page/sw-customer-list/index.js"],"sourcesContent":["<!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n{% block sw_customer_list %}\n<sw-page class=\"sw-customer-list\">\n\n    <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n    {% block sw_customer_list_search_bar %}\n    <template #search-bar>\n        <sw-search-bar\n            initial-search-type=\"customer\"\n            :initial-search=\"term\"\n            @search=\"onSearch\"\n        />\n    </template>\n    {% endblock %}\n\n    <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n    {% block sw_customer_list_smart_bar_header %}\n    <template #smart-bar-header>\n        <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n        {% block sw_customer_list_smart_bar_header_title %}\n        <h2>\n            <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n            {% block sw_customer_list_smart_bar_header_title_text %}\n            {{ $tc('sw-customer.list.textCustomers') }}\n            {% endblock %}\n\n            <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n            {% block sw_customer_list_smart_bar_header_amount %}\n            <span\n                v-if=\"!isLoading\"\n                class=\"sw-page__smart-bar-amount\"\n            >\n                ({{ total }})\n            </span>\n            {% endblock %}\n        </h2>\n        {% endblock %}\n    </template>\n    {% endblock %}\n\n    <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n    {% block sw_customer_list_smart_bar_actions %}\n    <template #smart-bar-actions>\n        <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n        {% block sw_customer_list_smart_bar_actions_add %}\n        <sw-button\n            v-tooltip=\"{\n                message: $tc('sw-privileges.tooltip.warning'),\n                disabled: acl.can('customer.creator'),\n                showOnDisabledElements: true\n            }\"\n            class=\"sw-customer-list__button-create\"\n            variant=\"primary\"\n            :disabled=\"!acl.can('customer.creator') || undefined\"\n            :router-link=\"{ name: 'sw.customer.create' }\"\n        >\n            {{ $tc('sw-customer.list.buttonAddCustomer') }}\n        </sw-button>\n        {% endblock %}\n    </template>\n    {% endblock %}\n\n    <template #language-switch>\n        <sw-language-switch @on-change=\"onChangeLanguage\" />\n    </template>\n\n    <template #content>\n        <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n        {% block sw_customer_list_content %}\n        <div class=\"sw-customer-list__content\">\n            <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n            {% block sw_customer_list_grid %}\n            <sw-entity-listing\n                v-if=\"isLoading || (customers && entitySearchable)\"\n                ref=\"swCustomerGrid\"\n                class=\"sw-customer-list-grid\"\n                identifier=\"sw-customer-list\"\n                :items=\"customers\"\n                :columns=\"customerColumns\"\n                :repository=\"customerRepository\"\n                :sort-by=\"currentSortBy\"\n                :sort-direction=\"sortDirection\"\n                detail-route=\"sw.customer.detail\"\n                :show-selection=\"acl.can('customer.deleter')\"\n                :allow-inline-edit=\"acl.can('customer.editor') || undefined\"\n                :allow-bulk-edit=\"acl.can('customer.editor')\"\n                :is-loading=\"isLoading\"\n                :disable-data-fetching=\"true\"\n                @selection-change=\"updateSelection\"\n                @inline-edit-save=\"onInlineEditSave\"\n                @page-change=\"onPageChange\"\n                @column-sort=\"onSortColumn\"\n                @bulk-edit-modal-open=\"onBulkEditModalOpen\"\n            >\n\n                <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n                {% block sw_customer_list_grid_columns %}\n\n                <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n                {% block sw_product_list_grid_columns_name_preview %}\n                <template #preview-name=\"{ item, compact }\">\n                    <sw-avatar\n                        :size=\"compact ? '32px' : '48px'\"\n                        :source-context=\"item\"\n                        :name=\"item.name\"\n                    />\n                </template>\n                {% endblock %}\n\n                <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n                {% block sw_customer_list_grid_columns_name %}\n                <template #column-name=\"{ item, compact, isInlineEdit }\">\n\n                    <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n                    {% block sw_customer_list_grid_inline_edit_name %}\n                    <template v-if=\"isInlineEdit\">\n                        <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n                        {% block sw_customer_list_grid_inline_edit_name %}\n                        <sw-text-field\n                            v-model:value=\"item.name\"\n                            name=\"sw-field--item-name\"\n                            class=\"sw-customer-list__inline-edit-name\"\n                            :size=\"compact ? 'small' : 'default'\"\n                        />\n                        {% endblock %}\n\n                    </template>\n                    {% endblock %}\n\n                    <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n                    {% block sw_customer_list_grid_columns_name_link %}\n                    <router-link\n                        v-else\n                        :to=\"{ name: 'sw.customer.detail', params: { id: item.id }, query: { edit: false } }\"\n                    >\n                        {{ item.name }}\n                    </router-link>\n                    {% endblock %}\n\n                    <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n                    {% block sw_customer_list_grid_columns_name_guest_label %}\n                    <sw-label\n                        v-if=\"!isInlineEdit && item.guest\"\n                        appearance=\"pill\"\n                        size=\"small\"\n                        class=\"sw-customer-list__metadata-customer-guest-label\"\n                    >\n                        {{ $tc('sw-customer.list.columnNameGuestLabel') }}\n                    </sw-label>\n                    {% endblock %}\n\n                    <sw-label\n                        v-if=\"item.createdById\"\n                        appearance=\"pill\"\n                        size=\"small\"\n                        class=\"sw-customer-list__created-by-admin-label\"\n                    >\n                        {{ $tc('sw-customer.list.labelCreatedByAdmin') }}\n                    </sw-label>\n                </template>\n                {% endblock %}\n                {% endblock %}\n\n                <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n                {% block sw_customer_list_grid_columns_group %}\n                <template #column-group=\"{ item, compact, isInlineEdit }\">\n                    <sw-label\n                        v-if=\"item.requestedGroup\"\n                        class=\"sw-customer-list__requested-group-label\"\n                        variant=\"warning\"\n                        appearance=\"pill\"\n                    >\n                        {{ $tc('sw-customer.list.columnGroupRequested') }} {{ item.requestedGroup.translated.name }}\n                    </sw-label>\n                    <sw-label\n                        v-else\n                        size=\"default\"\n                        appearance=\"pill\"\n                    >\n                        {{ item.group.translated.name }}\n                    </sw-label>\n                </template>\n                {% endblock %}\n\n                {% block sw_product_list_grid_columns_email_preview %}\n                <template #column-email=\"{ item }\">\n                    {{ emailIdnFilter(item.email) }}\n                </template>\n                {% endblock %}\n\n                <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n                {% block sw_customer_list_grid_columns_boundSalesChannel %}\n                <template #column-boundSalesChannelId=\"{ item }\">\n                    {{ item.boundSalesChannelId ? item.boundSalesChannel.translated.name : $tc('sw-customer.list.emptyBoundSalesChannel') }}\n                </template>\n                {% endblock %}\n\n                <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n                {% block sw_customer_list_grid_columns_active %}\n                <template #column-active=\"{ item, isInlineEdit }\">\n                    <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n                    {% block sw_customer_list_grid_columns_active_inline_edit %}\n                    <template v-if=\"isInlineEdit\">\n                        <sw-checkbox-field\n                            v-model:value=\"item.active\"\n                            name=\"sw-field--item-active\"\n                        />\n                    </template>\n                    {% endblock %}\n\n                    <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n                    {% block sw_customer_list_grid_columns_active_content %}\n                    <template v-else>\n                        <sw-icon\n                            v-if=\"item.active\"\n                            name=\"regular-checkmark-xs\"\n                            small\n                            class=\"is--active\"\n                        />\n                        <sw-icon\n                            v-else\n                            name=\"regular-times-s\"\n                            small\n                            class=\"is--inactive\"\n                        />\n                    </template>\n                    {% endblock %}\n                </template>\n                {% endblock %}\n\n                <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n                {% block sw_customer_list_grid_columns_actions %}\n                <template #actions=\"{ item }\">\n                    <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n                    {% block sw_customer_list_grid_columns_actions_view %}\n                    <sw-context-menu-item\n                        class=\"sw-customer-list__view-action\"\n                        :router-link=\"{ name: 'sw.customer.detail', params: { id: item.id }, query: { edit: false } }\"\n                    >\n                        {{ $tc('sw-customer.list.contextMenuView') }}\n                    </sw-context-menu-item>\n                    {% endblock %}\n\n                    <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n                    {% block sw_customer_list_grid_columns_actions_edit %}\n                    <sw-context-menu-item\n                        class=\"sw-customer-list__edit-action\"\n                        :disabled=\"!acl.can('customer.editor') || undefined\"\n                        :router-link=\"{ name: 'sw.customer.detail.base', params: { id: item.id }, query: { edit: true } }\"\n                    >\n                        {{ $tc('sw-customer.list.contextMenuEdit') }}\n                    </sw-context-menu-item>\n                    {% endblock %}\n\n                    <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n                    {% block sw_customer_list_grid_columns_actions_delete %}\n                    <sw-context-menu-item\n                        class=\"sw-customer-list__delete-action\"\n                        variant=\"danger\"\n                        :disabled=\"!acl.can('customer.deleter') || undefined\"\n                        @click=\"onDelete(item.id)\"\n                    >\n                        {{ $tc('sw-customer.list.contextMenuDelete') }}\n                    </sw-context-menu-item>\n                    {% endblock %}\n                </template>\n                {% endblock %}\n\n                <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n                {% block sw_customer_list_grid_action_modals %}\n                <template #action-modals=\"{ item }\">\n\n                    <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n                    {% block sw_customer_list_delete_modal %}\n                    <sw-modal\n                        v-if=\"showDeleteModal === item.id\"\n                        :title=\"$tc('global.default.warning')\"\n                        variant=\"small\"\n                        @modal-close=\"onCloseDeleteModal\"\n                    >\n\n                        <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n                        {% block sw_customer_list_delete_modal_confirm_delete_text %}\n                        <p class=\"sw-customer-list__confirm-delete-text\">\n                            {{ $tc('sw-customer.list.textDeleteConfirm', 0, { name: `${item.name}` }) }}\n                        </p>\n                        {% endblock %}\n\n                        <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n                        {% block sw_customer_list_delete_modal_footer %}\n                        <template #modal-footer>\n\n                            <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n                            {% block sw_customer_list_delete_modal_cancel %}\n                            <sw-button\n                                size=\"small\"\n                                @click=\"onCloseDeleteModal\"\n                            >\n                                {{ $tc('global.default.cancel') }}\n                            </sw-button>\n                            {% endblock %}\n\n                            <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n                            {% block sw_customer_list_delete_modal_confirm %}\n                            <sw-button\n                                variant=\"danger\"\n                                size=\"small\"\n                                @click=\"onConfirmDelete(item.id)\"\n                            >\n                                {{ $tc('sw-customer.list.buttonDelete') }}\n                            </sw-button>\n                            {% endblock %}\n                        </template>\n                        {% endblock %}\n                    </sw-modal>\n                    {% endblock %}\n                </template>\n                {% endblock %}\n\n                <template #pagination>\n                    <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n                    {% block sw_order_list_grid_pagination %}\n                    <sw-pagination\n                        :page=\"page\"\n                        :limit=\"limit\"\n                        :total=\"total\"\n                        :total-visible=\"7\"\n                        @page-change=\"onPageChange\"\n                    />\n                    {% endblock %}\n                </template>\n\n                <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n                {% block sw_customer_list_bulk_edit_modal %}\n                <template\n                    #bulk-edit-modal=\"{ selection }\"\n                >\n                    <sw-bulk-edit-modal\n                        v-if=\"showBulkEditModal\"\n                        ref=\"bulkEditModal\"\n                        class=\"sw-customer-bulk-edit-modal\"\n                        :selection=\"selection\"\n                        :bulk-grid-edit-columns=\"customerColumns\"\n                        @edit-items=\"onBulkEditItems\"\n                        @modal-close=\"onBulkEditModalClose\"\n                    >\n                        <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n                        {% block sw_customer_list_bulk_edit_grid_columns_name %}\n                        <template #column-name=\"{ item }\">\n                            <router-link\n                                :to=\"{ name: 'sw.customer.detail', params: { id: item.id } }\"\n                                target=\"_blank\"\n                                rel=\"noreferrer noopener\"\n                            >\n                                {{ item.name }}\n                            </router-link>\n                        </template>\n                        {% endblock %}\n\n                        <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n                        {% block sw_customer_list_bulk_edit_grid_columns_group %}\n                        <template #column-group=\"{ item }\">\n                            <sw-label\n                                v-if=\"item.requestedGroup\"\n                                class=\"sw-customer-list__requested-group-label\"\n                                variant=\"warning\"\n                                appearance=\"pill\"\n                            >\n                                {{ $tc('sw-customer.list.columnGroupRequested') }} {{ item.requestedGroup.translated.name }}\n                            </sw-label>\n                            <sw-label\n                                v-else\n                                size=\"default\"\n                                appearance=\"pill\"\n                            >\n                                {{ item.group.translated.name }}\n                            </sw-label>\n                        </template>\n                        {% endblock %}\n                    </sw-bulk-edit-modal>\n                </template>\n                {% endblock %}\n            </sw-entity-listing>\n            {% endblock %}\n\n            <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n            {% block sw_customer_list_empty_state %}\n            <template v-if=\"!isLoading && !total\">\n                <sw-empty-state\n                    v-if=\"filterCriteria.length || isValidTerm(term)\"\n                    :title=\"$tc('sw-empty-state.messageNoResultTitle')\"\n                >\n                    <template #icon>\n                        <img\n                            :src=\"assetFilter('/administration/static/img/empty-states/customer-empty-state.svg')\"\n                            :alt=\"$tc('sw-empty-state.messageNoResultTitle')\"\n                        >\n                    </template>\n\n                    <template #default>\n                        {{ $tc('sw-empty-state.messageNoResultSublineBefore') }}\n                        <router-link\n                            class=\"sw-empty-state__description-link\"\n                            :to=\"{ name: 'sw.profile.index.searchPreferences' }\"\n                        >\n                            {{ $tc('sw-empty-state.messageNoResultSublineLink') }}\n                        </router-link>\n                        {{ $tc('sw-empty-state.messageNoResultSublineAfter') }}\n                    </template>\n                </sw-empty-state>\n                <sw-empty-state\n                    v-else\n                    :title=\"$tc('sw-customer.list.messageEmpty')\"\n                >\n                    <template #icon>\n                        <img\n                            :src=\"assetFilter('/administration/static/img/empty-states/customer-empty-state.svg')\"\n                            :alt=\"$tc('sw-customer.list.messageEmpty')\"\n                        >\n                    </template>\n                </sw-empty-state>\n            </template>\n            {% endblock %}\n        </div>\n        {% endblock %}\n    </template>\n\n    <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n    {% block sw_customer_list_sidebar %}\n    <template #sidebar>\n        <sw-sidebar class=\"sw-customer-list__sidebar\">\n            <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n            {% block sw_customer_list_sidebar_refresh %}\n            <sw-sidebar-item\n                icon=\"regular-undo\"\n                :title=\"$tc('sw-customer.list.titleSidebarItemRefresh')\"\n                @click=\"onRefresh\"\n            />\n            {% endblock %}\n\n            <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n            {% block sw_customer_list_sidebar_filter %}\n            <sw-sidebar-filter-panel\n                entity=\"customer\"\n                :store-key=\"storeKey\"\n                :filters=\"listFilters\"\n                :defaults=\"defaultFilters\"\n                :active-filter-number=\"activeFilterNumber\"\n                @criteria-changed=\"updateCriteria\"\n            />\n            {% endblock %}\n        </sw-sidebar>\n    </template>\n    {% endblock %}\n</sw-page>\n{% endblock %}\n","import template from './sw-customer-list.html.twig';\nimport './sw-customer-list.scss';\n\n/**\n * @package checkout\n */\n\nconst { Mixin } = Cicada;\nconst { Criteria } = Cicada.Data;\n\n// eslint-disable-next-line sw-deprecation-rules/private-feature-declarations\nexport default {\n    template,\n\n    compatConfig: Cicada.compatConfig,\n\n    inject: [\n        'repositoryFactory',\n        'acl',\n        'filterFactory',\n        'feature',\n    ],\n\n    mixins: [\n        Mixin.getByName('notification'),\n        Mixin.getByName('salutation'),\n        Mixin.getByName('listing'),\n    ],\n\n    data() {\n        return {\n            customers: null,\n            sortBy: 'customerNumber',\n            naturalSorting: true,\n            sortDirection: 'DESC',\n            isLoading: false,\n            showDeleteModal: false,\n            filterLoading: false,\n            availableAffiliateCodes: [],\n            availableCampaignCodes: [],\n            filterCriteria: [],\n            defaultFilters: [\n                'customer-number-filter',\n                'affiliate-code-filter',\n                'campaign-code-filter',\n                'customer-group-request-filter',\n                'salutation-filter',\n                'account-status-filter',\n                'default-payment-method-filter',\n                'group-filter',\n                'billing-address-country-filter',\n                'shipping-address-country-filter',\n                'tags-filter',\n            ],\n            storeKey: 'grid.filter.customer',\n            activeFilterNumber: 0,\n            searchConfigEntity: 'customer',\n            showBulkEditModal: false,\n        };\n    },\n\n    metaInfo() {\n        return {\n            title: this.$createTitle(),\n        };\n    },\n\n    computed: {\n        customerRepository() {\n            return this.repositoryFactory.create('customer');\n        },\n\n        customerColumns() {\n            return this.getCustomerColumns();\n        },\n\n        defaultCriteria() {\n            const defaultCriteria = new Criteria(this.page, this.limit);\n            // eslint-disable-next-line vue/no-side-effects-in-computed-properties\n            this.naturalSorting = this.sortBy === 'customerNumber';\n\n            defaultCriteria.setTerm(this.term);\n\n            this.sortBy.split(',').forEach((sortBy) => {\n                defaultCriteria.addSorting(Criteria.sort(sortBy, this.sortDirection, this.naturalSorting));\n            });\n\n            defaultCriteria\n                .addAssociation('defaultBillingAddress')\n                .addAssociation('group')\n                .addAssociation('requestedGroup')\n                .addAssociation('boundSalesChannel');\n\n            this.filterCriteria.forEach((filter) => {\n                defaultCriteria.addFilter(filter);\n            });\n\n            return defaultCriteria;\n        },\n\n        filterSelectCriteria() {\n            const criteria = new Criteria(1, 1);\n            criteria.addFilter(\n                Criteria.not('AND', [\n                    Criteria.equals('affiliateCode', null),\n                    Criteria.equals('campaignCode', null),\n                ]),\n            );\n            criteria.addAggregation(Criteria.terms('affiliateCodes', 'affiliateCode', null, null, null));\n            criteria.addAggregation(Criteria.terms('campaignCodes', 'campaignCode', null, null, null));\n\n            return criteria;\n        },\n\n        listFilterOptions() {\n            const options = {\n                'customer-number-filter': {\n                    property: 'customerNumber',\n                    type: 'string-filter',\n                    label: this.$tc('sw-customer.filter.customerNumber.label'),\n                    placeholder: this.$tc('sw-customer.filter.customerNumber.placeholder'),\n                    valueProperty: 'key',\n                    labelProperty: 'key',\n                    criteriaFilterType: 'equals',\n                },\n                'affiliate-code-filter': {\n                    property: 'affiliateCode',\n                    type: 'multi-select-filter',\n                    label: this.$tc('sw-customer.filter.affiliateCode.label'),\n                    placeholder: this.$tc('sw-customer.filter.affiliateCode.placeholder'),\n                    valueProperty: 'key',\n                    labelProperty: 'key',\n                    options: this.availableAffiliateCodes,\n                },\n                'campaign-code-filter': {\n                    property: 'campaignCode',\n                    type: 'multi-select-filter',\n                    label: this.$tc('sw-customer.filter.campaignCode.label'),\n                    placeholder: this.$tc('sw-customer.filter.campaignCode.placeholder'),\n                    valueProperty: 'key',\n                    labelProperty: 'key',\n                    options: this.availableCampaignCodes,\n                },\n                'customer-group-request-filter': {\n                    property: 'requestedGroupId',\n                    type: 'existence-filter',\n                    label: this.$tc('sw-customer.filter.customerGroupRequest.label'),\n                    placeholder: this.$tc('sw-customer.filter.customerGroupRequest.placeholder'),\n                    optionHasCriteria: this.$tc('sw-customer.filter.customerGroupRequest.textHasCriteria'),\n                    optionNoCriteria: this.$tc('sw-customer.filter.customerGroupRequest.textNoCriteria'),\n                },\n                'salutation-filter': {\n                    property: 'salutation',\n                    label: this.$tc('sw-customer.filter.salutation.label'),\n                    placeholder: this.$tc('sw-customer.filter.salutation.placeholder'),\n                    labelProperty: 'displayName',\n                },\n                'account-status-filter': {\n                    property: 'active',\n                    label: this.$tc('sw-customer.filter.status.label'),\n                    placeholder: this.$tc('sw-customer.filter.status.placeholder'),\n                },\n                'group-filter': {\n                    property: 'group',\n                    label: this.$tc('sw-customer.filter.customerGroup.label'),\n                    placeholder: this.$tc('sw-customer.filter.customerGroup.placeholder'),\n                },\n                'billing-address-country-filter': {\n                    property: 'defaultBillingAddress.country',\n                    label: this.$tc('sw-customer.filter.billingCountry.label'),\n                    placeholder: this.$tc('sw-customer.filter.billingCountry.placeholder'),\n                },\n                'shipping-address-country-filter': {\n                    property: 'defaultShippingAddress.country',\n                    label: this.$tc('sw-customer.filter.shippingCountry.label'),\n                    placeholder: this.$tc('sw-customer.filter.shippingCountry.placeholder'),\n                },\n                'tags-filter': {\n                    property: 'tags',\n                    label: this.$tc('sw-customer.filter.tags.label'),\n                    placeholder: this.$tc('sw-customer.filter.tags.placeholder'),\n                },\n            };\n            return options;\n        },\n\n        listFilters() {\n            return this.filterFactory.create('customer', this.listFilterOptions);\n        },\n\n        assetFilter() {\n            return Cicada.Filter.getByName('asset');\n        },\n\n        emailIdnFilter() {\n            return Cicada.Filter.getByName('decode-idn-email');\n        },\n    },\n\n    watch: {\n        defaultCriteria: {\n            handler() {\n                this.getList();\n            },\n            deep: true,\n        },\n    },\n\n    created() {\n        this.createdComponent();\n    },\n\n    methods: {\n        createdComponent() {\n            return this.loadFilterValues();\n        },\n\n        onInlineEditSave(promise, customer) {\n            promise\n                .then(() => {\n                    this.createNotificationSuccess({\n                        message: this.$tc('sw-customer.detail.messageSaveSuccess', 0, { name: this.salutation(customer) }),\n                    });\n                })\n                .catch(() => {\n                    this.getList();\n                    this.createNotificationError({\n                        message: this.$tc('sw-customer.detail.messageSaveError'),\n                    });\n                });\n        },\n\n        async getList() {\n            this.isLoading = true;\n\n            const criteria = await Cicada.Service('filterService').mergeWithStoredFilters(\n                this.storeKey,\n                this.defaultCriteria,\n            );\n\n            const newCriteria = await this.addQueryScores(this.term, criteria);\n\n            this.activeFilterNumber = criteria.filters.length;\n\n            if (!this.entitySearchable) {\n                this.isLoading = false;\n                this.total = 0;\n\n                return;\n            }\n\n            if (this.freshSearchTerm) {\n                newCriteria.resetSorting();\n            }\n\n            try {\n                const items = await this.customerRepository.search(newCriteria);\n\n                this.total = items.total;\n                this.customers = items;\n                this.isLoading = false;\n                this.selection = {};\n            } catch {\n                this.isLoading = false;\n            }\n        },\n\n        onDelete(id) {\n            this.showDeleteModal = id;\n        },\n\n        onCloseDeleteModal() {\n            this.showDeleteModal = false;\n        },\n\n        onConfirmDelete(id) {\n            this.showDeleteModal = false;\n\n            return this.customerRepository.delete(id).then(() => {\n                this.getList();\n            });\n        },\n\n        async onChangeLanguage() {\n            await this.createdComponent();\n            await this.getList();\n        },\n\n        getCustomerColumns() {\n            const columns = [\n                {\n                    property: 'name',\n                    dataIndex: 'name',\n                    inlineEdit: 'string',\n                    label: 'sw-customer.list.columnName',\n                    routerLink: 'sw.customer.detail',\n                    width: '250px',\n                    allowResize: true,\n                    primary: true,\n                    useCustomSort: true,\n                },\n                {\n                    property: 'company',\n                    label: 'sw-customer.list.columnCompany',\n                    allowResize: true,\n                    visible: false,\n                    useCustomSort: true,\n                },\n                {\n                    property: 'customerNumber',\n                    dataIndex: 'customerNumber',\n                    naturalSorting: true,\n                    label: 'sw-customer.list.columnCustomerNumber',\n                    allowResize: true,\n                    inlineEdit: 'string',\n                    align: 'right',\n                    useCustomSort: true,\n                },\n                {\n                    property: 'group',\n                    dataIndex: 'group',\n                    naturalSorting: true,\n                    label: 'sw-customer.list.columnGroup',\n                    allowResize: true,\n                    inlineEdit: 'string',\n                    align: 'right',\n                    useCustomSort: true,\n                },\n                {\n                    property: 'accountType',\n                    label: 'sw-customer.list.columnAccountType',\n                    allowResize: false,\n                    useCustomSort: true,\n                },\n                {\n                    property: 'email',\n                    inlineEdit: 'string',\n                    label: 'sw-customer.list.columnEmail',\n                    allowResize: true,\n                    useCustomSort: true,\n                },\n                {\n                    property: 'defaultBillingAddress.street',\n                    label: 'sw-customer.list.columnStreet',\n                    allowResize: true,\n                    visible: false,\n                    useCustomSort: true,\n                },\n                {\n                    property: 'defaultBillingAddress.zipcode',\n                    label: 'sw-customer.list.columnZip',\n                    align: 'right',\n                    allowResize: true,\n                    visible: false,\n                    useCustomSort: true,\n                },\n                {\n                    property: 'defaultBillingAddress.city',\n                    label: 'sw-customer.list.columnCity',\n                    allowResize: true,\n                    visible: false,\n                    useCustomSort: true,\n                },\n                {\n                    property: 'affiliateCode',\n                    inlineEdit: 'string',\n                    label: 'sw-customer.list.columnAffiliateCode',\n                    allowResize: true,\n                    visible: false,\n                    useCustomSort: true,\n                },\n                {\n                    property: 'campaignCode',\n                    inlineEdit: 'string',\n                    label: 'sw-customer.list.columnCampaignCode',\n                    allowResize: true,\n                    visible: false,\n                    useCustomSort: true,\n                },\n                {\n                    property: 'boundSalesChannelId',\n                    label: 'sw-customer.list.columnBoundSalesChannel',\n                    allowResize: true,\n                    visible: true,\n                    useCustomSort: true,\n                },\n                {\n                    property: 'active',\n                    inlineEdit: 'boolean',\n                    label: 'sw-customer.list.columnActive',\n                    allowResize: false,\n                    visible: true,\n                    useCustomSort: true,\n                },\n            ];\n\n            return columns;\n        },\n\n        loadFilterValues() {\n            this.filterLoading = true;\n\n            return this.customerRepository\n                .search(this.filterSelectCriteria)\n                .then(({ aggregations }) => {\n                    this.availableAffiliateCodes = aggregations?.affiliateCodes?.buckets ?? [];\n                    this.availableCampaignCodes = aggregations?.campaignCodes?.buckets ?? [];\n                    this.filterLoading = false;\n\n                    return aggregations;\n                })\n                .catch(() => {\n                    this.filterLoading = false;\n                });\n        },\n\n        updateCriteria(criteria) {\n            this.page = 1;\n            this.filterCriteria = criteria;\n        },\n\n        async onBulkEditItems() {\n            await this.$nextTick();\n            this.$router.push({ name: 'sw.bulk.edit.customer' });\n        },\n\n        onBulkEditModalOpen() {\n            this.showBulkEditModal = true;\n        },\n\n        onBulkEditModalClose() {\n            this.showBulkEditModal = false;\n        },\n    },\n};\n"],"names":["template","Mixin","Criteria","index","defaultCriteria","sortBy","filter","criteria","promise","customer","newCriteria","items","id","aggregations","_a","_b"],"mappings":"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"}