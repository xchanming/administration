{"version":3,"file":"index-Cv4vCWKw.js","sources":["../../../app/administration/src/module/sw-customer/page/sw-customer-create/sw-customer-create.html.twig","../../../app/administration/src/module/sw-customer/page/sw-customer-create/index.js"],"sourcesContent":["{%  block sw_customer_create %}\n<sw-page class=\"sw-customer-create\">\n\n    <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n    {% block sw_customer_create_header %}\n    <template #smart-bar-header>\n        <h2>{{ salutationFilter(customer, $tc('sw-customer.general.newCustomer')) }}</h2>\n    </template>\n    {% endblock %}\n\n    <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n    {% block sw_customer_create_language_switch %}\n    <template #language-switch>\n        <sw-language-switch\n            v-tooltip=\"{ message: $tc('sw-customer.general.tooltipLanguageSwitch') }\"\n            disabled\n        />\n    </template>\n    {% endblock %}\n\n    <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n    {% block sw_customer_create_actions %}\n    <template #smart-bar-actions>\n        <sw-button-process\n            class=\"sw-customer-create__save-action\"\n            :is-loading=\"isLoading\"\n            :disabled=\"isLoading\"\n            :process-success=\"isSaveSuccessful\"\n            variant=\"primary\"\n            @update:process-success=\"saveFinish\"\n            @click.prevent=\"onSave\"\n        >\n            {{ $tc('sw-customer.detail.buttonSave') }}\n        </sw-button-process>\n    </template>\n    {% endblock %}\n\n    <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n    {% block sw_customer_create_content %}\n    <template #content>\n        <sw-card-view>\n            <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n            {% block sw_customer_create_base_form %}\n            <sw-card\n                :title=\"$tc('sw-customer.detailBase.labelAccountCard')\"\n                position-identifier=\"sw-customer-create-base-form\"\n            >\n                <sw-customer-base-form\n                    v-if=\"customer\"\n                    :is-loading=\"isLoading\"\n                    :customer=\"customer\"\n                    @sales-channel-change=\"onChangeSalesChannel\"\n                />\n            </sw-card>\n            {% endblock %}\n        </sw-card-view>\n    </template>\n    {% endblock %}\n</sw-page>\n{% endblock %}\n","import template from './sw-customer-create.html.twig';\nimport CUSTOMER from '../../constant/sw-customer.constant';\n\n/**\n * @package checkout\n */\n\nconst { CicadaError } = Cicada.Classes;\nconst { Mixin } = Cicada;\nconst { Criteria } = Cicada.Data;\n\n// eslint-disable-next-line sw-deprecation-rules/private-feature-declarations\nexport default {\n    template,\n\n    compatConfig: Cicada.compatConfig,\n\n    inject: [\n        'repositoryFactory',\n        'numberRangeService',\n        'systemConfigApiService',\n        'customerValidationService',\n    ],\n\n    mixins: [\n        Mixin.getByName('notification'),\n    ],\n\n    data() {\n        return {\n            customer: null,\n            customerNumberPreview: '',\n            isSaveSuccessful: false,\n            isLoading: false,\n        };\n    },\n\n    computed: {\n        customerRepository() {\n            return this.repositoryFactory.create('customer');\n        },\n\n        languageRepository() {\n            return this.repositoryFactory.create('language');\n        },\n\n        languageCriteria() {\n            const criteria = new Criteria();\n            criteria.setLimit(1);\n\n            if (this.customer?.salesChannelId) {\n                criteria.addFilter(Criteria.equals('salesChannelDefaultAssignments.id', this.customer.salesChannelId));\n            }\n\n            return criteria;\n        },\n\n        languageId() {\n            return this.loadLanguage(this.customer?.salesChannelId);\n        },\n\n        salutationRepository() {\n            return this.repositoryFactory.create('salutation');\n        },\n\n        salutationCriteria() {\n            const criteria = new Criteria(1, 1);\n\n            criteria.addFilter(Criteria.equals('salutationKey', 'not_specified'));\n\n            return criteria;\n        },\n\n        salutationFilter() {\n            return Cicada.Filter.getByName('salutation');\n        },\n    },\n\n    watch: {\n        'customer.salesChannelId'(salesChannelId) {\n            this.systemConfigApiService.getValues('core.systemWideLoginRegistration').then((response) => {\n                if (response['core.systemWideLoginRegistration.isCustomerBoundToSalesChannel']) {\n                    this.customer.boundSalesChannelId = salesChannelId;\n                }\n            });\n        },\n    },\n\n    created() {\n        this.createdComponent();\n    },\n\n    methods: {\n        async createdComponent() {\n            const defaultSalutationId = await this.getDefaultSalutation();\n\n            Cicada.State.commit('context/resetLanguageToDefault');\n            this.customer = this.customerRepository.create();\n            this.customer.accountType = CUSTOMER.ACCOUNT_TYPE_PRIVATE;\n            this.customer.password = '';\n            this.customer.vatIds = [];\n            this.customer.salutationId = defaultSalutationId;\n        },\n\n        saveFinish() {\n            this.isSaveSuccessful = false;\n            this.$router.push({\n                name: 'sw.customer.detail',\n                params: { id: this.customer.id },\n            });\n        },\n\n        validateEmail() {\n            const { id, email, boundSalesChannelId } = this.customer;\n\n            if (!email) {\n                return Promise.resolve({ isValid: true });\n            }\n\n            return this.customerValidationService\n                .checkCustomerEmail({\n                    id,\n                    email,\n                    boundSalesChannelId,\n                })\n                .then((emailIsValid) => {\n                    return emailIsValid;\n                })\n                .catch((exception) => {\n                    Cicada.State.dispatch('error/addApiError', {\n                        expression: `customer.${this.customer.id}.email`,\n                        error: new CicadaError(exception.response.data.errors[0]),\n                    });\n                });\n        },\n\n        async onSave() {\n            this.isLoading = true;\n\n            let hasError = false;\n            const res = await this.validateEmail();\n            if (!res || !res.isValid) {\n                hasError = true;\n            }\n\n            this.isSaveSuccessful = false;\n            let numberRangePromise = Promise.resolve();\n            if (this.customerNumberPreview === this.customer.customerNumber) {\n                numberRangePromise = this.numberRangeService\n                    .reserve('customer', this.customer.salesChannelId)\n                    .then((response) => {\n                        this.customerNumberPreview = 'reserved';\n                        this.customer.customerNumber = response.number;\n                    });\n            }\n\n            if (hasError) {\n                this.createNotificationError({\n                    message: this.$tc('sw-customer.detail.messageSaveError'),\n                });\n                this.isLoading = false;\n                return false;\n            }\n\n            const languageId = await this.languageId;\n            const context = { ...Cicada.Context.api, ...{ languageId } };\n\n            return numberRangePromise.then(() => {\n                return this.customerRepository\n                    .save(this.customer, context)\n                    .then((response) => {\n                        this.isLoading = false;\n                        this.isSaveSuccessful = true;\n\n                        return response;\n                    })\n                    .catch((exception) => {\n                        this.createNotificationError({\n                            message: this.$tc('sw-customer.detail.messageSaveError'),\n                        });\n                        this.isLoading = false;\n                        throw exception;\n                    });\n            });\n        },\n\n        onChangeSalesChannel(salesChannelId) {\n            this.customer.salesChannelId = salesChannelId;\n            this.numberRangeService.reserve('customer', salesChannelId, true).then((response) => {\n                this.customerNumberPreview = response.number;\n                this.customer.customerNumber = response.number;\n            });\n        },\n\n        async loadLanguage(salesChannelId) {\n            const languageId = Cicada.Context.api.languageId;\n\n            if (!salesChannelId) {\n                return languageId;\n            }\n\n            const res = await this.languageRepository.searchIds(this.languageCriteria);\n\n            if (!res?.data) {\n                return languageId;\n            }\n\n            return res.data[0];\n        },\n\n        async getDefaultSalutation() {\n            const res = await this.salutationRepository.searchIds(this.salutationCriteria);\n\n            return res.data?.[0];\n        },\n    },\n};\n"],"names":["template","CicadaError","Mixin","Criteria","index","criteria","_a","salesChannelId","response","defaultSalutationId","CUSTOMER","id","email","boundSalesChannelId","emailIsValid","exception","hasError","res","numberRangePromise","languageId","context"],"mappings":"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"}