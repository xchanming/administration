const a=`{% block sw_flow_rule_modal %} <sw-modal class="sw-flow-rule-modal" variant="large" :title="modalTitle" :is-loading="isLoading" :closable="false" @modal-close="onClose" > {% block sw_flow_rule_modal_tabs %} <sw-tabs default-item="detail" position-identifier="sw-flow-rule-modal" > {% block sw_flow_rule_headers %} <template #default="{ active }"> {% block sw_flow_rule_modal_tab_detail %} <sw-tabs-item class="sw-flow-rule-modal__tab-detail" v-bind="$props" name="detail" :active-tab="active" > {{ $tc('sw-flow.modals.rule.tabDetail') }} </sw-tabs-item> {% endblock %} {% block sw_flow_rule_modal_tab_rule %} <sw-tabs-item class="sw-flow-rule-modal__tab-rule" v-bind="$props" name="rule" :active-tab="active" > {{ $tc('sw-flow.modals.rule.tabRule') }} </sw-tabs-item> {% endblock %} </template> {% endblock %} {% block sw_flow_rule_modal_content %} <template #content="{ active }"> <div class="sw-flow-rule-modal__content"> {% block sw_flow_rule_modal_tab_detail_content %} <template v-if="active === 'detail' && rule"> <sw-container columns="2fr 1fr" gap="0px 32px" > {% block sw_flow_rule_modal_detail_name %} <sw-text-field v-model:value="rule.name" name="sw-field--rule-name" class="sw-flow-rule-modal__name" required :label="$tc('sw-flow.modals.rule.labelName')" :placeholder="$tc('sw-flow.modals.rule.placeholderName')" :error="ruleNameError" /> {% endblock %} {% block sw_flow_rule_modal_detail_priority %} <sw-number-field v-model:value="rule.priority" name="sw-field--rule-priority" class="sw-flow-rule-modal__priority" required :label="$tc('sw-flow.modals.rule.labelPriority')" :placeholder="$tc('sw-flow.modals.rule.placeholderPriority')" :error="rulePriorityError" /> {% endblock %} </sw-container> {% block sw_flow_rule_modal_detail_description %} <sw-textarea-field v-model:value="rule.description" name="sw-field--rule-description" class="sw-flow-rule-modal__description" :label="$tc('sw-flow.modals.rule.labelDescription')" :placeholder="$tc('sw-flow.modals.rule.placeholderDescription')" /> {% endblock %} {% block sw_flow_rule_modal_detail_type %} <sw-multi-select v-model:value="moduleTypes" name="sw-field--moduleTypes" class="sw-flow-rule-modal__type" value-property="id" label-property="name" :label="$tc('sw-flow.modals.rule.labelType')" :placeholder="$tc('sw-flow.modals.rule.placeholderType')" :options="availableModuleTypes" > <template #selection-label-property="{ item }"> {{ $tc(item.name) }} </template> <template #result-label-property="{ item }"> {{ $tc(item.name) }} </template> </sw-multi-select> {% endblock %} </template> {% endblock %} {% block sw_flow_rule_modal_tab_rule_content %} <div v-show="active === 'rule'"> {% block sw_flow_rule_modal_conditions_card %} <sw-condition-tree v-if="conditionRepository" class="sw-flow-rule-modal__rule" association-field="ruleId" :initial-conditions="conditions" :condition-repository="conditionRepository" :condition-data-provider-service="ruleConditionDataProviderService" :association-value="rule.id" :association-entity="rule" :root-condition="null" @conditions-changed="onConditionsChanged" /> {% endblock %} </div> {% endblock %} </div> </template> {% endblock %} </sw-tabs> {% endblock %} <template #modal-footer> {% block sw_flow_rule_modal_footer_cancel_button %} <sw-button class="sw-flow-rule-modal__cancel-button" size="small" @click="onClose" > {{ $tc('global.default.cancel') }} </sw-button> {% endblock %} {% block sw_flow_rule_modal_footer_save_button %} <sw-button-process class="sw-flow-rule-modal__save-button" variant="primary" size="small" :is-loading="isSaveLoading" :process-success="isSaveSuccessful" @click="onSaveRule" > {{ $tc('sw-flow.modals.rule.buttonAddRule') }} </sw-button-process> {% endblock %} </template> </sw-modal> {% endblock %}`,{Component:n,Mixin:r,Context:i,Store:d}=Shopware,{Criteria:s}=Shopware.Data,{mapPropertyErrors:c,mapState:u}=n.getComponentHelper(),p={template:a,inject:["repositoryFactory","ruleConditionDataProviderService","ruleConditionsConfigApiService","feature"],emits:["process-finish","modal-close"],mixins:[r.getByName("placeholder"),r.getByName("notification")],props:{ruleId:{type:String,required:!1,default:null}},data(){return{isLoading:!1,isSaveLoading:!1,isSaveSuccessful:!1,rule:null,conditions:null,conditionTree:null,deletedIds:[]}},computed:{modalTitle(){return this.ruleId?this.$tc("sw-flow.modals.rule.labelEditRule"):this.$tc("sw-flow.modals.rule.labelAddNewRule")},ruleRepository(){return this.repositoryFactory.create("rule")},conditionRepository(){var e,t,o,l;return this.rule?this.repositoryFactory.create((t=(e=this.rule)==null?void 0:e.conditions)==null?void 0:t.entity,(l=(o=this.rule)==null?void 0:o.conditions)==null?void 0:l.source):null},appScriptConditionRepository(){return this.repositoryFactory.create("app_script_condition")},availableModuleTypes(){return this.ruleConditionDataProviderService.getModuleTypes(e=>e)},moduleTypes:{get(){return!this.rule||!this.rule.moduleTypes?[]:this.rule.moduleTypes.types},set(e){if(e===null||e.length===0){this.rule.moduleTypes=null;return}this.rule.moduleTypes={types:e}}},scopesOfRuleAwarenessKey(){const e=`flowTrigger.${this.flow.eventName}`,t=this.ruleConditionDataProviderService.getAwarenessConfigurationByAssignmentName(e);return(t==null?void 0:t.scopes)??void 0},...u(()=>d.get("swFlow"),["flow"]),...c("rule",["name","priority"])},created(){this.createdComponent()},methods:{createdComponent(){this.isLoading=!0,this.loadConditionData().then(e=>{if(this.ruleConditionDataProviderService.addScriptConditions(e),!this.ruleId){this.isLoading=!1,this.createRule();return}this.loadRule(this.ruleId).then(()=>{this.isLoading=!1})})},loadConditionData(){const e={...i.api,languageId:Shopware.Store.get("session").languageId},t=new s(1,500);return Promise.all([this.appScriptConditionRepository.search(t,e),this.ruleConditionsConfigApiService.load()]).then(o=>o[0])},createRule(){var e;this.rule=this.ruleRepository.create(),this.conditions=(e=this.rule)==null?void 0:e.conditions,this.conditionTree=this.conditions,this.rule.flowSequences=[],this.rule.flowSequences.push({flow:{eventName:this.flow.eventName}})},loadRule(e){return this.isLoading=!0,this.conditions=null,this.ruleRepository.get(e,i.api).then(t=>{this.rule=t,this.loadConditions()})},loadConditions(e=null){const t={...i.api,inheritance:!0};if(e===null)return this.conditionRepository.search(new s(1,25),t).then(l=>this.loadConditions(l));if(e.total<=e.length)return this.conditions=e,Promise.resolve();const o=new s(e.criteria.page+1,e.criteria.limit);return e.entity==="product"&&o.addAssociation("options.group"),this.conditionRepository.search(o,e.context).then(l=>(e.push(...l),e.criteria=l.criteria,e.total=l.total,this.loadConditions(e)))},syncConditions(){return this.conditionRepository.sync(this.conditionTree,i.api).then(()=>this.deletedIds.length>0?this.conditionRepository.syncDeleted(this.deletedIds,i.api).then(()=>{this.deletedIds=[]}):Promise.resolve())},onConditionsChanged({conditions:e,deletedIds:t}){this.conditionTree=e,this.deletedIds=[...this.deletedIds,...t]},getRuleDetail(){var e;return(e=this.rule)!=null&&e.id?this.ruleRepository.get(this.rule.id).then(t=>{this.$emit("process-finish",t)}).catch(()=>{this.$emit("process-finish",null)}).finally(()=>{this.onClose()}):null},onSaveRule(){if(this.isSaveSuccessful=!1,this.isSaveLoading=!0,this.rule.isNew()){this.rule.flowSequences=[],this.rule.conditions=this.conditionTree,this.saveRule().then(()=>{Shopware.Store.get("error").resetApiErrors(),this.getRuleDetail(),this.isSaveSuccessful=!0}).catch(()=>{this.showErrorNotification()}).finally(()=>{this.isSaveLoading=!1});return}this.saveRule().then(this.syncConditions).then(()=>{Shopware.Store.get("error").resetApiErrors(),this.getRuleDetail(),this.isSaveSuccessful=!0}).catch(()=>{this.showErrorNotification()}).finally(()=>{this.isSaveLoading=!1})},saveRule(){return this.ruleRepository.save(this.rule,i.api)},showErrorNotification(){this.createNotificationError({message:this.$tc("sw-settings-rule.detail.messageSaveError",{name:this.rule.name},0)})},onClose(){this.$emit("modal-close")}}};export{p as default};
