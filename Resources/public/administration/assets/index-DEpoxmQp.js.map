{"version":3,"file":"index-DEpoxmQp.js","sources":["../../../app/administration/src/module/sw-bulk-edit/page/sw-bulk-edit-order/sw-bulk-edit-order.html.twig","../../../app/administration/src/module/sw-bulk-edit/page/sw-bulk-edit-order/index.js"],"sourcesContent":["<!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n{% block sw_bulk_edit_order %}\n<sw-page class=\"sw-bulk-edit-order\">\n    <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n    {% block sw_bulk_edit_order_search_bar %}\n    <template #search-bar>\n\n        <sw-search-bar />\n\n    </template>\n    {% endblock %}\n\n    <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n    {% block sw_bulk_edit_order_smart_bar_header %}\n    <template #smart-bar-header>\n\n        <h2>{{ $tc('sw-bulk-edit.order.textTitle', selectedIds.length, { orderTotal: selectedIds.length }) }}</h2>\n\n    </template>\n    {% endblock %}\n\n    <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n    {% block sw_bulk_edit_order_content_smart_bar_actions %}\n    <template #smart-bar-actions>\n\n        <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n        {% block sw_bulk_edit_order_actions_save %}\n        <sw-button-process\n            class=\"sw-bulk-edit-order__save-action\"\n            variant=\"primary\"\n            :is-loading=\"isLoading\"\n            :process-success=\"false\"\n            :disabled=\"isLoading || !hasChanges || undefined\"\n            @click=\"openModal\"\n        >\n            {{ $tc('sw-bulk-edit.applyChanges') }}\n        </sw-button-process>\n        {% endblock %}\n\n    </template>\n    {% endblock %}\n\n    <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n    {% block sw_bulk_edit_order_content %}\n    <template #content>\n\n        <sw-card-view\n            v-if=\"selectedIds.length > 0 && isLoadedData\"\n        >\n            <sw-card\n                v-if=\"restrictedFields.length\"\n                class=\"sw-bulk-edit-order__restricted-fields\"\n                position-identifier=\"sw-bulk-edit-order-restricted-fields\"\n            >\n                <sw-alert\n                    :title=\"$tc('sw-bulk-edit.order.alertRestrictedFields.title')\"\n                    variant=\"warning\"\n                >\n                    <span v-html=\"$tc('sw-bulk-edit.order.alertRestrictedFields.message')\"></span>\n                    <ul>\n                        <li\n                            v-for=\"(restrictedField, index) in restrictedFields\"\n                            :key=\"index\"\n                        >\n                            {{ $tc(`sw-bulk-edit.order.alertRestrictedFields.${restrictedField}`) }}\n                        </li>\n                    </ul>\n                </sw-alert>\n            </sw-card>\n\n            <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n            {% block sw_bulk_edit_order_content_order_status_card %}\n            <sw-card\n                class=\"sw-bulk-edit-order-base__status\"\n                position-identifier=\"sw-bulk-edit-order-status\"\n                :title=\"$tc('sw-bulk-edit.order.status.cardTitle')\"\n                :is-loading=\"isLoading\"\n            >\n                <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n                {% block sw_bulk_edit_order_content_order_status_section %}\n                <sw-bulk-edit-change-type-field-renderer\n                    :form-fields=\"statusFormFields\"\n                    :bulk-edit-data=\"bulkEditData\"\n                    :entity=\"order\"\n                />\n                {% endblock %}\n            </sw-card>\n            {% endblock %}\n\n            <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n            {% block sw_bulk_edit_order_content_documents %}\n            <sw-card\n                class=\"sw-bulk-edit-order-base__documents\"\n                position-identifier=\"sw-bulk-edit-order-documents\"\n                :title=\"$tc('sw-bulk-edit.order.documents.cardTitle')\"\n                :is-loading=\"isLoading\"\n            >\n                <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n                {% block sw_bulk_edit_order_content_documents_content %}\n                <sw-bulk-edit-change-type-field-renderer\n                    :form-fields=\"documentsFormFields\"\n                    :bulk-edit-data=\"bulkEditData\"\n                    :entity=\"order\"\n                    @change-value=\"onChangeDocument\"\n                />\n                {% endblock %}\n            </sw-card>\n            {% endblock %}\n\n            <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n            {% block sw_bulk_edit_order_tags_card %}\n            <sw-card\n                class=\"sw-bulk-edit-order-base__tags\"\n                position-identifier=\"sw-bulk-edit-order-tags\"\n                :title=\"$tc('sw-bulk-edit.order.tags.cardTitle')\"\n                :is-loading=\"isLoading\"\n            >\n                <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n                {% block sw_bulk_edit_order_tags %}\n                <sw-bulk-edit-change-type-field-renderer\n                    :form-fields=\"tagsFormFields\"\n                    :bulk-edit-data=\"bulkEditData\"\n                    :entity=\"order\"\n                />\n                {% endblock %}\n            </sw-card>\n            {% endblock %}\n\n            <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n            {% block sw_bulk_edit_order_custom_field_card %}\n            <sw-card\n                class=\"sw-bulk-edit-order-base__custom_fields\"\n                position-identifier=\"sw-bulk-edit-order-custom-fields\"\n                :title=\"$tc('sw-bulk-edit.order.customFields.cardTitle')\"\n                :is-loading=\"isLoading\"\n            >\n                <sw-bulk-edit-custom-fields\n                    class=\"sw-bulk-edit__custom-fields\"\n                    :sets=\"customFieldSets\"\n                    @change.self=\"onCustomFieldsChange\"\n                />\n            </sw-card>\n            {% endblock %}\n        </sw-card-view>\n\n        <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n        {% block sw_bulk_edit_order_empty_state %}\n        <sw-empty-state\n            v-if=\"selectedIds.length <= 0 && !isLoading\"\n            :title=\"$tc('sw-bulk-edit.order.messageEmptyTitle')\"\n            :subline=\"$tc('sw-bulk-edit.order.messageEmptySubline')\"\n        />\n        {% endblock %}\n\n        <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n        {% block sw_bulk_edit_order_save_modal %}\n        <router-view\n            v-slot=\"{ Component }\"\n        >\n            <component\n                :is=\"Component\"\n                :item-total=\"selectedIds.length\"\n                :is-loading=\"isLoading\"\n                :process-status=\"processStatus\"\n                :bulk-edit-data=\"bulkEditData\"\n                @modal-close=\"closeModal\"\n                @bulk-save=\"onSave\"\n            />\n        </router-view>\n        {% endblock %}\n    </template>\n    {% endblock %}\n</sw-page>\n{% endblock %}\n","import template from './sw-bulk-edit-order.html.twig';\nimport './sw-bulk-edit-order.scss';\nimport swBulkEditState from '../../state/sw-bulk-edit.state';\n\nconst { Mixin } = Cicada;\nconst { Criteria } = Cicada.Data;\nconst { types } = Cicada.Utils;\nconst { intersectionBy, chunk, uniqBy } = Cicada.Utils.array;\n\n/**\n * @package services-settings\n */\n// eslint-disable-next-line sw-deprecation-rules/private-feature-declarations\nexport default {\n    template,\n\n    compatConfig: Cicada.compatConfig,\n\n    inject: [\n        'bulkEditApiFactory',\n        'repositoryFactory',\n        'feature',\n        'orderDocumentApiService',\n    ],\n\n    mixins: [\n        Mixin.getByName('notification'),\n    ],\n\n    data() {\n        return {\n            isLoading: false,\n            isLoadedData: false,\n            bulkEditData: {},\n            isStatusSelected: false,\n            isStatusMailsSelected: false,\n            orderStatus: [],\n            transactionStatus: [],\n            deliveryStatus: [],\n            customFieldSets: [],\n            itemsPerRequest: 100,\n            processStatus: '',\n            order: {},\n        };\n    },\n\n    metaInfo() {\n        return {\n            title: this.$createTitle(),\n        };\n    },\n\n    computed: {\n        selectedIds() {\n            return Cicada.State.get('cicadaApps').selectedIds;\n        },\n\n        stateMachineStateRepository() {\n            return this.repositoryFactory.create('state_machine_state');\n        },\n\n        orderRepository() {\n            return this.repositoryFactory.create('order');\n        },\n\n        customFieldSetRepository() {\n            return this.repositoryFactory.create('custom_field_set');\n        },\n\n        customFieldSetCriteria() {\n            const criteria = new Criteria(1, null);\n\n            criteria.addFilter(Criteria.equals('relations.entityName', 'order'));\n\n            return criteria;\n        },\n\n        hasChanges() {\n            const customFieldsValue = this.bulkEditData.customFields?.value;\n            const hasFieldsChanged = Object.values(this.bulkEditData).some((field) => field.isChanged);\n            const hasCustomFieldsChanged = !types.isEmpty(customFieldsValue) && Object.keys(customFieldsValue).length > 0;\n\n            return hasFieldsChanged || hasCustomFieldsChanged;\n        },\n\n        restrictedFields() {\n            let restrictedFields = [];\n\n            if (this.$route.params.excludeDelivery === '1') {\n                restrictedFields = restrictedFields.concat([\n                    'orderDeliveries',\n                ]);\n            }\n\n            return restrictedFields;\n        },\n\n        statusFormFields() {\n            const fields = [\n                {\n                    name: 'orderTransactions',\n                    config: {\n                        componentName: 'sw-single-select',\n                        changeLabel: this.$tc('sw-bulk-edit.order.status.payment.label'),\n                        entity: 'state_machine_state',\n                        placeholder: this.$tc('sw-bulk-edit.order.status.payment.placeholder'),\n                        options: this.transactionStatus,\n                    },\n                },\n                {\n                    name: 'orderDeliveries',\n                    config: {\n                        componentName: 'sw-single-select',\n                        changeLabel: this.$tc('sw-bulk-edit.order.status.shipping.label'),\n                        entity: 'state_machine_state',\n                        placeholder: this.$tc('sw-bulk-edit.order.status.shipping.placeholder'),\n                        options: this.deliveryStatus,\n                    },\n                },\n                {\n                    name: 'orders',\n                    config: {\n                        componentName: 'sw-single-select',\n                        changeLabel: this.$tc('sw-bulk-edit.order.status.order.label'),\n                        entity: 'state_machine_state',\n                        placeholder: this.$tc('sw-bulk-edit.order.status.order.placeholder'),\n                        options: this.orderStatus,\n                    },\n                },\n                {\n                    name: 'statusMails',\n                    labelHelpText: this.$tc('sw-bulk-edit.order.status.statusMails.helpText'),\n                    config: {\n                        hidden: true,\n                        changeLabel: this.$tc('sw-bulk-edit.order.status.statusMails.label'),\n                    },\n                },\n                {\n                    name: 'documents',\n                    labelHelpText: this.$tc('sw-bulk-edit.order.status.documents.helpText'),\n                    config: {\n                        componentName: 'sw-bulk-edit-order-documents',\n                        changeLabel: this.$tc('sw-bulk-edit.order.status.documents.label'),\n                        documents: this.bulkEditData?.documents,\n                    },\n                },\n            ];\n\n            return fields.filter((field) => {\n                return !this.restrictedFields.includes(field.name);\n            });\n        },\n\n        documentsFormFields() {\n            return [\n                {\n                    name: 'invoice',\n                    labelHelpText: this.$tc('sw-bulk-edit.order.documents.generateInvoice.helpText'),\n                    config: {\n                        componentName: 'sw-bulk-edit-order-documents-generate-invoice',\n                        changeLabel: this.$tc('sw-bulk-edit.order.documents.generateInvoice.label'),\n                    },\n                },\n                {\n                    name: 'storno',\n                    labelHelpText: this.$tc('sw-bulk-edit.order.documents.generateCancellationInvoice.helpText'),\n                    config: {\n                        componentName: 'sw-bulk-edit-order-documents-generate-cancellation-invoice',\n                        changeLabel: this.$tc('sw-bulk-edit.order.documents.generateCancellationInvoice.label'),\n                        changeSubLabel: this.$tc('sw-bulk-edit.order.documents.generateCancellationInvoice.changeSubLabel'),\n                    },\n                },\n                {\n                    name: 'delivery_note',\n                    labelHelpText: this.$tc('sw-bulk-edit.order.documents.generateDeliveryNote.helpText'),\n                    config: {\n                        componentName: 'sw-bulk-edit-order-documents-generate-delivery-note',\n                        changeLabel: this.$tc('sw-bulk-edit.order.documents.generateDeliveryNote.label'),\n                    },\n                },\n                {\n                    name: 'credit_note',\n                    labelHelpText: this.$tc('sw-bulk-edit.order.documents.generateCreditNote.helpText'),\n                    config: {\n                        componentName: 'sw-bulk-edit-order-documents-generate-credit-note',\n                        changeLabel: this.$tc('sw-bulk-edit.order.documents.generateCreditNote.label'),\n                        changeSubLabel: this.$tc('sw-bulk-edit.order.documents.generateCreditNote.changeSubLabel'),\n                    },\n                },\n                {\n                    name: 'download',\n                    labelHelpText: this.$tc('sw-bulk-edit.order.documents.downloadDocuments.helpText'),\n                    config: {\n                        componentName: 'sw-bulk-edit-order-documents-download-documents',\n                        changeLabel: this.$tc('sw-bulk-edit.order.documents.downloadDocuments.label'),\n                    },\n                },\n            ];\n        },\n\n        tagsFormFields() {\n            return [\n                {\n                    name: 'tags',\n                    config: {\n                        componentName: 'sw-entity-tag-select',\n                        entityCollection: this.order.tags,\n                        allowOverwrite: true,\n                        allowClear: true,\n                        allowAdd: true,\n                        allowRemove: true,\n                        changeLabel: this.$tc('sw-bulk-edit.order.tags.changeLabel'),\n                        placeholder: this.$tc('sw-bulk-edit.order.tags.placeholder'),\n                    },\n                },\n            ];\n        },\n    },\n\n    watch: {\n        bulkEditData: {\n            handler(value) {\n                const { orders, orderTransactions, orderDeliveries, statusMails } = value;\n                this.isStatusSelected =\n                    (orders.isChanged && orders.value) ||\n                    (orderTransactions.isChanged && orderTransactions.value) ||\n                    (orderDeliveries?.isChanged && orderDeliveries.value);\n\n                this.isStatusMailsSelected = statusMails.isChanged;\n            },\n            deep: true,\n        },\n\n        isStatusSelected() {\n            if (!this.isStatusSelected) {\n                this.bulkEditData.statusMails.isChanged = false;\n            }\n\n            this.bulkEditData.statusMails.disabled = !this.isStatusSelected;\n        },\n\n        isStatusMailsSelected() {\n            if (!this.isStatusMailsSelected) {\n                this.bulkEditData.documents.isChanged = false;\n            }\n\n            this.bulkEditData.documents.disabled = !this.isStatusMailsSelected;\n        },\n    },\n\n    beforeCreate() {\n        Cicada.State.registerModule('swBulkEdit', swBulkEditState);\n    },\n\n    created() {\n        this.createdComponent();\n    },\n\n    beforeUnmount() {\n        Cicada.State.unregisterModule('swBulkEdit');\n    },\n\n    methods: {\n        async createdComponent() {\n            this.setRouteMetaModule();\n\n            this.isLoading = true;\n\n            this.order = this.orderRepository.create(Cicada.Context.api);\n\n            await Promise.all([\n                this.fetchStatusOptions('orders.id'),\n                this.fetchStatusOptions('orderTransactions.orderId'),\n                this.fetchStatusOptions('orderDeliveries.orderId'),\n                this.loadCustomFieldSets(),\n            ]);\n\n            this.isLoading = false;\n            this.isLoadedData = true;\n\n            this.loadBulkEditData();\n        },\n\n        setRouteMetaModule() {\n            if (this.isCompatEnabled('INSTANCE_SET')) {\n                this.$set(this.$route.meta.$module, 'color', '#A092F0');\n                this.$set(this.$route.meta.$module, 'icon', 'regular-shopping-bag');\n            } else {\n                if (!this.$route.meta.$module) {\n                    this.$route.meta.$module = {};\n                }\n\n                this.$route.meta.$module.color = '#A092F0';\n                this.$route.meta.$module.icon = 'regular-shopping-bag';\n            }\n        },\n\n        loadBulkEditData() {\n            const bulkEditFormGroups = [\n                this.statusFormFields,\n                this.documentsFormFields,\n                this.tagsFormFields,\n            ];\n\n            bulkEditFormGroups.forEach((bulkEditForms) => {\n                bulkEditForms.forEach((bulkEditForm) => {\n                    if (this.isCompatEnabled('INSTANCE_SET')) {\n                        this.$set(this.bulkEditData, bulkEditForm.name, {\n                            isChanged: false,\n                            type: 'overwrite',\n                            value: null,\n                        });\n                    } else {\n                        this.bulkEditData[bulkEditForm.name] = {\n                            isChanged: false,\n                            type: 'overwrite',\n                            value: null,\n                        };\n                    }\n                });\n            });\n\n            if (this.isCompatEnabled('INSTANCE_SET')) {\n                this.$set(this.bulkEditData, 'customFields', {\n                    type: 'overwrite',\n                    value: null,\n                });\n\n                this.$set(this.bulkEditData, 'statusMails', {\n                    ...this.bulkEditData.statusMails,\n                    disabled: true,\n                });\n\n                this.$set(this.bulkEditData, 'documents', {\n                    ...this.bulkEditData.documents,\n                    disabled: true,\n                });\n            } else {\n                this.bulkEditData.customFields = {\n                    type: 'overwrite',\n                    value: null,\n                };\n\n                this.bulkEditData.statusMails.disabled = true;\n                this.bulkEditData.documents.disabled = true;\n            }\n\n            this.order.documents = {\n                documentType: {},\n                skipSentDocuments: true,\n            };\n        },\n\n        fetchStatusOptions(field) {\n            return this.fetchStateMachineStates(field)\n                .then((states) => {\n                    return this.fetchToStateMachineTransitions(states);\n                })\n                .then((toStates) => {\n                    switch (field) {\n                        case 'orderTransactions.orderId':\n                            this.transactionStatus = toStates;\n                            break;\n                        case 'orderDeliveries.orderId':\n                            this.deliveryStatus = toStates;\n                            break;\n                        default:\n                            this.orderStatus = toStates;\n                    }\n                })\n                .catch((error) =>\n                    this.createNotificationError({\n                        message: error,\n                    }),\n                );\n        },\n\n        fetchStateMachineStates(field) {\n            const payloadChunks = chunk(this.selectedIds, this.itemsPerRequest);\n\n            let versionField = null;\n\n            switch (field) {\n                case 'orderTransactions.orderId':\n                    versionField = 'orderTransactions.orderVersionId';\n                    break;\n                case 'orderDeliveries.orderId':\n                    versionField = 'orderDeliveries.orderVersionId';\n                    break;\n                default:\n                    versionField = 'orders.versionId';\n            }\n\n            const requests = payloadChunks.map((ids) => {\n                const criteria = new Criteria(1, null);\n\n                criteria.addFilter(\n                    Criteria.multi('AND', [\n                        Criteria.equalsAny(field, ids),\n                        Criteria.equals(versionField, Cicada.Context.api.liveVersionId),\n                    ]),\n                );\n\n                return this.stateMachineStateRepository.searchIds(criteria);\n            });\n\n            return Promise.all(requests)\n                .then((responses) => {\n                    let states = [];\n\n                    responses.forEach((order) => {\n                        if (order?.data) {\n                            states = [...order.data];\n                        }\n                    });\n\n                    return states;\n                })\n                .catch((error) =>\n                    this.createNotificationError({\n                        message: error,\n                    }),\n                );\n        },\n\n        fetchToStateMachineTransitions(states) {\n            if (!states.length) {\n                return Promise.resolve([]);\n            }\n\n            return this.stateMachineStateRepository\n                .search(this.toStateMachineStatesCriteria(states), Cicada.Context.api)\n                .then((response) => {\n                    if (!response.length) {\n                        return [];\n                    }\n\n                    const fromStates = response\n                        .map((state) => {\n                            if (state?.fromStateMachineTransitions) {\n                                return state.fromStateMachineTransitions;\n                            }\n\n                            return null;\n                        })\n                        .filter((state) => state !== null);\n\n                    let entries = intersectionBy(...fromStates, 'actionName').filter((state) => state?.toStateMachineState);\n\n                    entries = uniqBy(entries, (entry) => {\n                        return entry.toStateMachineState.technicalName;\n                    });\n\n                    return entries.map((entry) => ({\n                        label: entry.toStateMachineState.translated.name,\n                        value: entry.actionName,\n                    }));\n                })\n                .catch((error) =>\n                    this.createNotificationError({\n                        message: error,\n                    }),\n                );\n        },\n\n        toStateMachineStatesCriteria(states) {\n            const criteria = new Criteria(1, 25);\n\n            criteria.addFilter(Criteria.equalsAny('id', states));\n            criteria.addAssociation('fromStateMachineTransitions.toStateMachineState');\n\n            return criteria;\n        },\n\n        onProcessData() {\n            const data = {\n                statusData: [],\n                syncData: [],\n            };\n\n            const dataPush = [\n                'orderTransactions',\n                'orderDeliveries',\n                'orders',\n            ];\n\n            Object.entries(this.bulkEditData).forEach(\n                ([\n                    key,\n                    item,\n                ]) => {\n                    if (item.isChanged || (key === 'customFields' && item.value)) {\n                        const payload = {\n                            field: key,\n                            type: item.type,\n                            value: item.value,\n                        };\n\n                        if (dataPush.includes(key)) {\n                            const documentTypes = this.order?.documents?.documentType;\n\n                            if (this.bulkEditData?.documents?.isChanged) {\n                                const selectedDocumentTypes = Object.keys(documentTypes).filter(\n                                    (documentTypeName) => documentTypes[documentTypeName] === true,\n                                );\n\n                                if (selectedDocumentTypes.length > 0) {\n                                    payload.documentTypes = selectedDocumentTypes;\n                                    payload.skipSentDocuments = this.order.documents.skipSentDocuments;\n                                }\n                            }\n\n                            payload.sendMail = this.bulkEditData?.statusMails?.isChanged;\n                            payload.value = this.order?.[key];\n                            data.statusData.push(payload);\n                        } else if (key !== 'documents' && key !== 'statusMails') {\n                            data.syncData.push(payload);\n                        }\n                    }\n                },\n            );\n\n            return data;\n        },\n\n        openModal() {\n            this.$router.push({ name: 'sw.bulk.edit.order.save' });\n        },\n\n        closeModal() {\n            this.$router.push({ name: 'sw.bulk.edit.order' });\n        },\n\n        onSave() {\n            this.isLoading = true;\n\n            const { statusData, syncData } = this.onProcessData();\n            const bulkEditOrderHandler = this.bulkEditApiFactory.getHandler('order');\n\n            const payloadChunks = chunk(this.selectedIds, this.itemsPerRequest);\n            const requests = [];\n\n            payloadChunks.forEach((payload) => {\n                if (statusData.length) {\n                    requests.push(bulkEditOrderHandler.bulkEditStatus(payload, statusData));\n                }\n\n                if (syncData.length) {\n                    requests.push(bulkEditOrderHandler.bulkEdit(payload, syncData));\n                }\n            });\n\n            return Promise.all(requests)\n                .then(() => {\n                    this.processStatus = 'success';\n                })\n                .catch(() => {\n                    this.processStatus = 'fail';\n                })\n                .finally(() => {\n                    this.isLoading = false;\n                    this.getLatestOrderStatus().finally(() => {\n                        this.isLoading = false;\n                    });\n                });\n        },\n\n        getLatestOrderStatus() {\n            const promises = [];\n\n            if (this.bulkEditData.orderTransactions.isChanged) {\n                promises.push(this.fetchStatusOptions('orderTransactions.order.id'));\n            }\n            if (this.bulkEditData.orderDeliveries?.isChanged) {\n                promises.push(this.fetchStatusOptions('orderDeliveries.order.id'));\n            }\n            if (this.bulkEditData.orders.isChanged) {\n                promises.push(this.fetchStatusOptions('orders.id'));\n            }\n\n            if (promises.length === 0) {\n                return Promise.resolve();\n            }\n\n            this.isLoading = true;\n\n            return Promise.all(promises);\n        },\n\n        loadCustomFieldSets() {\n            return this.customFieldSetRepository.search(this.customFieldSetCriteria).then((res) => {\n                this.customFieldSets = res;\n            });\n        },\n\n        onCustomFieldsChange(value) {\n            this.bulkEditData.customFields.value = value;\n        },\n\n        onChangeDocument(type, isChanged) {\n            Cicada.State.commit('swBulkEdit/setOrderDocumentsIsChanged', {\n                type,\n                isChanged,\n            });\n        },\n    },\n};\n"],"names":["template","Mixin","Criteria","types","intersectionBy","chunk","uniqBy","index","criteria","customFieldsValue","_a","hasFieldsChanged","field","hasCustomFieldsChanged","restrictedFields","value","orders","orderTransactions","orderDeliveries","statusMails","swBulkEditState","bulkEditForms","bulkEditForm","states","toStates","error","payloadChunks","versionField","requests","ids","responses","order","response","fromStates","state","entries","entry","data","dataPush","key","item","payload","documentTypes","_b","_d","_c","selectedDocumentTypes","documentTypeName","_f","_e","_g","statusData","syncData","bulkEditOrderHandler","promises","res","type","isChanged"],"mappings":"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"}