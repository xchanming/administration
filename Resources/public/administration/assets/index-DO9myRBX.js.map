{"version":3,"file":"index-DO9myRBX.js","sources":["../../../app/administration/src/module/sw-product/component/sw-product-variants/sw-product-variants-delivery/sw-product-variants-delivery-order/sw-product-variants-delivery-order.html.twig","../../../app/administration/src/module/sw-product/component/sw-product-variants/sw-product-variants-delivery/sw-product-variants-delivery-order/index.js"],"sourcesContent":["<!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n{% block sw_product_variants_delivery_order %}\n<div class=\"sw-product-variants-delivery-order\">\n    <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n    {% block sw_product_variants_delivery_order_groups %}\n    <div class=\"sw-product-variants-delivery-order__groups\">\n        <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n        {% block sw_product_variants_delivery_order_groups_sw_tree %}\n        <sw-tree\n            v-if=\"orderObjects.length\"\n            :items=\"orderObjects\"\n            :searchable=\"false\"\n            :disable-context-menu=\"true\"\n            bind-items-to-folder\n            @drag-end=\"orderChanged\"\n        >\n\n            <template\n                #items=\"{ treeItems, sortable, draggedItem, disableContextMenu, onChangeRoute }\"\n            >\n                <sw-tree-item\n                    v-for=\"item in treeItems\"\n                    :key=\"item.id\"\n                    :item=\"item\"\n                    :disable-context-menu=\"true\"\n                    :sortable=\"true\"\n                />\n            </template>\n        </sw-tree>\n        {% endblock %}\n\n        <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n        {% block sw_product_variants_delivery_order_loader %}\n        <sw-loader v-else />\n        {% endblock %}\n    </div>\n    {% endblock %}\n</div>\n{% endblock %}\n","/*\n * @package inventory\n */\n\nimport template from './sw-product-variants-delivery-order.html.twig';\nimport './sw-product-variants-delivery-order.scss';\n\n// eslint-disable-next-line sw-deprecation-rules/private-feature-declarations\nexport default {\n    template,\n\n    compatConfig: Cicada.compatConfig,\n\n    props: {\n        product: {\n            type: Object,\n            required: true,\n        },\n\n        selectedGroups: {\n            type: Array,\n            required: true,\n        },\n    },\n\n    data() {\n        return {\n            groups: [],\n            orderObjects: [],\n        };\n    },\n\n    mounted() {\n        this.mountedComponent();\n    },\n\n    methods: {\n        mountedComponent() {\n            this.createOrderObjects();\n        },\n\n        createOrderObjects() {\n            // prepare group sorting\n            let sortedGroups = [];\n            const selectedGroupsCopy = [...this.selectedGroups];\n\n            // check if sorting exists on server\n            if (\n                this.product.variantListingConfig.configuratorGroupConfig &&\n                this.product.variantListingConfig.configuratorGroupConfig.length > 0\n            ) {\n                // add server sorting to the sortedGroups\n                sortedGroups = this.product.variantListingConfig.configuratorGroupConfig.reduce((acc, configGroup) => {\n                    const relatedGroup = selectedGroupsCopy.find((group) => group.id === configGroup.id);\n\n                    if (relatedGroup) {\n                        acc.push(relatedGroup);\n\n                        // remove from original array\n                        selectedGroupsCopy.splice(selectedGroupsCopy.indexOf(relatedGroup), 1);\n                    }\n\n                    return acc;\n                }, []);\n            }\n\n            // add non sorted groups at the end of the sorted array\n            sortedGroups = [\n                ...sortedGroups,\n                ...selectedGroupsCopy,\n            ];\n\n            // prepare groups\n            const groups = sortedGroups.map((group, index) => {\n                const children = this.getOptionsForGroup(group.id);\n\n                return {\n                    id: group.id,\n                    name: group.translated.name,\n                    childCount: children.length,\n                    parentId: null,\n                    afterId: index > 0 ? sortedGroups[index - 1].id : null,\n                    storeObject: group,\n                };\n            });\n\n            // prepare options\n            const children = groups.reduce((result, group) => {\n                const options = this.getOptionsForGroup(group.id);\n\n                // iterate for each group options\n                const optionsForGroup = options\n                    .sort((elementA, elementB) => {\n                        return elementA.position - elementB.position;\n                    })\n                    .map((element, index) => {\n                        const option = element.option;\n\n                        // get previous element\n                        let afterId = null;\n                        if (index > 0) {\n                            afterId = options[index - 1].option.id;\n                        }\n\n                        return {\n                            id: option.id,\n                            name: option.translated.name,\n                            childCount: 0,\n                            parentId: option.groupId,\n                            afterId,\n                            storeObject: element,\n                        };\n                    });\n\n                return [\n                    ...result,\n                    ...optionsForGroup,\n                ];\n            }, []);\n\n            // assign groups and children to order objects\n            this.orderObjects = [\n                ...groups,\n                ...children,\n            ];\n        },\n\n        getOptionsForGroup(groupId) {\n            return this.product.configuratorSettings.filter((element) => {\n                return !element.isDeleted && element.option.groupId === groupId;\n            });\n        },\n\n        orderChanged() {\n            const groups = this.orderObjects.filter((object) => object.parentId === null);\n\n            // when configuratorGroupConfig is null then add empty array\n            if (!this.product.variantListingConfig.configuratorGroupConfig) {\n                this.product.variantListingConfig.configuratorGroupConfig = [];\n            }\n\n            // get order from administration ui\n            const orderedGroupIds = [];\n            let latestGroup = groups.find((group) => group.afterId === null);\n            groups.forEach(() => {\n                if (latestGroup !== undefined) {\n                    orderedGroupIds.push(latestGroup.id);\n                    latestGroup = groups.find((thisGroup) => thisGroup.afterId === latestGroup.id);\n                }\n            });\n\n            // create new groupConfig Objects in sorted order\n            const newConfiguratorGroupConfig = [];\n            const currentConfiguratorGroupConfig = this.product.variantListingConfig.configuratorGroupConfig ?? [];\n\n            if (currentConfiguratorGroupConfig.length) {\n                orderedGroupIds.forEach((groupId) => {\n                    const foundGroup = currentConfiguratorGroupConfig.find((group) => group.id === groupId);\n                    // when group exists\n                    if (foundGroup) {\n                        // add to newConfiguratorGroupConfig\n                        newConfiguratorGroupConfig.push(foundGroup);\n                    } else {\n                        // otherwise create new group\n                        newConfiguratorGroupConfig.push({\n                            id: groupId,\n                            expressionForListings: false,\n                            representation: 'box',\n                        });\n                    }\n                });\n            } else {\n                orderedGroupIds.forEach((groupId) => {\n                    newConfiguratorGroupConfig.push({\n                        id: groupId,\n                        expressionForListings: false,\n                        representation: 'box',\n                    });\n                });\n            }\n\n            // set new order\n            this.product.variantListingConfig.configuratorGroupConfig = newConfiguratorGroupConfig;\n\n            // Set option ordering\n            const options = this.orderObjects.filter((object) => object.parentId);\n\n            groups.forEach((group) => {\n                const optionsForGroup = options.filter((option) => option.parentId === group.id);\n                let latestOption = optionsForGroup.find((option) => option.afterId === null);\n\n                optionsForGroup.forEach((option, index) => {\n                    if (latestOption !== undefined) {\n                        latestOption.storeObject.position = index + 1;\n                        latestOption = optionsForGroup.find((thisOption) => thisOption.afterId === latestOption.id);\n                    }\n                });\n            });\n        },\n    },\n};\n"],"names":["template","index","sortedGroups","selectedGroupsCopy","acc","configGroup","relatedGroup","group","groups","children","result","options","optionsForGroup","elementA","elementB","element","option","afterId","groupId","object","orderedGroupIds","latestGroup","thisGroup","newConfiguratorGroupConfig","currentConfiguratorGroupConfig","foundGroup","latestOption","thisOption"],"mappings":"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"}