const i='{% block sw_promotion_v2_sales_channel_selection %} <sw-multi-select v-model:value="salesChannelIds" v-bind="$attrs" :options="salesChannels" value-property="id" label-property="name" > {% block sw_promotion_v2_sales_channel_selection_label %} <template #selection-label-property="{ item }"> {{ item.name || item.translated.name }} </template> {% endblock %} {% block sw_promotion_v2_sales_channel_selection_result_label %} <template #result-label-property="{ item }"> {{ item.name || item.translated.name }} </template> {% endblock %} </sw-multi-select> {% endblock %}',{Criteria:s}=Shopware.Data,r={template:i,inject:["repositoryFactory"],props:{promotion:{type:Object,required:!1,default:null}},data(){return{salesChannels:[],sortBy:"name"}},computed:{salesChannelRepository(){return this.repositoryFactory.create("sales_channel")},promotionSalesChannelRepository(){return this.promotion?this.repositoryFactory.create(this.promotion.salesChannels.entity,this.promotion.salesChannels.source):null},salesChannelIds:{get(){return this.promotion?this.promotion.salesChannels.map(e=>e.salesChannelId):[]},set(e){e=e||[];const{deleted:o,added:n}=this.getChangeset(e);if(this.promotion.isNew()){this.handleLocalMode(o,n);return}this.handleWithRepository(o,n)}},salesChannelCriteria(){const e=new s(1,500);return e.addSorting(s.sort(this.sortBy,this.sortDirection,this.naturalSorting)),e}},created(){this.createdComponent()},methods:{createdComponent(){this.salesChannelRepository.search(this.salesChannelCriteria).then(e=>{this.salesChannels=e})},getChangeset(e){const o=[],n=[];return e.forEach(t=>{this.promotion.salesChannels.find(a=>a.salesChannelId===t)||n.push(t)}),this.promotion.salesChannels.forEach(t=>{e.includes(t.salesChannelId)||o.push(t.salesChannelId)}),{deleted:o,added:n}},getAssociationBySalesChannelId(e){return this.promotion.salesChannels.find(o=>o.salesChannelId===e)},handleLocalMode(e,o){e.forEach(n=>{const t=this.getAssociationBySalesChannelId(n);this.promotion.salesChannels.remove(t.id)}),o.forEach(n=>{const t=this.promotionSalesChannelRepository.create(this.promotion.salesChannels.context);t.salesChannelId=n,t.promotionId=this.promotion.id,t.priority=1,this.promotion.salesChannels.add(t)})},handleWithRepository(e,o){e.forEach(n=>{const t=this.getAssociationBySalesChannelId(n);this.promotion.salesChannels.remove(t.id)}),o.forEach(n=>{const t=this.promotionSalesChannelRepository.create(this.promotion.salesChannels.context);t.salesChannelId=n,t.promotionId=this.promotion.id,t.priority=1,this.promotion.salesChannels.add(t)})}}};export{r as default};
