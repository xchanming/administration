import{s as c}from"./sw-bulk-edit.state-CBUvT6ts.js";const u=`{% block sw_bulk_edit_customer %} <sw-page class="sw-bulk-edit-customer"> {% block sw_bulk_edit_customer_search_bar %} <template #search-bar> <sw-search-bar /> </template> {% endblock %} {% block sw_bulk_edit_customer_smart_bar_header %} <template #smart-bar-header> <h2>{{ $tc('sw-bulk-edit.customer.textTitle', selectedIds.length, { customerTotal: selectedIds.length }) }}</h2> </template> {% endblock %} {% block sw_bulk_edit_customer_content_language_switch %} <template #language-switch> <sw-language-switch @on-change="onChangeLanguage" /> </template> {% endblock %} {% block sw_bulk_edit_customer_content_smart_bar_actions %} <template #smart-bar-actions> {% block sw_bulk_edit_customer_actions_save %} <sw-button-process class="sw-bulk-edit-customer__save-action" variant="primary" :is-loading="isLoading" :process-success="false" :disabled="isLoading || !hasChanges" @click="openModal" > {{ $tc('sw-bulk-edit.applyChanges') }} </sw-button-process> {% endblock %} </template> {% endblock %} {% block sw_bulk_edit_customer_content %} <template #content> <sw-card-view v-if="selectedIds.length > 0 && isLoadedData" > {% block sw_bulk_edit_customer_content_account_card %} <sw-card class="sw-bulk-edit-customer-base__account" position-identifier="sw-bulk-edit-customer-account" :title="$tc('sw-bulk-edit.customer.account.cardTitle')" :is-loading="isLoading" > {% block sw_bulk_edit_customer_content_account_section %} <sw-bulk-edit-change-type-field-renderer :form-fields="accountFormFields" :bulk-edit-data="bulkEditData" :entity="customer" /> {% endblock %} </sw-card> {% endblock %} {% block sw_bulk_edit_customer_tags_card %} <sw-card class="sw-bulk-edit-customer-base__tags" position-identifier="sw-bulk-edit-customer-tags" :title="$tc('sw-bulk-edit.customer.tags.cardTitle')" :is-loading="isLoading" > {% block sw_bulk_edit_customer_tags %} <sw-bulk-edit-change-type-field-renderer :form-fields="tagsFormFields" :bulk-edit-data="bulkEditData" :entity="customer" /> {% endblock %} </sw-card> {% endblock %} {% block sw_bulk_edit_customer_custom_field_card %} <sw-card class="sw-bulk-edit-customer-base__custom_fields" position-identifier="sw-bulk-edit-customer-custom-field" :title="$tc('sw-bulk-edit.customer.customFields.cardTitle')" :is-loading="isLoading" > <sw-bulk-edit-custom-fields class="sw-bulk-edit__custom-fields" :sets="customFieldSets" @change="onCustomFieldsChange" /> </sw-card> {% endblock %} </sw-card-view> {% block sw_bulk_edit_customer_empty_state %} <sw-empty-state v-if="selectedIds.length <= 0 && !isLoading" :title="$tc('sw-bulk-edit.customer.messageEmptyTitle')" :subline="$tc('sw-bulk-edit.customer.messageEmptySubline')" /> {% endblock %} {% block sw_bulk_edit_customer_save_modal %} <router-view v-slot="{ Component }" > <component :is="Component" :item-total="selectedIds.length" :is-loading="isLoading" :process-status="processStatus" :bulk-edit-data="bulkEditData" @modal-close="closeModal" @bulk-save="onSave" /> </router-view> {% endblock %} </template> {% endblock %} </sw-page> {% endblock %}`,{Mixin:r}=Cicada,{Criteria:l}=Cicada.Data,{types:d}=Cicada.Utils,{chunk:n}=Cicada.Utils.array,{cloneDeep:m}=Cicada.Utils.object,b={template:u,compatConfig:Cicada.compatConfig,inject:["feature","bulkEditApiFactory","repositoryFactory"],mixins:[r.getByName("notification")],data(){return{isLoading:!1,isLoadedData:!1,isSaveSuccessful:!1,bulkEditData:{},customFieldSets:[],processStatus:"",customer:{}}},metaInfo(){return{title:this.$createTitle()}},computed:{selectedIds(){return Cicada.State.get("cicadaApps").selectedIds},customFieldSetRepository(){return this.repositoryFactory.create("custom_field_set")},customerRepository(){return this.repositoryFactory.create("customer")},customFieldSetCriteria(){const t=new l(1,null);return t.addFilter(l.equals("relations.entityName","customer")),t},hasChanges(){var a;const t=(a=this.bulkEditData.customFields)==null?void 0:a.value,e=Object.values(this.bulkEditData).some(o=>o.isChanged),s=!d.isEmpty(t)&&Object.keys(t).length>0;return e||s},actionsRequestGroup(){return[{value:"accept",label:this.$tc("sw-bulk-edit.customer.account.customerGroupRequest.options.accept")},{value:"decline",label:this.$tc("sw-bulk-edit.customer.account.customerGroupRequest.options.decline")}]},accountFormFields(){return[{name:"groupId",config:{componentName:"sw-entity-single-select",entity:"customer_group",changeLabel:this.$tc("sw-bulk-edit.customer.account.customerGroup.label"),placeholder:this.$tc("sw-bulk-edit.customer.account.customerGroup.placeholder")}},{name:"active",type:"bool",config:{type:"switch",changeLabel:this.$tc("sw-bulk-edit.customer.account.status.label")}},{name:"languageId",config:{componentName:"sw-entity-single-select",entity:"language",changeLabel:this.$tc("sw-bulk-edit.customer.account.language.label"),placeholder:this.$tc("sw-bulk-edit.customer.account.language.placeholder")}},{name:"requestedCustomerGroupId",labelHelpText:this.$tc("sw-bulk-edit.customer.account.customerGroupRequest.helpText"),config:{componentName:"sw-single-select",entity:"customer_group",changeLabel:this.$tc("sw-bulk-edit.customer.account.customerGroupRequest.label"),placeholder:this.$tc("sw-bulk-edit.customer.account.customerGroupRequest.placeholder"),options:this.actionsRequestGroup}}]},tagsFormFields(){return[{name:"tags",config:{componentName:"sw-entity-tag-select",entityCollection:this.customer.tags,allowOverwrite:!0,allowClear:!0,allowAdd:!0,allowRemove:!0,changeLabel:this.$tc("sw-bulk-edit.order.tags.changeLabel"),placeholder:this.$tc("sw-bulk-edit.order.tags.placeholder")}}]}},beforeCreate(){Cicada.State.registerModule("swBulkEdit",c)},created(){this.createdComponent()},beforeUnmount(){Cicada.State.unregisterModule("swBulkEdit")},methods:{createdComponent(){this.setRouteMetaModule(),Cicada.State.getters["context/isSystemDefaultLanguage"]||Cicada.State.commit("context/resetLanguageToDefault"),this.isLoading=!0,this.customer=this.customerRepository.create(Cicada.Context.api),this.loadCustomFieldSets().then(()=>{this.loadBulkEditData(),this.isLoadedData=!0}).catch(t=>{this.createNotificationError({title:this.$tc("global.default.error"),message:t})}).finally(()=>{this.isLoading=!1})},setRouteMetaModule(){this.isCompatEnabled("INSTANCE_SET")?(this.$set(this.$route.meta.$module,"color","#F88962"),this.$set(this.$route.meta.$module,"icon","regular-users")):(this.$route.meta.$module||(this.$route.meta.$module={}),this.$route.meta.$module.color="#F88962",this.$route.meta.$module.icon="regular-users")},defineBulkEditData(t,e=null,s="overwrite",a=!1){this.bulkEditData[t]||(this.isCompatEnabled("INSTANCE_SET")?this.$set(this.bulkEditData,t,{isChanged:a,type:s,value:e}):this.bulkEditData[t]={isChanged:a,type:s,value:e})},loadBulkEditData(){[this.accountFormFields,this.tagsFormFields].forEach(e=>{e.forEach(s=>{this.defineBulkEditData(s.name)})}),this.isCompatEnabled("INSTANCE_SET")?this.$set(this.bulkEditData,"customFields",{type:"overwrite",value:null}):this.bulkEditData.customFields={type:"overwrite",value:null}},loadCustomFieldSets(){return this.customFieldSetRepository.search(this.customFieldSetCriteria).then(t=>{this.customFieldSets=t})},onCustomFieldsChange(t){if(Object.keys(t).length<=0){this.bulkEditData=this.bulkEditData.filter(e=>e.field!=="customFields");return}this.bulkEditData.customFields.value=t},onProcessData(){const t={requestData:[],syncData:[]};return Object.keys(this.bulkEditData).forEach(e=>{const s=m(this.bulkEditData[e]);let a=this.customer[e];e==="active"&&!a&&(a=!1),e==="customFields"&&(a=s.value);const o={field:e,type:s.type,value:a};(s.isChanged||e==="customFields"&&s.value)&&(e==="requestedCustomerGroupId"?t.requestData.push(o):t.syncData.push(o))}),t},openModal(){this.$router.push({name:"sw.bulk.edit.customer.save"})},async onSave(){this.isLoading=!0;const{requestData:t,syncData:e}=this.onProcessData(),s=this.bulkEditApiFactory.getHandler("customer"),a=n(this.selectedIds,50),o=[];return t.length&&o.push(s.bulkEditRequestedGroup(this.selectedIds,t)),a.forEach(i=>{e.length&&o.push(this.bulkEditApiFactory.getHandler("customer").bulkEdit(i,e))}),Promise.all(o).then(()=>{this.processStatus="success"}).catch(i=>{console.error(i),this.processStatus="fail"}).finally(()=>{this.isLoading=!1})},closeModal(){this.$router.push({name:"sw.bulk.edit.customer"})},onChangeLanguage(t){Cicada.State.commit("context/setApiLanguageId",t)}}};export{b as default};
//# sourceMappingURL=index-D199fYxT.js.map
