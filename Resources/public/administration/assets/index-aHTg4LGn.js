const r=`{% block sw_users_permissions_role_detail %} <sw-page class="sw-users-permissions-role-detail"> {% block sw_users_permissions_role_detail_smart_bar_header %} <template #smart-bar-header> {% block sw_users_permissions_role_detail_smart_bar_header_title %} <h2 v-if="role && role.isNew() && role.name.length <= 0"> {{ $tc('sw-users-permissions.roles.general.labelCreateNewRole') }} </h2> <h2 v-else-if="role"> {{ role.name }} </h2> <h2 v-else> {{ $tc('sw-users-permissions.roles.detail.role') }} </h2> {% endblock %} </template> {% endblock %} {% block sw_users_permissions_role_detail_smart_bar_actions %} <template #smart-bar-actions> {% block sw_users_permissions_role_detail_smart_bar_actions_button_cancel %} <sw-button v-tooltip.bottom="tooltipCancel" @click="onCancel" > {{ $tc('global.default.cancel') }} </sw-button> {% endblock %} {% block sw_users_permissions_role_detail_smart_bar_actions_button_save %} <sw-button-process v-tooltip.bottom="tooltipSave" class="sw-users-permissions-role-detail__button-save" :is-loading="isLoading" :process-success="isSaveSuccessful" :disabled="isLoading || !acl.can('users_and_permissions.editor') || undefined" variant="primary" @update:process-success="saveFinish" @click.prevent="onSave" > {{ $tc('global.default.save') }} </sw-button-process> {% endblock %} </template> {% endblock %} {% block sw_users_permissions_role_detail_content %} <template #content> {% block sw_users_permissions_role_detail_content_card_view %} <sw-card-view> {% block sw_users_permissions_role_detail_content_card_view_tabs %} <sw-tabs default-item="general" position-identifier="sw-users-permissions-role-detail-content" > <template #default="{ active }"> <sw-tabs-item :route="{ name: 'sw.users.permissions.role.detail.general', params: { id: $route.params.id } }" :title="$tc('sw-users-permissions.roles.tabs.general')" > {{ $tc('sw-users-permissions.roles.tabs.general') }} </sw-tabs-item> <sw-tabs-item :route="{ name: 'sw.users.permissions.role.detail.detailed-privileges', params: { id: $route.params.id } }" :title="$tc('sw-users-permissions.roles.tabs.detailed')" > {{ $tc('sw-users-permissions.roles.tabs.detailed') }} </sw-tabs-item> </template> </sw-tabs> {% endblock %} <template v-if="isLoading"> <sw-skeleton variant="detail-bold" /> <sw-skeleton /> </template> <template v-else> <router-view v-slot="{ Component }" > <component :is="Component" :role="role" :detailed-privileges="detailedPrivileges" /> </router-view> </template> </sw-card-view> {% endblock %} {% block sw_users_permissions_role_detail_content_verify_modal %} <sw-verify-user-modal v-if="confirmPasswordModal" @verified="saveRole" @close="onCloseConfirmPasswordModal" /> {% endblock %} </template> {% endblock %} </sw-page> {% endblock %}`,{Mixin:o}=Shopware,l={template:r,inject:["repositoryFactory","privileges","userService","loginService","acl","appAclService"],mixins:[o.getByName("notification")],shortcuts:{"SYSTEMKEY+S":"onSave",ESCAPE:"onCancel"},data(){return{isLoading:!0,isSaveSuccessful:!1,role:null,confirmPasswordModal:!1,detailedPrivileges:[]}},metaInfo(){return{title:this.$createTitle(this.identifier)}},computed:{tooltipSave(){return{message:`${this.$device.getSystemKey()} + S`,appearance:"light"}},tooltipCancel(){return{message:"ESC",appearance:"light"}},languageId(){return Shopware.Store.get("session").languageId},roleRepository(){return this.repositoryFactory.create("acl_role")},roleId(){return this.$route.params.id}},watch:{languageId(){this.createdComponent()}},created(){this.createdComponent()},methods:{createdComponent(){if(Shopware.ExtensionAPI.publishData({id:"sw-users-permissions-role-detail__detailedPrivileges",path:"detailedPrivileges",scope:this}),Shopware.ExtensionAPI.publishData({id:"sw-users-permissions-role-detail__role",path:"role",scope:this}),!this.roleId){this.createNewRole();return}this.getRole()},createNewRole(){this.isLoading=!0,this.role=this.roleRepository.create(),this.role.name="",this.role.description="",this.role.privileges=[],this.isLoading=!1},getRole(){this.isLoading=!0,this.appAclService.addAppPermissions().then(()=>{this.roleRepository.get(this.roleId).then(e=>{this.role=e;const s=this.privileges.filterPrivilegesRoles(this.role.privileges),i=this.privileges.getPrivilegesForAdminPrivilegeKeys(s);this.detailedPrivileges=this.role.privileges.filter(t=>!i.includes(t)),this.role.privileges=s}).finally(()=>{this.isLoading=!1})})},onSave(){this.confirmPasswordModal=!0},saveRole(e){return this.isSaveSuccessful=!1,this.isLoading=!0,this.role.privileges=[...this.privileges.getPrivilegesForAdminPrivilegeKeys(this.role.privileges),...this.detailedPrivileges].sort(),this.confirmPasswordModal=!1,this.roleRepository.save(this.role,e).then(()=>this.updateCurrentUser()).then(()=>{this.role.isNew()&&this.$router.push({name:"sw.users.permissions.role.detail",params:{id:this.role.id}}),this.getRole(),this.isSaveSuccessful=!0}).catch(()=>{this.createNotificationError({message:this.$tc("global.notification.notificationSaveErrorMessage",{entityName:this.role.name},0)}),this.role.privileges=this.privileges.filterPrivilegesRoles(this.role.privileges)}).finally(()=>{this.isLoading=!1})},updateCurrentUser(){return this.userService.getUser().then(e=>{const s=e.data;return delete s.password,Shopware.Store.get("session").setCurrentUser(s)})},onCloseConfirmPasswordModal(){this.confirmPasswordModal=!1},saveFinish(){this.isSaveSuccessful=!1},onCancel(){this.$router.push({name:"sw.users.permissions.index"})}}};export{l as default};
