const c=`{% block sw_order_detail_base_general_info %} <div class="sw-order-general-info"> {% block sw_order_detail_base_general_info_summary %} <div class="sw-order-general-info__summary"> {% block sw_order_detail_base_general_info_summary_main %} <div class="sw-order-general-info__summary-main"> {% block sw_order_detail_base_general_info_summary_main_header %} <div class="sw-order-general-info__summary-main-header"> {{ order.orderNumber }} - <router-link class="sw-order-general-info__summary-main-header-link" :to="{ name: 'sw.customer.detail', params: { id: order.orderCustomer.customerId } }" > {{ order.orderCustomer.firstName }} {{ order.orderCustomer.lastName }} <span v-if="order.orderCustomer.company"> - {{ order.orderCustomer.company }}</span> </router-link> ({{ emailIdnFilter(order.orderCustomer.email) }}) </div> {% endblock %} {% block sw_order_detail_base_general_info_summary_main_total %} <div class="sw-order-general-info__summary-main-total"> {{ currencyFilter(order.amountTotal, order.currency.isoCode, order.totalRounding.decimals) }} </div> {% endblock %} </div> {% endblock %} {% block sw_order_detail_base_general_info_summary_sub %} <div class="sw-order-general-info__summary-sub"> {% block sw_order_detail_base_general_info_summary_sub_description %} <div class="sw-order-general-info__summary-sub-description"> {{ $tc('sw-order.generalTab.info.summary.on') }} {{ dateFilter(order.orderDateTime, { hour: '2-digit', minute: '2-digit', day: '2-digit', month: '2-digit', year: 'numeric' }) }} {{ $tc('sw-order.generalTab.info.summary.with') }} {{ order.transactions.last().paymentMethod.translated.distinguishableName }} <template v-if="order.deliveries.last()"> {{ $tc('sw-order.generalTab.info.summary.and') }} {{ order.deliveries.last().shippingMethod.translated.name }} </template> </div> {% endblock %} {% block sw_order_detail_base_general_info_summary_sub_last_changed %} <div class="sw-order-general-info__summary-sub-last-changed"> {% block sw_order_detail_base_general_info_summary_sub_last_changed_time %} <div v-if="lastChangedDateTime" class="sw-order-general-info__summary-sub-last-changed-time" > {{ $tc('sw-order.generalTab.info.summary.lastChanged') }}: {{ dateFilter(lastChangedDateTime, { hour: '2-digit', minute: '2-digit', day: '2-digit', month: '2-digit', year: 'numeric' }) }} </div> {% endblock %} {% block sw_order_detail_base_general_info_summary_sub_last_changed_user %} <div v-if="lastChangedUser" class="sw-order-general-info__summary-sub-last-changed-user" > {{ $tc('sw-order.generalTab.info.summary.by') }} {{ lastChangedUser.firstName }} {{ lastChangedUser.lastName }} </div> {% endblock %} </div> {% endblock %} </div> {% endblock %} </div> {% endblock %} {% block sw_order_state_change_card_modal %} <sw-order-state-change-modal v-if="showModal" :order="order" :is-loading="isLoading" :technical-name="''" @page-leave="onLeaveModalClose" @page-leave-confirm="onLeaveModalConfirm" /> {% endblock %} {% block sw_order_detail_base_general_info_order_states %} <div class="sw-order-general-info__order-states"> {% block sw_order_detail_base_general_info_order_states_payment %} <div class="sw-order-general-info__order-state"> <sw-order-state-select-v2 v-tooltip="{ message: $tc('sw-privileges.tooltip.warning'), disabled: acl.can('order.editor'), showOnDisabledElements: true }" class="sw-order-general-info__order-state-payment" :transition-options="paymentStateOptions" state-type="order_transaction" rounded-style :placeholder="transaction.stateMachineState.translated.name" :label="$tc('sw-order.stateCard.headlineTransactionState')" :background-style="backgroundStyle('order_transaction')" :disabled="!acl.can('order.editor')" @state-select="onStateSelected" /> </div> {% endblock %} {% block sw_order_detail_base_general_info_order_states_shipping %} <div v-if="delivery" class="sw-order-general-info__order-state" > <sw-order-state-select-v2 v-tooltip="{ message: $tc('sw-privileges.tooltip.warning'), disabled: acl.can('order.editor'), showOnDisabledElements: true }" class="sw-order-general-info__order-state-delivery" :transition-options="deliveryStateOptions" state-type="order_delivery" rounded-style :placeholder="delivery.stateMachineState.translated.name" :label="$tc('sw-order.stateCard.headlineDeliveryState')" :background-style="backgroundStyle('order_delivery')" :disabled="!acl.can('order.editor')" @state-select="onStateSelected" /> </div> {% endblock %} {% block sw_order_detail_base_general_info_order_states_order %} <div class="sw-order-general-info__order-state"> <sw-order-state-select-v2 v-tooltip="{ message: $tc('sw-privileges.tooltip.warning'), disabled: acl.can('order.editor'), showOnDisabledElements: true }" class="sw-order-general-info__order-state-order" :transition-options="orderStateOptions" rounded-style state-type="order" :placeholder="order.stateMachineState.translated.name" :label="$tc('sw-order.stateCard.headlineOrderState')" :background-style="backgroundStyle('order')" :disabled="!acl.can('order.editor')" @state-select="onStateSelected" /> </div> {% endblock %} </div> {% endblock %} {% block sw_order_detail_base_general_info_order_tags %} <sw-entity-tag-select class="sw-order-general-info__order-tags" size="small" :entity-collection="tagCollection" :disabled="!acl.can('order.editor')" :placeholder="$tc('sw-order.generalTab.tagSelect.placeholder')" :always-show-placeholder="true" @item-add="onTagAdd" @item-remove="onTagRemove" /> {% endblock %} </div> {% endblock %}`,{Mixin:h,Store:n}=Shopware,{Criteria:d,EntityCollection:m}=Shopware.Data,{cloneDeep:u}=Shopware.Utils.object,_={template:c,inject:{swOrderDetailOnSaveEdits:{from:"swOrderDetailOnSaveEdits",default:null},acl:{from:"acl",default:null},repositoryFactory:{from:"repositoryFactory",default:null},stateMachineService:{from:"stateMachineService",default:null},orderStateMachineService:{from:"orderStateMachineService",default:null},stateStyleDataProviderService:{from:"stateStyleDataProviderService",default:null}},emits:["save-edits"],mixins:[h.getByName("notification")],props:{order:{type:Object,required:!0}},data(){return{currentActionName:null,currentStateType:null,deliveryStateOptions:[],liveOrder:null,modalConfirmed:!1,orderStateOptions:[],paymentStateOptions:[],showModal:!1,tagCollection:null}},computed:{isLoading:()=>n.get("swOrderDetail").isLoading,savedSuccessful:()=>n.get("swOrderDetail").savedSuccessful,lastChangedUser(){if(this.liveOrder){if(this.liveOrder.updatedBy)return this.liveOrder.updatedBy;if(this.liveOrder.createdBy)return this.liveOrder.createdBy}return null},lastChangedDateTime(){if(this.liveOrder){if(this.liveOrder.updatedAt)return this.liveOrder.updatedAt;if(this.liveOrder.createdAt)return this.liveOrder.createdAt}return null},lastChangedByCriteria(){const e=new d(1,25);return e.setIds([this.order.id]),e.addAssociation("createdBy").addAssociation("updatedBy"),e},orderRepository(){return this.repositoryFactory.create("order")},orderTagRepository(){return this.repositoryFactory.create(this.order.tags.entity,this.order.tags.source)},stateMachineStateRepository(){return this.repositoryFactory.create("state_machine_state")},stateMachineStateCriteria(){const e=new d(1,null);return e.addSorting({field:"name",order:"ASC"}),e.addAssociation("stateMachine"),e.addFilter(d.equalsAny("state_machine_state.stateMachine.technicalName",["order.state","order_transaction.state","order_delivery.state"])),e},transaction(){for(let e=0;e<this.order.transactions.length;e+=1)if(!["cancelled","failed"].includes(this.order.transactions[e].stateMachineState.technicalName))return this.order.transactions[e];return this.order.transactions.last()},delivery(){return this.order.deliveries[0]},currencyFilter(){return Shopware.Filter.getByName("currency")},dateFilter(){return Shopware.Filter.getByName("date")},emailIdnFilter(){return Shopware.Filter.getByName("decode-idn-email")}},watch:{savedSuccessful(){this.savedSuccessful&&this.getLiveOrder()},"order.id"(){this.createdComponent()}},created(){this.createdComponent()},methods:{createdComponent(){const e=u(this.order.tags);this.tagCollection=new m(this.order.tags.source,this.order.tags.entity,Shopware.Context.api,null,e,e.length),this.getLiveOrder(),this.getTransitionOptions()},getLiveOrder(){this.orderRepository.search(this.lastChangedByCriteria,Shopware.Context.api).then(e=>{e&&e.first()&&(this.liveOrder=e.first())})},onTagAdd(e){this.orderTagRepository.assign(e.id).then(()=>{this.tagCollection.add(e)})},onTagRemove(e){this.orderTagRepository.delete(e.id).then(()=>{this.tagCollection.remove(e.id)})},getAllStates(){return this.stateMachineStateRepository.search(this.stateMachineStateCriteria)},buildTransitionOptions(e,t,r){const i=t.filter(a=>a.stateMachine.technicalName===e).map((a,o)=>({stateName:a.technicalName,id:o,name:a.translated.name,disabled:!0}));return i.forEach(a=>{const o=r.filter(l=>l.toStateName===a.stateName);o.length>=1&&(a.disabled=!1,a.id=o[0].actionName)}),i},backgroundStyle(e){let t;switch(e){case"order_transaction":t=this.transaction.stateMachineState.technicalName;break;case"order_delivery":t=this.delivery.stateMachineState.technicalName;break;case"order":t=this.order.stateMachineState.technicalName;break;default:return null}return this.stateStyleDataProviderService.getStyle(`${e}.state`,t).selectBackgroundStyle},getTransitionOptions(){n.get("swOrderDetail").setLoading(["states",!0]);const e=[this.stateMachineService.getState("order",this.order.id)];return this.transaction&&e.push(this.stateMachineService.getState("order_transaction",this.transaction.id)),this.delivery&&e.push(this.stateMachineService.getState("order_delivery",this.delivery.id)),Promise.all([this.getAllStates(),...e]).then(t=>{const r=t[0],s=t[1];if(this.orderStateOptions=this.buildTransitionOptions("order.state",r,s.data.transitions),this.transaction){const i=t[2];this.paymentStateOptions=this.buildTransitionOptions("order_transaction.state",r,i.data.transitions)}if(this.delivery){const i=t[3];this.deliveryStateOptions=this.buildTransitionOptions("order_delivery.state",r,i.data.transitions)}return Promise.resolve()}).finally(()=>{n.get("swOrderDetail").setLoading(["states",!1])})},onStateSelected(e,t){if(!e||!t){this.createStateChangeErrorNotification(this.$tc("sw-order.stateCard.labelErrorNoAction"));return}if(!this.modalConfirmed){this.currentActionName=t,this.currentStateType=e,this.showModal=!0;return}this.modalConfirmed=!1},onLeaveModalClose(){this.modalConfirmed=!1,this.currentActionName=null,this.currentStateType=null,this.showModal=!1},onLeaveModalConfirm(e,t=!0){this.showModal=!1;let r=null;switch(this.currentStateType){case"order_transaction":r=this.orderStateMachineService.transitionOrderTransactionState(this.transaction.id,this.currentActionName,{documentIds:e,sendMail:t});break;case"order_delivery":r=this.orderStateMachineService.transitionOrderDeliveryState(this.delivery.id,this.currentActionName,{documentIds:e,sendMail:t});break;case"order":r=this.orderStateMachineService.transitionOrderState(this.order.id,this.currentActionName,{documentIds:e,sendMail:t});break;default:this.createNotificationError({message:this.$tc("sw-order.stateCard.labelErrorStateChange")});return}r&&r.then(()=>{this.loadHistory()}).catch(s=>{this.createStateChangeErrorNotification(s)}),this.currentActionName=null,this.currentStateType=null},loadHistory(){this.statesLoading=!0,this.modalConfirmed=!1,this.getTransitionOptions().then(()=>{this.swOrderDetailOnSaveEdits?this.swOrderDetailOnSaveEdits():this.$emit("save-edits")}).catch(e=>{this.createNotificationError(e)})},createStateChangeErrorNotification(e){this.createNotificationError({message:this.$tc("sw-order.stateCard.labelErrorStateChange")+e})}}};export{_ as default};
