{"version":3,"file":"index-DaWU6Cwt.js","sources":["../../../app/administration/src/module/sw-customer/page/sw-customer-detail/sw-customer-detail.html.twig","../../../app/administration/src/module/sw-customer/page/sw-customer-detail/index.js"],"sourcesContent":["<!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n{% block sw_customer_detail %}\n<sw-page class=\"sw-customer-detail\">\n    <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n    {% block sw_customer_detail_header %}\n    <template\n        v-if=\"!isLoading\"\n        #smart-bar-header\n    >\n        <h2>\n            {{ salutation(customer) }}\n        </h2>\n        <sw-label\n            v-if=\"customer?.createdById\"\n            appearance=\"pill\"\n            size=\"small\"\n            class=\"sw-customer-detail__created-by-admin-label\"\n        >\n            {{ $tc('sw-customer.detail.labelCreatedByAdmin') }}\n        </sw-label>\n    </template>\n    {% endblock %}\n\n    <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n    {% block sw_customer_detail_actions %}\n    <template #smart-bar-actions>\n        <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n        {% block sw_customer_detail_actions_edit %}\n        <span v-if=\"!editMode\">\n            <sw-button\n                v-tooltip=\"{\n                    message: $tc('sw-privileges.tooltip.warning'),\n                    disabled: acl.can('customer.editor'),\n                    showOnDisabledElements: true\n                }\"\n                class=\"sw-customer-detail__open-edit-mode-action\"\n                variant=\"primary\"\n                :disabled=\"isLoading || !acl.can('customer.editor')\"\n                @click.prevent=\"onActivateCustomerEditMode\"\n            >\n                {{ $tc('sw-customer.detail.buttonEdit') }}\n            </sw-button>\n        </span>\n        {% endblock %}\n\n        <span v-else>\n            <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n            {% block sw_customer_detail_actions_cancel %}\n            <sw-button\n                :disabled=\"isLoading\"\n                @click=\"onAbortButtonClick\"\n            >\n                {{ $tc('global.default.cancel') }}\n            </sw-button>\n            {% endblock %}\n\n            <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n            {% block sw_customer_detail_actions_save %}\n            <sw-button-process\n                class=\"sw-customer-detail__save-action\"\n                :is-loading=\"isLoading\"\n                :process-success=\"isSaveSuccessful\"\n                :disabled=\"isLoading\"\n                variant=\"primary\"\n                @update:process-success=\"saveFinish\"\n                @click.prevent=\"onSave\"\n            >\n                {{ $tc('sw-customer.detail.buttonSave') }}\n            </sw-button-process>\n            {% endblock %}\n        </span>\n    </template>\n    {% endblock %}\n\n    <template #language-switch>\n        <sw-language-switch\n            :abort-change-function=\"abortOnLanguageChange\"\n            :save-changes-function=\"saveOnLanguageChange\"\n            @on-change=\"onChangeLanguage\"\n        />\n    </template>\n\n    <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n    {% block sw_customer_detail_content %}\n    <template #content>\n        <sw-card-view>\n            <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n            {% block sw_customer_detail_content_customer_group_registration %}\n            <div class=\"sw-customer-detail__customer-registration-alert\">\n                <sw-alert\n                    v-if=\"customer && customer.requestedGroup\"\n                    variant=\"info\"\n                >\n                    <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n                    {% block sw_customer_detail_content_customer_group_registration_content %}\n                    <div class=\"sw-customer-detail__customer-registration-alert-text\">\n                        <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n                        {% block sw_customer_detail_content_customer_group_registration_message %}\n                        {{ $tc('sw-customer.customerGroupRegistration.alert', 0, { name: customer.requestedGroup.translated.name }) }}\n                        {% endblock %}\n                    </div>\n                    <div class=\"sw-customer-detail__customer-registration-alert-actions\">\n                        <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n                        {% block sw_customer_detail_content_customer_group_registration_actions %}\n                        <sw-button\n                            variant=\"danger\"\n                            size=\"small\"\n                            @click=\"declineCustomerGroupRegistration\"\n                        >\n                            {{ $tc('sw-customer.customerGroupRegistration.decline') }}\n                        </sw-button>\n\n                        <sw-button\n                            variant=\"primary\"\n                            size=\"small\"\n                            @click=\"acceptCustomerGroupRegistration\"\n                        >\n                            {{ $tc('sw-customer.customerGroupRegistration.accept') }}\n                        </sw-button>\n                        {% endblock %}\n                    </div>\n                    {% endblock %}\n                </sw-alert>\n            </div>\n            {% endblock %}\n\n            <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n            {% block sw_customer_detail_content_tabs %}\n            <sw-tabs\n                class=\"sw-customer-detail-page__tabs\"\n                position-identifier=\"sw-customer-detail-tabs\"\n            >\n                <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n                {% block sw_customer_detail_content_tab_general %}\n                <sw-tabs-item\n                    class=\"sw-customer-detail__tab-general\"\n                    :route=\"generalRoute\"\n                    :title=\"$tc('sw-customer.detail.tabGeneral')\"\n                    :has-error=\"swCustomerDetailBaseError\"\n                >\n                    {{ $tc('sw-customer.detail.tabGeneral') }}\n                </sw-tabs-item>\n                {% endblock %}\n\n                <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n                {% block sw_customer_detail_content_tab_addresses %}\n                <sw-tabs-item\n                    class=\"sw-customer-detail__tab-addresses\"\n                    :route=\"addressesRoute\"\n                    :title=\"$tc('sw-customer.detail.tabAddresses')\"\n                >\n                    {{ $tc('sw-customer.detail.tabAddresses') }}\n                </sw-tabs-item>\n                {% endblock %}\n\n                <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n                {% block sw_customer_detail_content_tab_order %}\n                <sw-tabs-item\n                    class=\"sw-customer-detail__tab-order\"\n                    :route=\"ordersRoute\"\n                    :title=\"$tc('sw-customer.detailBase.labelOrderCard')\"\n                >\n                    {{ $tc('sw-customer.detailBase.labelOrderCard') }}\n                </sw-tabs-item>\n                {% endblock %}\n\n                <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n                {% block sw_customer_detail_content_tab_after %}{% endblock %}\n            </sw-tabs>\n            {% endblock %}\n\n            <sw-extension-component-section\n                position-identifier=\"sw-customer-detail__before-content\"\n            />\n\n            <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n            {% block sw_customer_detail_content_view %}\n            <template v-if=\"isLoading\">\n                <sw-skeleton variant=\"detail-bold\" />\n                <sw-skeleton />\n            </template>\n\n            <router-view\n                v-if=\"customer\"\n                v-slot=\"{ Component }\"\n            >\n                {# v-show is used here as underlying components influence the loading state and v-if would destroy this behaviour #}\n                <component\n                    :is=\"Component\"\n                    v-show=\"!isLoading\"\n                    :customer=\"customer\"\n                    :customer-edit-mode=\"editMode\"\n                />\n            </router-view>\n            {% endblock %}\n        </sw-card-view>\n    </template>\n    {% endblock %}\n</sw-page>\n{% endblock %}\n","import './sw-customer-detail.scss';\nimport template from './sw-customer-detail.html.twig';\nimport errorConfig from '../../error-config.json';\nimport CUSTOMER from '../../constant/sw-customer.constant';\n\n/**\n * @package checkout\n */\n\nconst { Mixin } = Cicada;\nconst { Criteria } = Cicada.Data;\nconst { CicadaError } = Cicada.Classes;\nconst { mapPageErrors } = Cicada.Component.getComponentHelper();\n\n// eslint-disable-next-line sw-deprecation-rules/private-feature-declarations\nexport default {\n    template,\n\n    compatConfig: Cicada.compatConfig,\n\n    inject: [\n        'repositoryFactory',\n        'customerGroupRegistrationService',\n        'acl',\n        'customerValidationService',\n        'feature',\n    ],\n\n    mixins: [\n        Mixin.getByName('notification'),\n        Mixin.getByName('salutation'),\n        Mixin.getByName('discard-detail-page-changes')('customer'),\n    ],\n\n    shortcuts: {\n        'SYSTEMKEY+S': 'onSave',\n        ESCAPE: 'onAbortButtonClick',\n    },\n\n    props: {\n        customerId: {\n            type: String,\n            required: true,\n        },\n    },\n\n    data() {\n        return {\n            isLoading: false,\n            isSaveSuccessful: false,\n            customer: null,\n            customerAddressCustomFieldSets: [],\n            customerCustomFieldSets: [],\n            errorEmailCustomer: null,\n        };\n    },\n\n    metaInfo() {\n        return {\n            title: this.$createTitle(this.identifier),\n        };\n    },\n\n    computed: {\n        identifier() {\n            return this.customer !== null ? this.salutation(this.customer) : '';\n        },\n\n        customerRepository() {\n            return this.repositoryFactory.create('customer');\n        },\n\n        editMode: {\n            get() {\n                if (typeof this.$route.query.edit === 'boolean') {\n                    return this.$route.query.edit;\n                }\n\n                return this.$route.query.edit === 'true';\n            },\n            set(editMode) {\n                this.$router.push({\n                    name: this.$route.name,\n                    query: { edit: editMode },\n                });\n            },\n        },\n\n        defaultCriteria() {\n            const criteria = new Criteria(1, 25);\n            criteria\n                .addAssociation('addresses')\n                .addAssociation('group')\n                .addAssociation('salutation')\n                .addAssociation('salesChannel.domains')\n                .addAssociation('boundSalesChannel.domains')\n                .addAssociation('lastPaymentMethod')\n                .addAssociation('defaultBillingAddress.country')\n                .addAssociation('defaultBillingAddress.countryState')\n                .addAssociation('defaultBillingAddress.salutation')\n                .addAssociation('defaultShippingAddress.country')\n                .addAssociation('defaultShippingAddress.countryState')\n                .addAssociation('defaultShippingAddress.salutation')\n                .addAssociation('tags')\n                .addAssociation('requestedGroup')\n                .addAssociation('boundSalesChannel');\n\n            criteria.getAssociation('addresses').addSorting(Criteria.sort('name'), 'ASC', false);\n\n            return criteria;\n        },\n\n        generalRoute() {\n            return {\n                name: 'sw.customer.detail.base',\n                params: { id: this.customerId },\n                query: { edit: this.editMode },\n            };\n        },\n\n        addressesRoute() {\n            return {\n                name: 'sw.customer.detail.addresses',\n                params: { id: this.customerId },\n                query: { edit: this.editMode },\n            };\n        },\n\n        ordersRoute() {\n            return {\n                name: 'sw.customer.detail.order',\n                params: { id: this.customerId },\n                query: { edit: this.editMode },\n            };\n        },\n\n        emailHasChanged() {\n            const origin = this.customer.getOrigin();\n            if (this.customer.isNew() || !origin.email) {\n                return true;\n            }\n\n            return origin.email !== this.customer.email;\n        },\n\n        validCompanyField() {\n            return this.customer.accountType === CUSTOMER.ACCOUNT_TYPE_BUSINESS\n                ? this.customer.company?.trim().length\n                : true;\n        },\n\n        salutationRepository() {\n            return this.repositoryFactory.create('salutation');\n        },\n\n        salutationCriteria() {\n            const criteria = new Criteria(1, 1);\n\n            criteria.addFilter(Criteria.equals('salutationKey', 'not_specified'));\n\n            return criteria;\n        },\n\n        ...mapPageErrors(errorConfig),\n    },\n\n    watch: {\n        customerId() {\n            this.createdComponent();\n        },\n    },\n\n    created() {\n        this.createdComponent();\n    },\n\n    methods: {\n        async loadCustomer() {\n            const defaultSalutationId = await this.getDefaultSalutation();\n\n            Cicada.ExtensionAPI.publishData({\n                id: 'sw-customer-detail__customer',\n                path: 'customer',\n                scope: this,\n            });\n            this.isLoading = true;\n\n            this.customerRepository.get(this.customerId, Cicada.Context.api, this.defaultCriteria).then((customer) => {\n                this.customer = customer;\n                if (!this.customer?.salutationId) {\n                    this.customer.salutationId = defaultSalutationId;\n                }\n\n                this.customer.addresses?.map((address) => {\n                    if (!address.salutationId) {\n                        address.salutationId = defaultSalutationId;\n                    }\n\n                    return address;\n                });\n\n                this.isLoading = false;\n            });\n        },\n\n        async createdComponent() {\n            await this.loadCustomer();\n        },\n\n        saveFinish() {\n            this.isSaveSuccessful = false;\n            this.editMode = false;\n            this.createdComponent();\n            this.isLoading = false;\n        },\n\n        validateEmail() {\n            const { id, email, boundSalesChannelId } = this.customer;\n\n            return this.customerValidationService\n                .checkCustomerEmail({\n                    id,\n                    email,\n                    boundSalesChannelId,\n                })\n                .then((emailIsValid) => {\n                    if (this.errorEmailCustomer) {\n                        Cicada.State.dispatch('error/addApiError', {\n                            expression: `customer.${this.customer.id}.email`,\n                            error: null,\n                        });\n                    }\n\n                    return emailIsValid;\n                })\n                .catch((exception) => {\n                    this.emailIsValid = false;\n                    Cicada.State.dispatch('error/addApiError', {\n                        expression: `customer.${this.customer.id}.email`,\n                        error: new CicadaError(exception.response.data.errors[0]),\n                    });\n                });\n        },\n\n        async onSave() {\n            this.isLoading = true;\n\n            if (!this.editMode) {\n                return false;\n            }\n\n            let hasError = false;\n            if (this.customer.email && this.emailHasChanged) {\n                const response = await this.validateEmail();\n\n                if (!response || !response.isValid) {\n                    hasError = true;\n                }\n            }\n\n            if (!this.validCompanyField) {\n                this.createErrorMessageForCompanyField();\n                hasError = true;\n            }\n\n            if (!(await this.validPassword(this.customer))) {\n                hasError = true;\n            }\n\n            if (hasError) {\n                this.createNotificationError({\n                    message: this.$tc('sw-customer.detail.messageSaveError'),\n                });\n                this.isLoading = false;\n                return false;\n            }\n\n            this.isSaveSuccessful = false;\n\n            if (!this.customer.birthday) {\n                this.customer.birthday = null;\n            }\n\n            if (this.customer.passwordNew) {\n                this.customer.password = this.customer.passwordNew;\n            }\n\n            if (this.customer.accountType === CUSTOMER.ACCOUNT_TYPE_PRIVATE) {\n                this.customer.vatIds = [];\n            }\n\n            return this.customerRepository\n                .save(this.customer)\n                .then(() => {\n                    this.isSaveSuccessful = true;\n                    this.createNotificationSuccess({\n                        message: this.$tc('sw-customer.detail.messageSaveSuccess', 0, {\n                            name: `${this.customer.name}`,\n                        }),\n                    });\n                })\n                .catch((exception) => {\n                    this.createNotificationError({\n                        message: this.$tc('sw-customer.detail.messageSaveError'),\n                    });\n                    this.isLoading = false;\n                    throw exception;\n                });\n        },\n\n        async onAbortButtonClick() {\n            this.discardChanges();\n            this.editMode = false;\n            await this.loadCustomer();\n        },\n\n        onActivateCustomerEditMode() {\n            this.editMode = true;\n        },\n\n        abortOnLanguageChange() {\n            return this.customerRepository.hasChanges(this.customer);\n        },\n\n        saveOnLanguageChange() {\n            return this.onSave();\n        },\n\n        onChangeLanguage(languageId) {\n            Cicada.State.commit('context/setApiLanguageId', languageId);\n            this.createdComponent();\n        },\n\n        async validPassword(customer) {\n            const { passwordNew, passwordConfirm } = customer;\n            const passwordSet = passwordNew || passwordConfirm;\n            const passwordNotEquals = passwordNew !== passwordConfirm;\n\n            if (passwordSet && passwordNotEquals) {\n                Cicada.State.dispatch('error/addApiError', {\n                    expression: `customer.${this.customer.id}.passwordConfirm`,\n                    error: new CicadaError({\n                        detail: this.$tc('sw-customer.error.passwordDoNotMatch'),\n                        code: 'password_not_match',\n                    }),\n                });\n\n                return false;\n            }\n\n            return true;\n        },\n\n        acceptCustomerGroupRegistration() {\n            this.customerGroupRegistrationService\n                .accept(this.customer.id)\n                .then(() => {\n                    this.createNotificationSuccess({\n                        message: this.$tc('sw-customer.customerGroupRegistration.acceptMessage'),\n                    });\n                })\n                .catch(() => {\n                    this.createNotificationError({\n                        message: this.$tc('sw-customer.customerGroupRegistration.errorMessage'),\n                    });\n                })\n                .finally(() => {\n                    this.createdComponent();\n                });\n        },\n\n        declineCustomerGroupRegistration() {\n            this.customerGroupRegistrationService\n                .decline(this.customer.id)\n                .then(() => {\n                    this.createNotificationSuccess({\n                        message: this.$tc('sw-customer.customerGroupRegistration.declineMessage'),\n                    });\n                })\n                .catch(() => {\n                    this.createNotificationError({\n                        message: this.$tc('sw-customer.customerGroupRegistration.errorMessage'),\n                    });\n                })\n                .finally(() => {\n                    this.createdComponent();\n                });\n        },\n\n        createErrorMessageForCompanyField() {\n            this.isLoading = false;\n            Cicada.State.dispatch('error/addApiError', {\n                expression: `customer.${this.customer.id}.company`,\n                error: new CicadaError({\n                    code: 'c1051bb4-d103-4f74-8988-acbcafc7fdc3',\n                }),\n            });\n        },\n\n        async getDefaultSalutation() {\n            const res = await this.salutationRepository.searchIds(this.salutationCriteria);\n\n            return res.data?.[0];\n        },\n    },\n};\n"],"names":["template","Mixin","Criteria","CicadaError","mapPageErrors","index","editMode","criteria","origin","CUSTOMER","_a","errorConfig","defaultSalutationId","customer","_b","address","id","email","boundSalesChannelId","emailIsValid","exception","hasError","response","languageId","passwordNew","passwordConfirm"],"mappings":"sGAAA,MAAeA,EAAA,y3ICST,CAAE,MAAAC,CAAO,EAAG,OACZ,CAAE,SAAAC,CAAQ,EAAK,OAAO,KACtB,CAAE,YAAAC,CAAW,EAAK,OAAO,QACzB,CAAE,cAAAC,CAAa,EAAK,OAAO,UAAU,mBAAkB,EAG9CC,EAAA,CACX,SAAAL,EAEA,aAAc,OAAO,aAErB,OAAQ,CACJ,oBACA,mCACA,MACA,4BACA,SACH,EAED,OAAQ,CACJC,EAAM,UAAU,cAAc,EAC9BA,EAAM,UAAU,YAAY,EAC5BA,EAAM,UAAU,6BAA6B,EAAE,UAAU,CAC5D,EAED,UAAW,CACP,cAAe,SACf,OAAQ,oBACX,EAED,MAAO,CACH,WAAY,CACR,KAAM,OACN,SAAU,EACb,CACJ,EAED,MAAO,CACH,MAAO,CACH,UAAW,GACX,iBAAkB,GAClB,SAAU,KACV,+BAAgC,CAAE,EAClC,wBAAyB,CAAE,EAC3B,mBAAoB,IAChC,CACK,EAED,UAAW,CACP,MAAO,CACH,MAAO,KAAK,aAAa,KAAK,UAAU,CACpD,CACK,EAED,SAAU,CACN,YAAa,CACT,OAAO,KAAK,WAAa,KAAO,KAAK,WAAW,KAAK,QAAQ,EAAI,EACpE,EAED,oBAAqB,CACjB,OAAO,KAAK,kBAAkB,OAAO,UAAU,CAClD,EAED,SAAU,CACN,KAAM,CACF,OAAI,OAAO,KAAK,OAAO,MAAM,MAAS,UAC3B,KAAK,OAAO,MAAM,KAGtB,KAAK,OAAO,MAAM,OAAS,MACrC,EACD,IAAIK,EAAU,CACV,KAAK,QAAQ,KAAK,CACd,KAAM,KAAK,OAAO,KAClB,MAAO,CAAE,KAAMA,CAAU,CAC7C,CAAiB,CACJ,CACJ,EAED,iBAAkB,CACd,MAAMC,EAAW,IAAIL,EAAS,EAAG,EAAE,EACnC,OAAAK,EACK,eAAe,WAAW,EAC1B,eAAe,OAAO,EACtB,eAAe,YAAY,EAC3B,eAAe,sBAAsB,EACrC,eAAe,2BAA2B,EAC1C,eAAe,mBAAmB,EAClC,eAAe,+BAA+B,EAC9C,eAAe,oCAAoC,EACnD,eAAe,kCAAkC,EACjD,eAAe,gCAAgC,EAC/C,eAAe,qCAAqC,EACpD,eAAe,mCAAmC,EAClD,eAAe,MAAM,EACrB,eAAe,gBAAgB,EAC/B,eAAe,mBAAmB,EAEvCA,EAAS,eAAe,WAAW,EAAE,WAAWL,EAAS,KAAK,MAAM,EAAG,MAAO,EAAK,EAE5EK,CACV,EAED,cAAe,CACX,MAAO,CACH,KAAM,0BACN,OAAQ,CAAE,GAAI,KAAK,UAAY,EAC/B,MAAO,CAAE,KAAM,KAAK,QAAU,CAC9C,CACS,EAED,gBAAiB,CACb,MAAO,CACH,KAAM,+BACN,OAAQ,CAAE,GAAI,KAAK,UAAY,EAC/B,MAAO,CAAE,KAAM,KAAK,QAAU,CAC9C,CACS,EAED,aAAc,CACV,MAAO,CACH,KAAM,2BACN,OAAQ,CAAE,GAAI,KAAK,UAAY,EAC/B,MAAO,CAAE,KAAM,KAAK,QAAU,CAC9C,CACS,EAED,iBAAkB,CACd,MAAMC,EAAS,KAAK,SAAS,UAAS,EACtC,OAAI,KAAK,SAAS,MAAO,GAAI,CAACA,EAAO,MAC1B,GAGJA,EAAO,QAAU,KAAK,SAAS,KACzC,EAED,mBAAoB,OAChB,OAAO,KAAK,SAAS,cAAgBC,EAAS,uBACxCC,EAAA,KAAK,SAAS,UAAd,YAAAA,EAAuB,OAAO,OAC9B,EACT,EAED,sBAAuB,CACnB,OAAO,KAAK,kBAAkB,OAAO,YAAY,CACpD,EAED,oBAAqB,CACjB,MAAMH,EAAW,IAAIL,EAAS,EAAG,CAAC,EAElC,OAAAK,EAAS,UAAUL,EAAS,OAAO,gBAAiB,eAAe,CAAC,EAE7DK,CACV,EAED,GAAGH,EAAcO,CAAW,CAC/B,EAED,MAAO,CACH,YAAa,CACT,KAAK,iBAAgB,CACxB,CACJ,EAED,SAAU,CACN,KAAK,iBAAgB,CACxB,EAED,QAAS,CACL,MAAM,cAAe,CACjB,MAAMC,EAAsB,MAAM,KAAK,uBAEvC,OAAO,aAAa,YAAY,CAC5B,GAAI,+BACJ,KAAM,WACN,MAAO,IACvB,CAAa,EACD,KAAK,UAAY,GAEjB,KAAK,mBAAmB,IAAI,KAAK,WAAY,OAAO,QAAQ,IAAK,KAAK,eAAe,EAAE,KAAMC,GAAa,SACtG,KAAK,SAAWA,GACXH,EAAA,KAAK,WAAL,MAAAA,EAAe,eAChB,KAAK,SAAS,aAAeE,IAGjCE,EAAA,KAAK,SAAS,YAAd,MAAAA,EAAyB,IAAKC,IACrBA,EAAQ,eACTA,EAAQ,aAAeH,GAGpBG,IAGX,KAAK,UAAY,EACjC,CAAa,CACJ,EAED,MAAM,kBAAmB,CACrB,MAAM,KAAK,cACd,EAED,YAAa,CACT,KAAK,iBAAmB,GACxB,KAAK,SAAW,GAChB,KAAK,iBAAgB,EACrB,KAAK,UAAY,EACpB,EAED,eAAgB,CACZ,KAAM,CAAE,GAAAC,EAAI,MAAAC,EAAO,oBAAAC,CAAmB,EAAK,KAAK,SAEhD,OAAO,KAAK,0BACP,mBAAmB,CAChB,GAAAF,EACA,MAAAC,EACA,oBAAAC,CACpB,CAAiB,EACA,KAAMC,IACC,KAAK,oBACL,OAAO,MAAM,SAAS,oBAAqB,CACvC,WAAY,YAAY,KAAK,SAAS,EAAE,SACxC,MAAO,IACnC,CAAyB,EAGEA,EACV,EACA,MAAOC,GAAc,CAClB,KAAK,aAAe,GACpB,OAAO,MAAM,SAAS,oBAAqB,CACvC,WAAY,YAAY,KAAK,SAAS,EAAE,SACxC,MAAO,IAAIjB,EAAYiB,EAAU,SAAS,KAAK,OAAO,CAAC,CAAC,CAChF,CAAqB,CACrB,CAAiB,CACR,EAED,MAAM,QAAS,CAGX,GAFA,KAAK,UAAY,GAEb,CAAC,KAAK,SACN,MAAO,GAGX,IAAIC,EAAW,GACf,GAAI,KAAK,SAAS,OAAS,KAAK,gBAAiB,CAC7C,MAAMC,EAAW,MAAM,KAAK,iBAExB,CAACA,GAAY,CAACA,EAAS,WACvBD,EAAW,GAElB,CAWD,OATK,KAAK,oBACN,KAAK,kCAAiC,EACtCA,EAAW,IAGT,MAAM,KAAK,cAAc,KAAK,QAAQ,IACxCA,EAAW,IAGXA,GACA,KAAK,wBAAwB,CACzB,QAAS,KAAK,IAAI,qCAAqC,CAC3E,CAAiB,EACD,KAAK,UAAY,GACV,KAGX,KAAK,iBAAmB,GAEnB,KAAK,SAAS,WACf,KAAK,SAAS,SAAW,MAGzB,KAAK,SAAS,cACd,KAAK,SAAS,SAAW,KAAK,SAAS,aAGvC,KAAK,SAAS,cAAgBZ,EAAS,uBACvC,KAAK,SAAS,OAAS,IAGpB,KAAK,mBACP,KAAK,KAAK,QAAQ,EAClB,KAAK,IAAM,CACR,KAAK,iBAAmB,GACxB,KAAK,0BAA0B,CAC3B,QAAS,KAAK,IAAI,wCAAyC,EAAG,CAC1D,KAAM,GAAG,KAAK,SAAS,IAAI,EACvD,CAAyB,CACzB,CAAqB,CACrB,CAAiB,EACA,MAAOW,GAAc,CAClB,WAAK,wBAAwB,CACzB,QAAS,KAAK,IAAI,qCAAqC,CAC/E,CAAqB,EACD,KAAK,UAAY,GACXA,CAC1B,CAAiB,EACR,EAED,MAAM,oBAAqB,CACvB,KAAK,eAAc,EACnB,KAAK,SAAW,GAChB,MAAM,KAAK,cACd,EAED,4BAA6B,CACzB,KAAK,SAAW,EACnB,EAED,uBAAwB,CACpB,OAAO,KAAK,mBAAmB,WAAW,KAAK,QAAQ,CAC1D,EAED,sBAAuB,CACnB,OAAO,KAAK,QACf,EAED,iBAAiBG,EAAY,CACzB,OAAO,MAAM,OAAO,2BAA4BA,CAAU,EAC1D,KAAK,iBAAgB,CACxB,EAED,MAAM,cAAcV,EAAU,CAC1B,KAAM,CAAE,YAAAW,EAAa,gBAAAC,CAAiB,EAAGZ,EAIzC,OAHoBW,GAAeC,IACTD,IAAgBC,GAGtC,OAAO,MAAM,SAAS,oBAAqB,CACvC,WAAY,YAAY,KAAK,SAAS,EAAE,mBACxC,MAAO,IAAItB,EAAY,CACnB,OAAQ,KAAK,IAAI,sCAAsC,EACvD,KAAM,oBAC9B,CAAqB,CACrB,CAAiB,EAEM,IAGJ,EACV,EAED,iCAAkC,CAC9B,KAAK,iCACA,OAAO,KAAK,SAAS,EAAE,EACvB,KAAK,IAAM,CACR,KAAK,0BAA0B,CAC3B,QAAS,KAAK,IAAI,qDAAqD,CAC/F,CAAqB,CACrB,CAAiB,EACA,MAAM,IAAM,CACT,KAAK,wBAAwB,CACzB,QAAS,KAAK,IAAI,oDAAoD,CAC9F,CAAqB,CACrB,CAAiB,EACA,QAAQ,IAAM,CACX,KAAK,iBAAgB,CACzC,CAAiB,CACR,EAED,kCAAmC,CAC/B,KAAK,iCACA,QAAQ,KAAK,SAAS,EAAE,EACxB,KAAK,IAAM,CACR,KAAK,0BAA0B,CAC3B,QAAS,KAAK,IAAI,sDAAsD,CAChG,CAAqB,CACrB,CAAiB,EACA,MAAM,IAAM,CACT,KAAK,wBAAwB,CACzB,QAAS,KAAK,IAAI,oDAAoD,CAC9F,CAAqB,CACrB,CAAiB,EACA,QAAQ,IAAM,CACX,KAAK,iBAAgB,CACzC,CAAiB,CACR,EAED,mCAAoC,CAChC,KAAK,UAAY,GACjB,OAAO,MAAM,SAAS,oBAAqB,CACvC,WAAY,YAAY,KAAK,SAAS,EAAE,WACxC,MAAO,IAAIA,EAAY,CACnB,KAAM,sCAC1B,CAAiB,CACjB,CAAa,CACJ,EAED,MAAM,sBAAuB,OAGzB,OAAOO,GAFK,MAAM,KAAK,qBAAqB,UAAU,KAAK,kBAAkB,GAElE,OAAJ,YAAAA,EAAW,EACrB,CACJ,CACL"}