const d=`{% block sw_product_variants_delivery_media %} <div class="sw-product-variants-delivery-media"> {% block sw_product_variants_delivery_media_groups %} <div class="sw-product-variants-delivery-media__groups"> <ul> <li v-for="group in selectedGroupsSorted" :key="group.id" class="sw-product-variants-delivery-media__groupElement" role="button" tabindex="0" :class="{'is--selected': activeGroup.id == group.id}" @click="activeGroup = group" @keydown.enter="activeGroup = group" > <sw-icon name="regular-folder" size="16px" /> {{ group.translated.name }} </li> </ul> </div> {% endblock %} {% block sw_product_variants_delivery_media_media %} <div v-if="activeOptions.length" class="sw-product-variants-delivery-media__media" > {% block sw_product_variants_delivery_media_data_grid %} <sw-data-grid ref="variantsMedia" :data-source="activeOptions" :columns="optionColumns" :show-actions="false" :show-selection="false" :compact-mode="false" full-page > {% block sw_product_variants_delivery_media_data_grid_column_name %} <template #column-name="{ item, isInlineEdit, compact }" > {{ item.option.translated.name }} </template> {% endblock %} {% block sw_product_variants_delivery_media_data_grid_column_option_media %} <template #column-option.media="{ item, isInlineEdit, compact }"> {% block sw_product_variants_delivery_media_data_grid_column_option_media_listener %} <sw-upload-listener :upload-tag="item.id" @media-upload-add="onUploadsAdded" @media-upload-finish="successfulUpload" /> {% endblock %} {% block sw_product_variants_delivery_media_data_grid_column_option_media_upload %} <sw-media-compact-upload-v2 :source="item.mediaId" :upload-tag="item.id" :default-folder="product.getEntityName()" @media-upload-remove-image="removeMedia(item)" @selection-change="setMedia" /> {% endblock %} </template> {% endblock %} </sw-data-grid> {% endblock %} </div> {% endblock %} {% block sw_product_variants_delivery_media_loader %} <sw-loader v-if="isLoading" /> {% endblock %} </div> {% endblock %}`,n={template:d,inject:["repositoryFactory","mediaService"],props:{product:{type:Object,required:!0},selectedGroups:{type:Array,required:!0}},data(){return{activeGroup:{},isLoading:!1}},computed:{selectedGroupsSorted(){let i=[];const e=[...this.selectedGroups];return this.product.variantListingConfig.configuratorGroupConfig&&this.product.variantListingConfig.configuratorGroupConfig.length>0&&(i=this.product.variantListingConfig.configuratorGroupConfig.reduce((t,o)=>{const a=e.find(r=>r.id===o.id);return a&&(t.push(a),e.splice(e.indexOf(a),1)),t},[])),i=[...i,...e],i},optionColumns(){return[{property:"name",label:"sw-product.variations.deliveryModal.mediaOptions",rawData:!0},{property:"option.media",label:"sw-product.variations.deliveryModal.media",rawData:!0}]},activeOptions(){return this.product.configuratorSettings.filter(i=>!i.isDeleted&&i.option.groupId===this.activeGroup.id)}},watch:{activeGroup:{handler(){this.product.variantListingConfig.configuratorGroupConfig.find(i=>i.id===this.activeGroup.id)}}},methods:{async onUploadsAdded({data:i}){if(i.length===0)return;const e=i[0],t=this.activeOptions.find(o=>o.id===e.uploadTag);this.isLoading=!0,i.forEach(o=>{t.mediaId=o.targetId}),await this.mediaService.runUploads(e.uploadTag)},async successfulUpload(){this.isLoading=!1,this.$forceUpdate()},removeMedia(i){i.mediaId=null},setMedia(i,e){const t=this.activeOptions.find(o=>o.id===e);t.mediaId=i[0].id},onChangeGroupListing(i){const e=this.product.variantListingConfig.configuratorGroupConfig.findIndex(t=>t.id===this.activeGroup.id);if(e>=0){const t=this.product.variantListingConfig.configuratorGroupConfig[e];this.product.variantListingConfig.configuratorGroupConfig[e]={id:t.id,expressionForListings:i,representation:t.representation}}else this.product.variantListingConfig.configuratorGroupConfig=[...this.product.variantListingConfig.configuratorGroupConfig,{id:this.activeGroup.id,expressionForListings:i,representation:"box"}]}}};export{n as default};
