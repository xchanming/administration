{"version":3,"file":"index-C7uDg84w.js","sources":["../../../app/administration/src/module/sw-flow/view/listing/sw-flow-list/sw-flow-list.html.twig","../../../app/administration/src/module/sw-flow/view/listing/sw-flow-list/index.js"],"sourcesContent":["<!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n{% block sw_flow_list %}\n<div class=\"sw-flow-list\">\n    <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n    {% block sw_flow_list_search_bar %}{% endblock %}\n\n    <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n    {% block sw_flow_list_smart_bar_header %}{% endblock %}\n\n    <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n    {% block sw_flow_list_smart_bar_actions %}{% endblock %}\n\n    <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n    {% block sw_flow_list_content %}\n    <sw-card\n        class=\"sw-flow-list-card\"\n        position-identifier=\"sw-flow-list-card\"\n    >\n        <sw-entity-listing\n            class=\"sw-flow-list__grid\"\n            show-selection\n            :show-settings=\"false\"\n            :allow-column-edit=\"false\"\n            :allow-view=\"acl.can('flow.viewer')\"\n            :allow-edit=\"acl.can('flow.editor')\"\n            :allow-delete=\"acl.can('flow.deleter')\"\n            :columns=\"flowColumns\"\n            :sort-by=\"sortBy\"\n            :sort-direction=\"sortDirection\"\n            :repository=\"flowRepository\"\n            :items=\"flows\"\n            :is-loading=\"isLoading\"\n            :full-page=\"false\"\n            :plain-appearance=\"true\"\n            @column-sort=\"onSortColumn\"\n            @page-change=\"onPageChange\"\n            @update-records=\"updateRecords\"\n            @selection-change=\"selectionChange\"\n        >\n            <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n            {% block sw_flow_list_grid_columns %}\n\n            <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n            {% block sw_flow_list_grid_columns_active %}\n            <template #column-active=\"{ item }\">\n                <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n                {% block sw_flow_list_columns_active_label %}\n                <sw-icon\n                    size=\"12px\"\n                    :color=\"item.active ? `#37d046` : `#de294c`\"\n                    :name=\"item.active ? `regular-checkmark-xs` : `regular-times-s`\"\n                />\n                {% endblock %}\n            </template>\n            {% endblock %}\n\n            <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n            {% block sw_flow_list_grid_columns_event_name %}\n            <template #column-eventName=\"{ item }\">\n                <div v-if=\"isValidTrigger(item.eventName)\">\n                    <strong>\n                        {{ getTranslatedEventName(item.eventName) }}\n                    </strong>\n                    <p>{{ item.eventName }}</p>\n                </div>\n                <div v-else>\n                    <p>{{ $tc('sw-flow.list.unknownTrigger') }}</p>\n                </div>\n            </template>\n            {% endblock %}\n            {% endblock %}\n\n            <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n            {% block sw_flow_list_grid_actions %}\n            <template #actions=\"{ item }\">\n\n                <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n                {% block sw_flow_list_grid_actions_duplicate %}\n                <sw-context-menu-item\n                    class=\"sw-flow-list__item-duplicate\"\n                    :disabled=\"!acl.can('flow.creator')\"\n                    @click=\"onDuplicateFlow(item)\"\n                >\n                    {{ $tc('global.default.duplicate') }}\n                </sw-context-menu-item>\n                {% endblock %}\n\n                <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n                {% block sw_flow_list_grid_actions_edit %}\n                <sw-context-menu-item\n                    class=\"sw-flow-list__item-edit\"\n                    :disabled=\"!acl.can('flow.editor') && !acl.can('flow.viewer')\"\n                    @click=\"onEditFlow(item)\"\n                >\n                    {{ detailPageLinkText }}\n                </sw-context-menu-item>\n                {% endblock %}\n\n                <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n                {% block sw_flow_list_grid_actions_custom %}\n                {% endblock %}\n\n                <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n                {% block sw_flow_list_grid_actions_delete %}\n                <sw-context-menu-item\n                    class=\"sw-context-menu-item--danger sw-flow-list__item-delete\"\n                    :disabled=\"!acl.can('flow.deleter')\"\n                    @click=\"onDeleteFlow(item)\"\n                >\n                    {{ $tc('global.default.delete') }}\n                </sw-context-menu-item>\n                {% endblock %}\n            </template>\n            {% endblock %}\n\n            <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n            {% block sw_flow_list_grid_action_modal %}\n            <template #action-modals=\"{ item }\">\n                <sw-modal\n                    v-if=\"currentFlow.id === item.id && isDeleting\"\n                    variant=\"small\"\n                    :title=\"$tc('global.default.warning')\"\n                    @modal-close=\"onCloseDeleteModal\"\n                >\n                    <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n                    {% block sw_flow_list_grid_action_modal_confirm_delete_text %}\n                    <sw-alert variant=\"warning\">\n                        {{ deleteWarningMessage() }}\n                    </sw-alert>\n                    {% endblock %}\n\n                    <template #modal-footer>\n                        <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n                        {% block sw_flow_list_grid_action_modal_buttons %}\n                        <sw-button\n                            size=\"small\"\n                            @click=\"onCloseDeleteModal\"\n                        >\n                            {{ $tc('global.default.cancel') }}\n                        </sw-button>\n                        <sw-button\n                            size=\"small\"\n                            variant=\"danger\"\n                            @click=\"onConfirmDelete(item)\"\n                        >\n                            {{ $tc('global.default.delete') }}\n                        </sw-button>\n                        {% endblock %}\n                    </template>\n                </sw-modal>\n            </template>\n            {% endblock %}\n\n            <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n            {% block sw_flow_list_grid_bulk_modal_delete_confirm_text %}\n            <template #bulk-modal-delete-confirm-text=\"{ selectionCount }\">\n                <sw-alert variant=\"warning\">\n                    {{ bulkDeleteWarningMessage(selectionCount) }}\n                </sw-alert>\n            </template>\n            {% endblock %}\n        </sw-entity-listing>\n\n        <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n        {% block sw_flow_list_empty_state %}\n        <sw-empty-state\n            v-if=\"!total && !isLoading\"\n            class=\"sw-flow-list__empty-state\"\n            :title=\"$tc('sw-flow.list.emptyStateTitle')\"\n            :subline=\"$tc('sw-flow.list.emptyStateSubTitle')\"\n        >\n            <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n            {% block sw_flow_list_empty_state_icon %}\n            <template #icon>\n                <img\n                    :alt=\"$tc('sw-flow.list.emptyStateTitle')\"\n                    :src=\"assetFilter('/administration/static/img/empty-states/settings-empty-state.svg')\"\n                >\n            </template>\n            {% endblock %}\n        </sw-empty-state>\n        {% endblock %}\n\n        <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n        {% block sw_flow_list_modal_content_custom %}\n        {% endblock %}\n    </sw-card>\n    {% endblock %}\n</div>\n{% endblock %}\n","import template from './sw-flow-list.html.twig';\nimport './sw-flow-list.scss';\n\nconst {\n    Mixin,\n    Data: { Criteria },\n    Component,\n} = Cicada;\nconst { mapState } = Component.getComponentHelper();\n\n/**\n * @private\n * @package services-settings\n */\nexport default {\n    template,\n\n    compatConfig: Cicada.compatConfig,\n\n    inject: [\n        'acl',\n        'repositoryFactory',\n    ],\n\n    emits: ['on-update-total'],\n\n    mixins: [\n        Mixin.getByName('notification'),\n        Mixin.getByName('listing'),\n    ],\n\n    props: {\n        searchTerm: {\n            type: String,\n            required: false,\n            default: '',\n        },\n    },\n\n    data() {\n        return {\n            sortBy: 'createdAt',\n            sortDirection: 'DESC',\n            total: 0,\n            isLoading: false,\n            isDeleting: false,\n            isDownloading: false,\n            flows: null,\n            currentFlow: {},\n            selectedItems: [],\n        };\n    },\n\n    metaInfo() {\n        return {\n            title: this.$createTitle(),\n        };\n    },\n\n    computed: {\n        flowRepository() {\n            return this.repositoryFactory.create('flow');\n        },\n\n        flowCriteria() {\n            const criteria = new Criteria(this.page, this.limit);\n\n            if (this.searchTerm) {\n                criteria.setTerm(this.searchTerm);\n            }\n\n            criteria\n                .addSorting(Criteria.sort(this.sortBy, this.sortDirection))\n                .addSorting(Criteria.sort('updatedAt', 'DESC'));\n\n            return criteria;\n        },\n\n        flowColumns() {\n            return [\n                {\n                    property: 'active',\n                    label: this.$tc('sw-flow.list.labelColumnActive'),\n                    width: '80px',\n                    sortable: true,\n                },\n                {\n                    property: 'name',\n                    dataIndex: 'name',\n                    label: this.$tc('sw-flow.list.labelColumnName'),\n                    allowResize: true,\n                    routerLink: 'sw.flow.detail',\n                    primary: true,\n                },\n                {\n                    property: 'eventName',\n                    dataIndex: 'eventName',\n                    label: this.$tc('sw-flow.list.labelColumnTrigger'),\n                    allowResize: true,\n                    multiLine: true,\n                },\n                {\n                    property: 'description',\n                    label: this.$tc('sw-flow.list.labelColumnDescription'),\n                    allowResize: true,\n                    sortable: false,\n                },\n            ];\n        },\n\n        detailPageLinkText() {\n            if (!this.acl.can('flow.editor') && this.acl.can('flow.viewer')) {\n                return this.$tc('global.default.view');\n            }\n\n            return this.$tc('global.default.edit');\n        },\n\n        assetFilter() {\n            return Cicada.Filter.getByName('asset');\n        },\n\n        ...mapState('swFlowState', ['triggerEvents']),\n    },\n\n    watch: {\n        searchTerm(value) {\n            this.onSearch(value);\n        },\n    },\n\n    created() {\n        this.createComponent();\n    },\n\n    methods: {\n        createComponent() {\n            this.getList();\n        },\n\n        getList() {\n            this.isLoading = true;\n            Cicada.State.dispatch('swFlowState/fetchTriggerActions');\n\n            this.flowRepository\n                .search(this.flowCriteria)\n                .then((data) => {\n                    this.total = data.total;\n                    this.flows = data;\n                })\n                .finally(() => {\n                    this.isLoading = false;\n                });\n        },\n\n        isValidTrigger(eventName) {\n            return this.triggerEvents.some((event) => event.name === eventName);\n        },\n\n        onDuplicateFlow(item) {\n            const behavior = {\n                overwrites: {\n                    name: `${item.name} - ${this.$tc('global.default.copy')}`,\n                },\n            };\n\n            this.flowRepository\n                .clone(item.id, behavior, Cicada.Context.api)\n                .then((response) => {\n                    this.createNotificationSuccess({\n                        message: this.$tc('sw-flow.flowNotification.messageDuplicateSuccess'),\n                    });\n\n                    if (response?.id) {\n                        this.$router.push({\n                            name: 'sw.flow.detail',\n                            params: { id: response.id },\n                        });\n                    }\n                })\n                .catch(() => {\n                    this.createNotificationError({\n                        message: this.$tc('sw-flow.flowNotification.messageDuplicateError'),\n                    });\n                });\n        },\n\n        onEditFlow(item) {\n            if (item?.id) {\n                this.$router.push({\n                    name: 'sw.flow.detail',\n                    params: {\n                        id: item.id,\n                    },\n                });\n            }\n        },\n\n        onDeleteFlow(item) {\n            this.isDeleting = true;\n            this.currentFlow = item;\n        },\n\n        onCloseDeleteModal() {\n            this.isDownload = false;\n            this.currentFlow = {};\n        },\n\n        onConfirmDelete(item) {\n            this.isDeleting = false;\n            this.currentFlow = {};\n\n            return this.flowRepository\n                .delete(item.id)\n                .then(() => {\n                    this.createNotificationSuccess({\n                        message: this.$tc('sw-flow.flowNotification.messageDeleteSuccess'),\n                    });\n                    this.getList();\n                })\n                .catch(() => {\n                    this.createNotificationError({\n                        message: this.$tc('sw-flow.flowNotification.messageDeleteError'),\n                    });\n                });\n        },\n\n        updateRecords(result) {\n            this.flows = result;\n            this.total = result.total;\n\n            this.$emit('on-update-total', this.total);\n        },\n\n        getTranslatedEventName(value) {\n            const snippetKey = value.replace(/\\./g, '_');\n            const globalKey = `global.businessEvents.${snippetKey}`;\n            const customKey = `sw-flow-custom-event.flow-list.${snippetKey}`;\n            return this.$te(globalKey) ? this.$tc(globalKey) : this.$tc(customKey);\n        },\n\n        selectionChange(selection) {\n            this.selectedItems = Object.values(selection);\n        },\n\n        deleteWarningMessage() {\n            return `${this.$tc('sw-flow.list.warningDeleteText')} ${this.$tc('sw-flow.list.confirmText')}`;\n        },\n\n        bulkDeleteWarningMessage(selectionCount) {\n            return `${this.$tc('sw-flow.list.warningDeleteText')}\n            ${this.$tc('global.entity-components.deleteMessage', selectionCount, { count: selectionCount })}`;\n        },\n    },\n};\n"],"names":["template","Mixin","Criteria","Component","mapState","index","criteria","value","data","eventName","event","item","behavior","response","result","snippetKey","globalKey","customKey","selection","selectionCount"],"mappings":"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"}