const u=`{% block sw_import_export_entity_path_select %} <sw-select-base ref="selectBase" class="sw-import-export-entity-path-select" :is-loading="isLoading" v-bind="$attrs" @select-expanded="onSelectExpanded" @select-collapsed="onSelectCollapsed" v-on="listeners" > {% block sw_import_export_entity_path_select_base %} {% block sw_import_export_entity_path_select_base_selection %} <template #sw-select-selection="{ identification, error, disabled, size, setFocusClass, removeFocusClass }"> {% block sw_import_export_entity_path_select_base_selection_slot %} <div class="sw-import-export-entity-path-select__selection"> {% block sw_import_export_entity_path_select_single_selection_inner %} {% block sw_import_export_entity_path_select_single_selection_inner_label %} <div v-if="!isExpanded" class="sw-import-export-entity-path-select__selection-text" :class="selectionTextClasses" > <template v-if="singleSelection"> <slot name="selection-label-property" v-bind="{ item: singleSelection, labelProperty, valueProperty, searchTerm, getKey }" > {{ getKey(singleSelection, labelProperty) }} </slot> </template> <template v-else> {{ placeholder }} </template> </div> {% endblock %} {% block sw_import_export_entity_path_select_single_selection_inner_input %} <input ref="swSelectInput" v-model="searchInput" class="sw-import-export-entity-path-select__selection-input" :class="inputClasses" type="text" :placeholder="placeholder" @input="onInputSearch" > {% endblock %} {% endblock %} </div> {% endblock %} </template> {% endblock %} {% block sw_import_export_entity_path_select_base_results %} <template #results-list> {% block sw_import_export_entity_path_select_base_results_slot %} <sw-select-result-list ref="resultsList" :options="visibleResults" :is-loading="isLoading" :empty-message="$tc('global.sw-single-select.messageNoResults', 0, { term: searchInput })" :focus-el="$refs.swSelectInput" :popover-classes="resultListClasses" @paginate="$emit('paginate')" @item-select="setValue" > {% block sw_import_export_entity_path_select_base_results_list %} {% block sw_import_export_entity_path_select_base_results_list_before %} <template #before-item-list> <slot name="before-item-list"> <sw-select-result :selected="isSelected(notMappedItem)" v-bind="{ item: notMappedItem, index: -1 }" @item-select="setValue" > {% block sw_import_export_entity_path_select_base_results_list_not_mapped_label %} {{ notMappedItem.label }} {% endblock %} </sw-select-result> <hr class="sw-import-export-entity-path-select__listing-seperator"> </slot> </template> {% endblock %} {% block sw_import_export_entity_path_select_base_results_list_result %} <template #result-item="{ item, index }"> <slot name="result-item" v-bind="{ item, index, labelProperty, searchTerm, highlightSearchTerm, isSelected, setValue, getKey }" > <sw-select-result :selected="isSelected(item)" v-bind="{ item, index }" @item-select="setValue" > {% block sw_import_export_entity_path_select_base_results_list_result_label %} <slot name="result-label-property" v-bind="{ item, index, labelProperty, valueProperty, searchTerm, highlightSearchTerm, getKey }" > <sw-highlight-text v-if="highlightSearchTerm" :text="getKey(item, labelProperty)" :search-term="searchTerm" /> <template v-else> {{ getKey(item, labelProperty) }} </template> <sw-icon v-if="item.relation && item.relation !== 'many_to_many'" name="regular-chevron-right-xxs" size="16px" /> </slot> {% endblock %} </sw-select-result> </slot> </template> {% endblock %} {% block sw_import_export_entity_path_select_base_results_list_after %} <template #after-item-list> <slot name="after-item-list"></slot> </template> {% endblock %} {% endblock %} </sw-select-result-list> {% endblock %} </template> {% endblock %} {% endblock %} </sw-select-base> {% endblock %}`,{Mixin:p}=Cicada,{debounce:h,get:d,flow:_}=Cicada.Utils,f={template:u,compatConfig:Cicada.compatConfig,inject:["feature"],emits:["paginate","update:value","before-selection-clear","search"],mixins:[p.getByName("remove-api-error")],props:{value:{required:!0},entityType:{type:String,required:!0},isLoading:{type:Boolean,required:!1,default:!1},highlightSearchTerm:{type:Boolean,required:!1,default:!0},placeholder:{type:String,required:!1,default:""},valueProperty:{type:String,required:!1,default:"value"},searchFunction:{type:Function,required:!1,default({options:e,labelProperty:t,searchTerm:s}){return e.filter(i=>{const r=this.getKey(i,t);return r?s?this.actualPathPrefix?!!r.split(this.actualPathPrefix)[1].match(new RegExp(s.split(this.actualPathPrefix)[1].replaceAll(/\./g,"([-.\\w]*)"),"gi")):r.match(new RegExp(s.replaceAll(/\./g,"([-.\\w]*)"),"gi")):!0:!1})}},currencies:{type:Array,required:!1,default(){return[{isoCode:"DEFAULT"}]}},languages:{type:Array,required:!1,default(){return[{locale:{code:"DEFAULT"}}]}},customFieldSets:{type:Array,required:!1,default(){return[]}}},data(){return{labelProperty:"label",searchInput:"",actualSearch:"",isExpanded:!1,itemRecentlySelected:!1,priceProperties:["net","gross","currencyId","linked","listPrice.net","listPrice.gross","listPrice.linked"],visibilityProperties:["all","link","search"],notMappedItem:{label:this.$t("sw-import-export.profile.mapping.notMapped"),relation:void 0,value:""}}},computed:{currentValue:{get(){return this.value||""},set(e){this.$emit("update:value",e)}},inputClasses(){return{"is--expanded":this.isExpanded}},selectionTextClasses(){return{"is--placeholder":!this.singleSelection}},resultListClasses(){return["sw-import-export-entity-path-select__result-list"]},singleSelection:{get(){return this.currentValue===""||this.currentValue===null?this.notMappedItem:this.results.find(e=>this.getKey(e,this.valueProperty)===this.currentValue)},set(e){e===null&&(e=""),this.currentValue=this.getKey(e,this.valueProperty)}},visibleResults(){if(this.singleSelection){const e=[];this.singleSelection.value!==this.notMappedItem.value&&e.push(this.singleSelection);const t=this.getKey(this.singleSelection,this.valueProperty);return this.results.forEach(s=>{this.getKey(s,this.valueProperty)!==t&&e.push(s)}),e}return this.results},actualPathPrefix(){let e="",t=this.entityType;return this.actualPathParts.forEach(s=>{var r;if(!t)return;if(s==="customFields"||this.lowerCaseIsoCodes.includes(s.toLowerCase())||this.lowerCaseLocales.includes(s.toLowerCase())){e=e.concat(s,".");return}const i=Cicada.EntityDefinition.get(t);if(!((r=i.properties[s])!=null&&r.entity)){t="";return}e=e.concat(s,"."),t=i.properties[s].entity}),e},actualPathParts(){const e=this.isExpanded?this.actualSearch.split("."):this.currentValue.split(".");return e.splice(-1,1),e[e.length-1]==="customFields"?e:e.filter(t=>this.lowerCaseIsoCodes.includes(t.toLowerCase())||this.lowerCaseLocales.includes(t.toLowerCase())?!1:!["translations","visibilities","price","listPrice","purchasePrices"].includes(t))},currentEntity(){if(this.actualPathParts.length===0)return this.entityType;const e=this.actualPathParts;let t=Cicada.EntityDefinition.get(this.entityType),s=!1;return e.forEach(i=>{const r=t.properties[i];if(!r||i==="translations"&&r.relation==="one_to_many"||i==="visibilities"&&r.relation==="one_to_many"||i==="media"&&r.relation==="one_to_many"||i==="assignedProducts"&&r.relation==="one_to_many"||i==="lineItems"&&r.relation==="one_to_many"||i==="categories"&&r.relation==="many_to_many"||i==="price"&&r.type==="json_object"||i==="customFields"&&r.type==="json_object")return;const n=t.properties[i].entity;s=Cicada.EntityDefinition.has(n),s&&(t=Cicada.EntityDefinition.get(n))}),s?t.entity:null},processFunctions(){return[this.processTranslations,this.processVisibilities,this.processMedia,this.processAssignedProducts,this.processPrice,this.processLineItems,this.processTransactions,this.processDeliveries,this.processProperties,this.processCategories]},options(){const e=this.actualPathParts[this.actualPathParts.length-1]==="customFields";if(this.currentEntity===null&&!e)return[];let t;e?t={properties:this.getCustomFields(this.currentEntity||this.entityType)}:t=Cicada.EntityDefinition.get(this.currentEntity);const s={definition:t,options:[],properties:Object.keys(t.properties),path:this.actualPathPrefix},{options:i}=_(this.processFunctions)(s);return i.sort(this.sortOptions)},results(){return this.searchFunction({options:this.options,labelProperty:this.labelProperty,valueProperty:this.valueProperty,searchTerm:this.actualSearch})},availableIsoCodes(){return this.currencies.map(e=>e.isoCode)},lowerCaseIsoCodes(){return this.availableIsoCodes.map(e=>e.toLowerCase())},availableLocales(){return this.languages.map(e=>e.locale.code)},lowerCaseLocales(){return this.availableLocales.map(e=>e.toLowerCase())},searchTerm(){return this.actualSearch.split(".").pop()},listeners(){return this.isCompatEnabled("INSTANCE_LISTENERS")?this.$listeners:{}}},methods:{isSelected(e){return this.getKey(e,this.valueProperty)===this.value},onSelectExpanded(){this.isExpanded=!0,this.searchInput=this.currentValue,this.$nextTick(()=>{this.resetActiveItem(),this.$refs.swSelectInput.select(),this.$refs.swSelectInput.focus(),this.search()})},tryGetSearchText(e){return this.getKey(e,this.labelProperty,"")},onSelectCollapsed(){this.$attrs.disabled||(this.searchInput===""&&!this.itemRecentlySelected&&(this.$emit("before-selection-clear",this.singleSelection,this.value),this.currentValue=""),this.$refs.swSelectInput.blur(),this.searchInput="",this.actualSearch="",this.itemRecentlySelected=!1,this.isExpanded=!1)},closeResultList(){this.$refs.selectBase.collapse()},setValue(e){if(this.itemRecentlySelected=!0,this.singleSelection=e,e.relation&&e.relation!=="many_to_many"){this.actualSearch=`${e.value}.`,this.searchInput=this.actualSearch,this.$refs.swSelectInput.select();return}this.currentValue=e.value,this.closeResultList()},resetActiveItem(e=0){this.$refs.resultsList&&(this.singleSelection&&(e=1),this.$refs.resultsList.setActiveItemIndex(e))},onInputSearch(){this.debouncedSearch()},debouncedSearch:h(function(){this.search()},300),search(){this.$emit("search",this.searchInput),this.actualSearch=this.searchInput,this.$nextTick(()=>{this.resetActiveItem()})},getKey(e,t,s){return d(e,t,s)},processTranslations({definition:e,options:t,properties:s,path:i}){const r=e.properties.translations;if(!r||r.relation!=="one_to_many")return{properties:s,options:t,definition:e,path:i};const n=Cicada.EntityDefinition.get(r.entity),o=Object.keys(n.properties),l=[...t,...this.getTranslationProperties(i,o)];return{properties:s.filter(a=>!o.includes(a)&&a!=="translations"),options:l,definition:e,path:i}},getTranslationProperties(e,t){e=`${e}translations.`;const s=[];return this.availableLocales.forEach(i=>{t.forEach(r=>{const n=`${e}${i}.${r}`;if(r==="customFields"){s.push({label:n,value:n,relation:!0});return}s.push({label:n,value:n})})}),s},processPrice({definition:e,options:t,properties:s,path:i}){const r=e.properties.price;if(!r||r.type!=="json_object")return{properties:s,options:t,definition:e,path:i};const n=[...t,...this.getPriceProperties(i)];return{properties:s.filter(l=>l!=="price"&&l!=="purchasePrices"),options:n,definition:e,path:i}},getPriceProperties(e){return[...this.generatePriceProperties("price",e),...this.generatePriceProperties("purchasePrices",e)]},generatePriceProperties(e,t){const s=[];return this.currencies.forEach(i=>{this.priceProperties.forEach(r=>{const n=`${t}${e}.${i.isoCode}.${r}`;s.push({label:n,value:n})})}),s},processLineItems({definition:e,options:t,properties:s,path:i}){const r=e.properties.lineItems;if(!r||r.relation!=="one_to_many")return{definition:e,options:t,properties:s,path:i};const n=[...t,...this.generateLineItemProperties(i)];return{properties:s.filter(l=>l!=="lineItems"),options:n,definition:e,path:i}},generateLineItemProperties(e){const t=`${e}lineItems`;return[{label:t,value:t}]},processTransactions({definition:e,options:t,properties:s,path:i}){const r=e.properties.transactions;if(!r||r.relation!=="one_to_many")return{definition:e,options:t,properties:s,path:i};const n=Cicada.EntityDefinition.get(r.entity),o=Object.keys(n.properties),l=[...t,...this.generateTransactionsProperties(i,o)];return{properties:s.filter(a=>a!=="transactions"),options:l,definition:e,path:i}},generateTransactionsProperties(e,t){return t.reduce((s,i)=>{const r=`${e}transactions.${i}`;return s.push({value:r,label:r}),s},[])},processDeliveries({definition:e,options:t,properties:s,path:i}){const r=e.properties.deliveries;if(!r||r.relation!=="one_to_many")return{properties:s,options:t,definition:e,path:i};const n=Cicada.EntityDefinition.get(r.entity),o=Object.keys(n.properties),l=[...t,...this.generateDeliveryProperties(i,o)];return{properties:s.filter(a=>a!=="deliveries"),options:l,definition:e,path:i}},generateDeliveryProperties(e,t){return t.reduce((s,i)=>{const r=`${e}deliveries.${i}`;return s.push({value:r,label:r}),s},[])},processProperties({definition:e,options:t,properties:s,path:i}){const r=[...t];return s.forEach(n=>{const o=`${i}${n}`,l=e.properties[n];l.relation!=="one_to_many"&&r.push({label:o,value:o,relation:l.relation})}),{definition:e,options:r,properties:s,path:i}},processVisibilities({definition:e,options:t,properties:s,path:i}){const r=e.properties.visibilities;if(!r||r.relation!=="one_to_many")return{properties:s,options:t,definition:e,path:i};const n=[...t,...this.getVisibilityProperties(i)];return{properties:s.filter(l=>l!=="visibilities"),options:n,definition:e,path:i}},getVisibilityProperties(e){return this.visibilityProperties.reduce((t,s)=>{const i=`${e}visibilities.${s}`;return t.push({label:i,value:i}),t},[])},processMedia({definition:e,options:t,properties:s,path:i}){const r=e.properties.media;if(!r||r.relation!=="one_to_many")return{properties:s,options:t,definition:e,path:i};const n=[...t,...this.getMediaProperties(i)];return{properties:s.filter(l=>l!=="media"),options:n,definition:e,path:i}},getMediaProperties(e){const t=`${e}media`;return[{label:t,value:t}]},processAssignedProducts({definition:e,options:t,properties:s,path:i}){const r=e.properties.assignedProducts;if(!r||r.relation!=="one_to_many")return{properties:s,options:t,definition:e,path:i};const n=[...t,...this.getAssignedProductsProperties(i)];return{properties:s.filter(l=>l!=="assignedProducts"),options:n,definition:e,path:i}},getAssignedProductsProperties(e){const t=`${e}assignedProducts`;return[{label:t,value:t}]},processCategories({definition:e,options:t,properties:s,path:i}){const r=e.properties.categories;if((r==null?void 0:r.relation)!=="one_to_many")return{properties:s,options:t,definition:e,path:i};const n=[...t,...this.getCategoryProperties(i)];return{properties:s.filter(l=>l!=="categories"),options:n,definition:e,path:i}},getCategoryProperties(e){const t=`${e}categories`;return[{label:t,value:t}]},sortOptions(e,t){return e.value>t.value?1:t.value>e.value?-1:0},getCustomFields(e){const t={};return this.customFieldSets.forEach(s=>{s.relations.filter(r=>r.entityName===e).length>0&&s.customFields.forEach(r=>{t[r.name]={label:r.name,value:r.name}})}),t}}};export{f as default};
//# sourceMappingURL=index-al3ke0eK.js.map
