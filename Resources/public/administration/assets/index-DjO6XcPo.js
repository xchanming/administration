const r='{% block sw_bulk_edit_save_modal_success %} <div class="sw-bulk-edit-save-modal-success"> {% block sw_bulk_edit_save_modal_success_icon %} <sw-label class="sw-bulk-edit-save-modal__icon" appearance="pill" variant="success" > <sw-icon name="regular-check-circle" size="30px" /> </sw-label> {% endblock %} {% block sw_bulk_edit_save_modal_error_content %} <p class="sw-bulk-edit-save-modal__help-text" v-html="description" > </p> {% endblock %} {% block sw_bulk_edit_save_modal_success_download_document %} <ul v-if="selectedDocumentTypes.length > 0" class="sw-bulk-edit-save-modal-success__download-document-container" > <li v-for="selectedDocumentType in selectedDocumentTypes" :key="selectedDocumentType.id" class="sw-bulk-edit-save-modal-success__download-document" :class="`is--${selectedDocumentType.technicalName}`" > <span class="label"> {{ selectedDocumentType.translated.name }} </span> <sw-button class="action" size="small" :disabled="document[selectedDocumentType.technicalName].isDownloading" @click="downloadDocument(selectedDocumentType.technicalName)" > {{ $tc(\'sw-bulk-edit.modal.success.buttonDownload\') }} </sw-button> </li> </ul> {% endblock %} </div> {% endblock %}',{Criteria:a}=Shopware.Data,u={template:r,inject:["repositoryFactory","orderDocumentApiService"],emits:["title-set","buttons-update"],mixins:[Shopware.Mixin.getByName("notification")],data(){return{latestDocuments:{},document:{invoice:{isDownloading:!1},storno:{isDownloading:!1},delivery_note:{isDownloading:!1},credit_note:{isDownloading:!1}}}},computed:{documentRepository(){return this.repositoryFactory.create("document")},selectedIds(){return Shopware.Store.get("shopwareApps").selectedIds},downloadOrderDocuments(){var e,t;return(t=(e=Shopware.Store.get("swBulkEdit"))==null?void 0:e.orderDocuments)==null?void 0:t.download},latestDocumentsCriteria(){const e=new a(1,null);return e.addFilter(a.equalsAny("documentTypeId",this.selectedDocumentTypes.map(t=>t.id))),e.addFilter(a.equalsAny("orderId",this.selectedIds)),e.addSorting(a.sort("createdAt","DESC")),e},selectedDocumentTypes(){return this.downloadOrderDocuments?this.downloadOrderDocuments.isChanged?this.downloadOrderDocuments.value.length<=0?[]:this.downloadOrderDocuments.value.filter(e=>e.selected):[]:[]},description(){return this.selectedDocumentTypes.length>0?this.$tc("sw-bulk-edit.modal.success.instruction"):this.$tc("sw-bulk-edit.modal.success.description")}},created(){this.createdComponent()},methods:{async createdComponent(){this.updateButtons(),this.setTitle(),await this.getLatestDocuments()},setTitle(){this.$emit("title-set",this.$tc("sw-bulk-edit.modal.success.title"))},updateButtons(){const e=[{key:"close",label:this.$tc("global.sw-modal.labelClose"),position:"right",variant:"primary",action:"",disabled:!1}];this.$emit("buttons-update",e)},async getLatestDocuments(){if(this.selectedDocumentTypes.length<=0)return;const e={},t=this.selectedIds.length,s=await this.documentRepository.search(this.latestDocumentsCriteria);this.selectedDocumentTypes.forEach(c=>{var l;e[l=c.technicalName]??(e[l]=[]);const o=e[c.technicalName],d=s.filter(n=>n.documentTypeId===c.id),i={};d.forEach(n=>{Object.values(o).length!==t&&(i.hasOwnProperty(n.orderId)||(i[n.orderId]=n.id,o.push(n.id)))})}),this.latestDocuments=e},downloadDocument(e){const t=this.latestDocuments[e];return!t||t.length===0?(this.createNotificationInfo({message:this.$tc("sw-bulk-edit.modal.success.messageNoDocumentsFound")}),Promise.resolve()):(this.document[e].isDownloading=!0,this.orderDocumentApiService.download(t).then(s=>{if(!s.data)return;const c=s.headers["content-disposition"].split("filename=")[1],o=document.createElement("a");o.href=URL.createObjectURL(s.data),o.download=c,o.dispatchEvent(new MouseEvent("click")),o.remove()}).catch(s=>{this.createNotificationError({message:s.message})}).finally(()=>{this.document[e].isDownloading=!1}))}}};export{u as default};
