{"version":3,"file":"index-CwAn3KOx.js","sources":["../../../app/administration/src/module/sw-flow/component/sw-flow-trigger/sw-flow-trigger.html.twig","../../../app/administration/src/module/sw-flow/component/sw-flow-trigger/index.js"],"sourcesContent":["<!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n{% block sw_flow_trigger %}\n<div\n    class=\"sw-flow-trigger\"\n    :class=\"swFlowTriggerClasses\"\n>\n    <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n    {% block sw_flow_trigger_select_field %}\n    <div class=\"sw-flow-trigger__select-toolbar\">\n        <sw-contextual-field\n            v-tooltip=\"{\n                message: getEventName(eventName),\n                disabled: !eventName || isUnknownTrigger,\n            }\"\n            class=\"sw-flow-trigger__search-field\"\n            :required=\"!isTemplate\"\n            :label=\"$tc('sw-flow.detail.trigger.name')\"\n            :disabled=\"disabled\"\n            :error=\"flowEventNameError\"\n        >\n            <template #sw-field-input=\"{ identification, disabled, error, size, setFocusClass, removeFocusClass }\">\n                <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n                {% block sw_flow_trigger_select_field_input %}\n                <!-- eslint-disable-next-line vuejs-accessibility/form-control-has-label -->\n                <input\n                    ref=\"searchInput\"\n                    v-model=\"searchTerm\"\n                    type=\"text\"\n                    class=\"sw-flow-trigger__input-field\"\n                    :placeholder=\"triggerNamePlaceholder\"\n                    :disabled=\"disabled\"\n                    @focus=\"openDropdown({ setFocusClass, removeFocusClass });\"\n                >\n                {% endblock %}\n\n                <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n                {% block sw_flow_trigger_loader %}\n                <sw-loader\n                    v-if=\"isLoading\"\n                    class=\"sw-flow-trigger__loader\"\n                    size=\"16px\"\n                />\n                {% endblock %}\n\n                <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n                {% block sw_flow_trigger_dropdown_icon %}\n                <sw-icon\n                    class=\"sw-flow-trigger__dropdown-icon\"\n                    name=\"regular-chevron-down-xs\"\n                    size=\"10px\"\n                    @click=\"openDropdown({ setFocusClass, removeFocusClass });\"\n                />\n                {% endblock %}\n            </template>\n        </sw-contextual-field>\n    </div>\n    {% endblock %}\n\n    <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n    {% block sw_flow_trigger_select_transition %}\n    <transition name=\"sw-flow-trigger__fade-down\">\n        <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n        {% block sw_flow_trigger_event_selection %}\n        <div\n            v-if=\"isExpanded\"\n            class=\"sw-flow-trigger__event-selection\"\n        >\n\n            <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n            {% block sw_flow_trigger_container %}\n            <sw-container class=\"sw-flow-trigger__event-container\">\n\n                <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n                {% block sw_flow_trigger_select_tree %}\n                <sw-tree\n                    v-if=\"showTreeView\"\n                    ref=\"flowTriggerTree\"\n                    :active-tree-item-id=\"eventName\"\n                    route-params-active-element-id=\"eventName\"\n                    :sortable=\"false\"\n                    :items=\"eventTree\"\n                    :searchable=\"false\"\n                    :disable-context-menu=\"true\"\n                    :on-change-route=\"changeTrigger\"\n                    bind-items-to-folder\n                >\n\n                    <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n                    {% block sw_flow_trigger_tree_headline %}\n                    <template #headline>\n                        <span></span>\n                    </template>\n                    {% endblock %}\n\n                    <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n                    {% block sw_flow_trigger_tree_search %}\n                    <template #search>\n                        <span></span>\n                    </template>\n                    {% endblock %}\n\n                    <template\n                        #items=\"{\n                            treeItems,\n                            sortable,\n                            disableContextMenu,\n                            onChangeRoute,\n                            newElementId,\n                            checkItem\n                        }\"\n                    >\n                        <sw-tree-item\n                            v-for=\"item in treeItems\"\n                            :key=\"item.id\"\n                            should-focus\n                            :active-focus-id=\"selectedTreeItem.id\"\n                            :sortable=\"sortable\"\n                            :item=\"item\"\n                            :on-change-route=\"onChangeRoute\"\n                            :display-checkbox=\"false\"\n                            @check-item=\"checkItem\"\n                        >\n\n                            <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n                            {% block sw_flow_trigger_tree_item_actions %}\n                            <template #actions>\n                                <span></span>\n                            </template>\n                            {% endblock %}\n                        </sw-tree-item>\n                    </template>\n                </sw-tree>\n                {% endblock %}\n\n                <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n                {% block sw_flow_trigger_search_list %}\n                <ul\n                    v-else-if=\"searchResult.length > 0 && searchTerm.length > 0\"\n                    class=\"sw-flow-trigger__search-results\"\n                >\n                    <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n                    {% block sw_flow_trigger_search_list_item %}\n                    <li\n                        v-for=\"item in searchResult\"\n                        :key=\"item.id\"\n                        class=\"sw-flow-trigger__search-result\"\n                        :class=\"{ 'is--focus': isSearchResultInFocus(item)}\"\n                        role=\"button\"\n                        tabindex=\"0\"\n                        @click=\"onClickSearchItem(item)\"\n                        @keydown.enter=\"onClickSearchItem(item)\"\n                    >\n                        <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n                        {% block sw_flow_trigger_search_list_item_icon %}\n                        <div class=\"sw-flow-trigger__search-result-icon\">\n                            <sw-icon\n                                name=\"regular-circle-xxs\"\n                                size=\"18\"\n                            />\n                        </div>\n                        {% endblock %}\n\n                        <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n                        {% block sw_flow_trigger_search_list_item_name %}\n                        <span class=\"sw-flow-trigger__search-result-name\">\n                            <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n                            {% block sw_flow_trigger_search_list_item_name_highlight %}\n                            <sw-highlight-text\n                                :search-term=\"searchTerm\"\n                                :text=\"getEventName(item.name)\"\n                            />\n                            {% endblock %}\n                        </span>\n                        {% endblock %}\n                    </li>\n                    {% endblock %}\n                </ul>\n                {% endblock %}\n\n                <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n                {% block sw_flow_trigger_search_empty %}\n                <p\n                    v-else\n                    class=\"sw-flow-trigger__empty\"\n                >\n                    {{ $tc('sw-flow.detail.trigger.textNoEvent') }}\n                </p>\n                {% endblock %}\n\n            </sw-container>\n        {% endblock %}\n        </div>\n        {% endblock %}\n    </transition>\n    {% endblock %}\n\n    <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n    {% block sw_flow_event_change_confirm_modal %}\n    <sw-flow-event-change-confirm-modal\n        v-if=\"showConfirmModal\"\n        @modal-confirm=\"onConfirm\"\n        @modal-close=\"onCloseConfirm\"\n    />\n    {% endblock %}\n</div>\n{% endblock %}\n","import template from './sw-flow-trigger.html.twig';\nimport './sw-flow-trigger.scss';\n\nconst { Component, State } = Cicada;\nconst { mapPropertyErrors, mapState, mapGetters } = Component.getComponentHelper();\nconst utils = Cicada.Utils;\nconst { camelCase, capitalizeString } = Cicada.Utils.string;\nconst { isEmpty } = utils.types;\n\n/**\n * @private\n * @package services-settings\n */\nexport default {\n    template,\n\n    compatConfig: Cicada.compatConfig,\n\n    inject: [\n        'repositoryFactory',\n        'businessEventService',\n    ],\n\n    emits: ['option-select'],\n\n    props: {\n        overlay: {\n            type: Boolean,\n            required: false,\n            // eslint-disable-next-line vue/no-boolean-default\n            default: true,\n        },\n        disabled: {\n            type: Boolean,\n            required: false,\n            default: false,\n        },\n        eventName: {\n            type: String,\n            required: true,\n        },\n        isUnknownTrigger: {\n            type: Boolean,\n            required: false,\n            default: false,\n        },\n    },\n\n    data() {\n        return {\n            isExpanded: false,\n            isLoading: false,\n            searchTerm: '',\n            searchResult: [],\n            searchResultFocusItem: {},\n            selectedTreeItem: {},\n            setInputFocusClass: null,\n            removeInputFocusClass: null,\n            showConfirmModal: false,\n            triggerSelect: {},\n        };\n    },\n\n    computed: {\n        swFlowTriggerClasses() {\n            return { overlay: this.overlay };\n        },\n\n        formatEventName() {\n            if (!this.eventName) {\n                return this.eventName;\n            }\n\n            return this.getEventName(this.eventName);\n        },\n\n        showTreeView() {\n            return this.eventTree.length >= 0 && (this.searchTerm.length <= 0 || this.searchTerm === this.formatEventName);\n        },\n\n        eventTree() {\n            return this.getEventTree(this.triggerEvents);\n        },\n\n        isTemplate() {\n            return this.$route.query?.type === 'template';\n        },\n\n        triggerNamePlaceholder() {\n            if (!this.isUnknownTrigger) {\n                return this.$tc('sw-flow.detail.trigger.placeholder');\n            }\n\n            return this.$tc('sw-flow.detail.trigger.unknownTriggerPlaceholder');\n        },\n\n        ...mapState('swFlowState', [\n            'flow',\n            'triggerEvents',\n        ]),\n        ...mapGetters('swFlowState', ['isSequenceEmpty']),\n        ...mapPropertyErrors('flow', ['eventName']),\n    },\n\n    watch: {\n        eventName: {\n            immediate: true,\n            handler(value) {\n                if (!value) {\n                    return;\n                }\n\n                this.$route.params.eventName = value;\n                this.searchTerm = this.getEventName(value);\n            },\n        },\n\n        searchTerm(value) {\n            if (!value || value === this.formatEventName) {\n                return;\n            }\n\n            const keyWords = value.split(/[\\W_]+/gi);\n\n            this.searchResult = this.triggerEvents.filter((event) => {\n                const eventName = this.getEventName(event.name).toLowerCase();\n\n                return keyWords.every((key) => eventName.includes(key.toLowerCase()));\n            });\n\n            // set first item as focus\n            if (this.searchResult.length > 0) {\n                this.searchResultFocusItem = this.searchResult[0];\n            }\n        },\n\n        selectedTreeItem(newValue) {\n            if (newValue?.id) {\n                utils.debounce(() => {\n                    const newElement = this.findTreeItemVNodeById(newValue.id).$el;\n                    if (!newElement) {\n                        return;\n                    }\n                    let offsetValue = 0;\n                    let foundTreeRoot = false;\n                    let actualElement = newElement;\n\n                    while (!foundTreeRoot) {\n                        if (!actualElement) {\n                            break;\n                        }\n\n                        if (actualElement.classList.contains('sw-tree__content')) {\n                            foundTreeRoot = true;\n                        } else {\n                            offsetValue += actualElement.offsetTop;\n                            actualElement = actualElement.offsetParent;\n                        }\n                    }\n\n                    actualElement?.scrollTo({\n                        top: offsetValue - actualElement.clientHeight / 2 - 50,\n                        behavior: 'smooth',\n                    });\n                }, 50)();\n            }\n        },\n    },\n\n    created() {\n        this.createdComponent();\n    },\n\n    beforeUnmount() {\n        this.beforeDestroyComponent();\n    },\n\n    methods: {\n        createdComponent() {\n            document.addEventListener('click', this.handleClickEvent);\n            document.addEventListener('keydown', this.handleGeneralKeyEvents);\n\n            this.isLoading = true;\n            Cicada.State.dispatch('swFlowState/fetchTriggerActions');\n            State.commit('swFlowState/setTriggerEvent', this.getDataByEvent(this.eventName));\n            State.dispatch('swFlowState/setRestrictedRules', this.eventName);\n\n            this.isLoading = false;\n        },\n\n        beforeDestroyComponent() {\n            document.removeEventListener('click', this.handleClickEvent);\n            document.removeEventListener('keydown', this.handleGeneralKeyEvents);\n        },\n\n        handleClickEvent(event) {\n            const target = event.target;\n\n            if (target.closest('.sw-tree-item .is--no-children.is--disabled')) {\n                return;\n            }\n\n            if (\n                target.closest('.sw-tree-item .is--no-children .sw-tree-item__content') ||\n                target.closest('.sw-flow-trigger__search-result')\n            ) {\n                this.closeDropdown();\n                return;\n            }\n\n            if (target.closest('.sw-flow-trigger') === null) {\n                if (target.closest('svg')) {\n                    return;\n                }\n\n                this.closeDropdown();\n\n                if (this.searchTerm !== this.formatEventName) {\n                    this.searchTerm = this.formatEventName;\n                }\n            }\n        },\n\n        handleGeneralKeyEvents(event) {\n            if (event.type !== 'keydown' || !this.isExpanded) {\n                return;\n            }\n\n            const key = event.key.toLowerCase();\n\n            switch (key) {\n                case 'tab':\n                case 'escape': {\n                    this.closeDropdown();\n                    break;\n                }\n\n                case 'arrowdown':\n                case 'arrowleft':\n                case 'arrowright':\n                case 'arrowup': {\n                    this.handleArrowKeyEvents(event);\n                    break;\n                }\n\n                case 'enter': {\n                    // when user is searching\n                    if (this.searchTerm.length > 0 && this.searchTerm !== this.formatEventName) {\n                        this.onClickSearchItem(this.searchResultFocusItem);\n                        this.closeDropdown();\n                    } else {\n                        if (this.selectedTreeItem?.childCount > 0) {\n                            return;\n                        }\n\n                        this.changeTrigger(this.selectedTreeItem);\n                        this.closeDropdown();\n                    }\n\n                    break;\n                }\n\n                default: {\n                    break;\n                }\n            }\n        },\n\n        handleArrowKeyEvents(event) {\n            const key = event.key.toLowerCase();\n\n            // when user is searching\n            if (this.searchTerm.length > 0 && this.searchTerm !== this.formatEventName) {\n                switch (key) {\n                    case 'arrowdown': {\n                        event.preventDefault();\n                        this.changeSearchSelection('next');\n                        break;\n                    }\n\n                    case 'arrowup': {\n                        event.preventDefault();\n                        this.changeSearchSelection('previous');\n                        break;\n                    }\n\n                    default: {\n                        break;\n                    }\n                }\n                return;\n            }\n\n            // when user has tree open\n            const actualSelection = this.findTreeItemVNodeById();\n\n            const actualSelectionItem = this.isCompatEnabled('INSTANCE_CHILDREN')\n                ? actualSelection?.item\n                : actualSelection?.component?.proxy?.item;\n\n            switch (key) {\n                case 'arrowdown': {\n                    // check if actual selection was found\n                    if (actualSelectionItem?.id) {\n                        const actualSelectionOpened = this.isCompatEnabled('INSTANCE_CHILDREN')\n                            ? actualSelection?.opened\n                            : actualSelection?.component?.proxy?.opened;\n\n                        // when selection is open\n                        if (actualSelectionOpened) {\n                            // get first item of child\n                            const newSelection = this.getFirstChildById(actualSelectionItem?.id);\n                            if (newSelection) {\n                                // update the selected item\n                                this.selectedTreeItem = newSelection;\n                            }\n                            break;\n                        }\n\n                        // when selection is not open then get the next sibling\n                        let newSelection = this.getSibling(true, actualSelectionItem);\n                        // when next sibling exists\n                        if (newSelection) {\n                            // update the selected item\n                            this.selectedTreeItem = newSelection;\n                            break;\n                        }\n\n                        // Get the closest visible ancestor to actual section's position.\n                        newSelection = this.getClosestSiblingAncestor(actualSelectionItem?.parentId);\n                        // when next parent exists\n                        if (newSelection) {\n                            // update the selected item\n                            this.selectedTreeItem = newSelection;\n                            break;\n                        }\n                    }\n                    break;\n                }\n\n                case 'arrowup': {\n                    // check if actual selection was found\n                    if (actualSelectionItem?.id) {\n                        // when selection is first item in folder\n                        const parent = this.findTreeItemVNodeById(actualSelectionItem?.parentId);\n\n                        const parentItemFirstChildrenId = this.isCompatEnabled('INSTANCE_CHILDREN')\n                            ? parent?.item?.children[0].id\n                            : parent?.component?.proxy?.item?.children[0].id;\n                        if (parentItemFirstChildrenId === actualSelectionItem?.id) {\n                            // then get the parent folder\n                            const newSelection = this.isCompatEnabled('INSTANCE_CHILDREN')\n                                ? parent.item\n                                : parent.component.proxy.item;\n\n                            if (newSelection) {\n                                // update the selected item\n                                this.selectedTreeItem = newSelection;\n                            }\n                            break;\n                        }\n\n                        // when selection is not first item then get the previous sibling\n                        const newSelection = this.getSibling(false, actualSelectionItem);\n                        if (newSelection) {\n                            // Get the closest visible sibling's descendant to actual selection's position\n                            this.selectedTreeItem = this.getClosestSiblingDescendant(newSelection);\n                        }\n                    }\n                    break;\n                }\n\n                case 'arrowright': {\n                    this.toggleSelectedTreeItem(true);\n                    break;\n                }\n\n                case 'arrowleft': {\n                    const isClosed = !this.toggleSelectedTreeItem(false);\n\n                    // when selection is an item or a closed folder\n                    if (isClosed) {\n                        // change the selection to the parent\n                        const parent = this.findTreeItemVNodeById(actualSelectionItem?.parentId);\n\n                        if (parent) {\n                            const parentItem = this.isCompatEnabled('INSTANCE_CHILDREN')\n                                ? parent.item\n                                : parent.component.proxy.item;\n                            this.selectedTreeItem = parentItem;\n                        }\n                    }\n\n                    break;\n                }\n\n                default: {\n                    break;\n                }\n            }\n        },\n\n        getClosestSiblingAncestor(parentId) {\n            // when sibling does not exists, go to next parent sibling\n            const parent = this.findTreeItemVNodeById(parentId);\n            const nextParent = this.getSibling(true, parent.item);\n            if (nextParent) {\n                return nextParent;\n            }\n\n            const parentItemParentId = this.isCompatEnabled('INSTANCE_CHILDREN')\n                ? parent?.item?.parentId\n                : parent?.component?.proxy?.item?.parentId;\n\n            if (!parentItemParentId) {\n                return null;\n            }\n\n            return this.getClosestSiblingAncestor(parentItemParentId);\n        },\n\n        getClosestSiblingDescendant(item) {\n            const foundItemNode = this.findTreeItemVNodeById(item.id);\n\n            if (foundItemNode.opened && foundItemNode.item.childCount > 0) {\n                const lastChildIndex = foundItemNode.item.children.length - 1;\n                const lastChild = foundItemNode.item.children[lastChildIndex];\n\n                if (lastChild.childCount === 0) {\n                    return lastChild;\n                }\n\n                return this.getClosestSiblingDescendant(lastChild);\n            }\n\n            return item;\n        },\n\n        getFirstChildById(itemId, children = this.$refs.flowTriggerTree.treeItems) {\n            const foundItem = children.find((child) => child.id === itemId);\n\n            if (foundItem) {\n                // return first child\n                return foundItem.children[0];\n            }\n\n            for (let i = 0; i < children.length; i += 1) {\n                const foundItemInChild = this.getFirstChildById(itemId, children[i].children);\n\n                if (foundItemInChild) {\n                    return foundItemInChild;\n                }\n            }\n\n            return null;\n        },\n\n        getSibling(isNext, item, children = this.$refs.flowTriggerTree.treeItems) {\n            // when no item exists\n            if (!item) {\n                return null;\n            }\n\n            let foundItem = null;\n            const itemIndex = children.indexOf(item);\n\n            if (itemIndex < 0) {\n                foundItem = null;\n            } else {\n                foundItem = isNext ? children[itemIndex + 1] : children[itemIndex - 1];\n            }\n\n            if (foundItem) {\n                return foundItem;\n            }\n\n            for (let i = 0; i < children.length; i += 1) {\n                const foundItemInChild = this.getSibling(isNext, item, children[i].children);\n\n                if (foundItemInChild) {\n                    return foundItemInChild;\n                }\n            }\n\n            return null;\n        },\n\n        changeSearchSelection(type = 'next') {\n            const typeValue = type === 'previous' ? -1 : 1;\n\n            const actualIndex = this.searchResult.indexOf(this.searchResultFocusItem);\n            const focusItem = this.searchResult[actualIndex + typeValue];\n\n            if (typeof focusItem !== 'undefined') {\n                this.searchResultFocusItem = focusItem;\n            }\n        },\n\n        toggleSelectedTreeItem(shouldOpen) {\n            const vnode = this.findTreeItemVNodeById();\n\n            if (this.isCompatEnabled('INSTANCE_CHILDREN')) {\n                if (vnode?.openTreeItem && vnode.opened !== shouldOpen) {\n                    vnode.openTreeItem();\n                    return true;\n                }\n            } else if (\n                !this.isCompatEnabled('INSTANCE_CHILDREN') &&\n                vnode?.component?.proxy?.openTreeItem &&\n                vnode?.component?.proxy?.opened !== shouldOpen\n            ) {\n                vnode.component.proxy.openTreeItem();\n                return true;\n            }\n\n            return false;\n        },\n\n        findTreeItemVNodeById(\n            itemId = this.selectedTreeItem.id,\n            children = this.isCompatEnabled('INSTANCE_CHILDREN')\n                ? this.$refs?.flowTriggerTree?.$children\n                : this.$refs.flowTriggerTree?.$?.subTree?.children,\n        ) {\n            let found = false;\n            if (!children) {\n                return found;\n            }\n\n            if (Array.isArray(children)) {\n                found = children.find((child) => {\n                    if (this.isCompatEnabled('INSTANCE_CHILDREN')) {\n                        if (child?.item?.id) {\n                            return child.item.id === itemId;\n                        }\n                    } else if (!this.isCompatEnabled('INSTANCE_CHILDREN') && child.component?.proxy?.item?.id) {\n                        return child.component?.proxy?.item?.id === itemId;\n                    }\n\n                    return false;\n                });\n            } else if (this.isCompatEnabled('INSTANCE_CHILDREN') && children?.item?.id) {\n                found = children.item.id === itemId;\n            } else if (!this.isCompatEnabled('INSTANCE_CHILDREN') && children.component?.proxy?.item?.id) {\n                found = children.component?.proxy?.item?.id === itemId;\n            }\n\n            if (found) {\n                return found;\n            }\n\n            let foundInChildren = false;\n\n            // recursion to find vnode\n            for (let i = 0; i < children.length; i += 1) {\n                if (!children[i]) {\n                    // eslint-disable-next-line no-continue\n                    continue;\n                }\n\n                if (this.isCompatEnabled('INSTANCE_CHILDREN')) {\n                    foundInChildren = this.findTreeItemVNodeById(itemId, children[i].$children);\n                } else {\n                    const childrenToIterate = children[i].component\n                        ? children[i].component?.subTree?.children\n                        : children[i].children;\n                    foundInChildren = this.findTreeItemVNodeById(itemId, childrenToIterate ?? null);\n                }\n                // stop when found in children\n                if (foundInChildren) {\n                    break;\n                }\n            }\n\n            return foundInChildren;\n        },\n\n        openDropdown({ setFocusClass, removeFocusClass }) {\n            // make functions available\n            this.setInputFocusClass = setFocusClass;\n            this.removeInputFocusClass = removeFocusClass;\n\n            this.setInputFocusClass();\n            this.isExpanded = true;\n\n            if (this.isLoading) {\n                return;\n            }\n\n            // set first item or selected event as focus\n            this.$nextTick().then(() => {\n                if (this.searchTerm === this.formatEventName) {\n                    const currentEvent = this.eventTree.find((event) => event.id === this.eventName);\n                    this.selectedTreeItem = currentEvent || this.eventTree[0];\n                }\n            });\n        },\n\n        closeDropdown() {\n            if (this.removeInputFocusClass) {\n                this.removeInputFocusClass();\n            }\n\n            this.isExpanded = false;\n        },\n\n        changeTrigger(item) {\n            if (item?.disabled || item?.childCount > 0) {\n                return;\n            }\n\n            if (this.isSequenceEmpty) {\n                const { id } = item.data;\n\n                State.commit('swFlowState/setTriggerEvent', this.getDataByEvent(id));\n                State.dispatch('swFlowState/setRestrictedRules', id);\n                this.$emit('option-select', id);\n            } else {\n                this.showConfirmModal = this.flow.eventName !== item.id;\n                this.triggerSelect = this.getDataByEvent(item.id);\n            }\n        },\n\n        onConfirm() {\n            State.commit('swFlowState/setTriggerEvent', this.triggerSelect);\n            State.dispatch('swFlowState/setRestrictedRules', this.triggerSelect.name);\n            this.$emit('option-select', this.triggerSelect.name);\n        },\n\n        onCloseConfirm() {\n            this.showConfirmModal = false;\n            this.triggerSelect = {};\n        },\n\n        getLastEventName({ parentId = null, id }) {\n            const [eventName] = parentId ? id.split('.').reverse() : [id];\n\n            return this.getEventNameTranslated(eventName);\n        },\n\n        getDataByEvent(event) {\n            return this.triggerEvents.find((item) => item.name === event);\n        },\n\n        hasOnlyStopFlow(event) {\n            const eventAware = this.triggerEvents.find((item) => item.name === event).aware || [];\n            return eventAware.length === 0;\n        },\n\n        // Generate tree data which is compatible with sw-tree from business events\n        getEventTree(events) {\n            const mappedObj = {};\n\n            events.forEach((event) => {\n                // Split event name by '.'\n                const eventNameKeys = event.name.split('.');\n                if (eventNameKeys.length === 0) {\n                    return;\n                }\n\n                /*\n                 Group children to parent based on event names.\n                 For instance, if event name is 'checkout.customer.deleted',\n                 it's considered that customer is checkout's child and deleted is customer's child.\n                */\n                const generateTreeData = (currentIndex, keyWords, result) => {\n                    const currentKey = keyWords[currentIndex];\n\n                    // next key is child of current key\n                    const nextKey = keyWords[currentIndex + 1];\n\n                    result[currentKey] = result[currentKey] || {\n                        id: currentKey,\n                        parentId: null,\n                        children: {},\n                    };\n\n                    if (!nextKey) {\n                        return;\n                    }\n\n                    // Put next key into children of current key\n                    result[currentKey].children[nextKey] = result[currentKey].children[nextKey] || {\n                        id: `${result[currentKey].id}.${nextKey}`,\n                        parentId: result[currentKey].id,\n                        children: {},\n                    };\n\n                    generateTreeData(currentIndex + 1, keyWords, result[currentKey].children);\n                };\n\n                generateTreeData(0, eventNameKeys, mappedObj);\n            });\n\n            // Convert tree object to array to work with sw-tree\n            const convertTreeToArray = (nodes, output = []) => {\n                nodes.forEach((node) => {\n                    const children = node.children ? Object.values(node.children) : [];\n                    output.push({\n                        id: node.id,\n                        name: this.getLastEventName(node),\n                        childCount: children.length,\n                        parentId: node.parentId,\n                        disabled: isEmpty(node.children) && this.hasOnlyStopFlow(node.id),\n                        disabledToolTipText:\n                            isEmpty(node.children) && this.hasOnlyStopFlow(node.id)\n                                ? this.$tc('sw-flow.detail.trigger.textHint')\n                                : null,\n                    });\n\n                    if (children.length > 0) {\n                        output = convertTreeToArray(children, output);\n                    }\n                });\n                return output;\n            };\n\n            return convertTreeToArray(Object.values(mappedObj));\n        },\n\n        getBreadcrumb(eventName) {\n            if (!eventName) {\n                return '';\n            }\n\n            const keyWords = eventName.split('.');\n\n            return keyWords\n                .map((key) => {\n                    return capitalizeString(key);\n                })\n                .join(' / ')\n                .replace(/_|-/g, ' ');\n        },\n\n        onClickSearchItem(item) {\n            this.searchTerm = this.formatEventName;\n            this.searchResult = [];\n\n            if (this.isSequenceEmpty) {\n                this.$emit('option-select', item.name);\n                State.commit('swFlowState/setTriggerEvent', item);\n                State.dispatch('swFlowState/setRestrictedRules', item.name);\n            } else {\n                this.showConfirmModal = true;\n                this.triggerSelect = item;\n            }\n        },\n\n        getEventName(eventName) {\n            if (this.isUnknownTrigger) {\n                return '';\n            }\n\n            if (!eventName) {\n                return eventName;\n            }\n\n            const keyWords = eventName.split('.');\n\n            return keyWords\n                .map((key) => {\n                    return this.getEventNameTranslated(key);\n                })\n                .join(' / ');\n        },\n\n        isSearchResultInFocus(item) {\n            return item.name === this.searchResultFocusItem.name;\n        },\n\n        getEventNameTranslated(eventName) {\n            const eventNameCamelCase = camelCase(eventName);\n            const translatedEventName = [\n                `sw-flow-app.triggers-app.${eventNameCamelCase}`,\n                `sw-flow-custom-event.event-tree.${eventNameCamelCase}`,\n                `sw-flow.triggers.${eventNameCamelCase}`,\n            ].find((key) => this.$te(key));\n\n            return translatedEventName ? this.$tc(translatedEventName) : eventName.replace(/_|-/g, ' ');\n        },\n    },\n};\n"],"names":["template","Component","State","mapPropertyErrors","mapState","mapGetters","utils","camelCase","capitalizeString","isEmpty","index","_a","value","keyWords","event","eventName","key","newValue","newElement","offsetValue","foundTreeRoot","actualElement","target","_b","_c","_d","_e","_f","_g","_h","actualSelection","actualSelectionItem","newSelection","parent","parentItem","parentId","nextParent","parentItemParentId","item","foundItemNode","lastChildIndex","lastChild","itemId","children","foundItem","child","i","foundItemInChild","isNext","itemIndex","type","typeValue","actualIndex","focusItem","shouldOpen","vnode","_i","found","foundInChildren","childrenToIterate","setFocusClass","removeFocusClass","currentEvent","id","events","mappedObj","eventNameKeys","generateTreeData","currentIndex","result","currentKey","nextKey","convertTreeToArray","nodes","output","node","eventNameCamelCase","translatedEventName"],"mappings":"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"}