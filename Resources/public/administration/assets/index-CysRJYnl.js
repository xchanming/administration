const t='{# v-on="$listeners" needed becaues vue/compat removes them from $attrs #} {# New mt-text-field component #} <mt-text-field v-if="useMeteorComponent" v-bind="$attrs" :model-value="compatValue" v-on="listeners" @update:modelValue="handleUpdateModelValue" > <template v-for="(index, name) in getSlots()" #[name]="data" > <slot :name="name" v-bind="data" > </slot> </template> <slot></slot> </mt-text-field> {# v-on="$listeners" needed becaues vue/compat removes them from $attrs #} {# Deprecated component #} <sw-text-field-deprecated v-else v-bind="$attrs" :value="value" v-on="listeners" > <template v-for="(index, name) in getSlots()" #[name]="data" > <slot :name="name" v-bind="data || {}" > </slot> </template> </sw-text-field-deprecated>',{Component:a}=Cicada;a.register("sw-text-field",{template:t,compatConfig:Cicada.compatConfig,props:{modelValue:{type:String,required:!1,default:null},value:{type:String,required:!1,default:null}},computed:{useMeteorComponent(){return Cicada.Feature.isActive("v6.7.0.0")?!0:(Cicada.Utils.debug.warn("sw-text-field",'The old usage of "sw-text-field" is deprecated and will be removed in v6.7.0.0. Please use "mt-text-field" instead.'),!1)},compatValue:{get(){return this.value===null||this.value===void 0?this.modelValue:this.value},set(e){this.$emit("update:value",e),this.$emit("update:modelValue",e)}},listeners(){return this.isCompatEnabled("INSTANCE_LISTENERS")?this.$listeners:{}}},methods:{getSlots(){return this.isCompatEnabled("INSTANCE_SCOPED_SLOTS")?{...this.$slots,...this.$scopedSlots}:this.$slots},handleUpdateModelValue(e){this.$emit("update:modelValue",e),this.$emit("update:value",e)}}});
//# sourceMappingURL=index-CysRJYnl.js.map
