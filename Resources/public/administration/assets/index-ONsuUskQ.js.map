{"version":3,"file":"index-ONsuUskQ.js","sources":["../../../app/administration/src/module/sw-custom-entity/component/sw-generic-cms-page-assignment/sw-generic-cms-page-assignment.html.twig","../../../app/administration/src/module/sw-custom-entity/component/sw-generic-cms-page-assignment/index.ts"],"sourcesContent":["<div>\n    <sw-card\n        class=\"sw-generic-cms-page-assignment\"\n        position-identifier=\"sw-generic-cms-page-assignment\"\n        :title=\"$tc('sw-category.base.cms.title')\"\n        :is-loading=\"isLoading\"\n    >\n        <div class=\"sw-generic-cms-page-assignment__base-layout\">\n            <sw-cms-list-item\n                active\n                :page=\"cmsPage\"\n                @on-item-click=\"openLayoutModal\"\n            />\n\n            <div class=\"sw-generic-cms-page-assignment__page-selection\">\n                <div class=\"sw-generic-cms-page-assignment__page-selection-info\">\n                    <div\n                        class=\"sw-generic-cms-page-assignment__page-selection-headline\"\n                        :class=\"{ 'is--empty': !cmsPage }\"\n                    >\n                        {{ cmsPage ? cmsPage.name : $tc('sw-category.base.cms.defaultTitle') }}\n                    </div>\n                    <div\n                        class=\"sw-generic-cms-page-assignment__page-selection-subheadline\"\n                        :class=\"{ 'is--empty': !cmsPage }\"\n                    >\n                        {{ pageTypeTitle }}\n                    </div>\n                </div>\n\n                <div\n                    v-if=\"cmsPage\"\n                    class=\"sw-generic-cms-page-assignment__page-selection-actions\"\n                >\n                    <sw-button\n                        class=\"sw-generic-cms-page-assignment__change-layout-action\"\n                        size=\"small\"\n                        @click=\"openLayoutModal\"\n                    >\n                        {{ $tc('sw-category.base.cms.changeLayout') }}\n                    </sw-button>\n\n                    <sw-button\n                        class=\"sw-generic-cms-page-assignment__open-in-pagebuilder\"\n                        size=\"small\"\n                        @click=\"openInCmsEditor\"\n                    >\n                        {{ $tc('sw-category.base.cms.editInPagebuilder') }}\n                    </sw-button>\n\n                    <sw-button\n                        size=\"small\"\n                        class=\"sw-generic-cms-page-assignment__layout-reset\"\n                        square\n                        @click=\"onLayoutSelect(null)\"\n                    >\n                        <sw-icon\n                            name=\"regular-trash\"\n                            small\n                        />\n                    </sw-button>\n                </div>\n\n                <div\n                    v-else\n                    class=\"sw-generic-cms-page-assignment__page-selection-actions\"\n                >\n                    <sw-button\n                        class=\"sw-generic-cms-page-assignment__change-layout-action\"\n                        size=\"small\"\n                        @click=\"openLayoutModal\"\n                    >\n                        {{ $tc('sw-category.base.cms.changeLayoutEmpty') }}\n                    </sw-button>\n\n                    <sw-button\n                        class=\"sw-generic-cms-page-assignment__create-layout\"\n                        size=\"small\"\n                        @click=\"createNewLayout\"\n                    >\n                        {{ $tc('sw-category.base.cms.editInPagebuilderEmpty') }}\n                    </sw-button>\n                </div>\n            </div>\n        </div>\n    </sw-card>\n\n    <sw-cms-page-form\n        v-if=\"cmsPage\"\n        :page=\"cmsPage\"\n    />\n\n    <sw-cms-layout-modal\n        v-if=\"showLayoutSelection\"\n        :cms-page-types=\"allowedPageTypes\"\n        :pre-selection=\"cmsPage\"\n        @modal-layout-select=\"onLayoutSelect\"\n        @modal-close=\"closeLayoutModal\"\n    />\n</div>\n","import type ChangesetGenerator from 'src/core/data/changeset-generator.data';\nimport type { Entity } from '@cicada-ag/meteor-admin-sdk/es/_internals/data/Entity';\nimport type Repository from 'src/core/data/repository.data';\nimport type { PropType } from 'vue';\n\nimport Criteria from '@cicada-ag/meteor-admin-sdk/es/data/Criteria';\nimport template from './sw-generic-cms-page-assignment.html.twig';\nimport './sw-generic-cms-page-assignment.scss';\n\nconst objectUtils = Cicada.Utils.object;\n\ninterface CmsSlotOverrides {\n    [key: string]: unknown;\n}\n\n/**\n * @private\n * @package content\n */\nexport default Cicada.Component.wrapComponentConfig({\n    template,\n\n    compatConfig: Cicada.compatConfig,\n\n    inject: [\n        'repositoryFactory',\n        'cmsPageTypeService',\n    ],\n\n    props: {\n        cmsPageId: {\n            type: String as PropType<string | null>,\n            required: false,\n            default: null,\n        },\n\n        slotOverrides: {\n            type: Object as PropType<CmsSlotOverrides>,\n            required: false,\n            default: null,\n        },\n\n        allowedPageTypes: {\n            type: Array as PropType<string[]>,\n            required: false,\n            default: () => [],\n        },\n    },\n\n    data(): {\n        cmsPage: Entity<'cms_page'> | null;\n        showLayoutSelection: boolean;\n        isLoading: boolean;\n    } {\n        return {\n            cmsPage: null,\n            showLayoutSelection: false,\n            isLoading: false,\n        };\n    },\n\n    computed: {\n        cmsPageRepository(): Repository<'cms_page'> {\n            return this.repositoryFactory.create('cms_page');\n        },\n\n        changesetGenerator(): ChangesetGenerator {\n            return new Cicada.Data.ChangesetGenerator();\n        },\n\n        cmsPageCriteria(): Criteria {\n            const criteria = new Criteria(1, 1);\n\n            criteria\n                .addAssociation('previewMedia')\n                .getAssociation('sections')\n                .addSorting(Criteria.sort('position'))\n                .getAssociation('blocks')\n                .addSorting(Criteria.sort('position', 'ASC'))\n                .addAssociation('slots');\n\n            return criteria;\n        },\n\n        pageTypeTitle(name?: string): string {\n            const fallback = this.$tc('sw-category.base.cms.defaultDesc');\n\n            if (!name) {\n                return fallback;\n            }\n\n            const pageType = this.cmsPageTypeService.getType(this.cmsPage?.type);\n            return pageType ? this.$tc(pageType.title) : fallback;\n        },\n    },\n\n    watch: {\n        cmsPageId(): void {\n            void this.getCmsPage();\n        },\n\n        cmsPage: {\n            handler(_newCmsPage, oldCmsPage): void {\n                if (oldCmsPage) {\n                    this.emitCmsPageOverrides();\n                }\n            },\n            deep: true,\n        },\n    },\n\n    created() {\n        void this.getCmsPage();\n    },\n\n    methods: {\n        openLayoutModal(): void {\n            this.showLayoutSelection = true;\n        },\n\n        closeLayoutModal(): void {\n            this.showLayoutSelection = false;\n        },\n\n        onLayoutSelect(selectedLayoutId: string | null): void {\n            this.$emit('update:cms-page-id', selectedLayoutId);\n        },\n\n        openInCmsEditor(): void {\n            if (!this.cmsPageId) {\n                return;\n            }\n\n            void this.$router.push({\n                name: 'sw.cms.detail',\n                params: { id: this.cmsPageId },\n            });\n        },\n\n        createNewLayout(): void {\n            this.$emit('create-layout');\n        },\n\n        applySlotOverrides(cmsPage: Entity<'cms_page'>): Entity<'cms_page'> {\n            if (!this.slotOverrides) {\n                return cmsPage;\n            }\n\n            cmsPage.sections?.forEach((section) => {\n                section.blocks?.forEach((block) => {\n                    block.slots?.forEach((slot) => {\n                        const slotOverride = this.slotOverrides[slot.id];\n                        if (!slotOverride) {\n                            return;\n                        }\n                        objectUtils.merge(slot.config, objectUtils.cloneDeep(slotOverride));\n                    });\n                });\n            });\n\n            return cmsPage;\n        },\n\n        async getCmsPage(): Promise<void> {\n            if (this.cmsPageId === null) {\n                this.cmsPage = null;\n                return;\n            }\n\n            this.isLoading = true;\n\n            const criteria = this.cmsPageCriteria;\n            criteria.setIds([this.cmsPageId]);\n\n            const response = await this.cmsPageRepository.search(criteria);\n            const cmsPage = this.applySlotOverrides(response[0]);\n\n            Cicada.Store.get('cmsPage').setCurrentPage(cmsPage);\n            this.cmsPage = cmsPage;\n\n            this.isLoading = false;\n        },\n\n        deleteSpecificKeys(sections: Entity<'cms_section'>[]): void {\n            if (!sections) {\n                return;\n            }\n\n            sections.forEach((section) => {\n                if (!section.blocks) {\n                    return;\n                }\n\n                section.blocks.forEach((block) => {\n                    if (!block.slots) {\n                        return;\n                    }\n\n                    block.slots.forEach((slot) => {\n                        if (!slot.config) {\n                            return;\n                        }\n\n                        Object.values(\n                            slot.config as Record<\n                                string,\n                                {\n                                    entity?: string;\n                                    required?: boolean;\n                                    type?: string;\n                                }\n                            >,\n                        ).forEach((configField) => {\n                            if (!configField) {\n                                return;\n                            }\n\n                            if (configField.entity) {\n                                delete configField.entity;\n                            }\n                            // eslint-disable-next-line @typescript-eslint/no-unsafe-call\n                            if (configField.hasOwnProperty('required')) {\n                                delete configField.required;\n                            }\n                            if (configField.type) {\n                                delete configField.type;\n                            }\n                        });\n                    });\n                });\n            });\n        },\n\n        emitCmsPageOverrides(): void {\n            if (this.cmsPage === null) {\n                return;\n            }\n\n            if (this.cmsPage.sections) {\n                this.deleteSpecificKeys(this.cmsPage.sections);\n            }\n\n            const { changes } = this.changesetGenerator.generate(this.cmsPage) as { changes: Entity<'cms_page'> };\n\n            const slotOverrides = {} as Record<string, unknown>;\n            if (!changes) {\n                return;\n            }\n\n            if (Array.isArray(changes.sections)) {\n                changes.sections.forEach((section) => {\n                    if (Array.isArray(section.blocks)) {\n                        section.blocks.forEach((block) => {\n                            if (Array.isArray(block.slots)) {\n                                block.slots.forEach((slot) => {\n                                    slotOverrides[slot.id] = slot.config;\n                                });\n                            }\n                        });\n                    }\n                });\n            }\n\n            this.$emit('update:slot-overrides', slotOverrides);\n        },\n    },\n});\n"],"names":["template","objectUtils","index","criteria","Criteria","name","fallback","pageType","_a","_newCmsPage","oldCmsPage","selectedLayoutId","cmsPage","section","block","slot","slotOverride","response","sections","configField","changes","slotOverrides"],"mappings":"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"}