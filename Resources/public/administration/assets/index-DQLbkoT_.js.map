{"version":3,"file":"index-DQLbkoT_.js","sources":["../../../app/administration/src/app/component/form/select/entity/sw-entity-advanced-selection-modal-grid/sw-entity-advanced-selection-modal-grid.html.twig","../../../app/administration/src/app/component/form/select/entity/sw-entity-advanced-selection-modal-grid/index.js"],"sourcesContent":["<!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n{% block sw_data_grid_select_item_checkbox %}\n<sw-checkbox-field\n    v-tooltip=\"getSelectableTooltip(item)\"\n    :disabled=\"!isRecordSelectable(item)\"\n    :value=\"isSelected(item[itemIdentifierProperty])\"\n    @update:value=\"selectItem($event, item)\"\n/>\n{% endblock %}\n","import template from './sw-entity-advanced-selection-modal-grid.html.twig';\n\nconst { Component } = Cicada;\n\n/**\n * @private\n * @package buyers-experience\n * @status prototype\n */\nComponent.extend('sw-entity-advanced-selection-modal-grid', 'sw-entity-listing', {\n    template,\n\n    props: {\n        isRecordSelectable: {\n            type: Function,\n            required: false,\n            default(item) {\n                const isSelectableByDefault =\n                    !this.reachMaximumSelectionExceed ||\n                    Object.keys(this.selection).includes(item[this.itemIdentifierProperty]);\n                let isSelectableByRestrictions = true;\n\n                if (this.isRecordSelectableCallback !== null && this.isRecordSelectableCallback !== undefined) {\n                    const callbackResult = this.isRecordSelectableCallback(item);\n\n                    if (callbackResult.isSelectable !== null && callbackResult.isSelectable !== undefined) {\n                        isSelectableByRestrictions = callbackResult.isSelectable;\n                    }\n                }\n\n                return isSelectableByDefault && isSelectableByRestrictions;\n            },\n        },\n\n        isRecordSelectableCallback: {\n            type: Function,\n            required: false,\n            default() {\n                return true;\n            },\n        },\n    },\n\n    computed: {\n        isSelectAllDisabled() {\n            if (!this.maximumSelectItems) {\n                return false;\n            }\n\n            if (!this.records) {\n                return false;\n            }\n\n            const isSomeRecordSelectable = this.records.some((item) => {\n                return this.isRecordSelectable(item);\n            });\n\n            if (!isSomeRecordSelectable) {\n                return true;\n            }\n\n            const currentVisibleIds = this.records.map((record) => record.id);\n\n            return (\n                this.reachMaximumSelectionExceed &&\n                Object.keys(this.selection).every((id) => !currentVisibleIds.includes(id))\n            );\n        },\n\n        allSelectedChecked() {\n            if (this.isSelectAllDisabled) {\n                return false;\n            }\n\n            if (this.reachMaximumSelectionExceed) {\n                return true;\n            }\n\n            if (!this.records || this.records.length === 0) {\n                return false;\n            }\n\n            const selectedItems = Object.values(this.selection);\n            const isSomeRecordSelectable = this.records.some((item) => {\n                return this.isRecordSelectable(item);\n            });\n\n            if (!isSomeRecordSelectable) {\n                return false;\n            }\n\n            return this.records.every((item) => {\n                if (!this.isRecordSelectable(item)) {\n                    return true;\n                }\n\n                return selectedItems.some((selection) => {\n                    return selection[this.itemIdentifierProperty] === item[this.itemIdentifierProperty];\n                });\n            });\n        },\n    },\n\n    methods: {\n        getSelectableTooltip(item) {\n            if (this.isRecordSelectableCallback === null || this.isRecordSelectableCallback === undefined) {\n                return { message: '', disabled: true };\n            }\n\n            const callbackResult = this.isRecordSelectableCallback(item);\n\n            if (!callbackResult.tooltip) {\n                return { message: '', disabled: true };\n            }\n\n            return callbackResult.tooltip;\n        },\n    },\n});\n"],"names":["template","Component","item","isSelectableByDefault","isSelectableByRestrictions","callbackResult","currentVisibleIds","record","id","selectedItems","selection"],"mappings":"AAAA,MAAeA,EAAA,6PCET,CAAE,UAAAC,CAAW,EAAG,OAOtBA,EAAU,OAAO,0CAA2C,oBAAqB,CAC7E,SAAAD,EAEA,MAAO,CACH,mBAAoB,CAChB,KAAM,SACN,SAAU,GACV,QAAQE,EAAM,CACV,MAAMC,EACF,CAAC,KAAK,6BACN,OAAO,KAAK,KAAK,SAAS,EAAE,SAASD,EAAK,KAAK,sBAAsB,CAAC,EAC1E,IAAIE,EAA6B,GAEjC,GAAI,KAAK,6BAA+B,MAAQ,KAAK,6BAA+B,OAAW,CAC3F,MAAMC,EAAiB,KAAK,2BAA2BH,CAAI,EAEvDG,EAAe,eAAiB,MAAQA,EAAe,eAAiB,SACxED,EAA6BC,EAAe,aAEnD,CAED,OAAOF,GAAyBC,CACnC,CACJ,EAED,2BAA4B,CACxB,KAAM,SACN,SAAU,GACV,SAAU,CACN,MAAO,EACV,CACJ,CACJ,EAED,SAAU,CACN,qBAAsB,CAKlB,GAJI,CAAC,KAAK,oBAIN,CAAC,KAAK,QACN,MAAO,GAOX,GAAI,CAJ2B,KAAK,QAAQ,KAAMF,GACvC,KAAK,mBAAmBA,CAAI,CACtC,EAGG,MAAO,GAGX,MAAMI,EAAoB,KAAK,QAAQ,IAAKC,GAAWA,EAAO,EAAE,EAEhE,OACI,KAAK,6BACL,OAAO,KAAK,KAAK,SAAS,EAAE,MAAOC,GAAO,CAACF,EAAkB,SAASE,CAAE,CAAC,CAEhF,EAED,oBAAqB,CACjB,GAAI,KAAK,oBACL,MAAO,GAGX,GAAI,KAAK,4BACL,MAAO,GAGX,GAAI,CAAC,KAAK,SAAW,KAAK,QAAQ,SAAW,EACzC,MAAO,GAGX,MAAMC,EAAgB,OAAO,OAAO,KAAK,SAAS,EAKlD,OAJ+B,KAAK,QAAQ,KAAMP,GACvC,KAAK,mBAAmBA,CAAI,CACtC,EAMM,KAAK,QAAQ,MAAOA,GAClB,KAAK,mBAAmBA,CAAI,EAI1BO,EAAc,KAAMC,GAChBA,EAAU,KAAK,sBAAsB,IAAMR,EAAK,KAAK,sBAAsB,CACrF,EALU,EAMd,EAXU,EAYd,CACJ,EAED,QAAS,CACL,qBAAqBA,EAAM,CACvB,GAAI,KAAK,6BAA+B,MAAQ,KAAK,6BAA+B,OAChF,MAAO,CAAE,QAAS,GAAI,SAAU,EAAI,EAGxC,MAAMG,EAAiB,KAAK,2BAA2BH,CAAI,EAE3D,OAAKG,EAAe,QAIbA,EAAe,QAHX,CAAE,QAAS,GAAI,SAAU,EAAI,CAI3C,CACJ,CACL,CAAC"}