const l=`{% block sw_file_input %} <div class="sw-file-input"> {% block sw_file_input_regular %} {% block sw_file_input_regular_header %} <div class="sw-file-input__header"> {% block sw_file_input_regular_header_label %} <label v-if="label" :for="id" class="sw-file-input__label" > {{ label }} </label> {% endblock %} </div> {% endblock %} {% block sw_file_input_regular_drop_zone %} <div ref="dropzone" class="sw-file-input__dropzone" :class="isDragActiveClass" > {% block sw_file_input_caption %} <div v-if="selectedFile === null" class="sw-file-input__upload-caption" > <sw-icon name="regular-cloud-upload" /> <slot name="caption-label"> {{ $tc('global.sw-file-input.caption') }} </slot> </div> {% endblock %} {% block sw_file_input_actions %} <div class="sw-file-input__actions" :class="{ 'has--source': selectedFile }" > <div v-if="selectedFile" class="sw-file-input__file-info" > <span class="sw-file-input__file-headline"> {{ selectedFile.name }} </span> <sw-icon class="sw-file-input__remove-icon" name="regular-times-xs" small @click="onRemoveIconClick" /> </div> {% block sw_file_input_regular_choose_button %} <sw-button class="sw-file-input__button" variant="ghost" size="small" :disabled="disabled || undefined" @click="onChooseButtonClick" > {{ $tc('global.sw-file-input.buttonChoose') }} </sw-button> {% endblock %} </div> {% endblock %} </div> {% endblock %} {% endblock %} {% block sw_file_input_hidden_form %} <form ref="fileForm" class="sw-file-input__file-form" > <input :id="id" ref="fileInput" class="sw-file-input__file-input" type="file" @change="onFileInputChange" > </form> {% endblock %} </div> {% endblock %}`,{Component:s,Mixin:n}=Shopware,{fileSize:a}=Shopware.Utils.format,o=Shopware.Utils;s.register("sw-file-input",{template:l,inject:["feature"],emits:["update:value"],mixins:[n.getByName("notification")],props:{maxFileSize:{type:Number,required:!1,default:null},allowedMimeTypes:{type:Array,required:!1,default:null},label:{type:String,required:!1,default:null},value:{required:!1},disabled:{type:Boolean,required:!1,default:!1}},data(){return{selectedFile:null,utilsId:o.createId(),isDragActive:!1}},computed:{id(){return`sw-file-input--${this.utilsId}`},isDragActiveClass(){return{"is--active":this.isDragActive}}},mounted(){this.mountedComponent()},methods:{mountedComponent(){this.$refs.dropzone&&(["dragover","drop"].forEach(e=>{window.addEventListener(e,this.stopEventPropagation,!1)}),this.$refs.dropzone.addEventListener("drop",this.onDrop),window.addEventListener("dragenter",this.onDragEnter),window.addEventListener("dragleave",this.onDragLeave))},onChooseButtonClick(){this.$refs.fileInput.click()},onRemoveIconClick(){this.setSelectedFile(null)},onFileInputChange(){const e=Array.from(this.$refs.fileInput.files);if(e.length){const i=e[0];this.checkFileSize(i)&&this.checkFileType(i)&&this.setSelectedFile(i)}this.$refs.fileForm.reset()},setSelectedFile(e){this.selectedFile=e,this.$emit("update:value",this.selectedFile)},checkFileSize(e){return this.maxFileSize===null||e.size<=this.maxFileSize?!0:(this.createNotificationError({title:this.$tc("global.default.error"),message:this.$tc("global.sw-file-input.notification.invalidFileSize.message",{name:e.name,limit:a(this.maxFileSize)},0)}),!1)},checkFileType(e){return!this.allowedMimeTypes||!this.allowedMimeTypes.length||this.allowedMimeTypes.indexOf(e.type)>=0?!0:(this.createNotificationError({title:this.$tc("global.default.error"),message:this.$tc("global.sw-file-input.notification.invalidFileType.message",{name:e.name,supportedTypes:this.allowedMimeTypes.join(", ")},0)}),!1)},onDragEnter(){this.disabled||(this.isDragActive=!0)},onDragLeave(e){if(e.screenX===0&&e.screenY===0){this.isDragActive=!1;return}e.target.closest(".sw-file-input__dropzone")||(this.isDragActive=!1)},stopEventPropagation(e){e.preventDefault(),e.stopPropagation()},onDrop(e){if(this.disabled)return;const i=Array.from(e.dataTransfer.files);if(this.isDragActive=!1,i.length===0)return;const t=i[0];this.checkFileSize(t)&&this.checkFileType(t)&&this.setSelectedFile(t),this.$refs.fileForm.reset()}}});
