{"version":3,"file":"index-CKJlDInY.js","sources":["../../../app/administration/src/module/sw-order/component/sw-order-general-info/sw-order-general-info.html.twig","../../../app/administration/src/module/sw-order/component/sw-order-general-info/index.js"],"sourcesContent":["<!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n{% block sw_order_detail_base_general_info %}\n<div class=\"sw-order-general-info\">\n    <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n    {% block sw_order_detail_base_general_info_summary %}\n    <div class=\"sw-order-general-info__summary\">\n        <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n        {% block sw_order_detail_base_general_info_summary_main %}\n        <div class=\"sw-order-general-info__summary-main\">\n            <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n            {% block sw_order_detail_base_general_info_summary_main_header %}\n            <div class=\"sw-order-general-info__summary-main-header\">\n                {{ order.orderNumber }} -\n                <router-link\n                    class=\"sw-order-general-info__summary-main-header-link\"\n                    :to=\"{ name: 'sw.customer.detail', params: { id: order.orderCustomer.customerId } }\"\n                >\n                    {{ order.orderCustomer.name }}\n                    <span v-if=\"order.orderCustomer.company\"> - {{ order.orderCustomer.company }}</span>\n                </router-link>\n                ({{ emailIdnFilter(order.orderCustomer.email) }})\n            </div>\n            {% endblock %}\n            <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n            {% block sw_order_detail_base_general_info_summary_main_total %}\n            <div class=\"sw-order-general-info__summary-main-total\">\n                {{ currencyFilter(order.amountTotal, order.currency.isoCode, order.totalRounding.decimals) }}\n            </div>\n            {% endblock %}\n        </div>\n        {% endblock %}\n\n        <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n        {% block sw_order_detail_base_general_info_summary_sub %}\n        <div class=\"sw-order-general-info__summary-sub\">\n            <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n            {% block sw_order_detail_base_general_info_summary_sub_description %}\n            <div class=\"sw-order-general-info__summary-sub-description\">\n                {{ $tc('sw-order.generalTab.info.summary.on') }}\n                {{ dateFilter(order.orderDateTime, {\n                hour: '2-digit',\n                minute: '2-digit',\n                day: '2-digit',\n                month: '2-digit',\n                year: 'numeric'\n                }) }}\n                {{ $tc('sw-order.generalTab.info.summary.with') }}\n                {{ order.transactions.last().paymentMethod.translated.distinguishableName }}\n                <template v-if=\"order.deliveries.last()\">\n                    {{ $tc('sw-order.generalTab.info.summary.and') }}\n                    {{ order.deliveries.last().shippingMethod.translated.name }}\n                </template>\n            </div>\n            {% endblock %}\n            <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n            {% block sw_order_detail_base_general_info_summary_sub_last_changed %}\n            <div class=\"sw-order-general-info__summary-sub-last-changed\">\n                <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n                {% block sw_order_detail_base_general_info_summary_sub_last_changed_time %}\n                <div\n                    v-if=\"lastChangedDateTime\"\n                    class=\"sw-order-general-info__summary-sub-last-changed-time\"\n                >\n                    {{ $tc('sw-order.generalTab.info.summary.lastChanged') }}:\n                    {{ dateFilter(lastChangedDateTime, {\n                    hour: '2-digit',\n                    minute: '2-digit',\n                    day: '2-digit',\n                    month: '2-digit',\n                    year: 'numeric'\n                    }) }}\n                </div>\n                {% endblock %}\n                <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n                {% block sw_order_detail_base_general_info_summary_sub_last_changed_user %}\n                <div\n                    v-if=\"lastChangedUser\"\n                    class=\"sw-order-general-info__summary-sub-last-changed-user\"\n                >\n                    {{ $tc('sw-order.generalTab.info.summary.by') }}\n                    {{ lastChangedUser.name }}\n                </div>\n                {% endblock %}\n            </div>\n            {% endblock %}\n        </div>\n        {% endblock %}\n    </div>\n    {% endblock %}\n\n    <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n    {% block sw_order_state_change_card_modal %}\n    <sw-order-state-change-modal\n        v-if=\"showModal\"\n        :order=\"order\"\n        :is-loading=\"isLoading\"\n        :technical-name=\"''\"\n        @page-leave=\"onLeaveModalClose\"\n        @page-leave-confirm=\"onLeaveModalConfirm\"\n    />\n    {% endblock %}\n\n    <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n    {% block sw_order_detail_base_general_info_order_states %}\n    <div class=\"sw-order-general-info__order-states\">\n        <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n        {% block sw_order_detail_base_general_info_order_states_payment %}\n        <div class=\"sw-order-general-info__order-state\">\n            <sw-order-state-select-v2\n                v-tooltip=\"{\n                    message: $tc('sw-privileges.tooltip.warning'),\n                    disabled: acl.can('order.editor'),\n                    showOnDisabledElements: true\n                }\"\n                class=\"sw-order-general-info__order-state-payment\"\n                :transition-options=\"paymentStateOptions\"\n                state-type=\"order_transaction\"\n                rounded-style\n                :placeholder=\"transaction.stateMachineState.translated.name\"\n                :label=\"$tc('sw-order.stateCard.headlineTransactionState')\"\n                :background-style=\"backgroundStyle('order_transaction')\"\n                :disabled=\"!acl.can('order.editor')\"\n                @state-select=\"onStateSelected\"\n            />\n        </div>\n        {% endblock %}\n        <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n        {% block sw_order_detail_base_general_info_order_states_shipping %}\n        <div\n            v-if=\"delivery\"\n            class=\"sw-order-general-info__order-state\"\n        >\n            <sw-order-state-select-v2\n                v-tooltip=\"{\n                    message: $tc('sw-privileges.tooltip.warning'),\n                    disabled: acl.can('order.editor'),\n                    showOnDisabledElements: true\n                }\"\n                class=\"sw-order-general-info__order-state-delivery\"\n                :transition-options=\"deliveryStateOptions\"\n                state-type=\"order_delivery\"\n                rounded-style\n                :placeholder=\"delivery.stateMachineState.translated.name\"\n                :label=\"$tc('sw-order.stateCard.headlineDeliveryState')\"\n                :background-style=\"backgroundStyle('order_delivery')\"\n                :disabled=\"!acl.can('order.editor')\"\n                @state-select=\"onStateSelected\"\n            />\n        </div>\n        {% endblock %}\n        <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n        {% block sw_order_detail_base_general_info_order_states_order %}\n        <div class=\"sw-order-general-info__order-state\">\n            <sw-order-state-select-v2\n                v-tooltip=\"{\n                    message: $tc('sw-privileges.tooltip.warning'),\n                    disabled: acl.can('order.editor'),\n                    showOnDisabledElements: true\n                }\"\n                class=\"sw-order-general-info__order-state-order\"\n                :transition-options=\"orderStateOptions\"\n                rounded-style\n                state-type=\"order\"\n                :placeholder=\"order.stateMachineState.translated.name\"\n                :label=\"$tc('sw-order.stateCard.headlineOrderState')\"\n                :background-style=\"backgroundStyle('order')\"\n                :disabled=\"!acl.can('order.editor')\"\n                @state-select=\"onStateSelected\"\n            />\n        </div>\n        {% endblock %}\n    </div>\n    {% endblock %}\n\n    <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n    {% block sw_order_detail_base_general_info_order_tags %}\n    <sw-entity-tag-select\n        class=\"sw-order-general-info__order-tags\"\n        size=\"small\"\n        :entity-collection=\"tagCollection\"\n        :disabled=\"!acl.can('order.editor')\"\n        :placeholder=\"$tc('sw-order.generalTab.tagSelect.placeholder')\"\n        :always-show-placeholder=\"true\"\n        @item-add=\"onTagAdd\"\n        @item-remove=\"onTagRemove\"\n    />\n    {% endblock %}\n</div>\n{% endblock %}\n","import './sw-order-general-info.scss';\nimport template from './sw-order-general-info.html.twig';\n\n/**\n * @package checkout\n */\n\nconst { Mixin } = Cicada;\nconst { Criteria, EntityCollection } = Cicada.Data;\nconst { mapGetters, mapState } = Cicada.Component.getComponentHelper();\nconst { cloneDeep } = Cicada.Utils.object;\n\n// eslint-disable-next-line sw-deprecation-rules/private-feature-declarations\nexport default {\n    template,\n\n    compatConfig: Cicada.compatConfig,\n\n    inject: {\n        swOrderDetailOnSaveEdits: {\n            from: 'swOrderDetailOnSaveEdits',\n            default: null,\n        },\n        acl: {\n            from: 'acl',\n            default: null,\n        },\n        repositoryFactory: {\n            from: 'repositoryFactory',\n            default: null,\n        },\n        stateMachineService: {\n            from: 'stateMachineService',\n            default: null,\n        },\n        orderStateMachineService: {\n            from: 'orderStateMachineService',\n            default: null,\n        },\n        stateStyleDataProviderService: {\n            from: 'stateStyleDataProviderService',\n            default: null,\n        },\n    },\n\n    emits: ['save-edits'],\n\n    mixins: [\n        Mixin.getByName('notification'),\n    ],\n\n    props: {\n        order: {\n            type: Object,\n            required: true,\n        },\n    },\n\n    data() {\n        return {\n            currentActionName: null,\n            currentStateType: null,\n            deliveryStateOptions: [],\n            liveOrder: null,\n            modalConfirmed: false,\n            orderStateOptions: [],\n            paymentStateOptions: [],\n            showModal: false,\n            tagCollection: null,\n        };\n    },\n\n    computed: {\n        ...mapGetters('swOrderDetail', [\n            'isLoading',\n        ]),\n\n        ...mapState('swOrderDetail', [\n            'savedSuccessful',\n        ]),\n\n        lastChangedUser() {\n            if (this.liveOrder) {\n                if (this.liveOrder.updatedBy) {\n                    return this.liveOrder.updatedBy;\n                }\n\n                if (this.liveOrder.createdBy) {\n                    return this.liveOrder.createdBy;\n                }\n            }\n\n            return null;\n        },\n\n        lastChangedDateTime() {\n            if (this.liveOrder) {\n                if (this.liveOrder.updatedAt) {\n                    return this.liveOrder.updatedAt;\n                }\n\n                if (this.liveOrder.createdAt) {\n                    return this.liveOrder.createdAt;\n                }\n            }\n\n            return null;\n        },\n\n        lastChangedByCriteria() {\n            const criteria = new Criteria(1, 25);\n            criteria.setIds([this.order.id]);\n\n            criteria.addAssociation('createdBy').addAssociation('updatedBy');\n\n            return criteria;\n        },\n\n        orderRepository() {\n            return this.repositoryFactory.create('order');\n        },\n\n        orderTagRepository() {\n            return this.repositoryFactory.create(this.order.tags.entity, this.order.tags.source);\n        },\n\n        stateMachineStateRepository() {\n            return this.repositoryFactory.create('state_machine_state');\n        },\n\n        stateMachineStateCriteria() {\n            const criteria = new Criteria(1, null);\n            criteria.addSorting({ field: 'name', order: 'ASC' });\n            criteria.addAssociation('stateMachine');\n            criteria.addFilter(\n                Criteria.equalsAny('state_machine_state.stateMachine.technicalName', [\n                    'order.state',\n                    'order_transaction.state',\n                    'order_delivery.state',\n                ]),\n            );\n\n            return criteria;\n        },\n\n        transaction() {\n            for (let i = 0; i < this.order.transactions.length; i += 1) {\n                if (\n                    ![\n                        'cancelled',\n                        'failed',\n                    ].includes(this.order.transactions[i].stateMachineState.technicalName)\n                ) {\n                    return this.order.transactions[i];\n                }\n            }\n            return this.order.transactions.last();\n        },\n\n        delivery() {\n            return this.order.deliveries[0];\n        },\n\n        currencyFilter() {\n            return Cicada.Filter.getByName('currency');\n        },\n\n        dateFilter() {\n            return Cicada.Filter.getByName('date');\n        },\n\n        emailIdnFilter() {\n            return Cicada.Filter.getByName('decode-idn-email');\n        },\n    },\n\n    watch: {\n        savedSuccessful() {\n            if (this.savedSuccessful) {\n                this.getLiveOrder();\n            }\n        },\n\n        'order.id'() {\n            this.createdComponent();\n        },\n    },\n\n    created() {\n        this.createdComponent();\n    },\n\n    methods: {\n        createdComponent() {\n            const tags = cloneDeep(this.order.tags);\n\n            this.tagCollection = new EntityCollection(\n                this.order.tags.source,\n                this.order.tags.entity,\n                Cicada.Context.api,\n                null,\n                tags,\n                tags.length,\n            );\n\n            this.getLiveOrder();\n            this.getTransitionOptions();\n        },\n\n        getLiveOrder() {\n            this.orderRepository.search(this.lastChangedByCriteria, Cicada.Context.api).then((response) => {\n                if (response && response.first()) {\n                    this.liveOrder = response.first();\n                }\n            });\n        },\n\n        onTagAdd(item) {\n            this.orderTagRepository.assign(item.id).then(() => {\n                this.tagCollection.add(item);\n            });\n        },\n\n        onTagRemove(item) {\n            this.orderTagRepository.delete(item.id).then(() => {\n                this.tagCollection.remove(item.id);\n            });\n        },\n\n        getAllStates() {\n            return this.stateMachineStateRepository.search(this.stateMachineStateCriteria);\n        },\n\n        buildTransitionOptions(stateMachineName, allTransitions, possibleTransitions) {\n            const entries = allTransitions.filter((entry) => {\n                return entry.stateMachine.technicalName === stateMachineName;\n            });\n\n            const options = entries.map((state, index) => {\n                return {\n                    stateName: state.technicalName,\n                    id: index,\n                    name: state.translated.name,\n                    disabled: true,\n                };\n            });\n\n            options.forEach((option) => {\n                const transitionToState = possibleTransitions.filter((transition) => {\n                    return transition.toStateName === option.stateName;\n                });\n\n                if (transitionToState.length >= 1) {\n                    option.disabled = false;\n                    option.id = transitionToState[0].actionName;\n                }\n            });\n\n            return options;\n        },\n\n        backgroundStyle(stateType) {\n            let technicalName;\n\n            switch (stateType) {\n                case 'order_transaction':\n                    technicalName = this.transaction.stateMachineState.technicalName;\n                    break;\n                case 'order_delivery':\n                    technicalName = this.delivery.stateMachineState.technicalName;\n                    break;\n                case 'order':\n                    technicalName = this.order.stateMachineState.technicalName;\n                    break;\n                default:\n                    return null;\n            }\n\n            return this.stateStyleDataProviderService.getStyle(`${stateType}.state`, technicalName).selectBackgroundStyle;\n        },\n\n        getTransitionOptions() {\n            Cicada.State.commit('swOrderDetail/setLoading', [\n                'states',\n                true,\n            ]);\n\n            const statePromises = [\n                this.stateMachineService.getState('order', this.order.id),\n            ];\n\n            if (this.transaction) {\n                statePromises.push(this.stateMachineService.getState('order_transaction', this.transaction.id));\n            }\n\n            if (this.delivery) {\n                statePromises.push(this.stateMachineService.getState('order_delivery', this.delivery.id));\n            }\n\n            return Promise.all([\n                this.getAllStates(),\n                ...statePromises,\n            ])\n                .then((data) => {\n                    const allStates = data[0];\n                    const orderState = data[1];\n\n                    this.orderStateOptions = this.buildTransitionOptions(\n                        'order.state',\n                        allStates,\n                        orderState.data.transitions,\n                    );\n\n                    if (this.transaction) {\n                        const orderTransactionState = data[2];\n                        this.paymentStateOptions = this.buildTransitionOptions(\n                            'order_transaction.state',\n                            allStates,\n                            orderTransactionState.data.transitions,\n                        );\n                    }\n\n                    if (this.delivery) {\n                        const orderDeliveryState = data[3];\n                        this.deliveryStateOptions = this.buildTransitionOptions(\n                            'order_delivery.state',\n                            allStates,\n                            orderDeliveryState.data.transitions,\n                        );\n                    }\n\n                    return Promise.resolve();\n                })\n                .finally(() => {\n                    Cicada.State.commit('swOrderDetail/setLoading', [\n                        'states',\n                        false,\n                    ]);\n                });\n        },\n\n        onStateSelected(stateType, actionName) {\n            if (!stateType || !actionName) {\n                this.createStateChangeErrorNotification(this.$tc('sw-order.stateCard.labelErrorNoAction'));\n                return;\n            }\n\n            if (!this.modalConfirmed) {\n                this.currentActionName = actionName;\n                this.currentStateType = stateType;\n\n                this.showModal = true;\n\n                return;\n            }\n\n            this.modalConfirmed = false;\n        },\n\n        onLeaveModalClose() {\n            this.modalConfirmed = false;\n            this.currentActionName = null;\n            this.currentStateType = null;\n            this.showModal = false;\n        },\n\n        onLeaveModalConfirm(docIds, sendMail = true) {\n            this.showModal = false;\n\n            let transition = null;\n\n            switch (this.currentStateType) {\n                case 'order_transaction':\n                    transition = this.orderStateMachineService.transitionOrderTransactionState(\n                        this.transaction.id,\n                        this.currentActionName,\n                        { documentIds: docIds, sendMail },\n                    );\n                    break;\n                case 'order_delivery':\n                    transition = this.orderStateMachineService.transitionOrderDeliveryState(\n                        this.delivery.id,\n                        this.currentActionName,\n                        { documentIds: docIds, sendMail },\n                    );\n                    break;\n                case 'order':\n                    transition = this.orderStateMachineService.transitionOrderState(this.order.id, this.currentActionName, {\n                        documentIds: docIds,\n                        sendMail,\n                    });\n                    break;\n                default:\n                    this.createNotificationError({\n                        message: this.$tc('sw-order.stateCard.labelErrorStateChange'),\n                    });\n                    return;\n            }\n\n            if (transition) {\n                transition\n                    .then(() => {\n                        this.loadHistory();\n                    })\n                    .catch((error) => {\n                        this.createStateChangeErrorNotification(error);\n                    });\n            }\n\n            this.currentActionName = null;\n            this.currentStateType = null;\n        },\n\n        loadHistory() {\n            this.statesLoading = true;\n            this.modalConfirmed = false;\n\n            this.getTransitionOptions()\n                .then(() => {\n                    if (this.swOrderDetailOnSaveEdits) {\n                        this.swOrderDetailOnSaveEdits();\n                    } else {\n                        this.$emit('save-edits');\n                    }\n                })\n                .catch((error) => {\n                    this.createNotificationError(error);\n                });\n        },\n\n        createStateChangeErrorNotification(errorMessage) {\n            this.createNotificationError({\n                message: this.$tc('sw-order.stateCard.labelErrorStateChange') + errorMessage,\n            });\n        },\n    },\n};\n"],"names":["template","Mixin","Criteria","EntityCollection","mapGetters","mapState","cloneDeep","index","criteria","i","tags","response","item","stateMachineName","allTransitions","possibleTransitions","options","entry","state","option","transitionToState","transition","stateType","technicalName","statePromises","data","allStates","orderState","orderTransactionState","orderDeliveryState","actionName","docIds","sendMail","error","errorMessage"],"mappings":"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"}