{"version":3,"file":"index-D6L_3eUY.js","sources":["../../../app/administration/src/app/component/rule/sw-condition-base-line-item/sw-condition-base-line-item.html.twig","../../../app/administration/src/app/component/rule/sw-condition-base-line-item/index.js"],"sourcesContent":["<!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n{% block sw_condition_value_before_content %}\n<sw-single-select\n    v-if=\"allowMatchesAll\"\n    v-model:value=\"matchesAll\"\n    name=\"sw-field--matchesAll\"\n    class=\"sw-condition-base-line-item__matches-all\"\n    size=\"medium\"\n    :options=\"matchesAllOptions\"\n    required\n/>\n{% endblock %}\n","import template from './sw-condition-base-line-item.html.twig';\nimport './sw-condition-base-line-item.scss';\n\nconst { Component } = Cicada;\nconst { EntityCollection } = Cicada.Data;\n\n/**\n * @public\n * @package services-settings\n * @description Base line item condition for the condition-tree. This component must be a child of sw-condition-tree.\n * @status prototype\n * @example-type code-only\n * @component-example\n * <sw-condition-base-line-item :condition=\"condition\"></sw-condition-base-line-item>\n */\nComponent.extend('sw-condition-base-line-item', 'sw-condition-base', {\n    template,\n\n    inject: [\n        'feature',\n        'insertNodeIntoTree',\n        'removeNodeFromTree',\n        'createCondition',\n        'childAssociationField',\n        'repositoryFactory',\n        'conditionScopes',\n        'unwrapAllLineItemsCondition',\n    ],\n\n    props: {\n        parentCondition: {\n            type: Object,\n            required: false,\n            default: null,\n        },\n    },\n\n    computed: {\n        ruleConditionRepository() {\n            return this.repositoryFactory.create('rule_condition');\n        },\n\n        allowMatchesAll() {\n            if (this.conditionScopes) {\n                return this.conditionScopes.includes('cart');\n            }\n\n            return true;\n        },\n\n        matchesAllOptions() {\n            return [\n                {\n                    value: false,\n                    label: this.$tc('global.sw-condition.condition.lineItemCondition.any'),\n                },\n                {\n                    value: true,\n                    label: this.$tc('global.sw-condition.condition.lineItemCondition.all'),\n                },\n            ];\n        },\n\n        matchesAll: {\n            get() {\n                return this.parentCondition && this.parentCondition.type === 'allLineItemsContainer';\n            },\n            set(matchesAll) {\n                if (matchesAll && this.parentCondition.type !== 'allLineItemsContainer') {\n                    this.wrapCondition();\n\n                    return;\n                }\n\n                if (!matchesAll && this.parentCondition.type === 'allLineItemsContainer') {\n                    this.unwrapAllLineItemsCondition(this.condition);\n                }\n            },\n        },\n    },\n\n    methods: {\n        wrapCondition() {\n            const child = this.createEntity(this.condition);\n\n            this.removeNodeFromTree(this.parentCondition, this.condition);\n            this.insertNodeIntoTree(\n                this.parentCondition,\n                this.createCondition(\n                    {\n                        type: 'allLineItemsContainer',\n                        value: {},\n                        [this.childAssociationField]: new EntityCollection(\n                            this.condition[this.childAssociationField].source,\n                            this.condition[this.childAssociationField].entity,\n                            this.condition[this.childAssociationField].context,\n                            null,\n                            [child],\n                        ),\n                    },\n                    this.parentCondition.id,\n                    this.condition.position,\n                ),\n            );\n        },\n\n        createEntity(condition) {\n            const entity = this.ruleConditionRepository.create();\n            Object.keys(condition).forEach((key) => {\n                if (key === 'id') {\n                    return;\n                }\n                entity[key] = condition[key];\n            });\n\n            return entity;\n        },\n    },\n});\n"],"names":["template","Component","EntityCollection","matchesAll","child","condition","entity","key"],"mappings":"AAAA,MAAeA,EAAA,uQCGT,CAAE,UAAAC,CAAW,EAAG,OAChB,CAAE,iBAAAC,CAAgB,EAAK,OAAO,KAWpCD,EAAU,OAAO,8BAA+B,oBAAqB,CACjE,SAAAD,EAEA,OAAQ,CACJ,UACA,qBACA,qBACA,kBACA,wBACA,oBACA,kBACA,6BACH,EAED,MAAO,CACH,gBAAiB,CACb,KAAM,OACN,SAAU,GACV,QAAS,IACZ,CACJ,EAED,SAAU,CACN,yBAA0B,CACtB,OAAO,KAAK,kBAAkB,OAAO,gBAAgB,CACxD,EAED,iBAAkB,CACd,OAAI,KAAK,gBACE,KAAK,gBAAgB,SAAS,MAAM,EAGxC,EACV,EAED,mBAAoB,CAChB,MAAO,CACH,CACI,MAAO,GACP,MAAO,KAAK,IAAI,qDAAqD,CACxE,EACD,CACI,MAAO,GACP,MAAO,KAAK,IAAI,qDAAqD,CACxE,CACjB,CACS,EAED,WAAY,CACR,KAAM,CACF,OAAO,KAAK,iBAAmB,KAAK,gBAAgB,OAAS,uBAChE,EACD,IAAIG,EAAY,CACZ,GAAIA,GAAc,KAAK,gBAAgB,OAAS,wBAAyB,CACrE,KAAK,cAAa,EAElB,MACH,CAEG,CAACA,GAAc,KAAK,gBAAgB,OAAS,yBAC7C,KAAK,4BAA4B,KAAK,SAAS,CAEtD,CACJ,CACJ,EAED,QAAS,CACL,eAAgB,CACZ,MAAMC,EAAQ,KAAK,aAAa,KAAK,SAAS,EAE9C,KAAK,mBAAmB,KAAK,gBAAiB,KAAK,SAAS,EAC5D,KAAK,mBACD,KAAK,gBACL,KAAK,gBACD,CACI,KAAM,wBACN,MAAO,CAAE,EACT,CAAC,KAAK,qBAAqB,EAAG,IAAIF,EAC9B,KAAK,UAAU,KAAK,qBAAqB,EAAE,OAC3C,KAAK,UAAU,KAAK,qBAAqB,EAAE,OAC3C,KAAK,UAAU,KAAK,qBAAqB,EAAE,QAC3C,KACA,CAACE,CAAK,CACT,CACJ,EACD,KAAK,gBAAgB,GACrB,KAAK,UAAU,QAClB,CACjB,CACS,EAED,aAAaC,EAAW,CACpB,MAAMC,EAAS,KAAK,wBAAwB,OAAM,EAClD,cAAO,KAAKD,CAAS,EAAE,QAASE,GAAQ,CAChCA,IAAQ,OAGZD,EAAOC,CAAG,EAAIF,EAAUE,CAAG,EAC3C,CAAa,EAEMD,CACV,CACJ,CACL,CAAC"}