const o=`<sw-page :header-border-color="entityAccentColor" class="sw-generic-custom-entity-list" > <template #search-bar> <sw-search-bar :key="customEntityName" :initial-search-type="customEntityName" :initial-search="term" :entity-search-color="entityAccentColor" @search="onSearch" /> </template> <template #smart-bar-header> <h2 class="sw-generic-custom-entity-list__title"> {{ $tc(\`\${customEntityName}.moduleTitle\`) }} <span v-if="!isLoading"> ({{ total }}) </span> </h2> </template> <template #smart-bar-actions> <sw-button class="sw-generic-custom-entity-list__button-add" :router-link="{ name: 'sw.custom.entity.create' }" variant="primary" > {{ $tc('global.default.add') }} </sw-button> </template> <template #language-switch> <sw-language-switch @on-change="onChangeLanguage" /> </template> <template #content> <div class="sw-generic-custom-entity-list__content"> <sw-entity-listing v-if="!isLoading && customEntityDefinition && customEntityInstances.length > 0" class="sw-generic-custom-entity-list__content-list" :repository="customEntityRepository" :items="customEntityInstances" :allow-inline-edit="false" :allow-column-edit="false" :columns="columnConfig" :sort-by="sortBy" :sort-direction="sortDirection" :natural-sorting="naturalSorting" :criteria-limit="limit" :disable-data-fetching="true" :is-loading="isLoading" @column-sort="onColumnSort" @page-change="onPageChange" @update-records="onUpdateRecords" /> <sw-empty-state v-else class="sw-generic-custom-entity-list__content-empty-state" :title="emptyStateTitle" :subline="emptyStateSubline" > <template #icon> <img :src="assetFilter('/administration/static/img/empty-states/custom-entity-empty-state.svg')" :alt="emptyStateTitle" > </template> </sw-empty-state> </div> </template> </sw-page>`,{Criteria:a}=Cicada.Data,r=Cicada.Utils.types,c=Cicada.Component.wrapComponentConfig({template:o,compatConfig:Cicada.compatConfig,inject:["customEntityDefinitionService","repositoryFactory","acl"],data(){return{customEntityInstances:null,page:1,limit:25,total:0,term:"",sortBy:"",sortDirection:"ASC",naturalSorting:!1,isLoading:!1}},created(){this.createdComponent()},computed:{customEntityName(){const t=this.$route.params.entityName,i=this.customEntityDefinitionService.getDefinitionByName(t)??null;return i?i.entity:""},customEntityDefinition(){return this.customEntityDefinitionService.getDefinitionByName(this.customEntityName)??null},customEntityRepository(){return this.customEntityDefinition===null?null:this.repositoryFactory.create(this.customEntityDefinition.entity)},adminConfig(){var t;return(t=this.customEntityDefinition)==null?void 0:t.flags["admin-ui"]},entityAccentColor(){var t;return(t=this.adminConfig)==null?void 0:t.color},columnConfig(){return this.customEntityDefinition?this.customEntityDefinition.flags["admin-ui"].listing.columns.map(i=>{const e=`${this.customEntityName}.list.${i.ref}`;return{label:this.$tc(e),property:i.ref,routerLink:"sw.custom.entity.detail",visible:!i.hidden}}):[]},customEntityCriteria(){const t=new a(this.page,this.limit);return t.setTerm(this.term),t.addSorting({field:this.sortBy,naturalSorting:this.naturalSorting,order:this.sortDirection}),t},emptyStateTitle(){const t=`${this.customEntityName}.list.emptyState`;return this.$te(t)?this.$tc(t):this.$tc("sw-custom-entity.general.emptyState")},emptyStateSubline(){const t=`${this.customEntityName}.list.emptyStateSubline`;return this.$te(t)?this.$tc(t):this.$tc("sw-custom-entity.general.emptyStateSubline")},assetFilter(){return Cicada.Filter.getByName("asset")}},watch:{$route(){r.isEmpty(this.$route.query)&&this.updateRoute({}),this.parseRoute(),this.getList()}},methods:{createdComponent(){var t,i,e,s,n;this.adminConfig!==null&&(this.sortBy=((s=(e=(i=(t=this.adminConfig)==null?void 0:t.listing)==null?void 0:i.columns)==null?void 0:e[0])==null?void 0:s.ref)??"",this.$route.meta.$module.icon=(n=this.adminConfig)==null?void 0:n.icon),this.parseRoute(),this.getList()},async getList(){if(!this.customEntityRepository)return;this.isLoading=!0;const t=await this.customEntityRepository.search(this.customEntityCriteria);this.customEntityInstances=t,this.total=t.total??0,this.isLoading=!1},onChangeLanguage(t){Cicada.State.commit("context/setApiLanguageId",t),this.getList()},parseSortDirection(t){return t==="ASC"||t==="DESC"?t:this.sortDirection},parseRoute(){const t=this.$route.query;this.page=t.page?parseInt(t.page,10):this.page,this.limit=t.limit?parseInt(t.limit,10):this.limit,this.term=t.term||this.term,this.sortBy=t.sortBy||this.sortBy,this.sortDirection=this.parseSortDirection(t.sortDirection),this.naturalSorting=t.naturalSorting?t.naturalSorting==="true":this.naturalSorting},updateRoute(t){this.$router.replace({query:{limit:(t.limit||this.limit).toString(),page:(t.page||this.page).toString(),term:t.term||this.term,sortBy:t.sortBy||this.sortBy,sortDirection:t.sortDirection||this.sortDirection,naturalSorting:t.naturalSorting||this.naturalSorting?"true":"false"}})},onSearch(t){this.updateRoute({term:t})},onColumnSort({dataIndex:t,naturalSorting:i}){this.sortBy===t?this.updateRoute({sortDirection:this.sortDirection==="ASC"?"DESC":"ASC"}):this.updateRoute({sortBy:t,sortDirection:"ASC",naturalSorting:i})},onPageChange({page:t,limit:i}){this.updateRoute({page:t,limit:i})},onUpdateRecords(t){this.customEntityInstances=t,this.total=t.total??0}}});export{c as default};
//# sourceMappingURL=index-9RxToahJ.js.map
