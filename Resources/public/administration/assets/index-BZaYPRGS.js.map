{"version":3,"file":"index-BZaYPRGS.js","sources":["../../../app/administration/src/app/asyncComponent/media/sw-media-modal-folder-settings/sw-media-modal-folder-settings.html.twig","../../../app/administration/src/app/asyncComponent/media/sw-media-modal-folder-settings/index.js"],"sourcesContent":["<!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n{% block sw_media_modal_folder_settings %}\n<sw-modal\n    v-if=\"!!mediaFolder\"\n    class=\"sw-media-modal-folder-settings\"\n    :class=\"modalClass\"\n    :title=\"mediaFolder.name\"\n    variant=\"large\"\n    @modal-close=\"closeModal\"\n>\n\n    <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n    {% block sw_media_modal_folder_settings_tabs %}\n    <sw-tabs\n        position-identifier=\"sw-media-modal-folder-settings\"\n        :is-small=\"false\"\n        default-item=\"settings\"\n    >\n        <template #default=\"{ active }\">\n            <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n            {% block sw_media_modal_folder_settings_tab_item_settings %}\n            <sw-tabs-item\n                class=\"sw-media-folder-settings__settings-tab\"\n                name=\"settings\"\n                :active-tab=\"active\"\n                :has-error=\"!!mediaFolderNameError\"\n                :native=\"true\"\n            >\n                {{ $tc('global.sw-media-modal-folder-settings.labelSettings') }}\n            </sw-tabs-item>\n            {% endblock %}\n\n            <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n            {% block sw_media_modal_folder_settings_tab_item_thumbnails %}\n            <sw-tabs-item\n                class=\"sw-media-folder-settings__thumbnails-tab\"\n                name=\"thumbnails\"\n                :active-tab=\"active\"\n                :native=\"true\"\n            >\n                {{ $tc('global.sw-media-modal-folder-settings.labelThumbnails') }}\n            </sw-tabs-item>\n            {% endblock %}\n        </template>\n\n        <template\n            #content=\"{ active }\"\n        >\n            <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n            {% block sw_media_modal_folder_settings_tab_content_settings %}\n            <sw-container\n                v-if=\"active === 'settings'\"\n                columns=\"1fr 1fr\"\n                gap=\"32px\"\n            >\n                <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n                {% block sw_media_modal_folder_settings_name_field %}\n                <sw-text-field\n                    v-model:value=\"mediaFolder.name\"\n                    :disabled=\"disabled\"\n                    :error=\"mediaFolderNameError\"\n                    :label=\"$tc('global.sw-media-modal-folder-settings.labelFolderName')\"\n                />\n                {% endblock %}\n\n                <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n                {% block sw_media_modal_folder_settings_default_folder %}\n                <sw-entity-single-select\n                    id=\"defaultFolder\"\n                    :disabled=\"disabled\"\n                    entity=\"media_default_folder\"\n                    :placeholder=\"$tc('global.sw-media-modal-folder-settings.placeholderDefaultFolder')\"\n                    :value=\"mediaFolder.defaultFolderId ? mediaFolder.defaultFolderId : ''\"\n                    :label=\"$tc('global.sw-media-modal-folder-settings.labelDefaultFolder')\"\n                    show-clearable-button\n                    @update:value=\"onInputDefaultFolder\"\n                >\n\n                    <template #selection-label-property=\"{ item: item }\">\n                        {{ getItemName(item) }}\n                    </template>\n\n                    <template #result-item=\"{ isSelected, setValue, item, index, searchTerm, highlightSearchTerm }\">\n                        <sw-select-result\n                            :selected=\"isSelected(item)\"\n                            v-bind=\"{ item, index }\"\n                            @item-select=\"setValue\"\n                        >\n                            <sw-highlight-text\n                                v-if=\"highlightSearchTerm\"\n                                :text=\"getItemName(item)\"\n                                :search-term=\"searchTerm\"\n                            />\n                            <template v-else>\n                                {{ getItemName(item) }}\n                            </template>\n                        </sw-select-result>\n                    </template>\n                </sw-entity-single-select>\n                {% endblock %}\n            </sw-container>\n            {% endblock %}\n\n            <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n            {% block sw_media_modal_folder_settings_tab_content_thumbnails %}\n            <sw-container\n                v-if=\"active === 'thumbnails'\"\n                class=\"sw-media-modal-folder-settings__thumbnails-container\"\n                columns=\"1fr 1fr\"\n                gap=\"32px\"\n            >\n\n                <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n                {% block sw_media_modal_folder_settings_tab_content_thumbnails_left_container %}\n                <div class=\"sw-media-modal-folder-settings__thumbnails-left-container\">\n                    <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n                    {% block sw_media_modal_folder_settings_inherit_settings_field %}\n                    <sw-field\n                        v-model:value=\"mediaFolder.useParentConfiguration\"\n                        type=\"switch\"\n                        :label=\"$tc('global.sw-media-modal-folder-settings.labelInheritSettings')\"\n                        :disabled=\"mediaFolder.parentId === null\"\n                        @update:value=\"onChangeInheritance\"\n                    />\n                    {% endblock %}\n\n                    <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n                    {% block sw_media_modal_folder_settings_generate_thumbnails_field %}\n                    <sw-field\n                        v-model:value=\"configuration.createThumbnails\"\n                        type=\"switch\"\n                        :label=\"$tc('global.sw-media-modal-folder-settings.labelGenerateThumbnails')\"\n                        :disabled=\"mediaFolder.useParentConfiguration || disabled\"\n                    />\n                    {% endblock %}\n\n                    <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n                    {% block sw_media_modal_folder_settings_keep_proportions_field %}\n                    <sw-switch-field\n                        v-model:value=\"configuration.keepAspectRatio\"\n                        :label=\"$tc('global.sw-media-modal-folder-settings.labelKeepProportions')\"\n                        :disabled=\"notEditable\"\n                    />\n                    {% endblock %}\n\n                    <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n                    {% block sw_media_modal_folder_settings_thumbnails_quality_field %}\n                    <sw-number-field\n                        v-model:value=\"configuration.thumbnailQuality\"\n                        number-type=\"int\"\n                        :label=\"$tc('global.sw-media-modal-folder-settings.labelThumbnailQuality')\"\n                        :min=\"0\"\n                        :max=\"100\"\n                        :step=\"1\"\n                        :disabled=\"notEditable\"\n                        autocomplete=\"off\"\n                    />\n                    {% endblock %}\n                </div>\n                {% endblock %}\n\n                <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n                {% block sw_media_modal_folder_settings_tab_content_thumbnails_right_container %}\n                <div class=\"sw-media-modal-folder-settings__thumbnails-right-container\">\n                    <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n                    {% block sw_media_modal_folder_settings_thumbnail_list_caption %}\n                    <div class=\"sw-media-modal-folder-settings__thumbnails-list-caption\">\n                        <!-- eslint-disable-next-line vuejs-accessibility/label-has-for -->\n                        <label>{{ $tc('global.sw-media-modal-folder-settings.labelThumbnailSize') }}</label>\n\n                        {# @deprecated tag:v6.7.0 - Remove the block #}\n                        <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n                        {% block sw_media_modal_folder_settings_edit_thumbnail_list_button %}\n                        {% endblock %}\n                    </div>\n                    {% endblock %}\n\n                    <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n                    {% block sw_media_modal_folder_settings_thumbnail_list_container %}\n                    <div class=\"sw-media-modal-folder-settings__thumbnails-list-container\">\n                        <sw-media-add-thumbnail-form\n                            v-if=\"!notEditable\"\n                            :disabled=\"disabled\"\n                            @on-input=\"checkIfThumbnailExists\"\n                            @thumbnail-form-size-add=\"addThumbnail\"\n                        />\n\n                        <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n                        {% block sw_media_modal_folder_settings_thumbnail_list %}\n                        <ul class=\"sw-media-modal-folder-settings__thumbnails-list\">\n\n                            <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n                            {% block sw_media_modal_folder_settings_thumbnail_size %}\n                            <li\n                                v-for=\"(size, index) in thumbnailSizes\"\n                                :key=\"`thumbnail-size-${index}`\"\n                                class=\"sw-media-modal-folder-settings__thumbnail-size-entry\"\n                                :class=\"'sw-media-modal-folder-settings__entry--' + index\"\n                            >\n\n                                <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n                                {% block sw_media_modal_folder_settings_thumbnail_size_switch %}\n                                <sw-switch-field\n                                    :value=\"isThumbnailSizeActive(size)\"\n                                    :name=\"thumbnailSizeCheckboxName(size)\"\n                                    :label=\"thumbnailSizeFilter(size)\"\n                                    :disabled=\"notEditable\"\n                                    @update:value=\"onChangeThumbnailSize($event, size)\"\n                                />\n                                {% endblock %}\n\n                                <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n                                {% block sw_media_modal_folder_settings_thumbnail_size_delete_button %}\n                                <button\n                                    v-tooltip=\"{\n                                        message: $tc('global.sw-media-modal-folder-settings.tooltipCanNotDeleteThumbnailSize'),\n                                        disabled: size.deletable,\n                                        showOnDisabledElements: true\n                                    }\"\n                                    class=\"sw-media-modal-folder-settings__delete-thumbnail\"\n                                    :title=\"$tc('global.default.delete')\"\n                                    :aria-label=\"$tc('global.default.delete')\"\n                                    :disabled=\"!size.deletable\"\n                                    @click=\"deleteThumbnail(size)\"\n                                >\n                                    <sw-icon\n                                        name=\"regular-times-s\"\n                                        small\n                                        size=\"12px\"\n                                    />\n                                </button>\n                                {% endblock %}\n                            </li>\n                            {% endblock %}\n                        </ul>\n                        {% endblock %}\n\n                        {# @deprecated tag:v6.7.0 - Remove the block #}\n                        <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n                        {% block sw_media_modal_folder_settings_add_thumbnail_size_form %}\n                        {% endblock %}\n                    </div>\n                    {% endblock %}\n                </div>\n                {% endblock %}\n            </sw-container>\n            {% endblock %}\n        </template>\n    </sw-tabs>\n    {% endblock %}\n\n    <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n    {% block sw_media_modal_folder_settings_footer %}\n    <template #modal-footer>\n\n        <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n        {% block sw_media_modal_folder_settings_cancel_button %}\n        <sw-button\n            size=\"small\"\n            @click=\"onClickCancel\"\n        >\n            {{ $tc('global.default.cancel') }}\n        </sw-button>\n        {% endblock %}\n\n        <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n        {% block sw_media_modal_folder_settings_confirm_button %}\n        <sw-button\n            v-tooltip=\"{\n                message: $tc('sw-privileges.tooltip.warning'),\n                disabled: !disabled,\n                showOnDisabledElements: true\n            }\"\n            class=\"sw-media-modal-folder-settings__confirm\"\n            size=\"small\"\n            :disabled=\"disabled\"\n            variant=\"primary\"\n            @click=\"onClickSave\"\n        >\n            {{ $tc('global.default.save') }}\n        </sw-button>\n        {% endblock %}\n\n    </template>\n    {% endblock %}\n</sw-modal>\n{% endblock %}\n","import template from './sw-media-modal-folder-settings.html.twig';\nimport './sw-media-modal-folder-settings.scss';\n\nconst { Component, Mixin, Context } = Cicada;\nconst { Criteria } = Cicada.Data;\nconst { mapPropertyErrors } = Component.getComponentHelper();\n\n/**\n * @private\n * @package content\n */\nexport default {\n    template,\n\n    compatConfig: Cicada.compatConfig,\n\n    inject: ['repositoryFactory'],\n\n    emits: [\n        'media-settings-modal-save',\n        'media-settings-modal-close',\n    ],\n\n    mixins: [\n        Mixin.getByName('notification'),\n    ],\n\n    props: {\n        mediaFolderId: {\n            required: true,\n            type: String,\n        },\n        disabled: {\n            required: false,\n            type: Boolean,\n            default: false,\n        },\n    },\n\n    data() {\n        return {\n            modalClass: 'sw-media-modal-folder-settings--shows-overflow',\n            unusedThumbnailSizes: [],\n            thumbnailSizes: [],\n            // @deprecated tag:v6.7.0 - Remove the property \"isEditThumbnails\"\n            isEditThumbnails: false,\n            parent: null,\n            configuration: null,\n            mediaFolderConfigurationThumbnailSizeRepository: null,\n            originalConfiguration: null,\n            mediaFolder: null,\n        };\n    },\n\n    computed: {\n        mediaFolderRepository() {\n            return this.repositoryFactory.create('media_folder');\n        },\n        mediaDefaultFolderRepository() {\n            return this.repositoryFactory.create('media_default_folder');\n        },\n        mediaThumbnailSizeRepository() {\n            return this.repositoryFactory.create('media_thumbnail_size');\n        },\n        mediaFolderConfigurationRepository() {\n            return this.repositoryFactory.create('media_folder_configuration');\n        },\n\n        unusedMediaThumbnailSizeCriteria() {\n            const criteria = new Criteria(1, null);\n            criteria.addFilter(Criteria.equals('mediaFolderConfigurations.mediaFolders.id', null));\n\n            return criteria;\n        },\n\n        mediaThumbnailSizeCriteria() {\n            const criteria = new Criteria(1, null);\n            criteria.addSorting(Criteria.sort('width'));\n\n            return criteria;\n        },\n\n        notEditable() {\n            return this.mediaFolder.useParentConfiguration || !this.configuration.createThumbnails || this.disabled;\n        },\n\n        // @deprecated tag:v6.7.0 - Remove the computed property\n        thumbnailListClass() {},\n\n        // @deprecated tag:v6.7.0 - Remove the computed property\n        labelToggleButton() {},\n\n        thumbnailSizeFilter() {\n            return Cicada.Filter.getByName('thumbnailSize');\n        },\n\n        ...mapPropertyErrors('mediaFolder', ['name']),\n    },\n\n    created() {\n        this.createdComponent();\n    },\n\n    methods: {\n        async createdComponent() {\n            this.mediaFolder = await this.loadMediaFolder();\n\n            await this.getUnusedThumbnailSizes();\n            await this.getThumbnailSizes();\n            this.configuration = await this.mediaFolderConfigurationRepository.get(\n                this.mediaFolder.configurationId,\n                Context.api,\n            );\n\n            this.mediaFolderConfigurationThumbnailSizeRepository = this.repositoryFactory.create(\n                this.configuration.mediaThumbnailSizes.entity,\n                this.configuration.mediaThumbnailSizes.source,\n            );\n\n            this.configuration.mediaThumbnailSizes = await this.mediaFolderConfigurationThumbnailSizeRepository.search(\n                new Criteria(1, 25),\n                Context.api,\n            );\n\n            if (this.mediaFolder.parentId !== null) {\n                this.parent = await this.mediaFolderRepository.get(this.mediaFolder.parentId, Context.api);\n                this.parent.configuration = await this.mediaFolderConfigurationRepository.get(\n                    this.parent.configurationId,\n                    Context.api,\n                );\n            }\n        },\n\n        getItemName(item) {\n            const entityNameIdentifier = `global.entities.${item.entity}`;\n\n            return `${item.entity} (${this.$tc(entityNameIdentifier)})`;\n        },\n\n        async getUnusedThumbnailSizes() {\n            const response = await this.mediaThumbnailSizeRepository.searchIds(this.unusedMediaThumbnailSizeCriteria);\n            this.unusedThumbnailSizes = response.data;\n        },\n\n        async getThumbnailSizes() {\n            this.thumbnailSizes = await this.mediaThumbnailSizeRepository.search(this.mediaThumbnailSizeCriteria);\n\n            this.thumbnailSizes.forEach((thumbnailSize) => {\n                thumbnailSize.deletable = Boolean(\n                    this.unusedThumbnailSizes.find((unusedThumbnailSize) => {\n                        return unusedThumbnailSize === thumbnailSize.id;\n                    }),\n                );\n            });\n        },\n\n        // @deprecated tag:v6.7.0 - Remove the method\n        toggleEditThumbnails() {},\n\n        async addThumbnail({ width, height }) {\n            if (this.checkIfThumbnailExists({ width, height })) {\n                this.createNotificationError({\n                    message: this.$tc(\n                        'global.sw-media-modal-folder-settings.notification.error.messageThumbnailSizeExisted',\n                    ),\n                });\n\n                return;\n            }\n\n            const thumbnailSize = this.mediaThumbnailSizeRepository.create(Context.api);\n            thumbnailSize.width = width;\n            thumbnailSize.height = height;\n\n            await this.mediaThumbnailSizeRepository.save(thumbnailSize, Context.api);\n\n            await this.getUnusedThumbnailSizes();\n            this.getThumbnailSizes();\n        },\n\n        checkIfThumbnailExists({ width, height }) {\n            const exists = this.thumbnailSizes.some((size) => {\n                return size.width === width && size.height === height;\n            });\n\n            return exists;\n        },\n\n        async deleteThumbnail(thumbnailSize) {\n            if (await this.mediaFolderConfigurationThumbnailSizeRepository.get(thumbnailSize.id, Context.api)) {\n                await this.mediaFolderConfigurationThumbnailSizeRepository.delete(thumbnailSize.id, Context.api);\n            }\n\n            this.configuration.mediaThumbnailSizes.remove(thumbnailSize.id);\n            await this.mediaThumbnailSizeRepository.delete(thumbnailSize.id, Context.api);\n\n            await this.getUnusedThumbnailSizes();\n            this.getThumbnailSizes();\n        },\n\n        isThumbnailSizeActive(size) {\n            if (!this.configuration.mediaThumbnailSizes) {\n                return false;\n            }\n\n            return this.configuration.mediaThumbnailSizes.some((value) => {\n                return value.id === size.id;\n            });\n        },\n\n        thumbnailSizeCheckboxName(size) {\n            return `thumbnail-size-${size.width}-${size.height}-active`;\n        },\n\n        onActiveTabChanged(activeTab) {\n            if (activeTab === 'settings') {\n                this.modalClass = 'sw-media-modal-folder-settings--shows-overflow';\n                return;\n            }\n            this.modalClass = '';\n        },\n\n        onChangeThumbnailSize(value, size) {\n            if (value === true) {\n                this.configuration.mediaThumbnailSizes.add(size);\n                return;\n            }\n\n            this.configuration.mediaThumbnailSizes.remove(size.id);\n        },\n\n        async onChangeInheritance(value) {\n            if (value === true) {\n                this.originalConfiguration = this.configuration;\n                this.configuration = this.parent.configuration;\n\n                return;\n            }\n\n            if (this.originalConfiguration) {\n                this.configuration = this.originalConfiguration;\n\n                return;\n            }\n\n            const newConfiguration = this.mediaFolderConfigurationRepository.create();\n            Object.keys(this.configuration).forEach((key) => {\n                if (key === 'id') {\n                    return;\n                }\n                newConfiguration[key] = this.configuration[key];\n            });\n            this.configuration = newConfiguration;\n        },\n\n        async onClickSave() {\n            this.mediaFolder.configurationId = this.configuration.id;\n\n            if (this.configuration.keepAspectRatio === null) {\n                this.configuration.keepAspectRatio = false;\n            }\n\n            if (this.configuration.createThumbnails === null) {\n                this.configuration.createThumbnails = false;\n            }\n\n            if (this.mediaFolder.defaultFolderId) {\n                await this.ensureUniqueDefaultFolder(this.mediaFolder.id, this.mediaFolder.defaultFolderId);\n            } else {\n                this.mediaFolder.defaultFolderId = null;\n            }\n\n            try {\n                await this.mediaFolderConfigurationRepository.save(this.configuration).then(() => {\n                    // Delete the original configuration if we inherit again\n                    if (this.originalConfiguration && this.configuration.id === this.parent.configuration.id) {\n                        this.mediaFolderConfigurationRepository.delete(this.originalConfiguration.id);\n                    }\n                });\n\n                if (this.mediaFolder && this.mediaFolder.getEntityName) {\n                    await this.mediaFolderRepository.save(this.mediaFolder, Context.api);\n                }\n\n                this.createNotificationSuccess({\n                    title: this.$root.$tc('global.default.success'),\n                    message: this.$root.$tc('global.sw-media-modal-folder-settings.notification.success.message'),\n                });\n\n                this.$nextTick(() => {\n                    this.$emit('media-settings-modal-save', this.mediaFolder);\n                });\n            } catch (e) {\n                this.createNotificationError({\n                    title: this.$root.$tc('global.default.error'),\n                    message: this.$root.$tc('global.sw-media-modal-folder-settings.notification.error.message'),\n                });\n            }\n        },\n\n        async ensureUniqueDefaultFolder(folderId, defaultFolderId) {\n            const criteria = new Criteria(1, 25).addFilter(\n                Criteria.multi('and', [\n                    Criteria.equals('defaultFolderId', defaultFolderId),\n                    Criteria.not('or', [Criteria.equals('id', folderId)]),\n                ]),\n            );\n\n            const items = await this.mediaFolderRepository.search(criteria, Context.api);\n\n            await Promise.all(\n                items.map((folder) => {\n                    folder.defaultFolderId = null;\n                    return this.mediaFolderRepository.save(folder, Context.api);\n                }),\n            );\n        },\n\n        onClickCancel(originalDomEvent) {\n            this.mediaFolderRepository.discard(this.mediaFolder);\n\n            this.closeModal(originalDomEvent);\n        },\n\n        closeModal(originalDomEvent) {\n            this.$emit('media-settings-modal-close', { originalDomEvent });\n        },\n\n        onInputDefaultFolder(defaultFolderId) {\n            this.mediaFolder.defaultFolderId = defaultFolderId;\n        },\n\n        loadMediaFolder() {\n            return this.mediaFolderRepository.get(this.mediaFolderId, Context.api);\n        },\n    },\n};\n"],"names":["template","Component","Mixin","Context","Criteria","mapPropertyErrors","index","criteria","item","entityNameIdentifier","response","thumbnailSize","unusedThumbnailSize","width","height","size","value","activeTab","newConfiguration","key","folderId","defaultFolderId","items","folder","originalDomEvent"],"mappings":"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"}