const a='{% block sw_settings_rule_add_assignment_listing %} <sw-card class="sw-settings-rule-add-assignment-listing__card" position-identifier="sw-settings-rule-add-assignment-listing" > <template #toolbar> {% block sw_settings_rule_add_assignment_listing_toolbar %} <sw-card-filter @sw-card-filter-term-change="doSearch" /> {% endblock %} </template> {% block sw_settings_rule_add_assignment_listing_grid %} <sw-data-grid class="sw-settings-rule-add-assignment-listing__grid" :is-loading="loading" :data-source="items" :columns="entityContext.addContext.gridColumns" :is-record-selectable="isNotAssigned" :show-actions="false" @select-item="onSelectItem" > <template #selection-content="{ item, isSelected, isRecordSelectable, selectItem, itemIdentifierProperty, }" > {% block sw_settings_rule_add_assignment_listing_checkbox %} <div class="sw-data-grid__cell-content"> <sw-checkbox-field :disabled="!isRecordSelectable(item)" :value="isSelected(item[itemIdentifierProperty]) || !isNotAssigned(item)" @update:value="selectItem($event, item)" /> </div> {% endblock %} </template> <template #column-name="{ item }"> {% block sw_settings_rule_add_assignment_listing_name %} <sw-product-variant-info v-if="item.variation" :variations="item.variation" > {{ item.translated.name }} </sw-product-variant-info> <span v-else> {{ item.translated.name }} </span> {% endblock %} </template> <template #column-active="{ item }"> {% block sw_settings_rule_add_assignment_listing_active_flag %} <sw-icon v-if="item.active" name="regular-checkmark-xs" small class="is--active" /> <sw-icon v-else name="regular-times-s" small class="is--inactive" /> {% endblock %} </template> <template #column-taxType="{ item }"> {% block sw_settings_rule_add_assignment_listing_tax_type %} {{ shippingTaxTypeLabel(item.taxType) }} {% endblock %} </template> <template #pagination> {% block sw_settings_rule_add_assignment_listing_pagination %} <sw-pagination :limit="limit" :page="page" :total="total" @page-change="paginate" /> {% endblock %} </template> </sw-data-grid> {% endblock %} </sw-card> {% endblock %}',{Context:o}=Cicada,{Criteria:s}=Cicada.Data,{cloneDeep:l}=Cicada.Utils.object,d={template:a,emits:["select-item"],compatConfig:Cicada.compatConfig,props:{ruleId:{type:String,required:!0},entityContext:{type:Object,required:!0}},data(){return{loading:!0,repository:null,items:[],preselectedIds:[],limit:10,page:1,total:0}},computed:{criteria(){const t=new s(this.page,this.limit);return this.entityContext.addContext.association&&(t.addAssociation(this.entityContext.addContext.association),t.getAssociation(this.entityContext.addContext.association).addFilter(s.equals("id",this.ruleId))),this.entityContext.entityName==="product"&&t.addAssociation("options.group"),t},shippingCostTaxOptions(){return[{label:this.$tc("sw-settings-shipping.shippingCostOptions.auto"),value:"auto"},{label:this.$tc("sw-settings-shipping.shippingCostOptions.highest"),value:"highest"},{label:this.$tc("sw-settings-shipping.shippingCostOptions.fixed"),value:"fixed"}]}},created(){this.createdComponent()},methods:{createdComponent(){this.repository=this.entityContext.repository,this.doSearch()},onSelectItem(t,e,i){this.$emit("select-item",t,e,i)},isNotAssigned(t){return this.entityContext.addContext.association?t[this.entityContext.addContext.association].length<=0:t[this.entityContext.addContext.column]!==this.ruleId},paginate({page:t,limit:e}){return this.page=t,this.limit=e,this.doSearch()},doSearch(t){this.loading=!0;const e=this.entityContext.api?this.entityContext.api():o.api,i=l(this.criteria);return t&&i.addFilter(s.contains(this.entityContext.addContext.searchColumn??"name",t)),this.repository.search(i,e).then(n=>{this.items=n,this.total=n.total}).finally(()=>{this.loading=!1})},shippingTaxTypeLabel(t){if(!t)return"";const e=this.shippingCostTaxOptions.find(i=>t===i.value)||"";return e==null?void 0:e.label}}};export{d as default};
//# sourceMappingURL=index-DAD4T5Ei.js.map
