{"version":3,"file":"index-CGUt12qJ.js","sources":["../../../app/administration/src/app/component/form/sw-text-editor/sw-text-editor.html.twig","../../../app/administration/src/app/component/form/sw-text-editor/index.js"],"sourcesContent":["<!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n{% block sw_text_editor %}\n<!-- eslint-disable-next-line vuejs-accessibility/click-events-have-key-events, vuejs-accessibility/no-static-element-interactions -->\n<div\n    class=\"sw-text-editor\"\n    :class=\"classes\"\n    @click=\"onClick\"\n>\n\n    <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n    {% block sw_text_editor_label %}\n    <div\n        v-if=\"showLabel\"\n        class=\"sw-text-editor__label\"\n    >\n        <slot name=\"label\">\n            {{ label }}\n        </slot>\n    </div>\n    {% endblock %}\n    <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n    {% block sw_text_editor_box %}\n    <div class=\"sw-text-editor__box\">\n        <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n        {% block sw_text_editor_box_toolbar %}\n        <sw-text-editor-toolbar\n            v-if=\"(hasSelection && !disabled) || !isInlineEdit\"\n            ref=\"text-editor-toolbar\"\n            :parent-is-active=\"isActive\"\n            :is-inline-edit=\"isInlineEdit\"\n            :selection=\"selection\"\n            :button-config=\"buttonConfig\"\n            :is-code-edit=\"isCodeEdit\"\n            :is-table-edit=\"isTableEdit\"\n            @created-el=\"onToolbarCreated\"\n            @destroyed-el=\"onToolbarDestroyed\"\n            @on-set-link=\"onSetLink\"\n            @remove-link=\"onRemoveLink\"\n            @table-edit=\"onTableEdit\"\n            @text-style-change=\"onTextStyleChange\"\n        />\n        {% endblock %}\n\n        <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n        {% block sw_text_editor_box_table_toolbar %}\n        <sw-text-editor-table-toolbar\n            v-if=\"isTableEdit && !isInlineEdit && !isCodeEdit\"\n            :selection=\"selection\"\n            @table-delete=\"onTableDelete\"\n            @table-modify=\"onTableModify\"\n        />\n        {% endblock %}\n\n        <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n        {% block sw_text_editor_box_content %}\n        <sw-code-editor\n            v-if=\"isCodeEdit\"\n            ref=\"codeEditor\"\n            :value=\"value\"\n            :sanitize-input=\"sanitizeInput\"\n            :sanitize-field-name=\"sanitizeFieldName\"\n            :sanitize-info-warn=\"sanitizeInfoWarn\"\n            set-focus\n            @blur=\"emitHtmlContent\"\n            @update:value=\"emitHtmlContent\"\n        />\n\n        <div\n            v-else\n            class=\"sw-text-editor__content\"\n            :class=\"contentClasses\"\n        >\n            <!-- eslint-disable -->\n            <div\n                ref=\"textEditor\"\n                class=\"sw-text-editor__content-editor\"\n                :contenteditable=\"!disabled\"\n                :style=\"verticalAlignStyle\"\n                :spellcheck=\"true\"\n                tabindex=\"-1\"\n                @focus=\"onFocus\"\n                @keyup.enter=\"onEnter\"\n                @paste=\"onPaste\"\n                @input=\"onInput\"\n                @copy=\"onCopy\"\n                @mousedown.right.stop\n                v-html=\"$sanitize(content, { ADD_ATTR: ['target'] })\"\n            ></div>\n            <!-- eslint-enable -->\n            <div\n                v-if=\"placeholderVisible\"\n                class=\"sw-text-editor__content-placeholder\"\n                v-html=\"$sanitize(placeholder)\"\n            ></div>\n        </div>\n        {% endblock %}\n\n        <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n        {% block sw_text_editor_box_word_count %}\n        <div\n            v-if=\"!isInlineEdit && !isCodeEdit\"\n            class=\"sw-text-editor__word_count\"\n        >\n            <sw-container\n                columns=\"1fr\"\n                justify=\"right\"\n            >\n                <span class=\"sw-text-editor__text-length\">\n                    {{ $tc('global.sw-text-editor.labelTextLength', textLength, { count: textLength }) }}\n                </span>\n            </sw-container>\n        </div>\n        {% endblock %}\n    </div>\n    {% endblock %}\n\n    <sw-field-error\n        v-if=\"error\"\n        :error=\"error\"\n    />\n</div>\n{% endblock %}\n","import { reactive } from 'vue';\nimport template from './sw-text-editor.html.twig';\nimport './sw-text-editor.scss';\n\nconst { Component } = Cicada;\n\n/**\n * @package admin\n *\n * @private\n * @status ready\n * @example-type static\n * @description <p>A simple text editor which uses the browsers api.\n *              Pass a buttonConfig array to configure the buttons you desire.\n *              Each Button needs to be an object with a type (this will be the executed Command as well),\n *              a name or an icon which will be displayed as the button and\n *              the created HTML-Tag (this is needed to set actives states in the Toolbar).\n *              If the type requires a value you can set the value prop,\n *              which will be passed in the execCommand function.</p>\n *              <p>To read more about the execCommand function see</p>\n *              <a href=\"https://developer.mozilla.org/de/docs/Web/API/Document/execCommand\" target=\"_blank\" rel=\"noopener\">\n *              https://developer.mozilla.org/de/docs/Web/API/Document/execCommand</a>\n *\n *              <p>If you want to generate a sub-menu you can set a children prop in the button-object which,\n *              holds the buttonConfig of the children (Button syntax is the same as explained above).</p>\n *\n *              <p>If you need to call a custom callback instead you can pass your handler with a handler prop\n *              e.g. handler: (button, parent = null) => { callback(button, parent) }</p>\n *\n *              <p>Furthermore you can pass the position prop [left (default), middle and right]\n *              to set the buttons position in the toolbar.</p>\n * @component-example\n *  <sw-text-editor\n *      value=\"Lorem ipsum dolor sit amet, consetetur sadipscing elitr\"\n *      :is-inline-edit=\"true\"\n *  />\n */\nComponent.register('sw-text-editor', {\n    template,\n\n    compatConfig: Cicada.compatConfig,\n\n    inject: ['feature'],\n\n    emits: ['update:value'],\n\n    props: {\n        value: {\n            type: String,\n            required: false,\n            default: '',\n        },\n\n        isInlineEdit: {\n            type: Boolean,\n            required: false,\n            default: false,\n        },\n\n        verticalAlign: {\n            type: String,\n            required: false,\n            default: '',\n            validator(value) {\n                return [\n                    '',\n                    'center',\n                    'flex-start',\n                    'flex-end',\n                ].includes(value);\n            },\n        },\n\n        label: {\n            type: String,\n            required: false,\n            default: '',\n        },\n\n        placeholder: {\n            type: String,\n            required: false,\n            default: '',\n        },\n\n        disabled: {\n            type: Boolean,\n            required: false,\n            default: false,\n        },\n\n        allowInlineDataMapping: {\n            type: Boolean,\n            required: false,\n            default: false,\n        },\n\n        sanitizeInput: {\n            type: Boolean,\n            required: false,\n            default: false,\n        },\n\n        sanitizeFieldName: {\n            type: String,\n            required: false,\n            default: null,\n        },\n\n        /**\n         * @description:\n         * If set to true, the component will show warning below the editor the content might be sanitized\n         * but does not call the sanitize API, the sanitization is done by the backend on saving\n         */\n        sanitizeInfoWarn: {\n            type: Boolean,\n            required: false,\n            default: false,\n        },\n\n        enableTransparentBackground: {\n            type: Boolean,\n            required: false,\n            default: false,\n        },\n\n        buttonConfig: {\n            type: Array,\n            required: false,\n            default() {\n                return reactive([\n                    {\n                        type: 'paragraph',\n                        title: Cicada.Snippet.tc('sw-text-editor-toolbar.title.format'),\n                        icon: 'regular-style-xs',\n                        children: [\n                            {\n                                type: 'formatBlock',\n                                name: Cicada.Snippet.tc('sw-text-editor-toolbar.title.paragraph'),\n                                value: 'p',\n                                tag: 'p',\n                            },\n                            {\n                                type: 'formatBlock',\n                                name: Cicada.Snippet.tc('sw-text-editor-toolbar.title.h1'),\n                                value: 'h1',\n                                tag: 'h1',\n                            },\n                            {\n                                type: 'formatBlock',\n                                name: Cicada.Snippet.tc('sw-text-editor-toolbar.title.h2'),\n                                value: 'h2',\n                                tag: 'h2',\n                            },\n                            {\n                                type: 'formatBlock',\n                                name: Cicada.Snippet.tc('sw-text-editor-toolbar.title.h3'),\n                                value: 'h3',\n                                tag: 'h3',\n                            },\n                            {\n                                type: 'formatBlock',\n                                name: Cicada.Snippet.tc('sw-text-editor-toolbar.title.h4'),\n                                value: 'h4',\n                                tag: 'h4',\n                            },\n                            {\n                                type: 'formatBlock',\n                                name: Cicada.Snippet.tc('sw-text-editor-toolbar.title.h5'),\n                                value: 'h5',\n                                tag: 'h5',\n                            },\n                            {\n                                type: 'formatBlock',\n                                name: Cicada.Snippet.tc('sw-text-editor-toolbar.title.h6'),\n                                value: 'h6',\n                                tag: 'h6',\n                            },\n                            {\n                                type: 'formatBlock',\n                                name: Cicada.Snippet.tc('sw-text-editor-toolbar.title.blockquote'),\n                                value: 'blockquote',\n                                tag: 'blockquote',\n                            },\n                        ],\n                    },\n                    {\n                        type: 'foreColor',\n                        title: Cicada.Snippet.tc('sw-text-editor-toolbar.title.text-color'),\n                        value: '',\n                        tag: 'font',\n                    },\n                    {\n                        type: 'bold',\n                        title: Cicada.Snippet.tc('sw-text-editor-toolbar.title.bold'),\n                        icon: 'regular-bold-xs',\n                        tag: 'b',\n                    },\n                    {\n                        type: 'italic',\n                        title: Cicada.Snippet.tc('sw-text-editor-toolbar.title.italic'),\n                        icon: 'regular-italic-xs',\n                        tag: 'i',\n                    },\n                    {\n                        type: 'underline',\n                        title: Cicada.Snippet.tc('sw-text-editor-toolbar.title.underline'),\n                        icon: 'regular-underline-xs',\n                        tag: 'u',\n                    },\n                    {\n                        type: 'strikethrough',\n                        title: Cicada.Snippet.tc('sw-text-editor-toolbar.title.strikethrough'),\n                        icon: 'regular-strikethrough-xs',\n                        tag: 'strike',\n                    },\n                    {\n                        type: 'superscript',\n                        title: Cicada.Snippet.tc('sw-text-editor-toolbar.title.superscript'),\n                        icon: 'regular-superscript-xs',\n                        tag: 'sup',\n                    },\n                    {\n                        type: 'subscript',\n                        title: Cicada.Snippet.tc('sw-text-editor-toolbar.title.subscript'),\n                        icon: 'regular-subscript-xs',\n                        tag: 'sub',\n                    },\n                    {\n                        type: 'justify',\n                        title: Cicada.Snippet.tc('sw-text-editor-toolbar.title.textAlign'),\n                        icon: 'regular-align-left-xs',\n                        children: [\n                            {\n                                type: 'justifyLeft',\n                                title: Cicada.Snippet.tc('sw-text-editor-toolbar.title.alignLeft'),\n                                icon: 'regular-align-left',\n                            },\n                            {\n                                type: 'justifyCenter',\n                                title: Cicada.Snippet.tc('sw-text-editor-toolbar.title.alignCenter'),\n                                icon: 'regular-align-center',\n                            },\n                            {\n                                type: 'justifyRight',\n                                title: Cicada.Snippet.tc('sw-text-editor-toolbar.title.alignRight'),\n                                icon: 'regular-align-right',\n                            },\n                            {\n                                type: 'justifyFull',\n                                title: Cicada.Snippet.tc('sw-text-editor-toolbar.title.justify'),\n                                icon: 'regular-align-justify',\n                            },\n                        ],\n                    },\n                    {\n                        type: 'insertUnorderedList',\n                        title: Cicada.Snippet.tc('sw-text-editor-toolbar.title.insert-unordered-list'),\n                        icon: 'regular-list-unordered-xs',\n                        tag: 'ul',\n                    },\n                    {\n                        type: 'insertOrderedList',\n                        title: Cicada.Snippet.tc('sw-text-editor-toolbar.title.insert-ordered-list'),\n                        icon: 'regular-list-numbered-xs',\n                        tag: 'ol',\n                    },\n                    {\n                        type: 'link',\n                        title: Cicada.Snippet.tc('sw-text-editor-toolbar.title.link'),\n                        icon: 'regular-link-xs',\n                        expanded: false,\n                        newTab: false,\n                        displayAsButton: false,\n                        value: '',\n                        tag: 'a',\n                    },\n                    {\n                        type: 'undo',\n                        title: Cicada.Snippet.tc('sw-text-editor-toolbar.title.undo'),\n                        icon: 'regular-undo-xs',\n                        position: 'middle',\n                    },\n                    {\n                        type: 'redo',\n                        title: Cicada.Snippet.tc('sw-text-editor-toolbar.title.redo'),\n                        icon: 'regular-redo-xs',\n                        position: 'middle',\n                    },\n                ]);\n            },\n        },\n\n        error: {\n            type: Object,\n            required: false,\n            default: null,\n        },\n    },\n\n    data() {\n        return {\n            isActive: false,\n            isEmpty: false,\n            hasSelection: false,\n            selection: null,\n            currentSelection: null,\n            isShiftPressed: false,\n            toolbar: null,\n            textLength: 0,\n            content: '',\n            placeholderHeight: null,\n            placeholderVisible: false,\n            isCodeEdit: false,\n            tableData: {\n                pageX: null,\n                curCol: null,\n                nextCol: null,\n                curColWidth: null,\n                nextColWidth: null,\n            },\n            isTableEdit: false,\n            cmsPageState: Cicada.Store.get('cmsPage'),\n            minorElementTags: [\n                '#text',\n                'br',\n                'b',\n                'strong',\n                'mark',\n                'del',\n                's',\n                'ins',\n                'small',\n                'i',\n                'em',\n                'u',\n                'a',\n                'ul',\n                'ol',\n                'dl',\n                'img',\n            ],\n            sectionElementTags: [\n                'p',\n                'h1',\n                'h2',\n                'h3',\n                'h4',\n                'h5',\n                'h6',\n                'blockquote',\n                'table',\n            ],\n        };\n    },\n\n    computed: {\n        classes() {\n            return {\n                'is--active': this.isActive,\n                'is--disabled': this.disabled,\n                'is--boxed': !this.isInlineEdit,\n                'is--empty': this.isEmpty,\n                'has--vertical-align': !!this.verticalAlign,\n                'has--error': !!this.error,\n            };\n        },\n\n        contentClasses() {\n            return {\n                'is--transparent-background': this.enableTransparentBackground,\n            };\n        },\n\n        verticalAlignStyle() {\n            if (!this.verticalAlign) {\n                return null;\n            }\n\n            return {\n                'justify-content': this.verticalAlign,\n            };\n        },\n\n        availableDataMappings() {\n            let mappings = [];\n\n            Object.entries(this.cmsPageState.currentMappingTypes).forEach((entry) => {\n                const [\n                    type,\n                    value,\n                ] = entry;\n\n                if (type === 'string') {\n                    mappings = [\n                        ...mappings,\n                        ...value,\n                    ];\n                }\n            });\n\n            return mappings;\n        },\n    },\n\n    watch: {\n        value: {\n            handler() {\n                if (this.$refs.textEditor && this.value !== this.$refs.textEditor.innerHTML) {\n                    this.$refs.textEditor.innerHTML = '';\n                    this.content = this.value;\n                    this.isEmpty = this.emptyCheck(this.content);\n                    this.placeholderVisible = this.isEmpty;\n                }\n\n                this.$nextTick(() => {\n                    this.setWordCount();\n                    this.setTablesResizable();\n                });\n            },\n        },\n\n        isCodeEdit() {\n            if (!this.isCodeEdit) {\n                this.$nextTick(() => {\n                    this.setWordCount();\n                });\n            }\n        },\n    },\n\n    created() {\n        this.createdComponent();\n    },\n\n    mounted() {\n        this.mountedComponent();\n    },\n\n    unmounted() {\n        this.destroyedComponent();\n    },\n\n    methods: {\n        createdComponent() {\n            this.content = this.value;\n\n            if (!this.$options.buttonConfig) {\n                // eslint-disable-next-line vue/no-mutating-props\n                this.buttonConfig.push({\n                    type: 'table',\n                    title: this.$tc('sw-text-editor-toolbar.title.insert-table'),\n                    icon: 'regular-table-xs',\n                    tag: 'table',\n                    expanded: false,\n                    handler: this.handleInsertTable,\n                });\n\n                if (!this.isInlineEdit) {\n                    // eslint-disable-next-line vue/no-mutating-props\n                    this.buttonConfig.push({\n                        type: 'codeSwitch',\n                        title: this.$tc('sw-text-editor-toolbar.title.code-switch'),\n                        icon: 'regular-code-xs',\n                        expanded: this.isCodeEdit,\n                        handler: this.toggleCodeEditor,\n                        position: 'right',\n                    });\n                }\n\n                if (this.allowInlineDataMapping && this.availableDataMappings.length > 0) {\n                    const dataMappingButton = {\n                        type: 'data-mapping',\n                        title: this.$tc('sw-text-editor-toolbar.title.data-mapping'),\n                        icon: 'regular-variables-xs',\n                        position: 'left',\n                        dropdownPosition: 'left',\n                        tooltipShowDelay: 500,\n                        tooltipHideDelay: 100,\n                    };\n\n                    const buttonConfigs = this.availableDataMappings.map((mapping) => ({\n                        type: mapping,\n                        name: mapping,\n                        title: mapping,\n                        handler: this.handleInsertDataMapping,\n                    }));\n\n                    dataMappingButton.children = buttonConfigs;\n\n                    // eslint-disable-next-line vue/no-mutating-props\n                    this.buttonConfig.push(dataMappingButton);\n                }\n            }\n\n            document.addEventListener('mouseup', this.onSelectionChange);\n            document.addEventListener('mousedown', this.onSelectionChange);\n            document.addEventListener('keydown', this.onSelectionChange);\n\n            document.addEventListener('keydown', this.keyListener);\n            document.addEventListener('keyup', this.keyListener);\n        },\n\n        mountedComponent() {\n            this.isEmpty = this.emptyCheck(this.content);\n            this.placeholderVisible = this.isEmpty;\n\n            this.$nextTick(() => {\n                this.setWordCount();\n                this.setTablesResizable();\n            });\n        },\n\n        destroyedComponent() {\n            document.removeEventListener('mouseup', this.onSelectionChange);\n            document.removeEventListener('mousedown', this.onSelectionChange);\n            document.removeEventListener('keydown', this.onSelectionChange);\n\n            document.removeEventListener('keydown', this.keyListener);\n            document.removeEventListener('keyup', this.keyListener);\n        },\n\n        keyListener(event) {\n            this.isShiftPressed = event.shiftKey;\n        },\n\n        onSelectionChange(event) {\n            if (this.isCodeEdit || !this.isActive) {\n                return;\n            }\n\n            const path = this.getPath(event);\n\n            if (path.some((element) => element.classList?.contains('sw-popover__wrapper'))) {\n                return;\n            }\n\n            if (\n                (event.type === 'keydown' || event.type === 'mousedown') &&\n                !path.includes(this.$el) &&\n                !path.includes(this.toolbar)\n            ) {\n                this.hasSelection = false;\n                return;\n            }\n\n            const targetTag = event?.target?.tagName;\n            if (path.includes(this.toolbar)) {\n                if (targetTag !== 'INPUT' && targetTag !== 'SELECT') {\n                    event.preventDefault();\n                }\n                return;\n            }\n\n            if (event.type === 'mousedown') {\n                document.getSelection().empty();\n                this.resetForeColor();\n            }\n\n            this.hasSelection = !!document.getSelection().toString();\n            this.selection = document.getSelection();\n        },\n\n        getPath(event) {\n            const path = [];\n            let source = event.target;\n\n            while (source) {\n                path.push(source);\n                source = source.parentNode;\n            }\n\n            return path;\n        },\n\n        toggleCodeEditor(buttonConf) {\n            this.isCodeEdit = !this.isCodeEdit;\n            buttonConf.expanded = !buttonConf.expanded;\n        },\n\n        handleInsertDataMapping({ name }) {\n            this.onTextStyleChange('insertText', `{{ ${name} }}`);\n\n            this.selection = document.getSelection();\n        },\n\n        resetForeColor() {\n            Object.keys(this.buttonConfig).forEach((key) => {\n                if (this.buttonConfig[key].type === 'foreColor') {\n                    // eslint-disable-next-line vue/no-mutating-props\n                    this.buttonConfig[key].value = '';\n                }\n            });\n        },\n\n        onToolbarCreated(elem) {\n            this.toolbar = elem;\n        },\n\n        onToolbarDestroyed() {\n            this.toolbar = null;\n        },\n\n        onTextStyleChange(type, value) {\n            const selectedText = document.getSelection().toString();\n\n            if (selectedText.length > 0) {\n                const selectionContainsStartBracket = this.containsStartBracket(selectedText);\n                const selectionContainsEndBracket = this.containsEndBracket(selectedText);\n                const isInsideInlineMapping = this.isInsideInlineMapping();\n\n                if (selectionContainsStartBracket && !selectionContainsEndBracket) {\n                    this.expandSelectionToNearestEndBracket();\n                }\n\n                if (!selectionContainsStartBracket && selectionContainsEndBracket) {\n                    this.expandSelectionToNearestStartBracket();\n                }\n\n                if (isInsideInlineMapping) {\n                    this.expandSelectionToNearestStartBracket();\n                    this.expandSelectionToNearestEndBracket();\n                }\n            }\n\n            document.execCommand(type, false, value);\n            this.emitContent();\n        },\n\n        expandSelectionToNearestEndBracket() {\n            const {\n                anchorNode,\n                anchorOffset,\n                focusNode,\n                focusNode: { nodeValue: focusNodeText },\n                focusOffset,\n            } = this.selection;\n\n            const contentAfterSelection = Array.from(focusNodeText).splice(focusOffset, focusNodeText.length).join('');\n            const positionOfEndBracket = contentAfterSelection.indexOf('}}');\n            const containsBothStartBrackets = /\\{\\{/.test(this.selection.toString());\n\n            this.setSelection(\n                anchorNode,\n                focusNode,\n                containsBothStartBrackets ? anchorOffset : anchorOffset - 1,\n                focusOffset + positionOfEndBracket + 2,\n            );\n        },\n\n        expandSelectionToNearestStartBracket() {\n            const {\n                anchorOffset,\n                anchorNode,\n                anchorNode: { nodeValue: anchorNodeText },\n                focusNode,\n                focusOffset,\n            } = this.selection;\n\n            const contentBeforeSelection = Array.from(anchorNodeText).splice(0, anchorOffset).reverse().join('');\n            const positionOfStartBracket = contentBeforeSelection.indexOf('{{');\n            const containsBothEndBrackets = /}}/.test(this.selection.toString());\n\n            this.setSelection(\n                anchorNode,\n                focusNode,\n                anchorOffset - positionOfStartBracket - 2,\n                containsBothEndBrackets ? focusOffset : focusOffset + 1,\n            );\n        },\n\n        setSelection(anchorNode, focusNode, start, end) {\n            const range = new Range();\n            range.setStart(anchorNode, start);\n            range.setEnd(focusNode, end);\n\n            this.selection.empty();\n            this.selection.addRange(range);\n        },\n\n        containsStartBracket(selection) {\n            const regex = /\\{{1,2}/;\n\n            return regex.test(selection);\n        },\n\n        containsEndBracket(selection) {\n            const regex = /}{1,2}/;\n\n            return regex.test(selection);\n        },\n\n        isInsideInlineMapping() {\n            /* go to the right and check if there is a '}'. And if there's one it should be before and '{'\n             * go to the left and do the same just swap the chars.\n             */\n            const selectedText = this.selection.toString();\n            const containsStartBracket = selectedText.includes('{');\n            const containsEndBracket = selectedText.includes('}');\n\n            if (containsStartBracket || containsEndBracket) {\n                return false;\n            }\n\n            const {\n                anchorOffset,\n                anchorNode: { textContent: anchorNodeText },\n                focusOffset,\n                focusNode: { textContent: focusNodeText },\n            } = this.selection;\n\n            const contentBeforeSelection = Array.from(anchorNodeText).splice(0, anchorOffset).reverse().join('');\n            // https://regex101.com/r/HWsZiH/1\n            const startBracketFound = /^[^}]*{{/.test(contentBeforeSelection);\n\n            const contentAfterSelection = Array.from(focusNodeText).splice(focusOffset, focusNodeText.length).join('');\n            // https://regex101.com/r/nzzL4t/1\n            const endBracketFound = /^[^{]*}}/.test(contentAfterSelection);\n\n            return !!startBracketFound && !!endBracketFound;\n        },\n\n        handleInsertTable(button) {\n            this.onTextStyleChange('insertHTML', button.value);\n            this.selection = document.getSelection();\n\n            this.$nextTick(() => {\n                this.setTablesResizable();\n                this.isTableEdit = true;\n            });\n        },\n\n        setTablesResizable() {\n            const tables = this.$el.querySelectorAll('.sw-text-editor-table');\n\n            if (tables) {\n                tables.forEach((table) => {\n                    this.setTableResizable(table);\n                });\n            }\n        },\n\n        setTableResizable(table) {\n            const row = table.getElementsByTagName('tr')[0];\n            const cols = row ? row.children : undefined;\n\n            if (!cols) {\n                return;\n            }\n\n            const resizeSelectors = table.querySelectorAll('.sw-text-editor-table__col-selector');\n\n            if (resizeSelectors.length > 0) {\n                resizeSelectors.forEach((selector) => {\n                    selector.style.height = `${table.offsetHeight}px`;\n                    selector.contentEditable = false;\n                    this.setTableSelectorListeners(selector);\n                });\n\n                this.setTableListeners();\n            }\n        },\n\n        setTableSelectorListeners(selector) {\n            selector.addEventListener('mousedown', (e) => {\n                this.tableData.curCol = e.target.parentElement;\n                this.tableData.nextCol = this.tableData.curCol.nextElementSibling;\n                this.tableData.pageX = e.pageX;\n                this.tableData.curColWidth = this.tableData.curCol.offsetWidth;\n                if (this.tableData.nextCol) {\n                    this.tableData.nextColWidth = this.tableData.nextCol.offsetWidth;\n                }\n            });\n        },\n\n        setTableListeners() {\n            this.$el.addEventListener('mousemove', (e) => {\n                if (this.tableData.curCol) {\n                    const diffX = e.pageX - this.tableData.pageX;\n\n                    if (this.tableData.nextCol) {\n                        this.tableData.nextCol.style.width = `${this.tableData.nextColWidth - diffX}px`;\n                    }\n\n                    this.tableData.curCol.style.width = `${this.tableData.curColWidth + diffX}px`;\n                }\n            });\n\n            this.$el.addEventListener('mouseup', () => {\n                this.tableData.curCol = null;\n                this.tableData.nextCol = null;\n                this.tableData.pageX = null;\n                this.tableData.nextColWidth = null;\n                this.tableData.curColWidth = null;\n            });\n        },\n\n        onSetLink(value, target, displayAsButton, buttonVariant) {\n            if (!this.selection.toString()) {\n                return;\n            }\n\n            const classes = [];\n            const attributes = [\n                `target=\"${target}\"`,\n                `href=\"${value}\"`,\n            ];\n\n            if (target === '_blank') {\n                attributes.push('rel=\"noopener\"');\n            }\n\n            if (displayAsButton) {\n                classes.push('btn');\n                classes.push(...buttonVariant.split('-').map((cls) => `btn-${cls}`));\n            }\n\n            if (classes.length > 0) {\n                attributes.push(`class=\"${classes.join(' ')}\"`);\n            }\n\n            this.onTextStyleChange('insertHTML', `<a ${attributes.join(' ')}>${this.selection}</a>`);\n            this.selection = document.getSelection();\n        },\n\n        onRemoveLink() {\n            const parentAnchorTag = this.selection.focusNode.parentElement.closest('a');\n\n            if (parentAnchorTag) {\n                parentAnchorTag.insertAdjacentHTML('afterend', parentAnchorTag.innerHTML);\n                parentAnchorTag.remove();\n            }\n        },\n\n        onClick() {\n            this.isActive = true;\n        },\n\n        onFocus() {\n            this.setFocus();\n            document.execCommand('defaultParagraphSeparator', false, 'p');\n        },\n\n        /**\n         * When initiating a proper line break, loose text nodes get fixed.\n         * It is not called on inline line breaks (shift + enter) to wait\n         * until the next proper line break initializes a new paragraph.\n         */\n        onEnter(event) {\n            if (event.key === 'Enter' && !event.shiftKey && this.hasDirectMinorElements()) {\n                this.fixWrongNodes(false);\n            }\n        },\n\n        /**\n         * This method optimizes the produced markup of the editor.\n         * The default behaviour of a contenteditable element can result\n         * in loose text nodes or unwanted `<div>` elements.\n         *\n         * It will wrap loose text nodes and minor elements into paragraphs.\n         * Optionally you can replace falsy `<div>` nodes with paragraphs, too.\n         * This helps to achieve a consistent text formatting.\n         *\n         * @param {boolean} replaceDivNodes - Defines if <div> nodes should be replaced. Defaults to false.\n         */\n        fixWrongNodes(replaceDivNodes = false) {\n            // Valid section elements that should stay as they are.\n            const sectionElements = this.sectionElementTags;\n\n            // Elements that should be replaced by a paragraph element.\n            const replaceElements = ['div'];\n\n            // Elements that should be wrapped in a paragraph element.\n            const wrapElements = this.minorElementTags;\n\n            const nodes = this.$refs.textEditor.childNodes;\n            let newParagraph = null;\n            let replaceNode = null;\n            let removeNodes = [];\n\n            nodes.forEach((node) => {\n                const nodeName = node.nodeName.toLowerCase();\n                const isMinorNode = wrapElements.includes(nodeName);\n                const isSectionNode = sectionElements.includes(nodeName);\n                const shouldBeReplaced = replaceDivNodes === true && replaceElements.includes(nodeName);\n                const shouldBeWrapped = (isMinorNode || !isSectionNode) && !replaceElements.includes(nodeName);\n\n                // Replace wrong section elements, like `<div>`.\n                if (shouldBeReplaced) {\n                    const paragraph = document.createElement('p');\n                    paragraph.innerHTML = node.innerHTML;\n\n                    // Copy the attributes to maintain applied formatting like text alignment.\n                    if (node.hasAttributes()) {\n                        Array.from(node.attributes).forEach((attr) => {\n                            paragraph.setAttribute(attr.name, attr.value);\n                        });\n                    }\n\n                    this.$refs.textEditor.replaceChild(paragraph, node);\n\n                    // Wrap minor elements in a proper paragraph element.\n                } else if (shouldBeWrapped) {\n                    // If there are several following elements to wrap, they are collected in one paragraph.\n                    if (newParagraph === null) {\n                        newParagraph = document.createElement('p');\n                        newParagraph.appendChild(node.cloneNode(true));\n\n                        replaceNode = node;\n                    } else {\n                        newParagraph.appendChild(node.cloneNode(true));\n                        removeNodes.push(node);\n                    }\n\n                    // If a new section starts, replace all collected minor elements with the new paragraph.\n                } else {\n                    if (newParagraph !== null && replaceNode !== null) {\n                        this.$refs.textEditor.replaceChild(newParagraph, replaceNode);\n                    }\n\n                    removeNodes.forEach((removeNode) => {\n                        this.$refs.textEditor.removeChild(removeNode);\n                    });\n\n                    newParagraph = null;\n                    replaceNode = null;\n                    removeNodes = [];\n                }\n            });\n\n            this.emitContent();\n        },\n\n        /**\n         * Checks if nodes of the content are not wrapped in a proper section element.\n         *\n         * @returns {boolean}\n         */\n        hasDirectMinorElements() {\n            const nodes = Array.from(this.$refs.textEditor.childNodes);\n            return nodes.some((node) => this.minorElementTags.includes(node.nodeName.toLowerCase()));\n        },\n\n        setFocus() {\n            if (!this.isActive) {\n                document.addEventListener('mousedown', this.onDocumentClick);\n                this.isActive = true;\n                this.placeholderVisible = false;\n            }\n        },\n\n        removeFocus() {\n            if (!this.isActive) {\n                return;\n            }\n\n            if (this.$refs.textEditor && this.$refs.textEditor.innerHTML.length <= 0) {\n                this.placeholderVisible = true;\n            }\n\n            this.isActive = false;\n            this.emitContent();\n            document.removeEventListener('mousedown', this.onDocumentClick);\n        },\n\n        onDocumentClick(event) {\n            const path = this.getPath(event);\n            if (path.includes(this.toolbar)) {\n                return;\n            }\n\n            if (!path.includes(this.$el)) {\n                this.removeFocus();\n            }\n        },\n\n        onInput() {\n            this.onContentChange();\n            this.emitContent();\n        },\n\n        onContentChange() {\n            this.isEmpty = this.emptyCheck(this.getContentValue());\n            this.placeholderVisible = this.isEmpty;\n            this.setWordCount();\n        },\n\n        onCopy(event) {\n            event.preventDefault();\n\n            const nodes = [];\n\n            let element = this.selection.focusNode;\n            while (element.parentNode && !element?.parentNode?.classList.contains('sw-text-editor__content-editor')) {\n                nodes.unshift(element.parentNode);\n                element = element.parentNode;\n            }\n\n            const formattedSting = nodes\n                .map((node) => node.tagName.toLowerCase())\n                .filter((nodeName) => nodeName !== 'p')\n                .reduce((previousValue, currentElement) => {\n                    return `<${currentElement}>${previousValue}</${currentElement}>`;\n                }, this.selection.toString());\n\n            event.clipboardData.setData('text/plain', this.selection.toString());\n            event.clipboardData.setData('text/html', formattedSting);\n        },\n\n        onPaste(event) {\n            event.preventDefault();\n\n            const settings = {\n                USE_PROFILES: {\n                    html: true,\n                },\n            };\n\n            const clipboardData = event.clipboardData;\n\n            const textData = clipboardData.getData('text/plain');\n            const htmlData = clipboardData.getData('text/html');\n\n            let insertableNode;\n            if (htmlData && !this.isShiftPressed) {\n                insertableNode = document.createRange().createContextualFragment(this.$sanitize(htmlData, settings));\n            } else {\n                insertableNode = document.createTextNode(this.$sanitize(textData));\n            }\n\n            const selection = window.getSelection();\n\n            // if user has not clicked anywhere on the page\n            if (!selection.rangeCount) {\n                return;\n            }\n\n            selection.deleteFromDocument();\n\n            selection.getRangeAt(0).insertNode(insertableNode);\n        },\n\n        emitContent() {\n            this.$emit('update:value', this.getContentValue());\n        },\n\n        emitHtmlContent(value) {\n            this.content = value;\n            this.$emit('update:value', value);\n\n            this.isEmpty = this.emptyCheck(this.content);\n            this.placeholderVisible = this.isEmpty;\n        },\n\n        getContentValue() {\n            if (!this.$refs.textEditor || !this.$refs.textEditor.innerHTML) {\n                return null;\n            }\n\n            if (\n                !this.$refs.textEditor.textContent ||\n                !this.$refs.textEditor.textContent.length ||\n                this.$refs.textEditor.textContent.length <= 0\n            ) {\n                return null;\n            }\n\n            return this.$refs.textEditor.innerHTML;\n        },\n\n        emptyCheck(value) {\n            return !value || value === null || !value.length || value.length <= 0;\n        },\n\n        setWordCount() {\n            if (this.$refs.textEditor) {\n                this.textLength = this.$refs.textEditor.innerText.length;\n            }\n        },\n\n        onTableEdit(toggle) {\n            this.isTableEdit = toggle;\n        },\n\n        onTableModify(table) {\n            this.$nextTick(() => {\n                this.setTableResizable(table);\n            });\n        },\n\n        onTableDelete(event) {\n            event.stopPropagation();\n            this.isTableEdit = false;\n        },\n\n        showLabel() {\n            return !!this.label || !!this.$slots.label || !!this.$scopedSlots?.label?.();\n        },\n    },\n});\n"],"names":["template","Component","value","reactive","mappings","entry","type","dataMappingButton","buttonConfigs","mapping","event","path","element","_a","targetTag","source","buttonConf","name","key","elem","selectedText","selectionContainsStartBracket","selectionContainsEndBracket","isInsideInlineMapping","anchorNode","anchorOffset","focusNode","focusNodeText","focusOffset","positionOfEndBracket","containsBothStartBrackets","anchorNodeText","positionOfStartBracket","containsBothEndBrackets","start","end","range","selection","containsStartBracket","containsEndBracket","contentBeforeSelection","startBracketFound","contentAfterSelection","endBracketFound","button","tables","table","row","resizeSelectors","selector","e","diffX","target","displayAsButton","buttonVariant","classes","attributes","cls","parentAnchorTag","replaceDivNodes","sectionElements","replaceElements","wrapElements","nodes","newParagraph","replaceNode","removeNodes","node","nodeName","isMinorNode","isSectionNode","shouldBeReplaced","shouldBeWrapped","paragraph","attr","removeNode","formattedSting","previousValue","currentElement","settings","clipboardData","textData","htmlData","insertableNode","toggle","_b"],"mappings":"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"}