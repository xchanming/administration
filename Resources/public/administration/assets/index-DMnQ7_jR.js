const t=`{% block sw_media_breadcrumbs %} <nav class="sw-media-breadcrumbs" :class="swMediaBreadcrumbsClasses" > {% block sw_media_breadcrumbs_root_folder %} <a class="sw-media-breadcrumbs__button-back-to-root" role="button" tabindex="0" @click="onBreadcrumbsItemClicked(null)" @keydown.enter="onBreadcrumbsItemClicked(null)" > <img v-if="!small" :src="assetFilter('/administration/static/img/media/multicolor-folder-breadcrumbs-back-to-root.svg')" alt="Folder breadcrumbs back-to-root" > <img v-else :src="assetFilter('/administration/static/img/media/multicolor-folder-breadcrumbs.svg')" alt="Folder breadcrumbs" > </a> {% endblock %} {% block sw_media_breadcrumbs_parent_folder %} <a v-if="parentFolder" class="sw-media-breadcrumbs__entry sw-media-breadcrumbs__parent-folder" role="button" tabindex="0" @click="onBreadcrumbsItemClicked(parentFolder.id)" @keydown.enter="onBreadcrumbsItemClicked(parentFolder.id)" > <sw-icon class="sw-media-breadcrumbs__arrow-separator" name="regular-chevron-right-xxs" /> {{ parentFolder.name }} </a> {% endblock %} {% block sw_media_breadcrumbs_current_folder %} <span v-if="currentFolder" class="sw-media-breadcrumbs__entry sw-media-breadcrumbs__current-folder" > <sw-icon class="sw-media-breadcrumbs__arrow-separator" name="regular-chevron-right-xxs" /> {{ currentFolder.name }} </span> {% endblock %} </nav> {% endblock %}`,{Context:r,Filter:a}=Shopware,d={template:t,inject:["repositoryFactory","feature"],emits:["update:currentFolderId"],props:{currentFolderId:{type:String,required:!1,default:null},small:{type:Boolean,required:!1,default:!1}},data(){return{currentFolder:null,parentFolder:null}},computed:{mediaFolderRepository(){return this.repositoryFactory.create("media_folder")},rootFolder(){const e=this.mediaFolderRepository.create(r.api);return e.name=this.$tc("sw-media.index.rootFolderName"),e.id=null,e},swMediaBreadcrumbsClasses(){return{"is--small":this.small}},assetFilter(){return a.getByName("asset")}},watch:{currentFolderId(){this.updateFolder()}},created(){this.createdComponent()},methods:{createdComponent(){this.updateFolder()},async updateFolder(){this.currentFolderId?(this.currentFolder=await this.mediaFolderRepository.get(this.currentFolderId,r.api),this.currentFolder&&this.currentFolder.parentId?this.parentFolder=await this.mediaFolderRepository.get(this.currentFolder.parentId,r.api):this.parentFolder=this.rootFolder):(this.currentFolder=this.rootFolder,this.parentFolder=null)},onBreadcrumbsItemClicked(e){this.$emit("update:currentFolderId",e)}}};export{d as default};
