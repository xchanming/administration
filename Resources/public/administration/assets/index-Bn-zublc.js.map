{"version":3,"file":"index-Bn-zublc.js","sources":["../../../app/administration/src/module/sw-settings-custom-field/page/sw-settings-custom-field-set-detail/sw-settings-custom-field-set-detail.html.twig","../../../app/administration/src/module/sw-settings-custom-field/page/sw-settings-custom-field-set-detail/index.js"],"sourcesContent":["<!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n{% block sw_settings_custom_field_set_detail %}\n<sw-page class=\"sw-settings-set-detail\">\n\n    <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n    {% block sw_settings_customField_set_detail_header %}\n    <template #smart-bar-header>\n        <h2 v-if=\"set && set.config && getInlineSnippet(set.config.label)\">\n            {{ getInlineSnippet(set.config.label) }}\n        </h2>\n        <h2 v-else>\n            {{ $tc('sw-settings-custom-field.set.detail.textHeadline') }}\n        </h2>\n    </template>\n    {% endblock %}\n\n    <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n    {% block sw_settings_custom_field_set_detail_actions %}\n    <template #smart-bar-actions>\n        <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n        {% block sw_settings_custom_field_set_detail_actions_abort %}\n        <sw-button\n            v-tooltip.bottom=\"tooltipCancel\"\n            :disabled=\"set.isLoading\"\n            @click=\"onCancel\"\n        >\n            {{ $tc('global.default.cancel') }}\n        </sw-button>\n        {% endblock %}\n\n        <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n        {% block sw_settings_custom_field_set_detail_actions_save %}\n        <sw-button-process\n            v-tooltip.bottom=\"tooltipSave\"\n            class=\"sw-settings-set-detail__save-action\"\n            :is-loading=\"isLoading\"\n            :process-success=\"isSaveSuccessful\"\n            :disabled=\"set.isLoading || !acl.can('custom_field.editor')\"\n            variant=\"primary\"\n            @update:process-success=\"saveFinish\"\n            @click.prevent=\"onSave\"\n        >\n            {{ $tc('sw-settings-custom-field.set.detail.buttonSave') }}\n        </sw-button-process>\n        {% endblock %}\n    </template>\n    {% endblock %}\n\n    <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n    {% block sw_settings_custom_field_set_detail_content %}\n    <template #content>\n        <sw-card-view>\n            <template v-if=\"isLoading\">\n                <sw-skeleton />\n                <sw-skeleton />\n            </template>\n\n            {# v-show is used here as underlying components influence the loading state and v-if would destroy this behaviour #}\n            <div v-show=\"!isLoading\">\n                <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n                {% block sw_settings_custom_field_set_detail_content_detail_base %}\n                <sw-custom-field-set-detail-base\n                    :set=\"set\"\n                    :technical-name-error=\"technicalNameError\"\n                    @reset-errors=\"onResetErrors\"\n                />\n                {% endblock %}\n\n                <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n                {% block sw_settings_custom_field_set_detail_content_detail_custom_field_list %}\n                <sw-custom-field-list\n                    v-if=\"set.id\"\n                    ref=\"customFieldList\"\n                    :set=\"set\"\n                    @loading-changed=\"onLoadingChanged\"\n                />\n                {% endblock %}\n            </div>\n        </sw-card-view>\n    </template>\n    {% endblock %}\n</sw-page>\n{% endblock %}\n","/**\n * @package services-settings\n */\nimport template from './sw-settings-custom-field-set-detail.html.twig';\n\nconst { Mixin } = Cicada;\nconst { Criteria } = Cicada.Data;\n\n// eslint-disable-next-line sw-deprecation-rules/private-feature-declarations\nexport default {\n    template,\n\n    compatConfig: Cicada.compatConfig,\n\n    inject: [\n        'repositoryFactory',\n        'acl',\n    ],\n\n    mixins: [\n        Mixin.getByName('notification'),\n        Mixin.getByName('sw-inline-snippet'),\n        Mixin.getByName('discard-detail-page-changes')('set'),\n    ],\n\n    shortcuts: {\n        'SYSTEMKEY+S': {\n            active() {\n                return this.acl.can('custom_field.editor');\n            },\n            method: 'onSave',\n        },\n        ESCAPE: 'onCancel',\n    },\n\n    data() {\n        return {\n            set: {},\n            setId: '',\n            isLoading: true,\n            isSaveSuccessful: false,\n            technicalNameError: null,\n        };\n    },\n\n    metaInfo() {\n        return {\n            title: this.$createTitle(this.identifier),\n        };\n    },\n\n    computed: {\n        identifier() {\n            return this.set.config && this.getInlineSnippet(this.set.config.label)\n                ? this.getInlineSnippet(this.set.config.label)\n                : this.set.name;\n        },\n\n        customFieldSetRepository() {\n            return this.repositoryFactory.create('custom_field_set');\n        },\n\n        customFieldRepository() {\n            return this.repositoryFactory.create('custom_field');\n        },\n\n        customFieldCriteria() {\n            const criteria = new Criteria(1, 25);\n            criteria.addFilter(Criteria.equals('customFieldSetId', this.setId));\n\n            return criteria;\n        },\n\n        customFieldSetCriteria() {\n            const criteria = new Criteria(1, 25);\n\n            criteria.addAssociation('relations');\n\n            return criteria;\n        },\n\n        tooltipSave() {\n            if (!this.acl.can('custom_field.editor')) {\n                return {\n                    message: this.$tc('sw-privileges.tooltip.warning'),\n                    disabled: this.acl.can('custom_field.editor'),\n                    showOnDisabledElements: true,\n                };\n            }\n\n            const systemKey = this.$device.getSystemKey();\n\n            return {\n                message: `${systemKey} + S`,\n                appearance: 'light',\n            };\n        },\n\n        tooltipCancel() {\n            return {\n                message: 'ESC',\n                appearance: 'light',\n            };\n        },\n    },\n\n    created() {\n        this.createdComponent();\n    },\n\n    methods: {\n        createdComponent() {\n            if (this.$route.params.id) {\n                this.setId = this.$route.params.id;\n                this.loadEntityData();\n            }\n        },\n\n        async loadEntityData() {\n            this.set = await this.customFieldSetRepository.get(this.setId, Cicada.Context.api, this.customFieldSetCriteria);\n        },\n\n        saveFinish() {\n            this.isSaveSuccessful = false;\n        },\n\n        onSave() {\n            const setLabel = this.identifier;\n            const titleSaveSuccess = this.$tc('global.default.success');\n            const messageSaveSuccess = this.$tc('sw-settings-custom-field.set.detail.messageSaveSuccess', 0, {\n                name: setLabel,\n            });\n            this.isSaveSuccessful = false;\n            this.isLoading = true;\n\n            // Remove all translations except for default locale(fallbackLanguage)\n            // in case, the set is not translated\n            if (!this.set.config.translated || this.set.config.translated === false) {\n                const fallbackLocale = this.swInlineSnippetFallbackLocale;\n                this.set.config.label = {\n                    [fallbackLocale]: this.set.config.label[fallbackLocale],\n                };\n            }\n\n            if (!this.set.relations) {\n                this.set.relations = [];\n            }\n\n            this.customFieldSetRepository\n                .save(this.set)\n                .then(() => {\n                    this.isSaveSuccessful = true;\n\n                    this.createNotificationSuccess({\n                        title: titleSaveSuccess,\n                        message: messageSaveSuccess,\n                    });\n\n                    return this.loadEntityData();\n                })\n                .catch((error) => {\n                    const errorMessage = error?.response?.data?.errors?.[0]?.detail ?? 'Error';\n\n                    this.createNotificationError({\n                        message: errorMessage,\n                    });\n                })\n                .finally(() => {\n                    this.isLoading = false;\n                });\n        },\n\n        onCancel() {\n            this.$router.push({ name: 'sw.settings.custom.field.index' });\n        },\n\n        abortOnLanguageChange() {\n            return this.customFieldSetRepository.hasChanges(this.set);\n        },\n\n        saveOnLanguageChange() {\n            return this.onSave();\n        },\n\n        onChangeLanguage() {\n            this.loadEntityData();\n        },\n\n        onLoadingChanged(loading) {\n            this.isLoading = loading;\n        },\n\n        onResetErrors() {\n            this.technicalNameError = null;\n        },\n    },\n};\n"],"names":["template","Mixin","Criteria","index","criteria","setLabel","titleSaveSuccess","messageSaveSuccess","fallbackLocale","error","_a","_b","_c","_d","errorMessage","loading"],"mappings":"AAAA,MAAeA,EAAA,86DCKT,CAAE,MAAAC,CAAO,EAAG,OACZ,CAAE,SAAAC,CAAQ,EAAK,OAAO,KAGbC,EAAA,CACX,SAAAH,EAEA,aAAc,OAAO,aAErB,OAAQ,CACJ,oBACA,KACH,EAED,OAAQ,CACJC,EAAM,UAAU,cAAc,EAC9BA,EAAM,UAAU,mBAAmB,EACnCA,EAAM,UAAU,6BAA6B,EAAE,KAAK,CACvD,EAED,UAAW,CACP,cAAe,CACX,QAAS,CACL,OAAO,KAAK,IAAI,IAAI,qBAAqB,CAC5C,EACD,OAAQ,QACX,EACD,OAAQ,UACX,EAED,MAAO,CACH,MAAO,CACH,IAAK,CAAE,EACP,MAAO,GACP,UAAW,GACX,iBAAkB,GAClB,mBAAoB,IAChC,CACK,EAED,UAAW,CACP,MAAO,CACH,MAAO,KAAK,aAAa,KAAK,UAAU,CACpD,CACK,EAED,SAAU,CACN,YAAa,CACT,OAAO,KAAK,IAAI,QAAU,KAAK,iBAAiB,KAAK,IAAI,OAAO,KAAK,EAC/D,KAAK,iBAAiB,KAAK,IAAI,OAAO,KAAK,EAC3C,KAAK,IAAI,IAClB,EAED,0BAA2B,CACvB,OAAO,KAAK,kBAAkB,OAAO,kBAAkB,CAC1D,EAED,uBAAwB,CACpB,OAAO,KAAK,kBAAkB,OAAO,cAAc,CACtD,EAED,qBAAsB,CAClB,MAAMG,EAAW,IAAIF,EAAS,EAAG,EAAE,EACnC,OAAAE,EAAS,UAAUF,EAAS,OAAO,mBAAoB,KAAK,KAAK,CAAC,EAE3DE,CACV,EAED,wBAAyB,CACrB,MAAMA,EAAW,IAAIF,EAAS,EAAG,EAAE,EAEnC,OAAAE,EAAS,eAAe,WAAW,EAE5BA,CACV,EAED,aAAc,CACV,OAAK,KAAK,IAAI,IAAI,qBAAqB,EAUhC,CACH,QAAS,GAHK,KAAK,QAAQ,aAAY,CAGlB,OACrB,WAAY,OAC5B,EAZuB,CACH,QAAS,KAAK,IAAI,+BAA+B,EACjD,SAAU,KAAK,IAAI,IAAI,qBAAqB,EAC5C,uBAAwB,EAC5C,CASS,EAED,eAAgB,CACZ,MAAO,CACH,QAAS,MACT,WAAY,OAC5B,CACS,CACJ,EAED,SAAU,CACN,KAAK,iBAAgB,CACxB,EAED,QAAS,CACL,kBAAmB,CACX,KAAK,OAAO,OAAO,KACnB,KAAK,MAAQ,KAAK,OAAO,OAAO,GAChC,KAAK,eAAc,EAE1B,EAED,MAAM,gBAAiB,CACnB,KAAK,IAAM,MAAM,KAAK,yBAAyB,IAAI,KAAK,MAAO,OAAO,QAAQ,IAAK,KAAK,sBAAsB,CACjH,EAED,YAAa,CACT,KAAK,iBAAmB,EAC3B,EAED,QAAS,CACL,MAAMC,EAAW,KAAK,WAChBC,EAAmB,KAAK,IAAI,wBAAwB,EACpDC,EAAqB,KAAK,IAAI,yDAA0D,EAAG,CAC7F,KAAMF,CACtB,CAAa,EAMD,GALA,KAAK,iBAAmB,GACxB,KAAK,UAAY,GAIb,CAAC,KAAK,IAAI,OAAO,YAAc,KAAK,IAAI,OAAO,aAAe,GAAO,CACrE,MAAMG,EAAiB,KAAK,8BAC5B,KAAK,IAAI,OAAO,MAAQ,CACpB,CAACA,CAAc,EAAG,KAAK,IAAI,OAAO,MAAMA,CAAc,CAC1E,CACa,CAEI,KAAK,IAAI,YACV,KAAK,IAAI,UAAY,IAGzB,KAAK,yBACA,KAAK,KAAK,GAAG,EACb,KAAK,KACF,KAAK,iBAAmB,GAExB,KAAK,0BAA0B,CAC3B,MAAOF,EACP,QAASC,CACjC,CAAqB,EAEM,KAAK,iBACf,EACA,MAAOE,GAAU,CDhKlC,IAAAC,EAAAC,EAAAC,EAAAC,ECiKoB,MAAMC,IAAeD,GAAAD,GAAAD,GAAAD,EAAAD,GAAA,YAAAA,EAAO,WAAP,YAAAC,EAAiB,OAAjB,YAAAC,EAAuB,SAAvB,YAAAC,EAAgC,KAAhC,YAAAC,EAAoC,SAAU,QAEnE,KAAK,wBAAwB,CACzB,QAASC,CACjC,CAAqB,CACrB,CAAiB,EACA,QAAQ,IAAM,CACX,KAAK,UAAY,EACrC,CAAiB,CACR,EAED,UAAW,CACP,KAAK,QAAQ,KAAK,CAAE,KAAM,gCAAkC,CAAA,CAC/D,EAED,uBAAwB,CACpB,OAAO,KAAK,yBAAyB,WAAW,KAAK,GAAG,CAC3D,EAED,sBAAuB,CACnB,OAAO,KAAK,QACf,EAED,kBAAmB,CACf,KAAK,eAAc,CACtB,EAED,iBAAiBC,EAAS,CACtB,KAAK,UAAYA,CACpB,EAED,eAAgB,CACZ,KAAK,mBAAqB,IAC7B,CACJ,CACL"}