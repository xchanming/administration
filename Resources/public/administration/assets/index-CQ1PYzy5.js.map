{"version":3,"file":"index-CQ1PYzy5.js","sources":["../../../app/administration/src/app/asyncComponent/media/sw-media-modal-move/sw-media-modal-move.html.twig","../../../app/administration/src/app/asyncComponent/media/sw-media-modal-move/index.js"],"sourcesContent":["<!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n{% block sw_media_modal_move %}\n<sw-modal\n    variant=\"default\"\n    class=\"sw-media-modal-move\"\n    :title=\"$tc('global.sw-media-modal-move.titleModal', itemsToMove.length, { mediaName: mediaNameFilter(itemsToMove[0]), count: itemsToMove.length }) \"\n    @modal-close=\"closeMoveModal\"\n>\n\n    <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n    {% block sw_media_modal_body %}\n    <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n    {% block sw_media_modal_move_breadcrumbs %}\n    <div class=\"sw-media-modal-move-folder-breadcrumbs\">\n        <img\n            :src=\"assetFilter('/administration/static/img/media/multicolor-folder-thumbnail.svg')\"\n            class=\"sw-media-modal-move__folder-icon\"\n            alt=\"Folder thumbnail\"\n        >\n\n        <button\n            v-if=\"parentFolder && parentFolder.id !== targetFolder.id\"\n            class=\"sw-media-modal-move__breadcrumb-btn --parent\"\n            @click=\"onSelection(parentFolder)\"\n        >\n            <sw-icon\n                class=\"sw-media-folder-content__switch-button\"\n                name=\"regular-chevron-right-xs\"\n                size=\"10px\"\n            />\n            {{ parentFolder.name }}\n        </button>\n\n        <button\n            v-if=\"displayFolder && displayFolder.id !== targetFolder.id\"\n            class=\"sw-media-modal-move__breadcrumb-btn\"\n            @click=\"onSelection(displayFolder)\"\n        >\n            <sw-icon\n                class=\"sw-media-folder-content__switch-button\"\n                name=\"regular-chevron-right-xs\"\n                size=\"10px\"\n            />\n            {{ displayFolder.name }}\n        </button>\n\n        <button\n            v-if=\"targetFolder\"\n            class=\"sw-media-modal-move__breadcrumb-btn --target\"\n            @click=\"onSelection(targetFolder)\"\n        >\n            <sw-icon\n                class=\"sw-media-folder-content__switch-button\"\n                name=\"regular-chevron-right-xs\"\n                size=\"10px\"\n            />\n            {{ targetFolder.name }}\n        </button>\n    </div>\n    {% endblock %}\n    <sw-media-folder-content\n        :start-folder-id=\"displayFolderId\"\n        :selected-id=\"targetFolderId\"\n        @selected=\"onSelection\"\n    />\n    {% endblock %}\n\n    <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n    {% block sw_media_modal_footer %}\n    <template #modal-footer>\n        <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n        {% block sw_media_modal_move_cancel_button %}\n        <sw-button\n            size=\"small\"\n            @click=\"closeMoveModal\"\n        >\n            {{ $tc('global.default.cancel') }}\n        </sw-button>\n        {% endblock %}\n\n        <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n        {% block sw_media_modal_move_confirm_button %}\n        <sw-button\n            class=\"sw-media-modal-move__confirm\"\n            size=\"small\"\n            variant=\"primary\"\n            :disabled=\"isMoveDisabled\"\n            @click=\"moveSelection\"\n        >\n            {{ $tc('global.sw-media-modal-move.buttonMove') }}\n        </sw-button>\n        {% endblock %}\n    </template>\n    {% endblock %}\n</sw-modal>\n{% endblock %}\n","import template from './sw-media-modal-move.html.twig';\nimport './sw-media-modal-move.scss';\n\nconst {\n    Mixin,\n    Context,\n    Data: { Criteria },\n} = Cicada;\n\n/**\n * @status ready\n * @description The <u>sw-media-modal-move</u> component is used to validate the move action.\n * @package content\n * @example-type code-only\n * @component-example\n * <sw-media-modal-move :items-to-move=\"[items]\"></sw-media-modal-move>\n */\n// eslint-disable-next-line sw-deprecation-rules/private-feature-declarations\nexport default {\n    template,\n\n    compatConfig: Cicada.compatConfig,\n\n    inject: ['repositoryFactory'],\n\n    provide() {\n        return {\n            filterItems: this.isNotPartOfItemsToMove,\n        };\n    },\n\n    emits: [\n        'media-move-modal-close',\n        'media-move-modal-items-move',\n    ],\n\n    mixins: [\n        Mixin.getByName('notification'),\n    ],\n\n    props: {\n        itemsToMove: {\n            required: true,\n            type: Array,\n            validator(value) {\n                return value.length > 0;\n            },\n        },\n    },\n\n    data() {\n        return {\n            targetFolder: null,\n            parentFolder: null,\n            displayFolder: null,\n            displayFolderId: null,\n        };\n    },\n\n    computed: {\n        mediaRepository() {\n            return this.repositoryFactory.create('media');\n        },\n\n        mediaFolderRepository() {\n            return this.repositoryFactory.create('media_folder');\n        },\n\n        mediaNameFilter() {\n            return (media) => {\n                return media.getEntityName() === 'media' ? `${media.fileName}.${media.fileExtension}` : media.name;\n            };\n        },\n\n        targetFolderId() {\n            return this.targetFolder ? this.targetFolder.id : null;\n        },\n\n        rootFolderName() {\n            return this.$tc('sw-media.index.rootFolderName');\n        },\n\n        isMoveDisabled() {\n            return this.startFolderId === this.targetFolderId;\n        },\n\n        startFolderId() {\n            const firstItem = this.itemsToMove[0];\n            if (firstItem.getEntityName() === 'media') {\n                return firstItem.mediaFolderId;\n            }\n\n            return firstItem.parentId;\n        },\n\n        assetFilter() {\n            return Cicada.Filter.getByName('asset');\n        },\n    },\n\n    watch: {\n        displayFolder(newFolder) {\n            this.displayFolderId = newFolder.id;\n            this.updateParentFolder(newFolder);\n        },\n    },\n\n    mounted() {\n        this.mountedComponent();\n    },\n\n    methods: {\n        async mountedComponent() {\n            this.displayFolder = { id: null, name: this.rootFolderName };\n            this.targetFolder = { id: null, name: this.rootFolderName };\n\n            if (this.startFolderId) {\n                const folder = await this.mediaFolderRepository.get(this.startFolderId, Context.api);\n                this.displayFolder = folder;\n                this.targetFolder = folder;\n            }\n        },\n\n        closeMoveModal() {\n            this.$emit('media-move-modal-close');\n        },\n\n        isNotPartOfItemsToMove(item) {\n            return !this.itemsToMove.some((i) => {\n                return i.id === item.id;\n            });\n        },\n\n        async updateParentFolder(child) {\n            if (child.id === null) {\n                this.parentFolder = null;\n            } else if (child.parentId === null) {\n                this.parentFolder = { id: null, name: this.rootFolderName };\n            } else {\n                this.parentFolder = await this.fetchParentFolder(child.parentId);\n            }\n        },\n\n        async fetchParentFolder(id) {\n            let items = null;\n\n            const criteria = new Criteria(1, 1).addFilter(Criteria.equals('id', id)).addAssociation('children');\n\n            try {\n                items = await this.mediaFolderRepository.search(criteria, Context.api);\n            } catch {\n                this.createNotificationError({\n                    message: this.$tc('global.sw-media-modal-move.notification.errorFetchNavigation.message'),\n                });\n            }\n\n            if (items?.length) {\n                return items[0];\n            }\n\n            return null;\n        },\n\n        onSelection(folder) {\n            this.targetFolder = folder;\n\n            if (folder.id === null || folder.childCount > 0) {\n                this.displayFolder = folder;\n            }\n        },\n\n        async _moveSelection(item) {\n            item.isLoading = true;\n            item.parentId = this.targetFolder.id || null;\n\n            try {\n                await this.mediaFolderRepository.save(item, Context.api);\n\n                this.createNotificationSuccess({\n                    title: this.$root.$tc('global.default.success'),\n                    message: this.$root.$tc('global.sw-media-modal-move.notification.successSingle.message', 1, {\n                        mediaName: this.mediaNameFilter(item),\n                    }),\n                });\n\n                return item.id;\n            } catch {\n                this.createNotificationError({\n                    title: this.$root.$tc('global.default.error'),\n                    message: this.$root.$tc('global.sw-media-modal-move.notification.errorSingle.message', 1, {\n                        mediaName: this.mediaNameFilter(item),\n                    }),\n                });\n\n                return null;\n            } finally {\n                item.isLoading = false;\n            }\n        },\n\n        async moveSelection() {\n            const movedIds = [];\n\n            try {\n                const folders = this.itemsToMove.filter((item) => {\n                    return item.getEntityName() === 'media_folder';\n                });\n\n                const media = this.itemsToMove.filter((item) => {\n                    return item.getEntityName() === 'media';\n                });\n\n                await Promise.all(\n                    folders.map(async (folder) => {\n                        await this._moveSelection(folder);\n                    }),\n                );\n\n                await Promise.all(\n                    media.map(async (mediaItem) => {\n                        const item = mediaItem;\n                        item.mediaFolderId = this.targetFolder.id || null;\n                        movedIds.push(await this.mediaRepository.save(item, Context.api));\n                    }),\n                );\n\n                this.createNotificationSuccess({\n                    title: this.$root.$tc('global.default.success'),\n                    message: this.$root.$tc('global.sw-media-modal-move.notification.successOverall.message'),\n                });\n\n                this.$emit('media-move-modal-items-move', movedIds);\n            } catch {\n                this.createNotificationError({\n                    title: this.$root.$tc('global.default.error'),\n                    message: this.$root.$tc('global.sw-media-modal-move.notification.errorOverall.message'),\n                });\n            }\n        },\n    },\n};\n"],"names":["template","Mixin","Context","Criteria","index","value","media","firstItem","newFolder","folder","item","i","child","id","items","criteria","movedIds","folders","mediaItem"],"mappings":"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"}