const a='{% block sw_tagged_field %} <sw-block-field class="sw-tagged-field" :class="taggedFieldClasses" v-bind="$attrs" > <template #sw-field-input="{ identification, error, disabled, size, setFocusClass, removeFocusClass }"> {% block sw_tagged_field_inner %} <ul class="sw-tagged-field__tag-list" @click="setFocus(true)" > <li v-for="(tag, index) in value" :key="`sw-tagged-field-value--${index}`" > <sw-label :dismissable="!disabled" :size="size" @selected="setFocus(true)" @dismiss="dismissTag(index)" > {{ tag }} </sw-label> </li> {% block sw_tagged_field_item_input %} <li class="sw-tagged-field__input-list-entry"> {% block sw_tagged_field_input %} <input ref="taggedFieldInput" v-model="newTagName" type="text" class="sw-tagged-field__input" :class="taggedFieldInputClasses" :disabled="disabled" :placeholder="placeholder" @focus="setFocus(true)" @blur="setFocus(false)" @keydown="performAddTag" @keydown.delete="dismissLastTag" > {% endblock %} </li> {% endblock %} </ul> {% endblock %} </template> <template #label> <slot name="label"></slot> </template> <template #hint> <slot name="hint"></slot> </template> </sw-block-field> {% endblock %}',{Component:l}=Shopware;l.register("sw-tagged-field",{template:a,inject:["feature"],emits:["update:value"],props:{value:{type:Array,required:!1,default:()=>[]},placeholder:{type:String,required:!1,default(){return Shopware.Snippet.tc("global.sw-tagged-field.text-default-placeholder")}},addOnKey:{type:Array,required:!1,default:()=>["enter"]}},data(){return{newTagName:"",hasFocus:!1}},computed:{hasValues(){return this.value.length>0},taggedFieldClasses(){return{"has--focus":this.hasFocus}},taggedFieldInputClasses(){return{"sw-tagged-field__input--full-width":!this.hasValues,"sw-tagged-field__input--hidden":this.hasValues&&!this.hasFocus}}},methods:{dismissLastTag(){typeof this.newTagName=="string"&&this.newTagName.length>0||this.$emit("update:value",this.value.slice(0,this.value.length-1))},dismissTag(e){this.$emit("update:value",this.value.filter((s,t)=>t!==e))},performAddTag(e){this.disabled||this.noTriggerKey(e)||typeof this.newTagName!="string"||this.newTagName===""||(this.$emit("update:value",[...this.value,this.newTagName]),this.newTagName="")},setFocus(e){this.hasFocus=e,e&&this.$refs.taggedFieldInput.focus()},noTriggerKey(e){return this.addOnKey.findIndex(t=>t.toLowerCase()===e.key.toLowerCase())===-1?!0:(e.preventDefault(),!1)}}});
