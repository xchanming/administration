{"version":3,"mappings":";6HAUA,MAAqBA,UAA4BC,CAAW,CAGxD,YAAYC,EAA2BC,EAA4BC,EAAc,gBAAiB,CACxF,MAAAF,EAAYC,EAAcC,CAAW,EAH/C,+BAAkD,GAI9C,KAAK,KAAO,sBACZ,KAAK,WAAaF,CACtB,CAWA,MAAM,OAAOG,EAAmBC,EAAyBC,EAAiB,CAChE,MAAAC,MAAiB,KACvBA,EAAW,QAAQA,EAAW,QAAQ,EAAI,EAAE,EAEtC,MAAAC,EAAa,MAAM,KAAK,WAAW,KACrC,iCACA,CACI,UAAAJ,EACA,OAAAE,EACA,WAAYC,EAAW,aAAa,CACxC,EACA,CAAE,QAAS,KAAK,iBAAkB,GAG/B,YAAK,cAAcC,EAAYH,CAAQ,CAClD,CAQA,MAAM,eAAeI,EAAgB,CAC3B,MAAAC,EAEF,MAAM,KAAK,WAAW,KACtB,gDAAgDD,CAAM,GACtD,CAAC,EACD,CAAE,QAAS,KAAK,iBAAkB,GAGtC,MACI,GAAG,OAAO,QAAQ,IAAI,SAAW,EAAE,YAAY,KAAK,eAAgB,0BAC5CA,CAAM,gBAAgBC,EAAoB,KAAK,WAAW,EAE1F,CAQA,MAAM,2BAA2BN,EAAmB,CAC1C,MAAAO,EAEF,MAAM,KAAK,WAAW,KACtB,mEAAmEP,CAAS,GAC5E,CAAC,EACD,CAAE,QAAS,KAAK,iBAAkB,GAGtC,MACI,GAAG,OAAO,QAAQ,IAAI,SAAW,EAAE,YAAY,KAAK,eAAgB,0BAC5CO,EAAgB,KAAK,MAAM,gBAAgBA,EAAgB,KAAK,WAAW,EAE3G,CAYA,uBAAuBC,EAAYC,EAAsBC,EAAY,IAAKC,EAAY,IAAK,CACjF,MAAAC,EAAW,IAAI,SACZ,OAAAA,EAAA,OAAO,OAAQJ,CAAI,EACnBI,EAAA,OAAO,eAAgBH,CAAY,EACnCG,EAAA,OAAO,YAAaF,CAAS,EAC7BE,EAAA,OAAO,YAAaD,CAAS,EAE/B,KAAK,WACP,KAAK,+CAAgDC,EAAU,CAC5D,QAAS,KAAK,gBAAgB,EACjC,EACA,KAAMC,GACEA,EAAS,KAIP,QAAQ,QAAQA,EAAS,IAAI,EAHzB,QAAQ,OAAO,IAAI,MAAM,qBAAqB,CAAC,CAI7D,CACT,CAaA,MAAM,OAAOb,EAAmBQ,EAAYP,EAAyBC,EAAS,CAAI,EAAAY,EAAS,GAAO,CACxF,MAAAX,MAAiB,KACvBA,EAAW,QAAQA,EAAW,QAAQ,EAAI,EAAE,EAEtC,MAAAS,EAAW,IAAI,SACjBJ,GACSI,EAAA,OAAO,OAAQJ,CAAI,EAEvBI,EAAA,OAAO,YAAaZ,CAAS,EACtCY,EAAS,OAAO,aAAcT,EAAW,aAAc,GACnDW,GACSF,EAAA,OAAO,SAAU,MAAM,EAG7B,eAAQV,CAAM,EAAE,QACnB,CAAC,CACGa,EACAC,CAAA,IACE,CACFJ,EAAS,OAAO,UAAUG,CAAG,IAAK,KAAK,UAAUC,CAAK,CAAC,CAC3D,GAGJ,MAAMZ,EAAa,MAAM,KAAK,WAAW,KAAK,iCAAkCQ,EAAU,CACtF,QAAS,KAAK,gBAAgB,EACjC,EAEM,YAAK,cAAcR,EAAYH,CAAQ,CAClD,CAOA,MAAM,cAAcgB,EAA6ChB,EAA6C,CAC1G,aAAM,KAAK,WAAW,KAClB,iCACA,CACI,MAAOgB,EAAS,KAAK,IAAI,EAC7B,EACA,CAAE,QAAS,KAAK,iBAAkB,GAGtChB,EAAS,KAAK,KAAMgB,EAAS,KAAK,GAAG,EAEhC,+BAA0B,QAASC,GAAqB,CACzDA,EAAiB,KAAK,IAAI,EAC7B,EAEMD,CACX,CAMA,6BAA6BhB,EAAyB,CAC7C,+BAA0B,KAAKA,CAAQ,CAChD,CAMA,OAAOkB,EAAiC,CAC7B,YAAK,WACP,KAAc,YAAY,KAAK,eAAgB,WAAW,CAAE,MAAAA,CAAM,EAAG,CAAE,QAAS,KAAK,gBAAgB,EAAG,EACxG,KAAKvB,EAAW,eAAe,KAAK,IAAI,CAAC,CAClD,CACJ,CClMe,MAAMwB,CAAkC,CACnD,YAAYC,EAAkB,CAC1B,KAAK,iBAAmBA,CAC3B,CAED,SAASC,EAAYC,EAASC,EAAgB,CAAE,EAAEC,EAAsB,GAAO,CAC3E,MAAMC,EAAc,KAAK,mBAAmBH,CAAO,EAE7CI,EAAoB,KAAK,mBAAmBH,CAAa,EAEzDI,EAAiB,KAAK,iBAAiB,kBAAkBN,CAAU,EACzE,IAAIO,EAAwB,GAyB5B,GAtBA,OAAO,KAAKD,CAAc,EAAE,QAASE,GAAc,CAE3CA,IAAc,gBAAkBA,IAAc,SAK9CH,EAAkB,OAAS,GAKvB,CAJuBA,EAAkB,KAAMI,GACxCD,IAAcC,CACxB,GAOAL,EAAY,SAASI,CAAS,GAC/BD,EAAsB,KAAKC,CAAS,CAEpD,CAAS,EAEGL,EAAqB,CAErB,MAAMO,EADmB,KAAK,iBAAiB,IAAIV,CAAU,EACnB,sBAE1CO,EAAwBA,EAAsB,OAAQI,GAAUD,EAAiBC,CAAK,IAAM,MAAS,CACxG,CAED,MAAO,CAAE,sBAAAJ,CAAqB,CACjC,CAED,mBAAmBN,EAAS,CACxB,MAAMG,EAAcH,EAAQ,IAAKU,GAAUA,EAAM,GAAG,EAEpD,OAAAP,EAAY,QAASX,GAAQ,CACzB,MAAMmB,EAAWnB,EAAI,MAAM,GAAG,EAE1BmB,EAAS,SAAS,cAAc,GAChCR,EAAY,KAAKQ,EAAS,MAAM,CAAC,EAAE,KAAK,EAAE,CAAC,EAI/C,MAAMC,EAAWpB,EAAI,MAAM,KAAK,EAC5BoB,EAAS,SAAW,GAAKD,EAAS,SAAW,GAC7CR,EAAY,KAAK,GAAGS,EAAS,CAAC,CAAC,IAAI,CAEnD,CAAS,EAEMT,CACV,CAWD,wBAAwBJ,EAAYc,EAAQ,EAAG,CAC3C,MAAMC,EAAa,KAAK,iBAAiB,IAAIf,CAAU,EAEvD,OAAO,KAAK,0CAA0Ce,EAAYD,CAAK,CAC1E,CAUD,0CAA0CC,EAAYD,EAAQ,EAAGE,EAAS,GAAIC,EAAU,GAAI,CACxF,IAAIC,EAAS,GAUb,OARIJ,GAAS,GAITG,EAAQF,EAAW,UAAW,KAAM,QAIpCC,EAAO,SAAS,gCAAgC,IAQpDC,EAAQF,EAAW,UAAS,CAAE,EAAIA,EAAW,UAAS,EAEtDA,EAAW,aAAa,CAACI,EAAUC,EAAcC,IAAe,CAC5DH,EAAS,CACL,GAAGA,EACH,GAAG,KAAK,aAAaC,EAAUC,EAAcC,EAAYP,EAAOE,EAAQC,CAAO,CAC/F,CACA,CAAS,GAEMC,CACV,CAED,aAAaC,EAAUC,EAAcC,EAAYP,EAAOE,EAAQC,EAAS,CACrE,IAAIC,EAAS,GAEb,GACIC,EAAS,OAAS,eAClBA,EAAS,WAAa,eACtBA,EAAS,YACTE,EAAWF,EAAS,UAAU,EAAE,MAAM,WAAa,GAGnD,OAAAD,EAAS,CACL,GAAGA,EACH,GAAG,KAAK,mBAAmBC,EAAUC,EAAcC,EAAYP,EAAOE,EAAQC,CAAO,CACrG,EAEmBC,EAkBX,GAfIC,EAAS,MAAM,WAAa,IAI5BC,IAAiB,aAAeA,EAAa,YAAW,EAAG,SAAS,WAAW,GAK/ED,EAAS,MAAM,eAAiB,IAMhCA,EAAS,OAAS,QAAUC,IAAiB,KAE7C,OAAOF,EAGX,GAAIE,IAAiB,gBAAkBD,EAAS,OAAS,eAAiBA,EAAS,MAAM,WAAa,GAElG,OAAAD,EAAS,CACL,GAAGA,EACH,GAAG,KAAK,0CACJ,KAAK,iBAAiB,IAAIC,EAAS,MAAM,EACzCL,EACA,GAAGE,CAAM,GAAGI,CAAY,YACxBH,CACH,CACjB,EAEmBC,EAGX,GAAIE,IAAiB,SAAWD,EAAS,OAAS,cAC9C,OAAAD,EAAS,CACL,GAAGA,EACH,GAAG,KAAK,gBAAgBF,EAAQI,CAAY,CAC5D,EAEmBF,EAIX,MAAMV,EAAY,GAAGQ,CAAM,GAAGI,CAAY,GAC1C,OAAAF,EAAOV,CAAS,EAAIA,EAEbU,CACV,CAED,mBAAmBC,EAAUC,EAAcC,EAAYP,EAAOE,EAAQC,EAAS,CAC3E,MAAMC,EAAS,GACTI,EAAa,GAAGN,CAAM,GAAGI,CAAY,IAI3C,GAAIH,EAAQE,EAAS,MAAM,IAAM,QAAa,CAACG,EAAW,SAAS,gCAAgC,EAAG,CAClG,MAAMd,EAAY,GAAGc,CAAU,GAAGH,EAAS,cAAc,GACzDD,EAAOV,CAAS,EAAIA,CACvB,CAGD,MAAMe,EAAc,KAAK,0CACrB,KAAK,iBAAiB,IAAIJ,EAAS,MAAM,EACzCL,EAAQ,EACRQ,EACAL,CACZ,EAEQ,MAAO,CACH,GAAGC,EACH,GAAGK,CACf,CACK,CAED,gBAAgBP,EAAQI,EAAc,CAClC,MAAMF,EAAS,GAGTM,EAAU,GAAGR,CAAM,GAAGI,CAAY,eACxCF,EAAOM,CAAO,EAAIA,EAClB,MAAMC,EAAY,GAAGT,CAAM,GAAGI,CAAY,iBAC1C,OAAAF,EAAOO,CAAS,EAAIA,EAEbP,CACV,CACL,CCjOe,MAAMQ,CAAmC,CACpD,YAAY3B,EAAkB,CAC1B,KAAK,iBAAmBA,CAC3B,CAED,UAAUZ,EAAcwC,EAAM,CAC1B,MAAMC,EAAYD,EAAK,MAAM,GAAG,EAC1BE,EAAe,GAErB,IAAIC,EAAmB,KAAK,iBAAiB,IAAI3C,CAAY,EACzD4C,EAAc,GACdC,EAAW,KACXC,EAAOH,EAAiB,OAE5B,OAAAF,EAAU,QAASR,GAAiB,CAChC,MAAMD,EAAWW,EAAiB,WAAWV,CAAY,EAEzD,GAAI,CAACD,GAAYC,IAAiB,eAC9B,OAGJ,GAAID,EAAS,MAAM,UAAY,GAAM,CACjCW,EAAmB,CAAE,OAAQ,MAC7B,MACH,CAED,MAAMI,EAASf,EAAS,OACxBY,EAAc,KAAK,iBAAiB,IAAIG,CAAM,EAE1CH,IACAD,EAAmB,KAAK,iBAAiB,IAAII,CAAM,EACnDL,EAAa,KAAKT,CAAY,EAC9BY,EAAWb,EAAS,SACpBc,EAAOb,EAEvB,CAAS,EAEM,CACH,OAAQU,EAAiB,OACzB,KAAMD,EAAa,KAAK,GAAG,EAC3B,SAAAG,EACA,KAAAC,CACZ,CACK,CAED,YAAYC,EAAQC,EAAU,CAC1B,MAAMC,EAAmB,KAAK,iBAAiB,IAAIF,CAAM,EACnDG,EAAkB,OAAO,KAAKD,EAAiB,oBAAqB,GAAE,CAAC,EAE7E,GAAI,CAAC,MAAM,QAAQD,CAAQ,EACvB,OAAOE,EAGX,MAAMC,EAAkB,KAAK,2BAA2BJ,EAAQC,CAAQ,EAExE,OAAKG,EAIEA,EAAgB,UAHZD,CAId,CAED,cAAcE,EAASC,EAAWxC,EAAY,CAC1C,GAAI,CAACwC,EAAW,CACZ,KAAK,8BAA8BxC,EAAYuC,EAAQ,QAAQ,EAE/D,MACH,CAED,GAAI,CAAC,MAAM,QAAQA,EAAQ,QAAQ,EAAG,CAClCA,EAAQ,SAAW,CAAC,CAAE,WAAAvC,EAAY,UAAAwC,CAAW,GAE7C,MACH,CAED,MAAMF,EAAkB,KAAK,2BAA2BtC,EAAYuC,EAAQ,QAAQ,EAEpF,GAAI,CAACD,EAAiB,CAClBC,EAAQ,SAAS,KAAK,CAAE,WAAAvC,EAAY,UAAAwC,CAAW,GAE/C,MACH,CAEDF,EAAgB,UAAYE,CAC/B,CAED,2BAA2BN,EAAQC,EAAU,CACzC,MAAMM,EAAmBN,EAAS,OAAQO,GAC/BA,EAAW,aAAeR,CACpC,EAED,OAAKO,EAAiB,OAIfA,EAAiB,CAAC,EAHd,IAId,CAED,8BAA8BP,EAAQC,EAAU,CAC5C,GAAI,CAAC,MAAM,QAAQA,CAAQ,EACvB,OAGJ,MAAMG,EAAkB,KAAK,2BAA2BJ,EAAQC,CAAQ,EAExE,GAAI,CAACG,EACD,OAGJ,MAAMK,EAAQR,EAAS,QAAQG,CAAe,EAE1CK,EAAQ,IACRR,EAAS,OAAOQ,EAAO,CAAC,CAE/B,CAED,qBAAqBJ,EAAS,CAC1B,GAAI,CAACA,GAAW,CAAC,MAAM,QAAQA,EAAQ,QAAQ,EAC3C,OAGJ,GAAI,CAAC,MAAM,QAAQA,EAAQ,OAAO,GAAK,CAACA,EAAQ,QAAQ,OAAQ,CAC5DA,EAAQ,SAAW,GAEnB,MACH,CAED,MAAMK,EAAe,GAErBL,EAAQ,QAAQ,QAAStC,GAAY,CACjC,KAAM,CAAE,OAAAiC,EAAQ,KAAAP,EAAM,SAAAK,GAAa,KAAK,UAAUO,EAAQ,aAActC,EAAQ,GAAG,EAEnF,GAAI+B,IAAa,eAAgB,CAC7BY,EAAaV,CAAM,EAAI,GAEvB,MACH,CAEIU,EAAa,eAAeV,CAAM,IACnCU,EAAaV,CAAM,EAAI,IAG3B,MAAMxC,EAAQiC,IAAS,GAAK1B,EAAQ,IAAI,QAAQ,IAAI,OAAO,KAAK0B,CAAI,IAAK,EAAG,EAAE,EAAI1B,EAAQ,IAE1F2C,EAAaV,CAAM,EAAE,KAAKxC,CAAK,CAC3C,CAAS,EAEsB6C,EAAQ,SAAS,OAAQJ,GAExC,CAACS,EAAa,eAAeT,EAAS,UAAU,GAC/C,MAAM,QAAQS,EAAaT,EAAS,UAAU,CAAC,GAC5C,CAACS,EAAaT,EAAS,UAAU,EAAE,SAASA,EAAS,SAAS,CAEzE,EAEc,QAASU,GAAkB,CACtC,KAAK,8BAA8BA,EAAc,WAAYN,EAAQ,QAAQ,CACzF,CAAS,CACJ,CACL,CChKA,OAAO,QAAQ,YAAY,EAAE,yBAAyB,CAClD,SAAU,yBACV,OAAQ,KACR,IAAK,SACL,MAAO,CACH,cAAe,CACX,WAAY,CACR,yBACA,0BACA,4BACA,YACA,6BACA,+BACA,+BACA,eACH,EACD,aAAc,CAAE,CACnB,CACJ,CACL,CAAC,ECbD,OAAO,QAAS,EAAC,SAAS,eAAgB,IAC/B,IAAIlE,EAAoB,OAAO,YAAY,aAAa,MAAM,EAAE,WAAY,OAAO,QAAQ,cAAc,CAAC,CACpH,EAGD,OAAO,QAAS,EAAC,SAAS,6BAA8B,IAC7C,IAAIyB,EAAkC,OAAO,gBAAgB,CACvE,EAGD,OAAO,QAAS,EAAC,SAAS,8BAA+B,IAC9C,IAAIgD,EAAmC,OAAO,gBAAgB,CACxE,EAGD,OAAO,UAAU,SAAS,mBAAoB,UAAM,OAAO,qBAAyB,yBAAC,EACrF,OAAO,UAAU,SAAS,4BAA6B,UAAM,OAAO,qBAAuC,yBAAC,EAC5G,OAAO,UAAU,SAAS,4BAA6B,UAAM,OAAO,qBAAuC,yBAAC,EAC5G,OAAO,UAAU,SAAS,4BAA6B,UAAM,OAAO,qBAAuC,yBAAC,EAC5G,OAAO,UAAU,SACb,2CACA,IAAMC,EAAA,WAAO,qBAAsD,yBACvE,EACA,OAAO,UAAU,SACb,yCACA,IAAMA,EAAA,WAAO,qBAAoD,2BACrE,EACA,OAAO,UAAU,SACb,sCACA,IAAMA,EAAA,WAAO,qBAAiD,2BAClE,EACA,OAAO,UAAU,SACb,8CACA,IAAMA,EAAA,WAAO,qBAAyD,2BAC1E,EACA,OAAO,UAAU,SACb,kDACA,IAAMA,EAAA,WAAO,qBAA6D,2BAC9E,EACA,OAAO,UAAU,SACb,sCACA,IAAMA,EAAA,WAAO,qBAAiD,2BAClE,EACA,OAAO,UAAU,SACb,iDACA,IAAMA,EAAA,WAAO,qBAA4D,0CAC7E,EACA,OAAO,UAAU,SACb,gDACA,IAAMA,EAAA,WAAO,qBAA2D,2BAC5E,EACA,OAAO,UAAU,SACb,wCACA,IAAMA,EAAA,WAAO,qBAAmD,0CACpE,EACA,OAAO,UAAU,SACb,sCACA,IAAKA,EAAA,IAAC,OAAO,qBAAgE,2BACjF,EACA,OAAO,UAAU,SACb,mDACA,IAAMA,EAAA,WAAO,qBAA6E,0CAC9F,EACA,OAAO,UAAU,SACb,+CACA,IAAMA,EAAA,WAAO,qBAAyE,2BAC1F,EACA,OAAO,UAAU,SACb,mDACA,IAAMA,EAAA,WAAO,qBAA6E,0CAC9F,EACA,OAAO,UAAU,SAAS,+BAAgC,IAAKA,EAAA,IAAC,OAAO,qBAAqC,2BAAC,EAC7G,OAAO,UAAU,SAAS,+BAAgC,IAAKA,EAAA,IAAC,OAAO,qBAAqC,2BAAC,EAC7G,OAAO,UAAU,SAAS,iCAAkC,IAAKA,EAAA,IAAC,OAAO,qBAAuC,2BAAC,EACjH,OAAO,UAAU,SAAS,4BAA6B,UAAM,OAAO,qBAAuC,2BAAC,EAI5G,OAAO,OAAO,SAAS,mBAAoB,CACvC,KAAM,OACN,KAAM,eACN,MAAO,+CACP,YAAa,iDACb,QAAS,QACT,cAAe,QACf,MAAO,UACP,KAAM,cACN,OAAQ,wBACR,gBAAiB,mBAEjB,OAAQ,CACJ,MAAO,CACH,UAAW,mBACX,KAAM,QACN,KAAM,CACF,WAAY,oBACZ,UAAW,sBACd,EACD,SAAU,CACN,KAAM,+BACT,EAED,SAAU,CACN,OAAQ,CACJ,UAAW,+BACX,KAAM,SACN,KAAM,CACF,WAAY,oBACZ,UAAW,sBACd,CACJ,EACD,OAAQ,CACJ,UAAW,+BACX,KAAM,SACN,KAAM,CACF,WAAY,oBACZ,UAAW,sBACd,CACJ,EACD,SAAU,CACN,UAAW,iCACX,KAAM,WACN,KAAM,CACF,WAAY,oBACZ,UAAW,sBACd,CACJ,CACJ,CACJ,CACJ,EAED,aAAc,CACV,MAAO,OACP,GAAI,yBACJ,KAAM,mBACN,UAAW,sBACd,CACL,CAAC","names":["ImportExportService","ApiService","httpClient","loginService","apiEndpoint","profileId","callback","config","expireDate","createdLog","fileId","accessTokenResponse","prepareResponse","file","sourceEntity","delimiter","enclosure","formData","response","dryRun","key","value","logEntry","listenerCallback","logId","ImportExportProfileMappingService","EntityDefinition","entityName","mapping","parentMapping","isOnlyUpdateProfile","mappingKeys","parentMappingKeys","requiredFields","missingRequiredFields","fieldName","parentField","primaryKeyFields","field","keyParts","keyHasId","depth","definition","prefix","visited","fields","property","propertyName","properties","nextPrefix","childFields","netName","grossName","ImportExportUpdateByMappingService","path","pathParts","pathToEntity","actualDefinition","entityFound","relation","name","entity","updateBy","entityDefinition","primaryKeyField","updateByMapping","profile","mappedKey","updateByMappings","identifier","index","usedEntities","unusedMapping","ImportExportProfileUpdateByService","__vitePreload"],"ignoreList":[],"sources":["../../../app/administration/src/module/sw-import-export/service/importExport.service.ts","../../../app/administration/src/module/sw-import-export/service/importExportProfileMapping.service.js","../../../app/administration/src/module/sw-import-export/service/importExportUpdateByMapping.service.js","../../../app/administration/src/module/sw-import-export/acl/index.js","../../../app/administration/src/module/sw-import-export/index.js"],"sourcesContent":["/**\n * @package services-settings\n */\nimport ApiService from 'src/core/service/api.service';\nimport type { AxiosInstance } from 'axios';\nimport type { LoginService } from '../../../core/service/login.service';\n\n/**\n * @private\n */\nexport default class ImportExportService extends ApiService {\n    onProgressStartedListener: Array<() => unknown> = [];\n\n    constructor(httpClient: AxiosInstance, loginService: LoginService, apiEndpoint = 'import-export') {\n        super(httpClient, loginService, apiEndpoint);\n        this.name = 'importExportService';\n        this.httpClient = httpClient;\n    }\n\n    /**\n     * Export data from the Shop with the given profile. The callback function gets called with progress information\n     * and final result data.\n     *\n     * @param profileId {Entity} Profile entity\n     * @param callback {Function} Callback for progress\n     * @param config {Object} Additional config for profile\n     * @returns {Promise<void>}\n     */\n    async export(profileId: string, callback: () => unknown, config: unknown) {\n        const expireDate = new Date();\n        expireDate.setDate(expireDate.getDate() + 30);\n\n        const createdLog = await this.httpClient.post(\n            '/_action/import-export/prepare',\n            {\n                profileId: profileId,\n                config: config,\n                expireDate: expireDate.toDateString(),\n            },\n            { headers: this.getBasicHeaders() },\n        );\n\n        return this.trackProgress(createdLog, callback);\n    }\n\n    /**\n     * Download the export file\n     *\n     * @param fileId {Entity} File entity\n     * @returns {string}\n     */\n    async getDownloadUrl(fileId: string) {\n        const accessTokenResponse: {\n            data: { fileId: string; accessToken: string };\n        } = await this.httpClient.post(\n            `/_action/import-export/file/prepare-download/${fileId}`,\n            {},\n            { headers: this.getBasicHeaders() },\n        );\n\n        return (\n            `${Cicada.Context.api.apiPath || ''}/_action/${this.getApiBasePath()}/` +\n            `file/download?fileId=${fileId}&accessToken=${accessTokenResponse.data.accessToken}`\n        );\n    }\n\n    /**\n     * Get url for profile template download.\n     *\n     * @param profileId {string}\n     * @returns {string}\n     */\n    async getTemplateFileDownloadUrl(profileId: string) {\n        const prepareResponse: {\n            data: { fileId: string; accessToken: string };\n        } = await this.httpClient.post(\n            `/_action/import-export/prepare-template-file-download?profileId=${profileId}`,\n            {},\n            { headers: this.getBasicHeaders() },\n        );\n\n        return (\n            `${Cicada.Context.api.apiPath || ''}/_action/${this.getApiBasePath()}/` +\n            `file/download?fileId=${prepareResponse.data.fileId}&accessToken=${prepareResponse.data.accessToken}`\n        );\n    }\n\n    /**\n     * Get the mapping from the first line of the CSV file.\n     * The mapping contains guessed keys based on the source entity and the given data.\n     *\n     * @param file {File} The csv file\n     * @param sourceEntity {string} the source entity for the mapping\n     * @param delimiter {string}\n     * @param enclosure {string}\n     * @returns {Promise<Object>}\n     */\n    getMappingFromTemplate(file: File, sourceEntity: string, delimiter = ';', enclosure = '\"') {\n        const formData = new FormData();\n        formData.append('file', file);\n        formData.append('sourceEntity', sourceEntity);\n        formData.append('delimiter', delimiter);\n        formData.append('enclosure', enclosure);\n\n        return this.httpClient\n            .post('/_action/import-export/mapping-from-template', formData, {\n                headers: this.getBasicHeaders(),\n            })\n            .then((response) => {\n                if (!response.data) {\n                    return Promise.reject(new Error('Empty response data'));\n                }\n\n                return Promise.resolve(response.data);\n            });\n    }\n\n    /**\n     * Imports data from the csv file with the given profile. The callback function gets called with progress information\n     * and final result data.\n     *\n     * @param profileId {String} Profile entity\n     * @param file {File} The csv file\n     * @param callback {Function} Callback for progress\n     * @param config {Object} Additional config for profile\n     * @param dryRun {Boolean} Set if import is a dry run\n     * @returns {Promise<void>}\n     */\n    async import(profileId: string, file: File, callback: () => unknown, config = {}, dryRun = false) {\n        const expireDate = new Date();\n        expireDate.setDate(expireDate.getDate() + 30);\n\n        const formData = new FormData();\n        if (file) {\n            formData.append('file', file);\n        }\n        formData.append('profileId', profileId);\n        formData.append('expireDate', expireDate.toDateString());\n        if (dryRun) {\n            formData.append('dryRun', 'true');\n        }\n\n        Object.entries(config).forEach(\n            ([\n                key,\n                value,\n            ]) => {\n                formData.append(`config[${key}]`, JSON.stringify(value));\n            },\n        );\n\n        const createdLog = await this.httpClient.post('/_action/import-export/prepare', formData, {\n            headers: this.getBasicHeaders(),\n        });\n\n        return this.trackProgress(createdLog, callback);\n    }\n\n    /**\n     * @param logEntry {String} log entity\n     * @param callback\n     * @returns {Promise<void>}\n     */\n    async trackProgress(logEntry: { data: { log: { id: string } } }, callback: (log?: { id: string }) => unknown) {\n        await this.httpClient.post(\n            '/_action/import-export/process',\n            {\n                logId: logEntry.data.log.id,\n            },\n            { headers: this.getBasicHeaders() },\n        );\n\n        callback.call(this, logEntry.data.log);\n\n        this.onProgressStartedListener.forEach((listenerCallback) => {\n            listenerCallback.call(this);\n        });\n\n        return logEntry;\n    }\n\n    /**\n     * @param callback\n     * @returns void\n     */\n    addOnProgressStartedListener(callback: () => unknown) {\n        this.onProgressStartedListener.push(callback);\n    }\n\n    /**\n     * @param logId {String} log id\n     * @returns {Promise<*>} - ApiService.handleResponse(response)\n     */\n    cancel(logId: string): Promise<unknown> {\n        return this.httpClient\n            .post<unknown>(`/_action/${this.getApiBasePath()}/cancel`, { logId }, { headers: this.getBasicHeaders() })\n            .then(ApiService.handleResponse.bind(this));\n    }\n}\n","/**\n * @package services-settings\n */\n// eslint-disable-next-line sw-deprecation-rules/private-feature-declarations\nexport default class ImportExportProfileMappingService {\n    constructor(EntityDefinition) {\n        this.EntityDefinition = EntityDefinition;\n    }\n\n    validate(entityName, mapping, parentMapping = [], isOnlyUpdateProfile = false) {\n        const mappingKeys = this.convertMappingKeys(mapping);\n\n        const parentMappingKeys = this.convertMappingKeys(parentMapping);\n\n        const requiredFields = this.EntityDefinition.getRequiredFields(entityName);\n        let missingRequiredFields = [];\n\n        // check if mapping contains all required fields\n        Object.keys(requiredFields).forEach((fieldName) => {\n            // skip translations and price\n            if (fieldName === 'translations' || fieldName === 'price') {\n                return;\n            }\n\n            // skip the required mapping key isn't existing in the default\n            if (parentMappingKeys.length > 0) {\n                const foundInParentField = parentMappingKeys.some((parentField) => {\n                    return fieldName === parentField;\n                });\n\n                if (!foundInParentField) {\n                    return;\n                }\n            }\n\n            if (!mappingKeys.includes(fieldName)) {\n                missingRequiredFields.push(fieldName);\n            }\n        });\n\n        if (isOnlyUpdateProfile) {\n            const entityDefinition = this.EntityDefinition.get(entityName);\n            const primaryKeyFields = entityDefinition.getPrimaryKeyFields();\n\n            missingRequiredFields = missingRequiredFields.filter((field) => primaryKeyFields[field] !== undefined);\n        }\n\n        return { missingRequiredFields };\n    }\n\n    convertMappingKeys(mapping) {\n        const mappingKeys = mapping.map((field) => field.key);\n\n        mappingKeys.forEach((key) => {\n            const keyParts = key.split('.');\n\n            if (keyParts.includes('translations')) {\n                mappingKeys.push(keyParts.slice(2).join(''));\n            }\n\n            // convert key.id to keyId\n            const keyHasId = key.split('.id');\n            if (keyHasId.length === 2 && keyParts.length === 2) {\n                mappingKeys.push(`${keyHasId[0]}Id`);\n            }\n        });\n\n        return mappingKeys;\n    }\n\n    /**\n     * Get all the required fields for a given entity.\n     * With depth 1 only the required fields of the entityName are given.\n     * with greater depth also these of required associations.\n     *\n     * @param entityName\n     * @param depth\n     * @returns {{}}\n     */\n    getSystemRequiredFields(entityName, depth = 1) {\n        const definition = this.EntityDefinition.get(entityName);\n\n        return this._getSystemRequiredFieldsForEntityCreation(definition, depth);\n    }\n\n    /**\n     * Recursively walk all the EntityDefinition objects until a specified depth from a starting definition.\n     * It only looks inside child definitions if there is either a required FkField with ManyToOneAssociation or\n     * a required TranslationsAssociationField and it prevents loops of already visited definitions.\n     *\n     * It constructs all the field paths for each field which is required for\n     * the creation of an entity in the starting definition.\n     */\n    _getSystemRequiredFieldsForEntityCreation(definition, depth = 1, prefix = '', visited = {}) {\n        let fields = {};\n\n        if (depth <= 0) {\n            return fields;\n        }\n\n        if (visited[definition.getEntity()] !== undefined) {\n            return fields; // definition already visited - prevent association cycles\n        }\n\n        if (prefix.endsWith('translations.DEFAULT.language.')) {\n            // skip language associations that come from translations\n            // because the default language is used always for required fields\n            // otherwise this will show up 'translations.DEFAULT.language.id'\n            return fields;\n        }\n\n        // remember this definition as visited\n        visited[definition.getEntity()] = definition.getEntity();\n\n        definition.forEachField((property, propertyName, properties) => {\n            fields = {\n                ...fields,\n                ...this._handleField(property, propertyName, properties, depth, prefix, visited),\n            };\n        });\n\n        return fields;\n    }\n\n    _handleField(property, propertyName, properties, depth, prefix, visited) {\n        let fields = {};\n\n        if (\n            property.type === 'association' &&\n            property.relation === 'many_to_one' &&\n            property.localField &&\n            properties[property.localField].flags.required === true\n        ) {\n            // association is many_to_one and required\n            fields = {\n                ...fields,\n                ...this._handleAssociation(property, propertyName, properties, depth, prefix, visited),\n            };\n\n            return fields;\n        }\n\n        if (property.flags.required !== true) {\n            return fields;\n        }\n\n        if (propertyName === 'createdAt' || propertyName.toLowerCase().includes('versionid')) {\n            return fields; // skip fields that are not relevant for import export\n        }\n\n        // translatable fields are visited explicit as an association (see below)\n        if (property.flags.translatable === true) {\n            return fields;\n        }\n\n        // a foreign key can still be a primary key. This check may fail\n        // it assumes that all primary keys have the propertyName of 'id' for now.\n        if (property.type === 'uuid' && propertyName !== 'id' /* property.flags.primary_key !== true */) {\n            // this is an association which will be checked later (see handleAssociations function)\n            return fields;\n        }\n\n        if (propertyName === 'translations' && property.type === 'association' && property.flags.required === true) {\n            // if the translation association is required also check the translation definition for required fields\n            fields = {\n                ...fields,\n                ...this._getSystemRequiredFieldsForEntityCreation(\n                    this.EntityDefinition.get(property.entity),\n                    depth, // translations doesn't count to depth and are always included\n                    `${prefix}${propertyName}.DEFAULT.`, // target the default language as required\n                    visited,\n                ),\n            };\n\n            return fields;\n        }\n\n        if (propertyName === 'price' && property.type === 'json_object') {\n            fields = {\n                ...fields,\n                ...this._addPriceFields(prefix, propertyName),\n            };\n\n            return fields;\n        }\n\n        // push this field as required with it's property name\n        const fieldName = `${prefix}${propertyName}`;\n        fields[fieldName] = fieldName;\n\n        return fields;\n    }\n\n    _handleAssociation(property, propertyName, properties, depth, prefix, visited) {\n        const fields = {};\n        const nextPrefix = `${prefix}${propertyName}.`;\n\n        // always include the reference id if it was not visited before\n        // and is not a language in an translation\n        if (visited[property.entity] === undefined && !nextPrefix.endsWith('translations.DEFAULT.language.')) {\n            const fieldName = `${nextPrefix}${property.referenceField}`;\n            fields[fieldName] = fieldName;\n        }\n\n        // visit association entity\n        const childFields = this._getSystemRequiredFieldsForEntityCreation(\n            this.EntityDefinition.get(property.entity),\n            depth - 1,\n            nextPrefix,\n            visited,\n        );\n\n        return {\n            ...fields,\n            ...childFields,\n        };\n    }\n\n    _addPriceFields(prefix, propertyName) {\n        const fields = {};\n\n        // special case for price fields\n        const netName = `${prefix}${propertyName}.DEFAULT.net`;\n        fields[netName] = netName;\n        const grossName = `${prefix}${propertyName}.DEFAULT.gross`;\n        fields[grossName] = grossName;\n\n        return fields;\n    }\n}\n","/**\n * @package services-settings\n */\n// eslint-disable-next-line sw-deprecation-rules/private-feature-declarations\nexport default class ImportExportUpdateByMappingService {\n    constructor(EntityDefinition) {\n        this.EntityDefinition = EntityDefinition;\n    }\n\n    getEntity(sourceEntity, path) {\n        const pathParts = path.split('.');\n        const pathToEntity = [];\n\n        let actualDefinition = this.EntityDefinition.get(sourceEntity);\n        let entityFound = false;\n        let relation = null;\n        let name = actualDefinition.entity;\n\n        pathParts.forEach((propertyName) => {\n            const property = actualDefinition.properties[propertyName];\n\n            if (!property || propertyName === 'translations') {\n                return;\n            }\n\n            if (property.flags.runtime === true) {\n                actualDefinition = { entity: null };\n                return;\n            }\n\n            const entity = property.entity;\n            entityFound = this.EntityDefinition.has(entity);\n\n            if (entityFound) {\n                actualDefinition = this.EntityDefinition.get(entity);\n                pathToEntity.push(propertyName);\n                relation = property.relation;\n                name = propertyName;\n            }\n        });\n\n        return {\n            entity: actualDefinition.entity,\n            path: pathToEntity.join('.'),\n            relation,\n            name,\n        };\n    }\n\n    getSelected(entity, updateBy) {\n        const entityDefinition = this.EntityDefinition.get(entity);\n        const primaryKeyField = Object.keys(entityDefinition.getPrimaryKeyFields())[0];\n\n        if (!Array.isArray(updateBy)) {\n            return primaryKeyField;\n        }\n\n        const updateByMapping = this.getUpdateByMappingByEntity(entity, updateBy);\n\n        if (!updateByMapping) {\n            return primaryKeyField;\n        }\n\n        return updateByMapping.mappedKey;\n    }\n\n    updateMapping(profile, mappedKey, entityName) {\n        if (!mappedKey) {\n            this.removeUpdateByMappingByEntity(entityName, profile.updateBy);\n\n            return;\n        }\n\n        if (!Array.isArray(profile.updateBy)) {\n            profile.updateBy = [{ entityName, mappedKey }];\n\n            return;\n        }\n\n        const updateByMapping = this.getUpdateByMappingByEntity(entityName, profile.updateBy);\n\n        if (!updateByMapping) {\n            profile.updateBy.push({ entityName, mappedKey });\n\n            return;\n        }\n\n        updateByMapping.mappedKey = mappedKey;\n    }\n\n    getUpdateByMappingByEntity(entity, updateBy) {\n        const updateByMappings = updateBy.filter((identifier) => {\n            return identifier.entityName === entity;\n        });\n\n        if (!updateByMappings.length) {\n            return null;\n        }\n\n        return updateByMappings[0];\n    }\n\n    removeUpdateByMappingByEntity(entity, updateBy) {\n        if (!Array.isArray(updateBy)) {\n            return;\n        }\n\n        const updateByMapping = this.getUpdateByMappingByEntity(entity, updateBy);\n\n        if (!updateByMapping) {\n            return;\n        }\n\n        const index = updateBy.indexOf(updateByMapping);\n\n        if (index > -1) {\n            updateBy.splice(index, 1);\n        }\n    }\n\n    removeUnusedMappings(profile) {\n        if (!profile || !Array.isArray(profile.updateBy)) {\n            return;\n        }\n\n        if (!Array.isArray(profile.mapping) || !profile.mapping.length) {\n            profile.updateBy = [];\n\n            return;\n        }\n\n        const usedEntities = {};\n\n        profile.mapping.forEach((mapping) => {\n            const { entity, path, relation } = this.getEntity(profile.sourceEntity, mapping.key);\n\n            if (relation === 'many_to_many') {\n                usedEntities[entity] = true;\n\n                return;\n            }\n\n            if (!usedEntities.hasOwnProperty(entity)) {\n                usedEntities[entity] = [];\n            }\n\n            const value = path !== '' ? mapping.key.replace(new RegExp(`^(${path}\\.)`), '') : mapping.key;\n\n            usedEntities[entity].push(value);\n        });\n\n        const unusedMappings = profile.updateBy.filter((updateBy) => {\n            return (\n                !usedEntities.hasOwnProperty(updateBy.entityName) ||\n                (Array.isArray(usedEntities[updateBy.entityName]) &&\n                    !usedEntities[updateBy.entityName].includes(updateBy.mappedKey))\n            );\n        });\n\n        unusedMappings.forEach((unusedMapping) => {\n            this.removeUpdateByMappingByEntity(unusedMapping.entityName, profile.updateBy);\n        });\n    }\n}\n","/**\n * @package services-settings\n */\nCicada.Service('privileges').addPrivilegeMappingEntry({\n    category: 'additional_permissions',\n    parent: null,\n    key: 'system',\n    roles: {\n        import_export: {\n            privileges: [\n                'import_export_log:read',\n                'import_export_file:read',\n                'import_export_file:create',\n                'user:read',\n                'import_export_profile:read',\n                'import_export_profile:create',\n                'import_export_profile:delete',\n                'currency:read',\n            ],\n            dependencies: [],\n        },\n    },\n});\n","/**\n * @package services-settings\n */\nimport ImportExportService from './service/importExport.service';\nimport ImportExportProfileMappingService from './service/importExportProfileMapping.service';\nimport ImportExportProfileUpdateByService from './service/importExportUpdateByMapping.service';\nimport './acl';\n\n// eslint-disable-next-line sw-deprecation-rules/private-feature-declarations\nCicada.Service().register('importExport', () => {\n    return new ImportExportService(Cicada.Application.getContainer('init').httpClient, Cicada.Service('loginService'));\n});\n\n// eslint-disable-next-line sw-deprecation-rules/private-feature-declarations\nCicada.Service().register('importExportProfileMapping', () => {\n    return new ImportExportProfileMappingService(Cicada.EntityDefinition);\n});\n\n// eslint-disable-next-line sw-deprecation-rules/private-feature-declarations\nCicada.Service().register('importExportUpdateByMapping', () => {\n    return new ImportExportProfileUpdateByService(Cicada.EntityDefinition);\n});\n\n/* eslint-disable max-len, sw-deprecation-rules/private-feature-declarations */\nCicada.Component.register('sw-import-export', () => import('./page/sw-import-export'));\nCicada.Component.register('sw-import-export-exporter', () => import('./component/sw-import-export-exporter'));\nCicada.Component.register('sw-import-export-importer', () => import('./component/sw-import-export-importer'));\nCicada.Component.register('sw-import-export-activity', () => import('./component/sw-import-export-activity'));\nCicada.Component.register(\n    'sw-import-export-activity-log-info-modal',\n    () => import('./component/sw-import-export-activity-log-info-modal'),\n);\nCicada.Component.register(\n    'sw-import-export-activity-result-modal',\n    () => import('./component/sw-import-export-activity-result-modal'),\n);\nCicada.Component.register(\n    'sw-import-export-edit-profile-modal',\n    () => import('./component/sw-import-export-edit-profile-modal'),\n);\nCicada.Component.register(\n    'sw-import-export-edit-profile-modal-mapping',\n    () => import('./component/sw-import-export-edit-profile-modal-mapping'),\n);\nCicada.Component.register(\n    'sw-import-export-edit-profile-modal-identifiers',\n    () => import('./component/sw-import-export-edit-profile-modal-identifiers'),\n);\nCicada.Component.register(\n    'sw-import-export-entity-path-select',\n    () => import('./component/sw-import-export-entity-path-select'),\n);\nCicada.Component.register(\n    'sw-import-export-edit-profile-field-indicators',\n    () => import('./component/sw-import-export-edit-profile-field-indicators'),\n);\nCicada.Component.register(\n    'sw-import-export-edit-profile-import-settings',\n    () => import('./component/sw-import-export-edit-profile-import-settings'),\n);\nCicada.Component.register(\n    'sw-import-export-edit-profile-general',\n    () => import('./component/sw-import-export-edit-profile-general'),\n);\nCicada.Component.register(\n    'sw-import-export-new-profile-wizard',\n    () => import('./component/profile-wizard/sw-import-export-new-profile-wizard'),\n);\nCicada.Component.register(\n    'sw-import-export-new-profile-wizard-general-page',\n    () => import('./component/profile-wizard/sw-import-export-new-profile-wizard-general-page'),\n);\nCicada.Component.register(\n    'sw-import-export-new-profile-wizard-csv-page',\n    () => import('./component/profile-wizard/sw-import-export-new-profile-wizard-csv-page'),\n);\nCicada.Component.register(\n    'sw-import-export-new-profile-wizard-mapping-page',\n    () => import('./component/profile-wizard/sw-import-export-new-profile-wizard-mapping-page'),\n);\nCicada.Component.register('sw-import-export-view-import', () => import('./view/sw-import-export-view-import'));\nCicada.Component.register('sw-import-export-view-export', () => import('./view/sw-import-export-view-export'));\nCicada.Component.register('sw-import-export-view-profiles', () => import('./view/sw-import-export-view-profiles'));\nCicada.Component.register('sw-import-export-progress', () => import('./component/sw-import-export-progress'));\n/* eslint-enable max-len, sw-deprecation-rules/private-feature-declarations */\n\n// eslint-disable-next-line sw-deprecation-rules/private-feature-declarations\nCicada.Module.register('sw-import-export', {\n    type: 'core',\n    name: 'ImportExport',\n    title: 'sw-import-export.general.mainMenuItemGeneral',\n    description: 'sw-import-export.general.descriptionTextModule',\n    version: '1.0.0',\n    targetVersion: '1.0.0',\n    color: '#9AA8B5',\n    icon: 'regular-cog',\n    entity: 'import_export_profile',\n    routePrefixPath: 'sw/import-export',\n\n    routes: {\n        index: {\n            component: 'sw-import-export',\n            path: 'index',\n            meta: {\n                parentPath: 'sw.settings.index',\n                privilege: 'system.import_export',\n            },\n            redirect: {\n                name: 'sw.import.export.index.import',\n            },\n\n            children: {\n                import: {\n                    component: 'sw-import-export-view-import',\n                    path: 'import',\n                    meta: {\n                        parentPath: 'sw.settings.index',\n                        privilege: 'system.import_export',\n                    },\n                },\n                export: {\n                    component: 'sw-import-export-view-export',\n                    path: 'export',\n                    meta: {\n                        parentPath: 'sw.settings.index',\n                        privilege: 'system.import_export',\n                    },\n                },\n                profiles: {\n                    component: 'sw-import-export-view-profiles',\n                    path: 'profiles',\n                    meta: {\n                        parentPath: 'sw.settings.index',\n                        privilege: 'system.import_export',\n                    },\n                },\n            },\n        },\n    },\n\n    settingsItem: {\n        group: 'shop',\n        to: 'sw.import.export.index',\n        icon: 'regular-database',\n        privilege: 'system.import_export',\n    },\n});\n"],"file":"assets/index-BZwwFxAz.js"}