import{S as o}from"./sanitizer.helper-9fM03JVT.js";const p=`{% block sw_settings_snippet_list %} <sw-page class="sw-settings-snippet-list"> {% block sw_settings_snippet_set_list_search_bar %} <template #search-bar> <sw-search-bar initial-search-type="snippet" :placeholder="$tc('sw-settings-snippet.general.placeholderSearchBarSnippets')" :initial-search="term" @search="onSearch" /> </template> {% endblock %} {% block sw_settings_snippet_list_smart_bar_header %} <template #smart-bar-header> {# Hack for fixing this problem: https://github.com/vuejs/core/issues/9308 #} <div style="display: none;"></div> {% block sw_settings_snippet_list_smart_bar_header_title %} <h2 v-if="!isLoading && snippetSets" class="sw-settings-snippet-list__smart_bar_header" > {% block sw_settings_snippet_list_smart_bar_header_title_text %} <span class="sw-settings_snippet_list__smart-bar-title-text"> {{ $tc('sw-settings-snippet.list.textSnippetList', snippetSets.length, { setName: metaName }) }} </span> {% endblock %} {% block sw_settings_snippet_list_smart_bar_header_amount %} <span class="sw-page__smart-bar-amount"> ({{ total }}) </span> {% endblock %} </h2> {% endblock %} </template> {% endblock %} {% block sw_settings_snippet_list_smart_bar_actions %} <template #smart-bar-actions> {% block sw_settings_snippet_list_smart_bar_actions_add %} <sw-button v-tooltip.bottom="getNoPermissionsTooltip('snippet.creator')" :router-link="{ name: 'sw.settings.snippet.create', query: { ids: queryIds, limit, page } }" :disabled="isLoading || !acl.can('snippet.creator') || undefined" variant="primary" > {{ $tc('sw-settings-snippet.list.buttonAdd') }} </sw-button> {% endblock %} </template> {% endblock %} {% block sw_settings_snippet_list_content %} <template #content> <div class="sw-settings-snippet-list__content"> {% block sw_settings_snippet_list_grid %} <sw-data-grid :is-loading="isLoading || !snippetSets" :data-source="grid" :columns="columns" class="sw-settings-snippet-list__grid" :full-page="true" :skeleton-item-amount="skeletonItemAmount" :sort-by="sortBy" :sort-direction="sortDirection" :allow-inline-edit="acl.can('snippet.editor')" :allow-column-edit="true" :show-settings="true" :show-selection="false" @column-sort="onSortColumn" @page-change="onPageChange" @inline-edit-cancel="onInlineEditCancel" @inline-edit-save="onInlineEditSave" > {% block sw_settings_salutations_list_columns %} {% block sw_settings_snippet_list_column_id %} <template #column-id="{ item, isInlineEdit }" > {% block sw_settings_snippet_list_column_id_inline_edit %} <template v-if="isInlineEdit"> {{ item.id }} </template> {% endblock %} {% block sw_settings_snippet_list_column_id_content %} <template v-else> <router-link :to="{ name: 'sw.settings.snippet.detail', params: { key: item[metaId].translationKey, origin: item[metaId].translationKey }, query: { ids: queryIds, limit, page } }" > {{ item.id }} </router-link> </template> {% endblock %} </template> {% endblock %} {% block sw_settings_snippet_list_column_value %} <template v-for="set in snippetSets" :key="set.id" #[\`column-\${set.id}\`]="{ item, compact, isInlineEdit }" > {% block sw_settings_snippet_list_column_value_inline_edit %} <template v-if="isInlineEdit"> <sw-text-field v-model:value="item[set.id].value" :placeholder="item[set.id].origin || $tc('sw-settings-snippet.general.placeholderValue')" :size="compact ? 'small' : 'default'" /> </template> {% endblock %} {% block sw_settings_snippet_list_column_value_content %} <template v-else> {{ item[set.id].value }} </template> {% endblock %} </template> {% endblock %} {% block sw_settings_snippet_list_grid_column_actions %} <template #actions="{ item }"> {% block sw_settings_snippet_list_grid_column_actions_edit %} <sw-context-menu-item class="sw-settings-snippet-list__edit-action" :router-link="{ name: 'sw.settings.snippet.detail', params: { key: item[metaId].translationKey, origin: item[metaId].translationKey }, query: { ids: queryIds, limit, page } }" > {{ contextMenuEditSnippet }} </sw-context-menu-item> {% endblock %} {% block sw_settings_snippet_list_grid_column_actions_delete %} <sw-context-menu-item v-tooltip.left="getNoPermissionsTooltip('snippet.deleter')" class="sw-settings-snippet-list__delete-action" variant="danger" :disabled="!acl.can('snippet.deleter') || undefined" @click="onReset(item)" > {{ $tc('sw-settings-snippet.list.contextMenuDelete', item.isCustomSnippet) }} </sw-context-menu-item> {% endblock %} </template> {% endblock %} {% block sw_settings_salutation_list_action_modals %} {% block sw_settings_snippet_list_delete_modal %} <template #action-modals="{ item }" > <sw-modal v-if="showDeleteModal === item" class="sw-settings-snippet-list__delete-modal" :title="$tc('global.default.warning')" variant="large" @modal-close="onCloseDeleteModal" > {% block sw_settings_snippet_list_delete_modal_text %} {% block sw_settings_snippet_list_delete_modal_text_reset %} <span v-if="!item.isCustomSnippet" class="sw-settings-snippet-list__delete-modal-confirm-reset-text" > {{ $tc('sw-settings-snippet.list.textResetConfirm', queryIdCount, { key: item[metaId].translationKey }) }} </span> {% endblock %} {% block sw_settings_snippet_list_delete_modal_text_delete %} <span v-else class="sw-settings-snippet-list__delete-modal-confirm-delete-text" > {{ $tc('sw-settings-snippet.list.textDeleteConfirm', 0, { key: item[metaId].translationKey }) }} </span> {% endblock %} {% block sw_settings_snippet_list_delete_modal_grid %} <sw-grid v-if="!item.isCustomSnippet && resetItems.length > 1" class="sw-settings-snippet-list__delete-modal-grid" :items="resetItems" table @sw-grid-select-item="onSelectionChanged" @sw-grid-select-all="onSelectionChanged" > {% block sw_settings_snippet_list_delete_modal_grid_template %} <template #columns="{ item }" > {% block sw_settings_snippet_list_delete_modal_grid_name %} <sw-grid-column :label="$tc('sw-settings-snippet.list.columnHeaderGridColumnTitleSet')" flex="minmax(150px, 1fr)" > {{ item.setName }} </sw-grid-column> {% endblock %} {% block sw_settings_snippet_list_delete_modal_grid_value %} <sw-grid-column :label="$tc('sw-settings-snippet.list.columnValue')" flex="minmax(50px,1fr)" > {{ item.value }} </sw-grid-column> {% endblock %} {% block sw_settings_snippet_list_delete_modal_grid_origin %} <sw-grid-column :label="$tc('sw-settings-snippet.list.columnHeaderResetTo')" flex="minmax(50px,1fr)" > {{ item.origin }} </sw-grid-column> {% endblock %} </template> {% endblock %} </sw-grid> {% endblock %} {% endblock %} {% block sw_settings_snippet_list_delete_modal_footer %} <template #modal-footer> {% block sw_settings_snippet_list_delete_modal_cancel %} <sw-button size="small" @click="onCloseDeleteModal" > {{ $tc('global.default.cancel') }} </sw-button> {% endblock %} {% block sw_settings_snippet_list_delete_modal_confirm %} <sw-button :disabled="hasResetableItems && !item.isCustomSnippet && resetItems.length !== 1 || undefined" variant="danger" size="small" @click="onConfirmReset(item)" > {{ $tc('sw-settings-snippet.list.contextMenuDelete', item.isCustomSnippet) }} </sw-button> {% endblock %} </template> {% endblock %} </sw-modal> </template> {% endblock %} {% endblock %} {% endblock %} {% block sw_settings_snippet_list_grid_pagination %} <template #pagination> <sw-pagination :page="page" :limit="limit" :total="total" :total-visible="7" :steps="steps" @page-change="onPageChange" /> </template> {% endblock %} </sw-data-grid> {% endblock %} </div> </template> <template #sidebar> {% block sw_settings_snippet_list_grid_sidebar %} <sw-settings-snippet-sidebar class="sw-settings-snippet-list__grid-sidebar" :filter-items="filterItems" :author-filters="authorFilters" :filter-settings="filterSettings" @sidebar-reset-all="onResetAll" @change="onChange" @sw-sidebar-collaps-refresh-grid="getList" @sw-sidebar-close="onSidebarClose" /> {% endblock %} </template> {% endblock %} </sw-page> {% endblock %}`,{Mixin:d,Data:{Criteria:a}}=Cicada,h={template:p,compatConfig:Cicada.compatConfig,inject:["snippetSetService","snippetService","userService","repositoryFactory","acl","userConfigService"],mixins:[d.getByName("sw-settings-list")],data(){return{entityName:"snippet",sortBy:"id",sortDirection:"ASC",metaId:"",currentAuthor:"",snippetSets:null,hasResetableItems:!0,showOnlyEdited:!1,showOnlyAdded:!1,emptySnippets:!1,grid:[],resetItems:[],filterItems:[],authorFilters:[],appliedFilter:[],appliedAuthors:[],emptyIcon:this.$route.meta.$module.icon,skeletonItemAmount:25,filterSettings:null}},metaInfo(){return{title:this.$createTitle(this.identifier)}},computed:{identifier(){return this.snippetSets?this.$tc("sw-settings-snippet.list.identifier",this.snippetSets.length,{setName:this.metaName}):""},columns(){return this.getColumns()},snippetRepository(){return this.repositoryFactory.create("snippet")},snippetSetRepository(){return this.repositoryFactory.create("snippet_set")},queryIds(){return Array.isArray(this.$route.query.ids)?this.$route.query.ids:[this.$route.query.ids]},snippetSetCriteria(){const t=new a(1,25);return t.addFilter(a.equalsAny("id",this.queryIds)),t.addSorting(a.sort("name","ASC")),this.term&&t.setTerm(this.term),t},queryIdCount(){return this.queryIds.length},metaName(){var t;return(t=this.snippetSets[0])==null?void 0:t.name},filter(){const t={};return this.showOnlyEdited&&(t.edited=!0),this.showOnlyAdded&&(t.added=!0),this.emptySnippets&&(t.empty=!0),this.term&&(t.term=this.term),this.appliedFilter.length>0&&(t.namespace=this.appliedFilter),this.appliedAuthors.length>0&&(t.author=this.appliedAuthors),t},contextMenuEditSnippet(){return this.acl.can("snippet.editor")?this.$tc("global.default.edit"):this.$tc("global.default.view")},hasActiveFilters(){return this.filterSettings?Object.values(this.filterSettings).some(t=>t===!0):!1},activeFilters(){let t={};return this.hasActiveFilters&&(this.filterSettings.editedSnippets&&(t={...t,edited:!0}),this.filterSettings.addedSnippets&&(t={...t,added:!0}),this.filterSettings.emptySnippets&&(t={...t,empty:!0}),t={...t,author:[]},this.authorFilters.forEach(e=>{this.filterSettings[e]===!0&&t.author.push(e)}),t={...t,namespace:[]},this.filterItems.forEach(e=>{this.filterSettings[e]===!0&&t.namespace.push(e)})),t}},created(){this.createdComponent()},beforeUnmount(){this.beforeDestroyComponent()},methods:{async createdComponent(){this.addEventListeners(),this.snippetSetRepository.search(this.snippetSetCriteria).then(s=>{this.snippetSets=s}),this.userService.getUser().then(s=>{this.currentAuthor=`user/${s.data.username}`});const t=await this.snippetService.getFilter();this.filterItems=t.data;const e=await this.snippetSetService.getAuthors();this.authorFilters=e.data,await this.getFilterSettings(),this.hasActiveFilters&&this.initializeSnippetSet(this.activeFilters)},beforeDestroyComponent(){this.saveUserConfig(),this.removeEventListeners()},addEventListeners(){window.addEventListener("beforeunload",t=>this.beforeUnloadListener(t))},removeEventListeners(){window.removeEventListener("beforeunload",t=>this.beforeUnloadListener(t))},beforeUnloadListener(t){this.saveUserConfig()},async getFilterSettings(){const t=await this.getUserConfig();this.filterSettings=t.data["grid.filter.setting-snippet-list"]?t.data["grid.filter.setting-snippet-list"]:this.createFilterSettings()},getUserConfig(){return this.userConfigService.search(["grid.filter.setting-snippet-list"])},saveUserConfig(){return this.userConfigService.upsert({"grid.filter.setting-snippet-list":this.filterSettings})},createFilterSettings(){const t=this.authorFilters.reduce((s,n)=>({...s,[n]:!1}),{}),e=this.filterItems.reduce((s,n)=>({...s,[n]:!1}),{});return{emptySnippets:!1,editedSnippets:!1,addedSnippets:!1,...t,...e}},getList(){this.hasActiveFilters?this.initializeSnippetSet(this.activeFilters):this.initializeSnippetSet()},getColumns(){const t=[{property:"id",label:"sw-settings-snippet.list.columnKey",inlineEdit:!0,allowResize:!0,rawData:!0,primary:!0}];return this.snippetSets&&this.snippetSets.forEach(e=>{t.push({property:e.id,label:e.name,allowResize:!0,inlineEdit:"string",rawData:!0})}),t},initializeSnippetSet(t=this.filter){if(!this.$route.query.ids){this.backRoutingError();return}this.isLoading=!0;const e={sortBy:this.sortBy,sortDirection:this.sortDirection};this.snippetSetService.getCustomList(this.page,this.limit,t,e).then(s=>{this.metaId=this.queryIds[0],this.total=s.total,this.grid=this.prepareGrid(s.data),this.isLoading=!1})},prepareGrid(t){function e(s){const n=s.reduce((i,l)=>(l.resetTo=l.value,i[l.setId]=l,i.isCustomSnippet=l.author.includes("user/"),i),{});return n.id=s[0].translationKey,n}return Object.values(t).reduce((s,n)=>(s.push(e(n)),s),[])},onEdit(t){t!=null&&t.id&&this.$router.push({name:"sw.settings.snippet.detail",params:{id:t.id}})},onInlineEditSave(t){const e=[],s=t[this.metaId].translationKey;this.snippetSets.forEach(n=>{const i=t[n.id];if(i.value=o.sanitize(i.value),!i.value&&typeof i.value!="string"&&(i.value=i.origin),(!i.hasOwnProperty("author")||i.author==="")&&(i.author=this.currentAuthor),i.origin!==i.value){const l=this.snippetRepository.create();i.id&&(l._isNew=!1),l.author=i.author,l.id=i.id,l.value=i.value,l.origin=i.origin,l.translationKey=i.translationKey,l.setId=i.setId,e.push(this.snippetRepository.save(l))}else i.id!==null&&!i.author.startsWith("user/")&&e.push(this.snippetRepository.delete(i.id))}),Promise.all(e).then(()=>{this.inlineSaveSuccessMessage(s),this.getList()}).catch(()=>{this.inlineSaveErrorMessage(s),this.getList()})},onInlineEditCancel(t){Object.keys(t).forEach(e=>{const s=t[e];typeof s!="object"||s.value===void 0||(s.value=s.resetTo)})},onEmptyClick(){this.showOnlyEdited=!1,this.getList()},onSearch(t){this.term=t,this.page=1,this.updateRoute({term:t,page:1},{ids:this.queryIds})},backRoutingError(){this.$router.push({name:"sw.settings.snippet.index"}),this.createNotificationError({message:this.$tc("sw-settings-snippet.general.errorBackRoutingMessage")})},inlineSaveSuccessMessage(t){const e=this.$tc("global.default.success"),s=this.$tc("sw-settings-snippet.list.messageSaveSuccess",this.queryIdCount,{key:t});this.createNotificationSuccess({title:e,message:s})},inlineSaveErrorMessage(t){const e=this.$tc("global.default.error"),s=this.$tc("sw-settings-snippet.list.messageSaveError",this.queryIdCount,{key:t});this.createNotificationError({title:e,message:s})},onReset(t){this.isLoading=!0,this.snippetSetRepository.search(this.snippetSetCriteria).then(e=>{const s=[],n=Array.isArray(this.$route.query.ids)?this.$route.query.ids:[this.$route.query.ids];Object.values(t).forEach((i,l)=>{!(i instanceof Object)||!n.find(r=>r===i.setId)||(i.setName=this.getName(e,i.setId),i.id===null&&(i.id=l,i.isFileSnippet=!0),s.push(i))}),this.resetItems=s.sort((i,l)=>i.setName<=l.setName?-1:1),this.showDeleteModal=t}).finally(()=>{this.isLoading=!1})},getName(t,e){let s="";return t.forEach(n=>{n.id===e&&(s=n.name)}),s},onSelectionChanged(t){this.snippetSelection=t,this.hasResetableItems=Object.keys(t).length===0},onConfirmReset(t){let e;const s=[];this.showOnlyEdited?e=Object.values(t).filter(n=>typeof n!="string"):this.snippetSelection!==void 0?e=Object.values(this.snippetSelection):e=Object.values(this.resetItems),this.showDeleteModal=!1,this.$nextTick(()=>{e.forEach(n=>{n.hasOwnProperty("isFileSnippet")||n.id===null||(n.isCustomSnippet=t.isCustomSnippet,this.isLoading=!0,s.push(this.snippetRepository.delete(n.id).then(()=>{this.createSuccessMessage(n)}).catch(()=>{this.createResetErrorNote(n)})))}),Promise.all(s).then(()=>{this.isLoading=!1,this.getList()}).catch(()=>{this.isLoading=!1,this.getList()})})},createSuccessMessage(t){const e=this.$tc("global.default.success"),s=this.$tc("sw-settings-snippet.list.resetSuccessMessage",!t.isCustomSnippet,{key:t.value});this.createNotificationSuccess({title:e,message:s})},createResetErrorNote(t){const e=this.$tc("global.default.error"),s=this.$tc("sw-settings-snippet.list.resetErrorMessage",t.isCustomSnippet?2:0,{key:t.value});this.createNotificationError({title:e,message:s})},onChange(t){if(this.$set(this.filterSettings,[t.name],t.value),this.page=1,t.group==="editedSnippets"){this.showOnlyEdited=t.value,this.initializeSnippetSet();return}if(t.group==="addedSnippets"){this.showOnlyAdded=t.value,this.initializeSnippetSet();return}if(t.group==="emptySnippets"){this.emptySnippets=t.value,this.initializeSnippetSet();return}let e="appliedFilter";if(t.group==="authorFilter"&&(e="appliedAuthors"),t.value){if(this[e].indexOf(t.name)!==-1)return;this[e].push(t.name),this.initializeSnippetSet();return}this[e].splice(this[e].indexOf(t.name),1),this.initializeSnippetSet()},onSidebarClose(){this.showOnlyEdited=!1,this.emptySnippets=!1,this.appliedAuthors=[],this.appliedFilter=[],this.initializeSnippetSet()},onSortColumn(t){this.sortDirection==="ASC"&&t.dataIndex===this.sortBy?this.sortDirection="DESC":this.sortDirection="ASC",this.updateRoute({sortDirection:this.sortDirection,sortBy:t.dataIndex},{ids:this.queryIds})},onPageChange({page:t,limit:e}){this.updateRoute({page:t,limit:e},{ids:this.queryIds})},getNoPermissionsTooltip(t,e=!0){return{showDelay:300,appearance:"dark",showOnDisabledElements:e,disabled:this.acl.can(t),message:this.$tc("sw-privileges.tooltip.warning")}},onResetAll(){this.showOnlyEdited=!1,this.showOnlyAdded=!1,this.emptySnippets=!1,this.appliedFilter=[],this.appliedAuthors=[],Object.keys(this.filterSettings).forEach(t=>{this.isCompatEnabled("INSTANCE_SET")?this.$set(this.filterSettings,t,!1):this.filterSettings[t]=!1}),this.initializeSnippetSet({})}}};export{h as default};
//# sourceMappingURL=index-d33TUnpp.js.map
