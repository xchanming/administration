const o=`{% block sw_product_variants_delivery_listing %} <div class="sw-product-variants-delivery-listing"> {% block sw_product_variants_delivery_listing_mode %} <div class="sw-product-variants-delivery-listing-mode"> {% block sw_product_variants_delivery_listing_mode_selection %} <sw-radio-field :value="product.listingMode" :options="listingModeOptions" @update:value="updateListingMode" /> {% endblock %} </div> {% endblock %} {% block sw_product_variants_delivery_listing_config %} <div class="sw-product-variants-delivery-listing-config"> {% block sw_product_variants_delivery_listing_config_single %} <div class="sw-product-variants-delivery-listing-config-options" :class="{ 'is--disabled': isDisabledListingMode('single') }" > {% block sw_product_variants_delivery_variant_mode_selection %} <sw-radio-field class="sw-product-variants-delivery-listing_variant-selection" :value="product.variantListingConfig.displayParent" :options="mainVariantModeOptions" :disabled="isDisabledListingMode('single')" @update:value="updateVariantMode" /> {% endblock %} {% block sw_product_variants_delivery_listing_config_single_main_variant_label %} <p>{{ $tc('sw-product.variations.deliveryModal.listingLabelMainVariant') }}</p> {% endblock %} {% block sw_product_variants_delivery_listing_config_single_main_variant_select %} <sw-entity-single-select id="mainVariant" :key="product.id" class="sw-product-variants-delivery-listing_entity-select" :value="mainVariant" entity="product" label-property="name" :criteria="variantCriteria" :context="context" :disabled="isDisabledListingMode('single')" :placeholder="$tc('sw-product.variations.deliveryModal.listingPlaceholderSelectMainVariant')" show-clearable-button @update:value="updateMainVariant" @select-collapsed="onSelectCollapsed" @search-term-change="onSearchTermChange" > <template #selection-label-property="{ item }"> <slot name="selection-label-property" v-bind="{ item }" > <sw-product-variant-info :variations="item.variation" > {{ item.name || item.translated.name }} </sw-product-variant-info> </slot> </template> <template #result-item="{ item, index }"> <slot name="result-item" v-bind="{ item, index, isSelected }" > <sw-select-result :selected="isSelected(item)" v-bind="{ item, index }" > {% block sw_product_variants_results_list_result_label %} <span class="sw-select-result__result-item-text"> <sw-product-variant-info :variations="item.variation" > {{ item.translated.name || item.name }} </sw-product-variant-info> </span> {% endblock %} </sw-select-result> </slot> </template> </sw-entity-single-select> {% endblock %} {% block sw_product_variants_delivery_listing_config_single_main_variant_explanation %} <div class="sw-product-variants-delivery-listing__option-explanation"> <p v-if="product.variantListingConfig.displayParent"> {{ $tc('sw-product.variations.deliveryModal.listingExplanationModeMainProduct') }} </p> <p v-else> {{ $tc('sw-product.variations.deliveryModal.listingExplanationModeSingle') }} </p> </div> {% endblock %} </div> {% endblock %} {% block sw_product_variants_delivery_listing_config_expanded %} <div class="sw-product-variants-delivery-listing-config-options" :class="{ 'is--disabled': isDisabledListingMode('expanded') }" > {% block sw_product_variants_delivery_listing_config_expanded_group_list %} <dl> {% block sw_product_variants_delivery_listing_config_expanded_group_list_items %} <dd v-for="group in selectedGroupsSorted" :key="group.id" :disabled="isDisabledListingMode('expanded')" class="sw-product-variants-delivery-listing__groupElement" > {% block sw_product_variants_delivery_listing_config_expanded_group_list_item %} <sw-checkbox-field :value="isActiveGroupInListing(group.id)" :disabled="isDisabledListingMode('expanded')" :label="group.translated.name" @update:value="onChangeGroupListing($event, group.id)" /> {% endblock %} </dd> {% endblock %} </dl> {% endblock %} </div> {% endblock %} </div> {% endblock %} </div> {% endblock %}`,{Criteria:r}=Shopware.Data,d={template:o,props:{product:{type:Object,required:!0},selectedGroups:{type:Array,required:!0}},data(){return{searchTerm:""}},computed:{listingModeOptions(){return[{value:"single",name:this.$tc("sw-product.variations.deliveryModal.listingLabelModeSingle")},{value:"expanded",name:this.$tc("sw-product.variations.deliveryModal.listingLabelModeExpanded")}]},listingMode(){return this.mainVariant||this.product.variantListingConfig.displayParent===!0?"single":"expanded"},mainVariantModeOptions(){return[{value:!0,name:this.$tc("sw-product.variations.deliveryModal.listingLabelModeDisplayParent")},{value:!1,name:this.$tc("sw-product.variations.deliveryModal.listingLabelMainVariant")}]},mainVariant(){return this.product.variantListingConfig.mainVariantId},variantCriteria(){const i=new r(1,25);return i.addFilter(r.equals("product.parentId",this.product.id)),i.addAssociation("options.group"),typeof this.searchTerm=="string"&&this.searchTerm.length>0&&i.addQuery(r.contains("product.options.name",this.searchTerm),500),i},context(){return{...Shopware.Context.api,inheritance:!0}},selectedGroupsSorted(){let i=[];const e=[...this.selectedGroups];return this.product.variantListingConfig.configuratorGroupConfig&&this.product.variantListingConfig.configuratorGroupConfig.length>0&&(i=this.product.variantListingConfig.configuratorGroupConfig.reduce((t,a)=>{const n=e.find(s=>s.id===a.id);return n&&(t.push(n),e.splice(e.indexOf(n),1)),t},[])),i=[...i,...e],i}},created(){this.createdComponent()},methods:{createdComponent(){this.updateListingMode(this.listingMode)},updateListingMode(i){i==="expanded"&&(this.product.variantListingConfig.displayParent=!0),this.product.listingMode=i},updateVariantMode(i){this.product.variantListingConfig.displayParent=i},updateMainVariant(i){this.product.variantListingConfig.mainVariantId=i},isActiveGroupInListing(i){var a;if(!(((a=this.product.variantListingConfig)==null?void 0:a.configuratorGroupConfig)||[]).length)return!1;const t=this.product.variantListingConfig.configuratorGroupConfig.find(n=>n.id===i);return t?t.expressionForListings:!1},onChangeGroupListing(i,e){var n;const t=((n=this.product.variantListingConfig)==null?void 0:n.configuratorGroupConfig)||[],a=t.find(s=>s.id===e);if(a){a.expressionForListings=i;return}t.push({id:e,expressionForListings:i,representation:"box"}),this.product.variantListingConfig.configuratorGroupConfig=t},isActiveListingMode(i){return i===this.product.listingMode},isDisabledListingMode(i){return!this.isActiveListingMode(i)},isSelected(i){return this.mainVariant===i.id},onSearchTermChange(i){this.searchTerm=i},onSelectCollapsed(){this.searchTerm=""}}};export{d as default};
