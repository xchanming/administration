{"version":3,"file":"index-B9I3NslR.js","sources":["../../../app/administration/src/module/sw-settings/component/sw-system-config/sw-system-config.html.twig","../../../app/administration/src/module/sw-settings/component/sw-system-config/index.js"],"sourcesContent":["<!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n{% block sw_system_config %}\n<div class=\"sw-system-config\">\n    <div\n        v-if=\"salesChannelSwitchable && config.length > 1\"\n        class=\"sw-system-config__global-sales-channel-switch\"\n    >\n        <sw-sales-channel-switch\n            :label=\"$tc('sw-settings.system-config.labelSalesChannelSelect')\"\n            @change-sales-channel-id=\"onSalesChannelChanged\"\n        />\n    </div>\n    <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n    {% block sw_system_config_content_card %}\n    <sw-card\n        v-for=\"card, index in config\"\n        :key=\"index\"\n        position-identifier=\"sw-system-config-content\"\n        :class=\"`sw-system-config__card--${index}`\"\n        :is-loading=\"isLoading\"\n        :title=\"getInlineSnippet(card.title)\"\n        :ai-badge=\"card.aiBadge\"\n    >\n        <slot\n            name=\"beforeElements\"\n            v-bind=\"{ card, config: actualConfigData[currentSalesChannelId] }\"\n        ></slot>\n        <template\n            v-if=\"salesChannelSwitchable && config.length === 1\"\n            #toolbar\n        >\n            <sw-sales-channel-switch\n                :label=\"$tc('sw-settings.system-config.labelSalesChannelSelect')\"\n                @change-sales-channel-id=\"onSalesChannelChanged\"\n            />\n        </template>\n        <template v-if=\"hasCssFields\">\n            <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n            {% block sw_system_config_content_compile_notice %}\n            <sw-alert variant=\"warning\">\n                {{ $tc('sw-settings.system-config.compileNotice') }}\n            </sw-alert>\n\n            {% endblock %}\n        </template>\n        <template v-if=\"!isLoading\">\n            <template v-for=\"element in card.elements\">\n                <slot\n                    name=\"card-element\"\n                    v-bind=\"{ element: getElementBind(element), config: actualConfigData[currentSalesChannelId], card }\"\n                >\n                    <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n                    {% block sw_system_config_content_card_field %}\n                    <sw-inherit-wrapper\n                        v-model:value=\"actualConfigData[currentSalesChannelId][element.name]\"\n                        v-bind=\"getInheritWrapperBind(element)\"\n                        :has-parent=\"isNotDefaultSalesChannel\"\n                        :inherited-value=\"getInheritedValue(element)\"\n                        :class=\"'sw-system-config--field-' + kebabCase(getElementBind(element).name)\"\n                    >\n                        <template #content=\"props\">\n                            <sw-form-field-renderer\n                                v-bind=\"getElementBind(element, props)\"\n                                :key=\"props.isInheritField + props.isInherited\"\n                                :disabled=\"props.isInherited\"\n                                :value=\"props.currentValue\"\n                                :error=\"getFieldError(element.name)\"\n                                @update:value=\"props.updateCurrentValue\"\n                            />\n                        </template>\n                    </sw-inherit-wrapper>\n                    {% endblock %}\n                </slot>\n            </template>\n            <slot name=\"card-element-last\"></slot>\n        </template>\n        <slot\n            name=\"afterElements\"\n            v-bind=\"{ card, config: actualConfigData[currentSalesChannelId], index, isNotDefaultSalesChannel, inheritance: actualConfigData.null }\"\n        >\n        </slot>\n    </sw-card>\n    {% endblock %}\n</div>\n{% endblock %}\n","/**\n * @package services-settings\n */\nimport ErrorResolverSystemConfig from 'src/core/data/error-resolver.system-config.data';\nimport template from './sw-system-config.html.twig';\nimport './sw-system-config.scss';\n\nconst { Mixin } = Cicada;\nconst {\n    object,\n    string: { kebabCase },\n} = Cicada.Utils;\nconst { mapSystemConfigErrors } = Cicada.Component.getComponentHelper();\n\n/**\n * Component which automatically renders all fields for a given system_config schema. It allows the user to edit these\n * configuration values.\n *\n * N.B: This component handles the data completely independently, therefore you need to trigger the saving of\n *      data manually with a $ref. Due to the fact that the data is stored inside this component, destroying\n *      the component could lead to unsaved changes. One primary case for this could be if it will be used\n *      inside tabs. Because if the user changes the tab content then this component gets destroyed and therefore\n *      also the corresponding data.\n */\n\n// eslint-disable-next-line sw-deprecation-rules/private-feature-declarations\nexport default {\n    template,\n\n    compatConfig: Cicada.compatConfig,\n\n    inject: ['systemConfigApiService'],\n\n    emits: [\n        'loading-changed',\n        'config-changed',\n    ],\n\n    mixins: [\n        Mixin.getByName('notification'),\n        Mixin.getByName('sw-inline-snippet'),\n    ],\n\n    props: {\n        domain: {\n            required: true,\n            type: String,\n        },\n        salesChannelId: {\n            required: false,\n            type: String,\n            default: null,\n        },\n        salesChannelSwitchable: {\n            type: Boolean,\n            required: false,\n            default: false,\n        },\n        // Shows the value of salesChannel=null as placeholder when the salesChannelSwitchable prop is true\n        inherit: {\n            type: Boolean,\n            required: false,\n            // eslint-disable-next-line vue/no-boolean-default\n            default: true,\n        },\n    },\n\n    data() {\n        return {\n            currentSalesChannelId: this.salesChannelId,\n            isLoading: false,\n            config: {},\n            actualConfigData: {},\n            salesChannelModel: null,\n            hasCssFields: false,\n        };\n    },\n\n    computed: {\n        isNotDefaultSalesChannel() {\n            return this.currentSalesChannelId !== null;\n        },\n\n        typesWithMapInheritanceSupport() {\n            return [\n                'text',\n                'textarea',\n                'url',\n                'password',\n                'int',\n                'float',\n                'bool',\n                'checkbox',\n                'colorpicker',\n            ];\n        },\n    },\n\n    watch: {\n        actualConfigData: {\n            handler() {\n                this.emitConfig();\n            },\n            deep: true,\n        },\n\n        domain: {\n            handler() {\n                this.createdComponent();\n            },\n        },\n\n        isLoading(value) {\n            this.$emit('loading-changed', value);\n        },\n    },\n\n    created() {\n        this.createdComponent();\n    },\n\n    methods: {\n        getFieldError(fieldName) {\n            return mapSystemConfigErrors(ErrorResolverSystemConfig.ENTITY_NAME, this.salesChannelId, fieldName);\n        },\n\n        async createdComponent() {\n            this.isLoading = true;\n            try {\n                await this.readConfig();\n                await this.readAll();\n            } catch (error) {\n                if (error?.response?.data?.errors) {\n                    this.createErrorNotification(error.response.data.errors);\n                }\n            } finally {\n                this.isLoading = false;\n            }\n        },\n\n        async readConfig() {\n            this.config = await this.systemConfigApiService.getConfig(this.domain);\n            this.config.every((card) => {\n                return card?.elements.every((field) => {\n                    if (field?.config?.css) {\n                        this.hasCssFields = true;\n                        return false;\n                    }\n                    return true;\n                });\n            });\n        },\n\n        readAll() {\n            this.isLoading = true;\n            // Return when data for this salesChannel was already loaded\n            if (this.actualConfigData.hasOwnProperty(this.currentSalesChannelId)) {\n                this.isLoading = false;\n                return Promise.resolve();\n            }\n\n            return this.loadCurrentSalesChannelConfig();\n        },\n\n        async loadCurrentSalesChannelConfig() {\n            this.isLoading = true;\n\n            try {\n                const values = await this.systemConfigApiService.getValues(this.domain, this.currentSalesChannelId);\n\n                if (this.isCompatEnabled('INSTANCE_SET')) {\n                    this.$set(this.actualConfigData, this.currentSalesChannelId, values);\n                } else {\n                    this.actualConfigData[this.currentSalesChannelId] = values;\n                }\n            } finally {\n                this.isLoading = false;\n            }\n        },\n\n        saveAll() {\n            this.isLoading = true;\n            return this.systemConfigApiService.batchSave(this.actualConfigData).finally(() => {\n                this.isLoading = false;\n            });\n        },\n\n        createErrorNotification(errors) {\n            let message = `<div>${this.$tc('sw-config-form-renderer.configLoadErrorMessage', errors.length)}</div><ul>`;\n\n            errors.forEach((error) => {\n                message = `${message}<li>${error.detail}</li>`;\n            });\n            message += '</ul>';\n\n            this.createNotificationError({\n                message: message,\n                autoClose: false,\n            });\n        },\n\n        onSalesChannelChanged(salesChannelId) {\n            this.currentSalesChannelId = salesChannelId;\n            this.readAll();\n        },\n\n        hasMapInheritanceSupport(element) {\n            const componentName = element.config ? element.config.componentName : undefined;\n\n            if (componentName === 'sw-switch-field' || componentName === 'sw-snippet-field') {\n                return true;\n            }\n\n            return this.typesWithMapInheritanceSupport.includes(element.type);\n        },\n\n        getElementBind(element, mapInheritance) {\n            const bind = object.deepCopyObject(element);\n\n            if (!this.hasMapInheritanceSupport(element)) {\n                delete bind.config.label;\n                delete bind.config.helpText;\n            } else {\n                bind.mapInheritance = mapInheritance;\n            }\n\n            // Add select properties\n            if (\n                [\n                    'single-select',\n                    'multi-select',\n                ].includes(bind.type)\n            ) {\n                bind.config.labelProperty = 'name';\n                bind.config.valueProperty = 'id';\n            }\n\n            if (element.type === 'text-editor') {\n                bind.config.componentName = 'sw-text-editor';\n            }\n\n            if (bind.config.css && bind.config.helpText === undefined) {\n                bind.config.helpText = this.$tc('sw-settings.system-config.scssHelpText') + element.config.css;\n            }\n\n            return bind;\n        },\n\n        getInheritWrapperBind(element) {\n            if (this.hasMapInheritanceSupport(element)) {\n                return {};\n            }\n\n            return {\n                label: this.getInlineSnippet(element.config.label),\n                helpText: this.getInlineSnippet(element.config.helpText),\n            };\n        },\n\n        getInheritedValue(element) {\n            const value = this.actualConfigData.null[element.name];\n\n            if (value) {\n                return value;\n            }\n\n            if (element.config?.componentName) {\n                const componentName = element.config.componentName;\n\n                if (componentName === 'sw-switch-field') {\n                    return false;\n                }\n            }\n\n            switch (element.type) {\n                case 'date':\n                case 'datetime':\n                case 'single-select':\n                case 'colorpicker':\n                case 'password':\n                case 'url':\n                case 'text':\n                case 'textarea':\n                case 'text-editor': {\n                    return '';\n                }\n\n                case 'multi-select': {\n                    return [];\n                }\n\n                case 'checkbox':\n                case 'bool': {\n                    return false;\n                }\n\n                case 'float':\n                case 'int': {\n                    return 0;\n                }\n\n                default: {\n                    return null;\n                }\n            }\n        },\n\n        emitConfig() {\n            this.$emit('config-changed', this.actualConfigData[this.currentSalesChannelId]);\n        },\n\n        kebabCase(value) {\n            return kebabCase(value);\n        },\n    },\n};\n"],"names":["template","Mixin","object","kebabCase","mapSystemConfigErrors","index","value","fieldName","ErrorResolverSystemConfig","error","_b","_a","card","field","values","errors","message","salesChannelId","element","componentName","mapInheritance","bind"],"mappings":"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"}