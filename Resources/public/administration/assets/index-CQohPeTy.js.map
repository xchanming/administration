{"version":3,"file":"index-CQohPeTy.js","sources":["../../../app/administration/src/app/component/entity/sw-category-tree-field/sw-category-tree-field.html.twig","../../../app/administration/src/app/component/entity/sw-category-tree-field/index.js"],"sourcesContent":["<!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n{% block sw_category_tree_field %}\n<div\n    ref=\"swCategoryTreeField\"\n    class=\"sw-category-tree-field\"\n    :class=\"{ 'is--disabled': disabled }\"\n>\n\n    <sw-contextual-field\n        v-bind=\"$attrs\"\n        class=\"sw-category-tree-field__main-wrapper\"\n        v-on=\"listeners\"\n    >\n\n        <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n        {% block sw_category_tree_field_input %}\n        <template #sw-field-input=\"{ identification, error, size, setFocusClass, removeFocusClass, hasSuffix, hasPrefix }\">\n            <sw-loader\n                v-if=\"isCategoriesLoading\"\n                class=\"sw-cms-layout-assignment-modal__loader\"\n            />\n\n            <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n            {% block sw_category_tree_field_input_labels %}\n            <sw-label\n                v-for=\"selectedCategory in visibleTags\"\n                :key=\"selectedCategory.id\"\n                v-tooltip=\"{\n                    message: getBreadcrumb(selectedCategory),\n                    width: 300\n                }\"\n                selected=\"\"\n                class=\"sw-category-tree-field__selected-label\"\n                @dismiss=\"removeItem(selectedCategory)\"\n            >\n\n                <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n                {% block sw_category_tree_field_input_labels_property %}\n                <span class=\"sw-category-tree-field__label-property\">\n                    <slot name=\"labelProperty\">\n                        {{ getLabelName(selectedCategory) }}\n                    </slot>\n                </span>\n                {% endblock %}\n\n                <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n                {% block sw_category_tree_field_input_labels_dismiss_icon %}\n                <template #dismiss-icon>\n                    <sw-icon name=\"regular-times-s\" />\n                </template>\n                {% endblock %}\n\n            </sw-label>\n            {% endblock %}\n\n            <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n            {% block sw_category_tree_field_input_labels_hidden_tag %}\n            <sw-label\n                v-if=\"numberOfHiddenTags > 0\"\n                :dismiss-able=\"true\"\n                class=\"sw-category-tree-field__label-more\"\n                @selected=\"removeTagLimit\"\n            >\n\n                <span class=\"sw-category-tree-field__label-more-property\">\n                    <slot name=\"labelProperty\">+{{ numberOfHiddenTags }}</slot>\n                </span>\n            </sw-label>\n            {% endblock %}\n\n            <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n            {% block sw_category_tree_field_input_field %}\n            <!-- eslint-disable-next-line vuejs-accessibility/form-control-has-label -->\n            <input\n                ref=\"searchInput\"\n                v-model=\"term\"\n                type=\"text\"\n                class=\"sw-category-tree__input-field\"\n                :placeholder=\"placeholder\"\n                :disabled=\"disabled\"\n                @focus=\"openDropdown({ setFocusClass, removeFocusClass });\"\n                @keydown.delete=\"onDeleteKeyup\"\n            >\n            {% endblock %}\n\n            <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n            {% block sw_category_tree_field_input_transition %}\n            <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n            {% block sw_category_tree_field_input_results %}\n            <sw-popover\n                v-if=\"isExpanded\"\n                class=\"sw-category-tree-field__results_base\"\n                popover-class=\"sw-category-tree-field__results_popover\"\n                :z-index=\"1100\"\n                :resize-width=\"true\"\n                :popover-config-extension=\"{ stopScrollPropagation: true }\"\n            >\n\n                <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n                {% block sw_category_tree_field_input_results_tree %}\n                <sw-tree\n                    v-if=\"term.length <= 0 && categories.length > 0\"\n                    ref=\"swTree\"\n                    :items=\"categories\"\n                    after-id-property=\"afterCategoryId\"\n                    :sortable=\"false\"\n                    @get-tree-items=\"getTreeItems\"\n                >\n\n                    <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n                    {% block sw_category_tree_field_input_results_tree_headline %}\n                    <template #headline>\n                        <span></span></template>\n                    {% endblock %}\n\n                    <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n                    {% block sw_category_tree_field_input_results_tree_search %}\n                    <template #search>\n                        <span></span></template>\n                    {% endblock %}\n\n                    <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n                    {% block sw_category_tree_field_input_results_tree_items %}\n                    <template\n                        #items=\"{\n                            treeItems,\n                            sortable,\n                            draggedItem,\n                            newElementId,\n                            checkItem,\n                            translationContext,\n                            onChangeRoute,\n                            disableContextMenu,\n                            selectedItemsPathIds,\n                            checkedItemIds,\n                        }\"\n                    >\n                        <sw-tree-item\n                            v-for=\"item in treeItems\"\n                            :key=\"item.id\"\n                            :item=\"item\"\n                            :translation-context=\"translationContext\"\n                            :dragged-item=\"draggedItem\"\n                            :active-parent-ids=\"selectedCategoriesPathIds\"\n                            :active-item-ids=\"selectedCategoriesItemsIds\"\n                            :sortable=\"false\"\n                            should-focus\n                            :active-focus-id=\"selectedTreeItem.id\"\n                            mark-inactive\n                            should-show-active-state\n                            @check-item=\"onCheckItem\"\n                        >\n                            <template #actions>\n                                <span></span>\n                            </template>\n                        </sw-tree-item>\n                    </template>\n                    {% endblock %}\n                </sw-tree>\n                {% endblock %}\n\n                <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n                {% block sw_category_tree_field_input_results_search_results %}\n                <ul\n                    v-else-if=\"searchResult.length > 0 && term.length > 0\"\n                    class=\"sw-category-tree-field__search-results\"\n                >\n\n                    <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n                    {% block sw_category_tree_field_input_results_search_results_item %}\n                    <!-- eslint-disable-next-line vuejs-accessibility/click-events-have-key-events, vuejs-accessibility/no-static-element-interactions -->\n                    <li\n                        v-for=\"item in searchResult\"\n                        :key=\"item.id\"\n                        class=\"sw-category-tree-field__search-result\"\n                        :class=\"{ 'is--focus': isSearchResultInFocus(item)}\"\n                        @click.stop=\"onCheckSearchItem(item)\"\n                    >\n\n                        <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n                        {% block sw_category_tree_field_input_results_search_results_item_checkbox %}\n                        <sw-checkbox-field\n                            :value=\"isSearchItemChecked(item.id)\"\n                            class=\"sw-category-tree-field__search-results-checkbox\"\n                        />\n                        {% endblock %}\n\n                        <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n                        {% block sw_category_tree_field_input_results_search_results_item_folder %}\n                        <div\n                            v-if=\"item.childCount > 0\"\n                            class=\"sw-category-tree-field__search-results-icon\"\n                        >\n                            <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n                            {% block sw_category_tree_field_input_results_search_results_item_folder_icon %}\n                            <sw-icon\n                                name=\"regular-folder\"\n                                small\n                            />\n                            {% endblock %}\n                        </div>\n                        {% endblock %}\n\n                        <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n                        {% block sw_category_tree_field_input_results_search_results_item_endpoint %}\n                        <div\n                            v-else\n                            class=\"sw-category-tree-field__search-results-icon\"\n                        >\n                            <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n                            {% block sw_category_tree_field_input_results_search_results_item_endpoint_icon %}\n                            <sw-icon\n                                name=\"regular-circle-xxs\"\n                                size=\"18\"\n                            />\n                            {% endblock %}\n                        </div>\n                        {% endblock %}\n\n                        <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n                        {% block sw_category_tree_field_input_results_search_results_item_name %}\n                        <span class=\"sw-category-tree-field__search-results-name\">\n                            <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n                            {% block sw_category_tree_field_input_results_search_results_item_name_highlight %}\n                            <sw-highlight-text\n                                :search-term=\"term\"\n                                :text=\"getBreadcrumb(item)\"\n                            />\n                            {% endblock %}\n                        </span>\n                        {% endblock %}\n                    </li>\n                    {% endblock %}\n                </ul>\n                {% endblock %}\n\n                <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n                {% block sw_category_tree_field_input_search_results_empty %}\n                <p\n                    v-else\n                    class=\"sw-category-tree-field__empty-state\"\n                >\n                    {{ $tc('sw-category-tree-field.emptySearchResults') }}\n                </p>\n                {% endblock %}\n\n            </sw-popover>\n            {% endblock %}\n            {% endblock %}\n        </template>\n        {% endblock %}\n    </sw-contextual-field>\n</div>\n{% endblock %}\n","/**\n * @package admin\n */\n\nimport template from './sw-category-tree-field.html.twig';\nimport './sw-category-tree-field.scss';\n\nconst { Component } = Cicada;\nconst utils = Cicada.Utils;\nconst { Criteria } = Cicada.Data;\n\n/**\n * @private\n */\nComponent.register('sw-category-tree-field', {\n    template,\n\n    compatConfig: Cicada.compatConfig,\n\n    inject: ['repositoryFactory'],\n\n    emits: [\n        'selection-add',\n        'selection-remove',\n        'categories-load-more',\n    ],\n\n    props: {\n        categoriesCollection: {\n            type: Array,\n            required: true,\n        },\n\n        disabled: {\n            type: Boolean,\n            required: false,\n            default: false,\n        },\n\n        placeholder: {\n            type: String,\n            required: true,\n        },\n\n        categoryCriteria: {\n            type: Criteria,\n            required: false,\n            default() {\n                return new Criteria(1, 500);\n            },\n        },\n\n        singleSelect: {\n            type: Boolean,\n            required: false,\n            default: false,\n        },\n\n        pageId: {\n            type: String,\n            required: false,\n            default: null,\n        },\n\n        isCategoriesLoading: {\n            type: Boolean,\n            required: false,\n            default: false,\n        },\n    },\n\n    data() {\n        return {\n            isFetching: false,\n            isComponentReady: false,\n            categories: [],\n            selectedCategories: [],\n            isExpanded: false,\n            term: '',\n            searchResult: [],\n            searchResultFocusItem: {},\n            setInputFocusClass: null,\n            removeInputFocusClass: null,\n            selectedTreeItem: '',\n            selectedCategoriesTotal: 0,\n        };\n    },\n\n    computed: {\n        globalCategoryRepository() {\n            return this.repositoryFactory.create('category');\n        },\n\n        categoryRepository() {\n            return this.repositoryFactory.create(this.categoriesCollection.entity, this.categoriesCollection.source);\n        },\n\n        visibleTags() {\n            return this.categoriesCollection;\n        },\n\n        numberOfHiddenTags() {\n            const hiddenTagsLength = this.selectedCategoriesItemsTotal - this.visibleTags.length;\n\n            return hiddenTagsLength > 0 ? hiddenTagsLength : 0;\n        },\n\n        selectedCategoriesItemsIds() {\n            return this.pageId ? this.selectedCategories : this.categoriesCollection.getIds();\n        },\n\n        selectedCategoriesItemsTotal() {\n            return this.pageId ? this.selectedCategoriesTotal : this.categoriesCollection.length;\n        },\n\n        selectedCategoriesPathIds() {\n            return this.categoriesCollection.reduce((acc, item) => {\n                // get each parent id\n                const pathIds = item.path ? item.path.split('|').filter((pathId) => pathId.length > 0) : '';\n\n                // add parent id to accumulator\n                return [\n                    ...acc,\n                    ...pathIds,\n                ];\n            }, []);\n        },\n\n        listeners() {\n            if (this.isCompatEnabled('INSTANCE_LISTENERS')) {\n                return this.$listeners;\n            }\n\n            return {};\n        },\n\n        pageCategoryCriteria() {\n            const categoryCriteria = new Criteria();\n\n            categoryCriteria.addFilter(Criteria.equals('cmsPageId', this.pageId));\n\n            return categoryCriteria;\n        },\n    },\n\n    watch: {\n        categoriesCollection: {\n            handler() {\n                // check if categoriesCollection is loaded\n                if (this.categoriesCollection.entity && !this.isComponentReady && !this.isFetching) {\n                    this.getTreeItems().then(() => {\n                        this.isComponentReady = true;\n                    });\n                }\n            },\n            immediate: true,\n        },\n\n        term: {\n            handler(newTerm) {\n                // when user is searching\n                if (newTerm.length > 0) {\n                    this.searchCategories(newTerm).then((response) => {\n                        this.searchResult = response;\n\n                        // set first item as focus\n                        if (this.searchResult.total > 0) {\n                            this.searchResultFocusItem = this.searchResult.first();\n                        }\n                    });\n                } else {\n                    this.$nextTick(() => {\n                        if (this.$refs.swTree) {\n                            // set first item as focus\n                            this.selectedTreeItem = this.$refs.swTree.treeItems[0];\n                        }\n                    });\n                }\n            },\n            immediate: true,\n        },\n\n        selectedTreeItem(newValue) {\n            if (newValue?.id) {\n                utils.debounce(() => {\n                    const newElement = this.findTreeItemVNodeById(newValue.id).$el;\n\n                    let offsetValue = 0;\n                    let foundTreeRoot = false;\n                    let actualElement = newElement;\n\n                    while (!foundTreeRoot) {\n                        if (actualElement.classList.contains('sw-tree__content')) {\n                            foundTreeRoot = true;\n                        } else {\n                            offsetValue += actualElement.offsetTop;\n                            actualElement = actualElement.offsetParent;\n                        }\n                    }\n\n                    actualElement.scrollTo({\n                        top: offsetValue - actualElement.clientHeight / 2 - 50,\n                        behavior: 'smooth',\n                    });\n                }, 50)();\n            }\n        },\n    },\n\n    created() {\n        this.createdComponent();\n    },\n\n    unmounted() {\n        this.destroyedComponent();\n    },\n\n    methods: {\n        createdComponent() {\n            document.addEventListener('click', this.closeDropdownOnClickOutside);\n            document.addEventListener('keydown', this.handleGeneralKeyEvents);\n\n            if (this.pageId) {\n                this.globalCategoryRepository.searchIds(this.pageCategoryCriteria).then((result) => {\n                    this.selectedCategoriesTotal = result.total;\n                });\n            }\n        },\n\n        destroyedComponent() {\n            document.removeEventListener('click', this.closeDropdownOnClickOutside);\n            document.removeEventListener('keydown', this.handleGeneralKeyEvents);\n        },\n\n        getTreeItems(parentId = null) {\n            this.isFetching = true;\n\n            // create criteria\n            const criteria = Criteria.fromCriteria(this.categoryCriteria);\n            criteria.addFilter(Criteria.equals('parentId', parentId));\n\n            // search for categories\n            return this.globalCategoryRepository.search(criteria, Cicada.Context.api).then((searchResult) => {\n                // when requesting root categories, replace the data\n                if (parentId === null) {\n                    this.categories = searchResult;\n                    this.isFetching = false;\n\n                    if (this.pageId && searchResult[0].cmsPageId === this.pageId) {\n                        this.selectedCategories.push(searchResult[0].id);\n                    }\n\n                    return Promise.resolve();\n                }\n\n                // add new categories\n                searchResult.forEach((category) => {\n                    this.categories.add(category);\n\n                    if (this.pageId && category.cmsPageId === this.pageId) {\n                        this.selectedCategories.push(category.id);\n                    }\n                });\n\n                return Promise.resolve();\n            });\n        },\n\n        onCheckSearchItem(item) {\n            const shouldBeChecked = !this.isSearchItemChecked(item.id);\n\n            this.onCheckItem({\n                checked: shouldBeChecked,\n                id: item.id,\n                data: item,\n            });\n        },\n\n        onCheckItem(item) {\n            this.removeCheckedItems(item.id);\n            const itemIsInCategories = this.categoriesCollection.has(item.id);\n\n            if (item.checked && !itemIsInCategories) {\n                if (item.data) {\n                    this.categoriesCollection.add(item.data);\n                    this.$emit('selection-add', item.data);\n                } else {\n                    this.categoriesCollection.add(item);\n                    this.$emit('selection-add', item);\n                }\n\n                if (this.singleSelect) {\n                    this.isExpanded = false;\n                }\n\n                if (this.pageId) {\n                    this.selectedCategories.push(item.id);\n                    this.selectedCategoriesTotal += 1;\n                }\n\n                return true;\n            }\n\n            this.removeItem(item);\n            return false;\n        },\n\n        removeItem(item) {\n            this.categoriesCollection.remove(item.id);\n\n            if (this.pageId) {\n                const itemIndex = this.selectedCategories.findIndex((id) => id === item.id);\n                this.selectedCategories.splice(itemIndex, 1);\n                this.selectedCategoriesTotal -= 1;\n            }\n\n            if (item.data) {\n                this.$emit('selection-remove', item.data);\n            } else {\n                this.$emit('selection-remove', item);\n            }\n        },\n\n        searchCategories(term) {\n            // create criteria\n            const categorySearchCriteria = new Criteria(1, 500);\n            categorySearchCriteria.addFilter(Criteria.equals('type', 'page'));\n            categorySearchCriteria.setTerm(term);\n\n            // search for categories\n            return this.globalCategoryRepository.search(categorySearchCriteria, Cicada.Context.api);\n        },\n\n        isSearchItemChecked(itemId) {\n            if (this.selectedCategoriesItemsIds.length > 0) {\n                return this.selectedCategoriesItemsIds.indexOf(itemId) >= 0;\n            }\n            return false;\n        },\n\n        isSearchResultInFocus(item) {\n            return item.id === this.searchResultFocusItem.id;\n        },\n\n        getBreadcrumb(item) {\n            if (item.breadcrumb) {\n                return item.breadcrumb.join(' / ');\n            }\n            return item.translated?.name || item.name;\n        },\n\n        getLabelName(item) {\n            if (item.breadcrumb && item.breadcrumb.length > 1) {\n                return `.. / ${item.translated.name || item.name} `;\n            }\n\n            return item.translated.name || item.name;\n        },\n\n        onDeleteKeyup() {\n            if (this.term.length <= 0 && this.categoriesCollection) {\n                const lastItem = this.categoriesCollection.last();\n\n                this.removeItem(lastItem);\n            }\n        },\n\n        removeTagLimit() {\n            this.$emit('categories-load-more');\n        },\n\n        openDropdown({ setFocusClass, removeFocusClass }) {\n            this.isExpanded = true;\n\n            // make functions available\n            this.setInputFocusClass = setFocusClass;\n            this.removeInputFocusClass = removeFocusClass;\n\n            this.setInputFocusClass();\n        },\n\n        closeDropdown() {\n            this.isExpanded = false;\n        },\n\n        closeDropdownOnClickOutside(event) {\n            // when user uses tab key\n            if (event.type === 'keydown' && this.removeInputFocusClass) {\n                this.removeInputFocusClass();\n                this.closeDropdown();\n                return;\n            }\n\n            const target = event.target;\n            let clickedOutside = true;\n\n            // check if the user clicked inside the dropdown\n            if (\n                target.closest('.sw-category-tree-field') === this.$refs.swCategoryTreeField ||\n                target.closest('.sw-category-tree-field__results_popover')\n            ) {\n                clickedOutside = false;\n            } else if (target instanceof SVGElement || target.parentNode instanceof SVGElement) {\n                // check for clicking on svg arrows\n                clickedOutside = false;\n            }\n\n            if (clickedOutside) {\n                if (this.removeInputFocusClass) {\n                    this.removeInputFocusClass();\n                    this.closeDropdown();\n                }\n            }\n        },\n\n        handleGeneralKeyEvents(event) {\n            if (event.type !== 'keydown' || !this.isExpanded) {\n                return;\n            }\n\n            const key = event.key.toLowerCase();\n\n            switch (key) {\n                case 'tab': {\n                    this.closeDropdownOnClickOutside(event);\n                    break;\n                }\n\n                case 'arrowdown':\n                case 'arrowleft':\n                case 'arrowright':\n                case 'arrowup': {\n                    this.handleArrowKeyEvents(event);\n                    break;\n                }\n\n                case 'enter': {\n                    let newItem = null;\n\n                    // when user is searching\n                    if (this.term.length > 0) {\n                        newItem = this.searchResultFocusItem;\n                    } else {\n                        newItem = this.selectedTreeItem;\n                    }\n\n                    newItem.checked = !newItem.checked;\n                    this.onCheckItem(newItem);\n\n                    // reset search term\n                    this.term = '';\n\n                    break;\n                }\n\n                case 'escape': {\n                    this.closeDropdownOnClickOutside(event);\n                    break;\n                }\n\n                default: {\n                    break;\n                }\n            }\n        },\n\n        handleArrowKeyEvents(event) {\n            const key = event.key.toLowerCase();\n\n            // when user is searching\n            if (this.term.length > 0) {\n                switch (key) {\n                    case 'arrowdown': {\n                        event.preventDefault();\n                        this.changeSearchSelection('next');\n                        break;\n                    }\n\n                    case 'arrowup': {\n                        event.preventDefault();\n                        this.changeSearchSelection('previous');\n                        break;\n                    }\n\n                    default: {\n                        break;\n                    }\n                }\n                return;\n            }\n\n            // when user has tree open\n            const actualSelection = this.findTreeItemVNodeById();\n\n            switch (key) {\n                case 'arrowdown': {\n                    // check if actual selection was found\n                    if (actualSelection?.item?.id) {\n                        // when selection is open\n                        if (actualSelection.opened) {\n                            // get first item of child\n                            const newSelection = this.getFirstChildById(actualSelection.item.id);\n                            if (newSelection) {\n                                // update the selected item\n                                this.selectedTreeItem = newSelection;\n                            }\n                            break;\n                        }\n                        // when selection is not open then get the next sibling\n                        const newSelection = this.getSibling(true, actualSelection.item);\n                        // when next sibling exists\n                        if (newSelection) {\n                            // update the selected item\n                            this.selectedTreeItem = newSelection;\n                        } else {\n                            // when sibling does not exists, go to next parent sibling\n                            const parent = this.findTreeItemVNodeById(actualSelection.item.parentId);\n                            const nextParent = this.getSibling(true, parent.item);\n                            if (nextParent) {\n                                // update the selected item\n                                this.selectedTreeItem = nextParent;\n                            }\n                        }\n                    }\n                    break;\n                }\n\n                case 'arrowup': {\n                    // check if actual selection was found\n                    if (actualSelection?.item?.id) {\n                        // when selection is first item in folder\n                        if (actualSelection.item.data.afterCategoryId === null && actualSelection.item.parentId) {\n                            // then get the parent folder\n                            const newSelection = this.findTreeItemVNodeById(actualSelection.item.parentId).item;\n                            if (newSelection) {\n                                // update the selected item\n                                this.selectedTreeItem = newSelection;\n                            }\n                            break;\n                        }\n\n                        // when selection is not first item then get the previous sibling\n                        const newSelection = this.getSibling(false, actualSelection.item);\n                        if (newSelection) {\n                            // update the selected item\n                            this.selectedTreeItem = newSelection;\n                        }\n                    }\n                    break;\n                }\n\n                case 'arrowright': {\n                    this.toggleSelectedTreeItem(true);\n                    break;\n                }\n\n                case 'arrowleft': {\n                    const isClosed = !this.toggleSelectedTreeItem(false);\n\n                    // when selection is an item or a closed folder\n                    if (isClosed) {\n                        // change the selection to the parent\n                        const parentId = actualSelection.item.parentId;\n                        const parent = this.findTreeItemVNodeById(parentId);\n\n                        if (parent) {\n                            this.selectedTreeItem = parent.item;\n                        }\n                    }\n\n                    break;\n                }\n\n                default: {\n                    break;\n                }\n            }\n        },\n\n        changeSearchSelection(type = 'next') {\n            const typeValue = type === 'previous' ? -1 : 1;\n\n            const actualIndex = this.searchResult.indexOf(this.searchResultFocusItem);\n            const focusItem = this.searchResult[actualIndex + typeValue];\n\n            if (typeof focusItem !== 'undefined') {\n                this.searchResultFocusItem = focusItem;\n            }\n        },\n\n        getFirstChildById(itemId, children = this.$refs.swTree.treeItems) {\n            const foundItem = children.find((child) => child.id === itemId);\n\n            if (foundItem) {\n                // return first child\n                return foundItem.children[0];\n            }\n\n            for (let i = 0; i < children.length; i += 1) {\n                const foundItemInChild = this.getFirstChildById(itemId, children[i].children);\n\n                if (foundItemInChild) {\n                    return foundItemInChild;\n                }\n            }\n\n            return null;\n        },\n\n        getSibling(isNext, item, children = this.$refs.swTree.treeItems) {\n            // when no item exists\n            if (!item) {\n                return null;\n            }\n\n            let foundItem = null;\n\n            if (isNext) {\n                foundItem = children.find((child) => child.data.afterCategoryId === item.id);\n            } else {\n                foundItem = children.find((child) => child.id === item.data.afterCategoryId);\n\n                if (foundItem) {\n                    const foundItemNode = this.findTreeItemVNodeById(foundItem.id);\n\n                    if (foundItemNode.opened && foundItemNode.item.children[0]) {\n                        const lastChildIndex = foundItemNode.item.children.length - 1;\n                        return foundItemNode.item.children[lastChildIndex];\n                    }\n                }\n            }\n\n            if (foundItem) {\n                return foundItem;\n            }\n\n            for (let i = 0; i < children.length; i += 1) {\n                const foundItemInChild = this.getSibling(isNext, item, children[i].children);\n\n                if (foundItemInChild) {\n                    return foundItemInChild;\n                }\n            }\n\n            return null;\n        },\n\n        toggleSelectedTreeItem(shouldOpen) {\n            const vnode = this.findTreeItemVNodeById();\n\n            if (vnode?.openTreeItem && vnode.opened !== shouldOpen) {\n                vnode.openTreeItem();\n                vnode.getTreeItemChildren(vnode.item);\n                return true;\n            }\n\n            return false;\n        },\n\n        findTreeItemVNodeById(itemId = this.selectedTreeItem.id, children = this.$refs.swTree.$children) {\n            let found = false;\n\n            if (Array.isArray(children)) {\n                found = children.find((child) => {\n                    if (child?.item?.id) {\n                        return child.item.id === itemId;\n                    }\n                    return false;\n                });\n            } else if (children?.item?.id) {\n                found = children.item.id === itemId;\n            }\n\n            if (found) {\n                return found;\n            }\n\n            let foundInChildren = false;\n\n            // recursion to find vnode\n            for (let i = 0; i < children.length; i += 1) {\n                foundInChildren = this.findTreeItemVNodeById(itemId, children[i].$children);\n                // stop when found in children\n                if (foundInChildren) {\n                    break;\n                }\n            }\n\n            return foundInChildren;\n        },\n\n        removeCheckedItems(keepId) {\n            if (!this.singleSelect) {\n                return;\n            }\n\n            this.categoriesCollection.forEach((category, index) => {\n                if (category.id !== keepId) {\n                    // eslint-disable-next-line vue/no-mutating-props\n                    this.categoriesCollection.splice(index, 1);\n                    index -= 1;\n                }\n            });\n        },\n    },\n});\n"],"names":["template","Component","utils","Criteria","hiddenTagsLength","acc","item","pathIds","pathId","categoryCriteria","newTerm","response","newValue","newElement","offsetValue","foundTreeRoot","actualElement","result","parentId","criteria","searchResult","category","shouldBeChecked","itemIsInCategories","itemIndex","id","term","categorySearchCriteria","itemId","_a","lastItem","setFocusClass","removeFocusClass","event","target","clickedOutside","newItem","_b","key","actualSelection","newSelection","parent","nextParent","type","typeValue","actualIndex","focusItem","children","foundItem","child","i","foundItemInChild","isNext","foundItemNode","lastChildIndex","shouldOpen","vnode","found","foundInChildren","keepId","index"],"mappings":"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"}