const c=`{% block sw_settings_snippet_set_list %} <sw-page class="sw-settings-snippet-set-list"> {% block sw_settings_snippet_set_list_search_bar %} <template #search-bar> <sw-search-bar :initial-search-type="$tc('sw-settings-snippet.general.searchBarTitleSets')" :placeholder="$tc('sw-settings-snippet.general.placeholderSearchBarSets')" :initial-search="term" @search="onSearch" /> </template> {% endblock %} {% block sw_settings_snippet_set_list_smart_bar_header %} <template #smart-bar-header> {% block sw_settings_snippet_set_list_smart_bar_header_title %} <h2> {% block sw_settings_snippet_set_list_smart_bar_header_title_text %} {{ $tc('sw-settings.index.title') }} <sw-icon name="regular-chevron-right-xs" small /> {{ $tc('sw-settings-snippet.general.mainMenuItemGeneral') }} {% endblock %} </h2> {% endblock %} </template> {% endblock %} {% block sw_settings_snippet_set_list_card %} <template #content> <sw-card-view> {% block sw_settings_snippet_set_list_card_title %} <sw-card position-identifier="sw-settings-snippet-set-list-title"> <h3>{{ $tc('sw-settings-snippet.setList.title') }}</h3> <p>{{ $tc('sw-settings-snippet.setList.description') }}</p> </sw-card> {% endblock %} {% block sw_settings_snippet_set_list_card_list %} <sw-card position-identifier="sw-settings-snippet-set-list-card-list" :is-loading="isLoading" :title="$tc('sw-settings-snippet.setList.cardTitle')" > {% block sw_settings_snippet_set_list_card_list_container %} <sw-container columns="1fr"> <sw-card-section divider="bottom"> {% block sw_settings_snippet_set_list_card_list_container_header %} <div class="sw-settings-snippet-set-list__actions"> {% block sw_settings_snippet_set_list_card_list_container_header_btn_export %} <sw-button v-if="false" size="small" variant="ghost" disabled > {{ $tc('sw-settings-snippet.setList.buttonExport') }} </sw-button> {% endblock %} {% block sw_settings_snippet_set_list_card_list_container_header_btn_edit_set %} <sw-button v-tooltip="getNoPermissionsTooltip('snippet.editor')" class="sw-settings-snippet-set-list__edit-set-action" size="small" variant="primary" :disabled="!acl.can('snippet.editor') || !snippetsEditable || undefined" @click="onEditSnippetSets" > {{ $tc('sw-settings-snippet.setList.buttonEditSet') }} </sw-button> {% endblock %} {% block sw_settings_snippet_set_list_card_list_container_header_btn_split %} <sw-button-group v-tooltip="getNoPermissionsTooltip('snippet.creator', false)" class="sw-settings-snippet-set-list__action-split" split-button > {% block sw_settings_snippet_set_list_card_list_container_header_btn_add_set %} <sw-button class="sw-settings-snippet-set-list__action-add" size="small" variant="ghost" :disabled="!acl.can('snippet.creator') || undefined" @click="onAddSnippetSet" > {{ $tc('sw-settings-snippet.setList.buttonAddSet') }} </sw-button> {% endblock %} {% block sw_settings_snippet_set_list_card_list_btn_copy_split %} <sw-context-button headline="hi" :disabled="!acl.can('snippet.creator') || undefined" > {% block sw_settings_snippet_set_list_card_btn_copy %} <template #button> <sw-button class="sw-settings-snippet-set-list__action-context-menu" size="small" variant="ghost" :disabled="!acl.can('snippet.creator') || undefined" square > {% block sw_settings_snippet_set_list_card_btn_copy_icon %} <sw-icon name="regular-chevron-down-xs" size="16" /> {% endblock %} </sw-button> </template> {% endblock %} {% block sw_settings_snippet_set_list_card_copy_context_menu %} <sw-context-menu-item variant="headline"> {{ $tc('sw-settings-snippet.setList.splitButtonDuplicateContent') }} </sw-context-menu-item> {% endblock %} {% block sw_settings_snippet_set_list_card_copy_context_divider %} <sw-context-menu-divider /> {% endblock %} {% block sw_settings_snippet_set_list_card_copy_context_menu_items %} <sw-context-menu-item v-for="set in snippetSets" :key="set.id" @click="onClone(set.id)" > {{ set.name }} </sw-context-menu-item> {% endblock %} </sw-context-button> {% endblock %} </sw-button-group> {% endblock %} </div> {% endblock %} </sw-card-section> </sw-container> {% endblock %} {% block sw_settings_snippet_set_list_card_list_grid %} <template #grid> <sw-grid ref="snippetSetList" :items="snippetSets" :sort-direction="sortDirection" :sort-by="sortBy" :selectable="acl.can('snippet.editor')" :allow-inline-edit="acl.can('snippet.editor')" table @inline-edit-finish="onInlineEditSave" @inline-edit-cancel="onInlineEditCancel" @sw-grid-select-item="onSelectionChanged" @sw-grid-select-all="onSelectionChanged" @sort-column="onSortColumn" > {% block sw_settings_snippet_set_list_card_list_grid_template %} <template #columns="{ item }" > {% block sw_settings_snippet_set_list_card_list_grid_column_name %} <sw-grid-column flex="minmax(200px, 1fr)" class="sw-settings-snippet-set__column-name" :label="$tc('sw-settings-snippet.setList.columnName')" data-index="name" editable truncate sortable > {% block sw_settings_snippet_set_list_card_list_grid_column_name_link %} <router-link :to="{ name: 'sw.settings.snippet.list', query: { ids: [item.id] } }"> {{ item.name }} </router-link> {% endblock %} {% block sw_settings_snippet_set_list_card_list_grid_column_name_editor %} <template #inline-edit> <sw-text-field ref="nameEditor" v-model:value="item.name" name="sw-field--item-name" :placeholder="$tc('sw-settings-snippet.setList.placeholderName')" /> </template> {% endblock %} </sw-grid-column> {% endblock %} {% block sw_settings_snippet_set_list_card_list_grid_column_changed %} <sw-grid-column flex="1fr" class="sw-settings-snippet-set-file__column-changed-at" sortable :label="$tc('sw-settings-snippet.setList.columnChangedAt')" data-index="createdAt" > {% block sw_settings_snippet_set_list_card_list_grid_column_changed_date %} <div v-if="item.updatedAt"> {{ dateFilter(item.updatedAt) }} </div> <div v-else> {{ dateFilter(item.createdAt) }} </div> {% endblock %} </sw-grid-column> {% endblock %} {% block sw_settings_snippet_set_list_card_list_grid_column_base_file %} <sw-grid-column flex="minmax(200px, 1fr)" class="sw-settings-snippet-set-file__column-base-file" sortable :label="$tc('sw-settings-snippet.setList.columnBaseFile')" data-index="baseFile" truncate > {{ item.baseFile }} {% block sw_settings_snippet_set_list_card_list_grid_column_base_file_editor %} <template #inline-edit> <sw-select-field v-model:value="item.baseFile" > <option v-for="file in baseFiles" :key="file.name" :value="file.name" > {{ file.name }} </option> </sw-select-field> </template> {% endblock %} </sw-grid-column> {% endblock %} {% block sw_settings_snippet_set_list_card_list_grid_column_base_action %} <sw-grid-column flex="100px" align="center" > {% block sw_settings_snippet_set_list_card_list_grid_column_base_action_buttons %} <sw-context-button> {% block sw_settings_snippet_set_list_card_list_grid_column_base_action_btn_edit %} <sw-context-menu-item class="sw-setting-snippet-set-list__edit-action" :router-link="{ name: 'sw.settings.snippet.list', query: { ids: [item.id] } }" > {{ contextMenuEditSnippet }} </sw-context-menu-item> {% endblock %} {% block sw_settings_snippet_set_list_card_list_grid_column_base_action_btn_clone %} <sw-context-menu-item v-tooltip.left="getNoPermissionsTooltip('snippet.editor')" :disabled="!acl.can('snippet.creator') || undefined" @click="onClone(item.id)" > {{ $tc('sw-settings-snippet.setList.contextMenuClone') }} </sw-context-menu-item> {% endblock %} {% block sw_settings_snippet_set_list_card_list_grid_column_base_action_btn_delete %} <sw-context-menu-item v-tooltip.left="getNoPermissionsTooltip('snippet.deleter')" variant="danger" :disabled="!acl.can('snippet.deleter') || undefined" @click="onDeleteSet(item.id)" > {{ $tc('sw-settings-snippet.setList.contextMenuDelete') }} </sw-context-menu-item> {% endblock %} </sw-context-button> {% endblock %} </sw-grid-column> {% endblock %} {% block sw_settings_snippet_set_list_columns_delete_modal %} <sw-modal v-if="showDeleteModal === item.id" :title="$tc('global.default.warning')" variant="small" @modal-close="onCloseDeleteModal" > {% block sw_settings_snippet_set_list_delete_modal_confirm_delete_text %} <p class="sw-settings-snippet-set-list__confirm-delete-text"> {{ $tc('sw-settings-snippet.setList.textDeleteConfirm', 0, { name: item.name }) }} </p> {% endblock %} {% block sw_settings_snippet_set_list_delete_modal_footer %} <template #modal-footer> {% block sw_settings_snippet_set_list_delete_modal_cancel %} <sw-button size="small" @click="onCloseDeleteModal" > {{ $tc('global.default.cancel') }} </sw-button> {% endblock %} {% block sw_settings_snippet_set_list_delete_modal_confirm %} <sw-button variant="danger" size="small" @click="onConfirmDelete(item.id)" > {{ $tc('sw-settings-snippet.setList.buttonDelete') }} </sw-button> {% endblock %} </template> {% endblock %} </sw-modal> {% endblock %} {% block sw_settings_snippet_set_list_columns_clone_modal %} <sw-modal v-if="showCloneModal === item.id" :title="$tc('sw-settings-snippet.setList.modalTitleClone')" variant="small" @modal-close="closeCloneModal" > {% block sw_settings_snippet_set_list_clone_modal_confirm_delete_text %} <p class="sw-settings-snippet-set-list__confirm-delete-text"> {{ $tc('sw-settings-snippet.setList.textCloneConfirm', 0, { name: item.name }) }} </p> {% endblock %} {% block sw_settings_snippet_set_list_clone_modal_footer %} <template #modal-footer> {% block sw_settings_snippet_set_list_clone_modal_cancel %} <sw-button size="small" @click="closeCloneModal" > {{ $tc('global.default.cancel') }} </sw-button> {% endblock %} {% block sw_settings_snippet_set_list_clone_modal_confirm %} <sw-button variant="primary" size="small" @click="onConfirmClone(item.id)" > {{ $tc('sw-settings-snippet.setList.buttonClone') }} </sw-button> {% endblock %} </template> {% endblock %} </sw-modal> {% endblock %} </template> {% endblock %} {% block sw_settings_snippet_set_list_card_list_grid_pagination %} <template #pagination> {% block sw_settings_snippet_set_list_card_list_grid_pagination_bar %} <sw-pagination :offset="offset" :limit="limit" :total="total" :total-visible="7" :page="page" @page-change="onPageChange" /> {% endblock %} </template> {% endblock %} </sw-grid> </template> {% endblock %} </sw-card> {% endblock %} </sw-card-view> </template> {% endblock %} </sw-page> {% endblock %}`,{Mixin:r,Data:{Criteria:l}}=Cicada,_={template:c,compatConfig:Cicada.compatConfig,inject:["snippetSetService","repositoryFactory","acl","feature"],mixins:[r.getByName("sw-settings-list")],data(){return{isLoading:!1,entityName:"snippetSet",sortBy:"name",sortDirection:"ASC",offset:0,baseFiles:[],snippetSets:[],showDeleteModal:!1,showCloneModal:!1,snippetsEditable:!1,selection:{}}},metaInfo(){return{title:this.$createTitle()}},computed:{snippetSetRepository(){return this.repositoryFactory.create("snippet_set")},snippetSetCriteria(){const t=new l(this.page,this.limit);return t.addSorting(l.sort("name","ASC")),this.term&&t.setTerm(this.term),t},contextMenuEditSnippet(){return this.acl.can("snippet.editor")?this.$tc("global.default.edit"):this.$tc("global.default.view")},dateFilter(){return Cicada.Filter.getByName("date")}},methods:{getList(){return this.isLoading=!0,this.loadBaseFiles().then(()=>this.snippetSetRepository.search(this.snippetSetCriteria).then(t=>{this.total=t.total,this.snippetSets=t,this.isLoading=!1}))},loadBaseFiles(){return this.snippetSetService.getBaseFiles().then(t=>{this.baseFiles=Object.values(t.items??{}),this.baseFiles.sort((i,e)=>i.name.localeCompare(e.name))})},onAddSnippetSet(){const t=this.snippetSetRepository.create();t.baseFile=this.baseFiles[0].name,this.snippetSets.splice(0,0,t).length===0&&this.$nextTick(()=>{let e=this.$refs.snippetSetList.$children.find(s=>(s.$options.name==="AsyncComponentWrapper"&&(s=s==null?void 0:s.$children[0]),(s==null?void 0:s.item)!==void 0&&s.item.id===t.id));return e?(e.$options.name==="AsyncComponentWrapper"&&(e=e.$children[0]),e.isEditingActive=!0,!0):!1})},onInlineEditSave(t){this.isLoading=!0;const i=this.baseFiles.find(e=>e.name===t.baseFile);i&&i.iso!==null?(t.iso=i.iso,this.snippetSetRepository.save(t).then(()=>{this.createInlineSuccessNote(t.name)}).catch(()=>{this.createInlineErrorNote(t.name),this.getList()}).finally(()=>{this.isLoading=!1})):(this.isLoading=!1,this.createInlineErrorNote(t.name),this.getList())},onEditSnippetSets(){if(!this.snippetsEditable){this.createNotEditableErrorNote();return}const t=Object.keys(this.snippetSelection);this.$router.push({name:"sw.settings.snippet.list",query:{ids:t}})},onSelectionChanged(t){this.snippetSelection=t,this.snippetSelectionCount=Object.keys(t).length,this.snippetsEditable=this.snippetSelectionCount>=1},onInlineEditCancel(){this.getList()},onDeleteSet(t){this.showDeleteModal=t},onConfirmDelete(t){return this.showDeleteModal=!1,this.snippetSetRepository.delete(t).then(()=>{this.getList(),this.createDeleteSuccessNote()}).catch(()=>{this.onCloseDeleteModal(),this.createDeleteErrorNote()})},onClone(t){this.showCloneModal=t},closeCloneModal(){this.showCloneModal=!1},async onConfirmClone(t){this.isLoading=!0;try{const i=await this.snippetSetRepository.clone(t),e=await this.snippetSetRepository.get(i.id);if(!e)return;e.name=`${e.name} ${this.$tc("sw-settings-snippet.general.copyName")}`;const s=e.name,o=a=>a.name===e.name;let n=1;for(;this.snippetSets.some(o);)n+=1,e.name=`${s} (${n})`;try{await this.snippetSetRepository.save(e),this.createCloneSuccessNote()}catch{await this.snippetSetRepository.delete(e.id),this.createCloneErrorNote()}finally{this.getList()}}catch{this.createCloneErrorNote()}finally{this.isLoading=!1,this.closeCloneModal()}},createDeleteSuccessNote(){this.createNotificationSuccess({message:this.$tc("sw-settings-snippet.setList.deleteNoteSuccessMessage")})},createDeleteErrorNote(){this.createNotificationError({message:this.$tc("sw-settings-snippet.setList.deleteNoteErrorMessage")})},createInlineSuccessNote(t){this.createNotificationSuccess({message:this.$tc("sw-settings-snippet.setList.inlineEditSuccessMessage",0,{name:t})})},createInlineErrorNote(t){this.createNotificationError({message:this.$tc("sw-settings-snippet.setList.inlineEditErrorMessage",t!==null,{name:t})})},createCloneSuccessNote(){this.createNotificationSuccess({message:this.$tc("sw-settings-snippet.setList.cloneSuccessMessage")})},createCloneErrorNote(){this.createNotificationError({message:this.$tc("sw-settings-snippet.setList.cloneErrorMessage")})},createNotEditableErrorNote(){this.createNotificationError({message:this.$tc("sw-settings-snippet.setList.notEditableNoteErrorMessage")})},getNoPermissionsTooltip(t,i=!0){return{showDelay:300,appearance:"dark",showOnDisabledElements:i,disabled:this.acl.can(t),message:this.$tc("sw-privileges.tooltip.warning")}}}};export{_ as default};
//# sourceMappingURL=index-D1GmSs71.js.map
