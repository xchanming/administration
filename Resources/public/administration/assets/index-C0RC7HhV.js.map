{"version":3,"file":"index-C0RC7HhV.js","sources":["../../../app/administration/src/module/sw-settings-rule/page/sw-settings-rule-detail/sw-settings-rule-detail.html.twig","../../../app/administration/src/module/sw-settings-rule/page/sw-settings-rule-detail/index.js"],"sourcesContent":["<!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n{% block sw_settings_rule_detail %}\n<sw-page class=\"sw-settings-rule-detail\">\n    <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n    {% block sw_settings_rule_detail_header %}\n    <template #smart-bar-header>\n        <h2 v-if=\"rule\">\n            {{ rule.name }}\n        </h2>\n        <h2 v-else>\n            {{ $tc('sw-settings-rule.detail.textHeadline') }}\n        </h2>\n    </template>\n    {% endblock %}\n\n    <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n    {% block sw_settings_rule_detail_actions %}\n    <template #smart-bar-actions>\n\n        <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n        {% block sw_settings_rule_detail_actions_cancel %}\n        <sw-button\n            v-tooltip.bottom=\"tooltipCancel\"\n            class=\"sw-settings-rule-detail__cancel-action\"\n            :disabled=\"isLoading\"\n            @click=\"onCancel\"\n        >\n            {{ $tc('global.default.cancel') }}\n        </sw-button>\n        {% endblock %}\n\n        <sw-button-group\n            v-tooltip.bottom=\"{\n                message: $tc('sw-privileges.tooltip.warning'),\n                disabled: acl.can('rule.editor'),\n                showOnDisabledElements: true\n            }\"\n            class=\"sw-settings-rule-detail__save-button-group\"\n            :split-button=\"true\"\n        >\n            <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n            {% block sw_settings_rule_detail_actions_save %}\n            <sw-button-process\n                v-model:processSuccess=\"isSaveSuccessful\"\n                v-tooltip.bottom=\"tooltipSave\"\n                class=\"sw-settings-rule-detail__save-action\"\n                :is-loading=\"isLoading\"\n                variant=\"primary\"\n                :disabled=\"!acl.can('rule.editor')\"\n                @click=\"onSave\"\n            >\n                {{ $tc('sw-settings-rule.detail.buttonSave') }}\n            </sw-button-process>\n            {% endblock %}\n\n            <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n            {% block sw_settings_rule_detail_actions_save_context_menu %}\n            <sw-context-button>\n                <template #button>\n                    <sw-button\n                        class=\"sw-settings-rule-detail__button-context-menu\"\n                        square\n                        variant=\"primary\"\n                        :disabled=\"isLoading || !acl.can('rule.editor')\"\n                    >\n                        <sw-icon\n                            name=\"regular-chevron-down-xs\"\n                            size=\"16\"\n                        />\n                    </sw-button>\n                </template>\n\n                <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n                {% block sw_settings_rule_detail_actions_save_context_menu_actions %}\n                <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n                {% block sw_settings_rule_detail_actions_duplicate %}\n                <sw-context-menu-item\n                    class=\"sw-settings-rule-detail__save-duplicate-action\"\n                    :disabled=\"!acl.can('rule.creator') || !acl.can('rule.editor')\"\n                    @click=\"onDuplicate\"\n                >\n                    {{ $tc('sw-product.detail.buttonSaveDuplicate') }}\n                </sw-context-menu-item>\n                {% endblock %}\n                {% endblock %}\n            </sw-context-button>\n            {% endblock %}\n        </sw-button-group>\n    </template>\n    {% endblock %}\n\n    <template #language-switch>\n        <sw-language-switch\n            :save-changes-function=\"saveOnLanguageChange\"\n            :abort-change-function=\"abortOnLanguageChange\"\n            :disabled=\"!ruleId\"\n            @on-change=\"onChangeLanguage\"\n        />\n    </template>\n\n    <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n    {% block sw_settings_rule_detail_content %}\n    <template #content>\n        <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n        {% block sw_settings_rule_detail_tabs_discard_changes_modal %}\n        <sw-discard-changes-modal\n            v-if=\"isDisplayingSaveChangesWarning\"\n            @keep-editing=\"onLeaveModalClose(nextRoute)\"\n            @discard-changes=\"onLeaveModalConfirm(nextRoute)\"\n        />\n        {% endblock %}\n        <sw-card-view>\n            <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n            {% block sw_settings_rule_detail_tabs %}\n            <sw-tabs\n                v-if=\"rule && !rule.isNew()\"\n                class=\"sw-settings-rule-detail__tabs\"\n                position-identifier=\"sw-settings-rule-detail\"\n            >\n                <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n                {% block sw_settings_rule_detail_tab_items %}\n                <sw-tabs-item\n                    v-for=\"tab in tabItems\"\n                    :key=\"tab.route.name\"\n                    :class=\"'sw-settings-rule-detail__tab-item sw-settings-rule-detail__tab-item-' + tab.cssClassSuffix\"\n                    :route=\"tab.route\"\n                    :title=\"tab.title\"\n                    :has-error=\"tabHasError(tab)\"\n                >\n                    {{ tab.title }}\n                </sw-tabs-item>\n                {% endblock %}\n            </sw-tabs>\n            {% endblock %}\n\n            <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n            {% block sw_settings_rule_detail_content_view %}\n            <template v-if=\"isLoading\">\n                <sw-skeleton variant=\"detail-bold\" />\n                <sw-skeleton />\n            </template>\n\n            <template v-else-if=\"rule !== null\">\n                <router-view\n                    v-slot=\"{ Component }\"\n                    :key=\"$route.path\"\n                >\n                    <component\n                        :is=\"Component\"\n                        :rule=\"rule\"\n                        :conditions=\"conditions\"\n                        :condition-repository=\"conditionRepository\"\n                        :is-loading=\"isLoading\"\n                        :detail-page-loading=\"isLoading\"\n                        :rule-name-error=\"ruleNameError\"\n                        :rule-priority-error=\"rulePriorityError\"\n                        @conditions-changed=\"conditionsChanged\"\n                        @tree-finished-loading=\"setTreeFinishedLoading\"\n                    />\n                </router-view>\n            </template>\n            {% endblock %}\n        </sw-card-view>\n    </template>\n    {% endblock %}\n</sw-page>\n{% endblock %}\n","import template from './sw-settings-rule-detail.html.twig';\nimport './sw-settings-rule-detail.scss';\n\nconst { Component, Mixin, Context } = Cicada;\nconst { mapPropertyErrors } = Component.getComponentHelper();\nconst { Criteria, EntityCollection } = Cicada.Data;\n\n/**\n * @private\n * @package services-settings\n */\nexport default {\n    template,\n\n    compatConfig: Cicada.compatConfig,\n\n    inject: [\n        'ruleConditionDataProviderService',\n        'ruleConditionsConfigApiService',\n        'repositoryFactory',\n        'acl',\n    ],\n\n    mixins: [\n        Mixin.getByName('notification'),\n    ],\n\n    shortcuts: {\n        'SYSTEMKEY+S': 'onSave',\n        ESCAPE: 'onCancel',\n    },\n\n    props: {\n        ruleId: {\n            type: String,\n            required: false,\n            default: null,\n        },\n    },\n\n    data() {\n        return {\n            rule: null,\n            conditions: null,\n            conditionTree: null,\n            deletedIds: [],\n            isLoading: false,\n            isSaveSuccessful: false,\n            conditionTreeFinishedLoading: false,\n            conditionsTreeContainsUserChanges: false,\n            nextRoute: null,\n            isDisplayingSaveChangesWarning: false,\n            forceDiscardChanges: false,\n            entityCount: null,\n        };\n    },\n\n    metaInfo() {\n        return {\n            title: this.$createTitle(this.identifier),\n        };\n    },\n\n    computed: {\n        identifier() {\n            return this.rule ? this.rule.name : '';\n        },\n\n        ruleRepository() {\n            return this.repositoryFactory.create('rule');\n        },\n\n        ruleCriteria() {\n            const criteria = new Criteria();\n\n            criteria.addAssociation('tags');\n            criteria.addAssociation('flowSequences.flow');\n\n            const aggregationEntities = [\n                'personaPromotions',\n                'orderPromotions',\n                'cartPromotions',\n                'promotionDiscounts',\n                'promotionSetGroups',\n                'shippingMethodPriceCalculations',\n                'shippingMethodPrices',\n                'productPrices',\n                'shippingMethods',\n                'paymentMethods',\n            ];\n\n            aggregationEntities.forEach((entity) => {\n                criteria.addAggregation(\n                    Criteria.terms(entity, 'id', null, null, Criteria.count(entity, `rule.${entity}.id`)),\n                );\n            });\n\n            return criteria;\n        },\n\n        appScriptConditionRepository() {\n            return this.repositoryFactory.create('app_script_condition');\n        },\n\n        conditionRepository() {\n            return this.repositoryFactory.create(this.rule.conditions.entity, this.rule.conditions.source);\n        },\n\n        tooltipSave() {\n            if (!this.acl.can('rule.editor')) {\n                return {\n                    message: this.$tc('sw-privileges.tooltip.warning'),\n                    disabled: this.acl.can('rule.editor'),\n                    showOnDisabledElements: true,\n                };\n            }\n\n            const systemKey = this.$device.getSystemKey();\n\n            return {\n                message: `${systemKey} + S`,\n                appearance: 'light',\n            };\n        },\n\n        tooltipCancel() {\n            return {\n                message: 'ESC',\n                appearance: 'light',\n            };\n        },\n\n        tabItems() {\n            return [\n                {\n                    title: this.$tc('sw-settings-rule.detail.tabGeneral'),\n                    route: {\n                        name: 'sw.settings.rule.detail.base',\n                        params: { id: this.$route.params.id },\n                    },\n                    cssClassSuffix: 'general',\n                },\n                {\n                    title: this.$tc('sw-settings-rule.detail.tabAssignments'),\n                    route: {\n                        name: 'sw.settings.rule.detail.assignments',\n                        params: { id: this.$route.params.id },\n                    },\n                    cssClassSuffix: 'assignments',\n                },\n            ];\n        },\n\n        conditionTreeFlat() {\n            const getAllConditions = (conditionTree) => {\n                if (!conditionTree?.length) return [];\n\n                return conditionTree.reduce((acc, condition) => {\n                    acc.push(condition);\n                    if (condition.children?.length > 0) {\n                        acc.push(...getAllConditions(condition.children));\n                    }\n                    return acc;\n                }, []);\n            };\n\n            return getAllConditions(this.conditionTree);\n        },\n\n        ...mapPropertyErrors('rule', [\n            'name',\n            'priority',\n        ]),\n    },\n\n    watch: {\n        ruleId: {\n            immediate: true,\n            handler() {\n                this.isLoading = true;\n\n                this.loadConditionData().then((scripts) => {\n                    this.ruleConditionDataProviderService.addScriptConditions(scripts);\n\n                    if (!this.ruleId) {\n                        this.isLoading = false;\n                        this.createRule();\n                        return;\n                    }\n\n                    this.loadEntityData(this.ruleId).then(() => {\n                        this.isLoading = false;\n                    });\n                    this.setTreeFinishedLoading();\n                });\n            },\n        },\n        conditionTree: {\n            deep: true,\n            handler() {\n                if (!this.conditionTreeFinishedLoading) {\n                    return;\n                }\n                this.conditionsTreeContainsUserChanges = true;\n            },\n        },\n\n        $route(newRoute, oldRoute) {\n            // Reload the rule data when switching from assignments to base tab because changes to the assignments\n            // can affect the conditions that are selectable - rule awareness\n            if (\n                newRoute.name === 'sw.settings.rule.detail.base' &&\n                oldRoute.name === 'sw.settings.rule.detail.assignments'\n            ) {\n                this.isLoading = true;\n                this.loadEntityData(this.ruleId).then(() => {\n                    this.isLoading = false;\n                    this.setTreeFinishedLoading();\n                });\n            }\n        },\n    },\n\n    beforeRouteUpdate(to, from, next) {\n        this.unsavedDataLeaveHandler(to, from, next);\n    },\n\n    beforeRouteLeave(to, from, next) {\n        this.unsavedDataLeaveHandler(to, from, next);\n    },\n\n    methods: {\n        loadConditionData() {\n            const context = {\n                ...Context.api,\n                languageId: Cicada.State.get('session').languageId,\n            };\n            const criteria = new Criteria();\n\n            return Promise.all([\n                this.appScriptConditionRepository.search(criteria, context),\n                this.ruleConditionsConfigApiService.load(),\n            ]).then((results) => {\n                return results[0];\n            });\n        },\n\n        createRule() {\n            this.rule = this.ruleRepository.create(Context.api);\n            this.conditions = this.rule.conditions;\n        },\n\n        loadEntityData(ruleId) {\n            this.isLoading = true;\n            this.conditions = null;\n\n            this.ruleCriteria.addFilter(Criteria.equals('id', ruleId));\n\n            return this.ruleRepository.search(this.ruleCriteria).then((response) => {\n                this.entityCount = this.extractEntityCount(response.aggregations);\n\n                this.rule = response.first();\n                return this.loadConditions();\n            });\n        },\n\n        extractEntityCount(aggregations) {\n            const entityCount = {};\n\n            Object.keys(aggregations).forEach((key) => {\n                entityCount[key] = aggregations[key].buckets.at(0)[key].count;\n            });\n\n            return entityCount;\n        },\n\n        unsavedDataLeaveHandler(to, from, next) {\n            if (this.forceDiscardChanges) {\n                this.forceDiscardChanges = false;\n                next();\n                return;\n            }\n\n            if (\n                (to.name === 'sw.settings.rule.detail.assignments' && from.name === 'sw.settings.rule.detail.base') ||\n                to.name === 'sw.settings.rule.detail.base' ||\n                to.name === 'sw.settings.rule.create.base'\n            ) {\n                this.conditionsTreeContainsUserChanges = false;\n                this.conditionTreeFinishedLoading = false;\n                next();\n                return;\n            }\n\n            this.checkUnsavedData({ to, next });\n        },\n\n        checkUnsavedData({ to, next }) {\n            if (this.conditionsTreeContainsUserChanges || this.ruleRepository.hasChanges(this.rule)) {\n                this.isDisplayingSaveChangesWarning = true;\n                this.nextRoute = to;\n                next(false);\n            } else {\n                next();\n            }\n        },\n\n        setTreeFinishedLoading() {\n            this.$nextTick(() => {\n                this.conditionsTreeContainsUserChanges = false;\n                this.conditionTreeFinishedLoading = true;\n            });\n        },\n\n        onLeaveModalClose() {\n            this.nextRoute = null;\n            this.isDisplayingSaveChangesWarning = false;\n        },\n\n        async onLeaveModalConfirm(destination) {\n            this.forceDiscardChanges = true;\n            this.isDisplayingSaveChangesWarning = false;\n\n            if (destination.name === 'sw.settings.rule.detail.assignments') {\n                await this.loadEntityData(this.ruleId).then(() => {\n                    this.isLoading = false;\n                });\n            }\n\n            this.$nextTick(() => {\n                this.$router.push({\n                    name: destination.name,\n                    params: destination.params,\n                });\n            });\n        },\n\n        loadConditions(conditions = null) {\n            const context = { ...Context.api, inheritance: true };\n\n            if (conditions === null) {\n                return this.conditionRepository.search(new Criteria(), context).then((searchResult) => {\n                    return this.loadConditions(searchResult);\n                });\n            }\n\n            if (conditions.total <= conditions.length) {\n                this.conditions = conditions;\n                return Promise.resolve();\n            }\n\n            const criteria = new Criteria(conditions.criteria.page + 1, conditions.criteria.limit);\n\n            if (conditions.entity === 'product') {\n                criteria.addAssociation('options.group');\n            }\n\n            return this.conditionRepository.search(criteria, conditions.context).then((searchResult) => {\n                conditions.push(...searchResult);\n                conditions.criteria = searchResult.criteria;\n                conditions.total = searchResult.total;\n\n                return this.loadConditions(conditions);\n            });\n        },\n\n        conditionsChanged({ conditions, deletedIds }) {\n            this.conditionTree = conditions;\n            this.deletedIds = [\n                ...this.deletedIds,\n                ...deletedIds,\n            ];\n        },\n\n        validateRuleAwareness() {\n            const equalsAnyConfigurations = this.ruleConditionDataProviderService.getAwarenessKeysWithEqualsAnyConfig();\n\n            if (equalsAnyConfigurations.length <= 0 || !this.entityCount) {\n                return true;\n            }\n\n            let isValid = true;\n            equalsAnyConfigurations.forEach((key) => {\n                if (this.entityCount[key] <= 0) {\n                    return;\n                }\n\n                const conditions = [];\n\n                this.conditionTree.forEach((condition) => {\n                    conditions.push(condition);\n\n                    if (condition.children) {\n                        const children = this.getChildrenConditions(condition);\n                        conditions.push(...children);\n                    }\n                });\n\n                const restrictions = this.ruleConditionDataProviderService.getRestrictionsByAssociation(\n                    new EntityCollection(\n                        this.conditionRepository.route,\n                        this.conditionRepository.entityName,\n                        Context.api,\n                        null,\n                        conditions,\n                    ),\n                    key,\n                );\n\n                if (restrictions.isRestricted) {\n                    const message = this.$tc('sw-restricted-rules.restrictedAssignment.equalsAnyViolationTooltip', 0, {\n                        conditions: this.ruleConditionDataProviderService.getTranslatedConditionViolationList(\n                            restrictions.equalsAnyNotMatched,\n                            'sw-restricted-rules.or',\n                        ),\n                        entityLabel: this.$tc(restrictions.assignmentSnippet, 2),\n                    });\n\n                    this.createNotificationError({ message });\n                    isValid = false;\n                }\n            });\n\n            return isValid;\n        },\n\n        getChildrenConditions(condition) {\n            const conditions = [];\n            condition.children.forEach((child) => {\n                conditions.push(child);\n                if (child.children) {\n                    const children = this.getChildrenConditions(child);\n                    conditions.push(...children);\n                }\n            });\n\n            return conditions;\n        },\n\n        validateDateRange() {\n            return this.conditionTreeFlat\n                .filter((condition) => condition.type === 'dateRange')\n                .every(({ value: { fromDate, toDate } }) => {\n                    return fromDate && toDate && new Date(fromDate) <= new Date(toDate);\n                });\n        },\n\n        onSave() {\n            if (!this.validateRuleAwareness()) {\n                return Promise.resolve();\n            }\n\n            if (!this.validateDateRange()) {\n                Cicada.State.dispatch('error/addApiError', {\n                    expression: `rule_condition.${this.rule.id}.value`,\n                    error: new Cicada.Classes.CicadaError({\n                        detail: this.$tc('sw-settings-rule.error-codes.INVALID_DATE_RANGE'),\n                        code: 'INVALID_DATE_RANGE',\n                    }),\n                });\n                this.showErrorNotification();\n\n                return Promise.resolve();\n            }\n\n            this.isSaveSuccessful = false;\n            this.isLoading = true;\n\n            if (this.rule.isNew()) {\n                this.rule.conditions = this.conditionTree;\n                return this.saveRule()\n                    .then(() => {\n                        this.$router.push({\n                            name: 'sw.settings.rule.detail',\n                            params: { id: this.rule.id },\n                        });\n                        this.isSaveSuccessful = true;\n                        this.conditionsTreeContainsUserChanges = false;\n                    })\n                    .catch(() => {\n                        this.showErrorNotification();\n                    });\n            }\n\n            return this.saveRule()\n                .then(this.syncConditions)\n                .then(() => {\n                    this.isSaveSuccessful = true;\n                    this.loadEntityData(this.rule.id).then(() => {\n                        this.setTreeFinishedLoading();\n                    });\n                })\n                .then(() => {\n                    this.isLoading = false;\n                })\n                .catch(() => {\n                    this.isLoading = false;\n                    this.showErrorNotification();\n                });\n        },\n\n        abortOnLanguageChange() {\n            return this.ruleRepository.hasChanges(this.rule);\n        },\n\n        saveOnLanguageChange() {\n            return this.onSave();\n        },\n\n        onChangeLanguage(languageId) {\n            Cicada.State.commit('context/setApiLanguageId', languageId);\n\n            this.isLoading = true;\n            this.loadEntityData(this.ruleId).then(() => {\n                this.isLoading = false;\n                this.setTreeFinishedLoading();\n            });\n        },\n\n        saveRule() {\n            return this.ruleRepository.save(this.rule, Context.api);\n        },\n\n        syncConditions() {\n            return this.conditionRepository.sync(this.conditionTree, Context.api).then(() => {\n                if (this.deletedIds.length > 0) {\n                    return this.conditionRepository.syncDeleted(this.deletedIds, Context.api).then(() => {\n                        this.deletedIds = [];\n                    });\n                }\n                return Promise.resolve();\n            });\n        },\n\n        showErrorNotification() {\n            this.createNotificationError({\n                message: this.$tc('sw-settings-rule.detail.messageSaveError', 0, { name: this.rule.name }),\n            });\n            this.isLoading = false;\n        },\n\n        tabHasError(tab) {\n            if (tab.route.name !== 'sw.settings.rule.detail.base') {\n                return false;\n            }\n\n            return !!this.ruleNameError || !!this.rulePriorityError;\n        },\n\n        onCancel() {\n            this.$router.push({ name: 'sw.settings.rule.index' });\n        },\n\n        onDuplicate() {\n            return this.onSave().then(() => {\n                const behaviour = {\n                    overwrites: {\n                        name: `${this.rule.name} ${this.$tc('global.default.copy')}`,\n                        // setting the createdAt to null, so that api does set a new date\n                        createdAt: null,\n                    },\n                };\n\n                return this.ruleRepository.clone(this.rule.id, behaviour, Cicada.Context.api).then((duplicatedData) => {\n                    this.$router.push({\n                        name: 'sw.settings.rule.detail',\n                        params: { id: duplicatedData.id },\n                    });\n                });\n            });\n        },\n    },\n};\n"],"names":["template","Component","Mixin","Context","mapPropertyErrors","Criteria","EntityCollection","index","criteria","entity","getAllConditions","conditionTree","acc","condition","_a","scripts","newRoute","oldRoute","to","from","next","context","results","ruleId","response","aggregations","entityCount","key","destination","conditions","searchResult","deletedIds","equalsAnyConfigurations","isValid","children","restrictions","message","child","fromDate","toDate","languageId","tab","behaviour","duplicatedData"],"mappings":"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"}