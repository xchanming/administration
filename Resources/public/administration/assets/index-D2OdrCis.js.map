{"version":3,"file":"index-D2OdrCis.js","sources":["../../../app/administration/src/module/sw-dashboard/component/sw-dashboard-statistics/sw-dashboard-statistics.html.twig","../../../app/administration/src/module/sw-dashboard/component/sw-dashboard-statistics/index.ts"],"sourcesContent":["<!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n{# @deprecated tag:v6.7.0 - The component sw-dashboard-statistics will be removed #}\n{% block sw_dashboard_statistics %}\n<div\n    v-if=\"acl.can('order.viewer')\"\n    class=\"sw-dashboard-statistics\"\n>\n    <template v-if=\"isLoading\">\n        <sw-skeleton variant=\"detail\" />\n        <sw-skeleton variant=\"detail\" />\n    </template>\n\n    <template v-else>\n        <template v-if=\"hasOrderToday\">\n            <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n            {% block sw_dashboard_statistics_intro_stats_headline %}\n            <div class=\"sw-dashboard-statistics__card-headline\">\n                <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n                {% block sw_dashboard_index_content_intro_stats_headline_title %}\n                <h1>{{ $tc('sw-dashboard.todayStats.headline') }}</h1>\n                {% endblock %}\n\n                <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n                {% block sw_dashboard_statistics_intro_stats_headline_date %}\n                <span class=\"sw-dashboard-statistics__card-headline-timerange\">\n                    {{ formatChartHeadlineDate(today) }}\n                </span>\n                {% endblock %}\n            </div>\n            {% endblock %}\n\n            <sw-card position-identifier=\"sw-dashboard-statistics-stats-today\">\n                <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n                {% block sw_dashboard_statistics_intro_stats_today %}\n                <div class=\"sw-dashboard-statistics__intro-stats-today\">\n                    <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n                    {% block sw_dashboard_statistics_intro_stats_today_stats %}\n                    <div\n                        v-if=\"hasOrderToday\"\n                        class=\"sw-dashboard-statistics__intro-stats-today-stats\"\n                    >\n                        <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n                        {% block sw_dashboard_statistics_intro_stats_today_stats_single_count %}\n                        <div class=\"sw-dashboard-statistics__intro-stats-today-single-stat\">\n                            <span class=\"sw-dashboard-statistics__intro-stats-today-single-stat-number-type\">{{ $tc('sw-dashboard.todayStats.orders') }}</span>\n                            <span class=\"sw-dashboard-statistics__intro-stats-today-single-stat-number-value\">{{ orderCountToday }}</span>\n                        </div>\n                        {% endblock %}\n\n                        <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n                        {% block sw_dashboard_statistics_intro_stats_today_stats_single_sum %}\n                        <div class=\"sw-dashboard-statistics__intro-stats-today-single-stat\">\n                            <span class=\"sw-dashboard-statistics__intro-stats-today-single-stat-number-type\">{{ $tc('sw-dashboard.todayStats.turnover') }}</span>\n                            {# price aggregations do not support currencies yet, see NEXT-5069 #}\n                            <span class=\"sw-dashboard-statistics__intro-stats-today-single-stat-number-value\">{{ currencyFilter(orderSumToday, systemCurrencyISOCode, 2) }}</span>\n                        </div>\n                        {% endblock %}\n                    </div>\n                    {% endblock %}\n                </div>\n                {% endblock %}\n\n                <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n                {% block sw_dashboard_statistics_grid %}\n                <template #grid>\n                    <sw-entity-listing\n                        v-if=\"todayOrderDataLoaded\"\n                        :sort-by=\"todayOrderDataSortBy\"\n                        :sort-direction=\"todayOrderDataSortDirection\"\n                        :repository=\"orderRepository\"\n                        :items=\"todayOrderData\"\n                        :columns=\"orderGridColumns()\"\n                        :show-selection=\"false\"\n                        :allow-column-edit=\"false\"\n                        :full-page=\"false\"\n                    >\n                        <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n                        {% block sw_dashboard_statistics_grid_created_at %}\n                        <template\n                            #column-orderDateTime=\"{ item }\"\n                        >\n                            {{ dateFilter(item.orderDateTime, {\n                            hour: '2-digit',\n                            minute: '2-digit',\n                            year: undefined,\n                            month: undefined,\n                            day: undefined\n                            }) }}\n                        </template>\n                        {% endblock %}\n\n                        <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n                        {% block sw_dashboard_statistics_grid_name %}\n                        <template #column-orderCustomer.name=\"{ item }\">\n                            <router-link\n                                :to=\"{ name: 'sw.order.detail', params: { id: item.id } }\"\n                                class=\"sw-data-grid__cell-value\"\n                            >\n                                {{ item.orderCustomer.name }}\n                            </router-link>\n                        </template>\n                        {% endblock %}\n\n                        <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n                        {% block sw_dashboard_statistics_grid_short_name %}\n                        <template\n                            #column-amountTotal=\"{ item }\"\n                        >\n                            {{ currencyFilter(item.amountTotal, item.currency.isoCode) }}\n                        </template>\n                        {% endblock %}\n\n                        <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n                        {% block sw_dashboard_statistics_grid_state %}\n                        <template #column-stateMachineState.name=\"{ item }\">\n                            <sw-label\n                                :variant=\"getVariantFromOrderState(item)\"\n                                appearance=\"pill\"\n                            >\n                                {{ item?.stateMachineState?.translated?.name }}\n                            </sw-label>\n                        </template>\n                        {% endblock %}\n\n                        <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n                        {% block sw_dashboard_statistics_grid_actions %}\n                        <template\n                            #actions=\"{ item }\"\n                        >\n                            <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n                            {% block sw_dashboard_statistics_grid_actions_view %}\n                            <sw-context-menu-item\n                                class=\"sw-order-list__order-view-action\"\n                                :router-link=\"{ name: 'sw.order.detail', params: { id: item.id } }\"\n                            >\n                                {{ $tc('sw-order.list.contextMenuView') }}\n                            </sw-context-menu-item>\n                            {% endblock %}\n\n                        </template>\n                        {% endblock %}\n\n                    </sw-entity-listing>\n\n                    <sw-loader v-else-if=\"!todayOrderDataLoaded\" />\n                </template>\n                {% endblock %}\n            </sw-card>\n        </template>\n\n        <sw-extension-component-section\n            position-identifier=\"sw-chart-card__before\"\n            deprecation-message=\"Use sw-dashboard__before-content or sw-dashboard__after-content instead.\"\n            :deprecated=\"true\"\n        />\n\n        <template v-if=\"hasOrderInMonth\">\n            <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n            {% block sw_dashboard_statistics_count %}\n            <sw-chart-card\n                class=\"sw-dashboard-statistics__statistics-count\"\n                :available-ranges=\"availableRanges\"\n                :card-subtitle=\"getCardSubtitle(ordersDateRange)\"\n                :series=\"orderCountSeries\"\n                :options=\"chartOptionsOrderCount\"\n                :fill-empty-values=\"ordersDateRange.aggregate\"\n                type=\"line\"\n                sort\n                position-identifier=\"sw-chart-card__statistics-count\"\n                @sw-chart-card-range-update=\"onOrdersRangeUpdate\"\n            >\n                <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n                {% block sw_dashboard_statistics_count_title %}\n                <template #header-title>\n                    {{ $tc('sw-dashboard.monthStats.orderNumber') }}\n                </template>\n                {% endblock %}\n\n                <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n                {% block sw_dashboard_statistics_count_range_select %}\n                <template #range-option=\"{ range }\">\n                    {{ $tc(`sw-dashboard.monthStats.dateRanges.${range}`) }}\n                </template>\n                {% endblock %}\n            </sw-chart-card>\n            {% endblock %}\n\n            <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n            {% block sw_dashboard_statistics_sum %}\n            <sw-chart-card\n                class=\"sw-dashboard-statistics__statistics-sum\"\n                :available-ranges=\"availableRanges\"\n                :card-subtitle=\"getCardSubtitle(turnoverDateRange)\"\n                :series=\"orderSumSeries\"\n                :options=\"chartOptionsOrderSum\"\n                :fill-empty-values=\"turnoverDateRange.aggregate\"\n                type=\"line\"\n                sort\n                position-identifier=\"sw-chart-card__statistics-sum\"\n                @sw-chart-card-range-update=\"onTurnoverRangeUpdate\"\n            >\n                <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n                {% block sw_dashboard_statistics_sum_title %}\n                <template #header-title>\n                    {{ $tc('sw-dashboard.monthStats.turnover') }}\n                    <sw-help-text\n                        class=\"sw-dashboard-index__help-text\"\n                        :text=\"$tc('sw-dashboard.monthStats.helperText')\"\n                    />\n                </template>\n                {% endblock %}\n\n                <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n                {% block sw_dashboard_statistics_sum_range_select %}\n                <template #range-option=\"{ range }\">\n                    {{ $tc(`sw-dashboard.monthStats.dateRanges.${range}`) }}\n                </template>\n                {% endblock %}\n            </sw-chart-card>\n            {% endblock %}\n        </template>\n\n        <sw-extension-component-section\n            position-identifier=\"sw-chart-card__after\"\n            deprecation-message=\"Use sw-dashboard__before-content or sw-dashboard__after-content instead.\"\n            :deprecated=\"true\"\n        />\n    </template>\n</div>\n{% endblock %}\n","import type EntityCollection from '@cicada-ag/meteor-admin-sdk/es/_internals/data/EntityCollection';\nimport template from './sw-dashboard-statistics.html.twig';\nimport './sw-dashboard-statistics.scss';\n\nconst { Criteria } = Cicada.Data;\n\ntype OrderEntity = EntitySchema.order;\n\ntype HistoryDateRange = {\n    label: string;\n    range: number;\n    interval: 'hour' | 'day';\n    aggregate: 'hour' | 'day';\n};\n\ntype BucketData = {\n    key: string;\n    count: number;\n    totalAmount: {\n        sum: number;\n    };\n};\n\ntype HistoryOrderDataCount = {\n    apiAlias: 'order_sum_bucket_aggregation';\n    buckets: Array<BucketData>;\n    name: 'order_sum_bucket';\n};\n\ntype HistoryOrderDataSum = {\n    apiAlias: 'order_sum_bucket_aggregation';\n    buckets: Array<BucketData>;\n    name: 'order_sum_bucket';\n};\n\ntype HistoryOrderData = HistoryOrderDataCount | HistoryOrderDataSum | null;\n\ninterface ComponentData {\n    historyOrderDataCount: HistoryOrderDataCount | null;\n    historyOrderDataSum: HistoryOrderDataSum | null;\n    todayOrderData: EntityCollection<'order'> | null;\n    todayOrderDataLoaded: boolean;\n    todayOrderDataSortBy: 'orderDateTime';\n    todayOrderDataSortDirection: 'DESC' | 'ASC';\n    ordersDateRange: HistoryDateRange;\n    turnoverDateRange: HistoryDateRange;\n    isLoading: boolean;\n}\n\n/**\n * @package services-settings\n * @deprecated tag:v6.7.0 - Will be removed without replacement\n *\n * @private\n */\nexport default Cicada.Component.wrapComponentConfig({\n    template,\n\n    compatConfig: Cicada.compatConfig,\n\n    inject: [\n        'repositoryFactory',\n        'stateStyleDataProviderService',\n        'acl',\n    ],\n\n    data(): ComponentData {\n        return {\n            historyOrderDataCount: null,\n            historyOrderDataSum: null,\n            todayOrderData: null,\n            todayOrderDataLoaded: false,\n            todayOrderDataSortBy: 'orderDateTime',\n            todayOrderDataSortDirection: 'DESC',\n            ordersDateRange: {\n                label: '30Days',\n                range: 30,\n                interval: 'day',\n                aggregate: 'day',\n            },\n            turnoverDateRange: {\n                label: '30Days',\n                range: 30,\n                interval: 'day',\n                aggregate: 'day',\n            },\n            isLoading: true,\n        };\n    },\n\n    computed: {\n        rangesValueMap(): Array<HistoryDateRange> {\n            return [\n                {\n                    label: '30Days',\n                    range: 30,\n                    interval: 'day',\n                    aggregate: 'day',\n                },\n                {\n                    label: '14Days',\n                    range: 14,\n                    interval: 'day',\n                    aggregate: 'day',\n                },\n                {\n                    label: '7Days',\n                    range: 7,\n                    interval: 'day',\n                    aggregate: 'day',\n                },\n                {\n                    label: '24Hours',\n                    range: 24,\n                    interval: 'hour',\n                    aggregate: 'hour',\n                },\n                {\n                    label: 'yesterday',\n                    range: 1,\n                    interval: 'day',\n                    aggregate: 'hour',\n                },\n            ];\n        },\n\n        availableRanges(): string[] {\n            return this.rangesValueMap.map((range) => range.label);\n        },\n\n        chartOptionsOrderCount() {\n            return {\n                xaxis: {\n                    type: 'datetime',\n                    // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment,@typescript-eslint/no-unsafe-call\n                    min: this.getDateAgo(this.ordersDateRange).getTime(),\n                    labels: {\n                        datetimeUTC: false,\n                    },\n                },\n                yaxis: {\n                    min: 0,\n                    tickAmount: 3,\n                    labels: {\n                        formatter: (value: string) => {\n                            return parseInt(value, 10);\n                        },\n                    },\n                },\n            };\n        },\n\n        chartOptionsOrderSum() {\n            return {\n                xaxis: {\n                    type: 'datetime',\n                    // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment,@typescript-eslint/no-unsafe-call\n                    min: this.getDateAgo(this.turnoverDateRange).getTime(),\n                    labels: {\n                        datetimeUTC: false,\n                    },\n                },\n                yaxis: {\n                    min: 0,\n                    tickAmount: 5,\n                    labels: {\n                        // price aggregations do not support currencies yet, see NEXT-5069\n                        formatter: (value: string) =>\n                            Cicada.Utils.format.currency(\n                                Number.parseFloat(value),\n                                Cicada.Context.app.systemCurrencyISOCode as string,\n                                2,\n                            ),\n                    },\n                },\n            };\n        },\n\n        orderRepository() {\n            return this.repositoryFactory.create('order');\n        },\n\n        orderCountSeries() {\n            if (!this.historyOrderDataCount) {\n                return [];\n            }\n\n            // format data for chart\n            const seriesData = this.historyOrderDataCount.buckets.map((data: BucketData) => {\n                return { x: this.parseDate(data.key), y: data.count };\n            });\n\n            // add empty value for today if there isn't any order, otherwise today would be missing\n            if (!this.todayBucketCount) {\n                seriesData.push({ x: this.today.getTime(), y: 0 });\n            }\n\n            return [\n                {\n                    name: this.$tc('sw-dashboard.monthStats.numberOfOrders'),\n                    data: seriesData,\n                },\n            ];\n        },\n\n        orderCountToday() {\n            if (this.todayBucketCount) {\n                return this.todayBucketCount.count;\n            }\n            return 0;\n        },\n\n        orderSumMonthSeries() {\n            return this.orderSumSeries;\n        },\n\n        orderSumSeries() {\n            if (!this.historyOrderDataSum) {\n                return [];\n            }\n\n            // format data for chart\n            const seriesData = this.historyOrderDataSum.buckets.map((data: BucketData) => {\n                return {\n                    x: this.parseDate(data.key),\n                    y: data.totalAmount.sum,\n                };\n            });\n\n            // add empty value for today if there isn't any order, otherwise today would be missing\n            if (!this.todayBucketSum) {\n                seriesData.push({ x: this.today.getTime(), y: 0 });\n            }\n\n            return [\n                {\n                    name: this.$tc('sw-dashboard.monthStats.totalTurnover'),\n                    data: seriesData,\n                },\n            ];\n        },\n\n        orderSumToday() {\n            if (this.todayBucketCount) {\n                return this.todayBucketCount.totalAmount.sum;\n            }\n            return 0;\n        },\n\n        hasOrderToday() {\n            return this.todayOrderData && this.todayOrderData.length > 0;\n        },\n\n        hasOrderInMonth() {\n            return !!this.historyOrderDataCount && !!this.historyOrderDataSum;\n        },\n\n        today() {\n            const today = Cicada.Utils.format.dateWithUserTimezone();\n            today.setHours(0, 0, 0, 0);\n            return today;\n        },\n\n        todayBucketCount(): BucketData | null {\n            return this.calculateTodayBucket(this.historyOrderDataCount);\n        },\n\n        todayBucketSum(): BucketData | null {\n            return this.calculateTodayBucket(this.historyOrderDataSum);\n        },\n\n        systemCurrencyISOCode() {\n            return Cicada.Context.app.systemCurrencyISOCode;\n        },\n\n        isSessionLoaded() {\n            return !Cicada.State.get('session')?.userPending;\n        },\n\n        currencyFilter() {\n            return Cicada.Filter.getByName('currency');\n        },\n\n        dateFilter() {\n            return Cicada.Filter.getByName('date');\n        },\n    },\n\n    watch: {\n        isSessionLoaded: {\n            immediate: true,\n            async handler() {\n                if (this.isSessionLoaded) {\n                    await this.initializeOrderData();\n                }\n            },\n        },\n    },\n\n    methods: {\n        calculateTodayBucket(aggregation: HistoryOrderData): BucketData | null {\n            const buckets = aggregation?.buckets;\n\n            if (!buckets) {\n                return null;\n            }\n\n            const today = this.today;\n            // search for stats with same timestamp as today\n            const findDateStats = buckets.find((dateCount) => {\n                // when date exists\n                if (dateCount.key) {\n                    // if time is today\n                    const date = new Date(dateCount.key);\n\n                    return date.setHours(0, 0, 0, 0) === today.setHours(0, 0, 0, 0);\n                }\n\n                return false;\n            });\n\n            if (findDateStats) {\n                return findDateStats;\n            }\n            return null;\n        },\n\n        async initializeOrderData() {\n            if (!this.acl.can('order.viewer')) {\n                this.isLoading = false;\n\n                return;\n            }\n\n            this.todayOrderDataLoaded = false;\n\n            await this.getHistoryOrderData();\n            this.todayOrderData = await this.fetchTodayData();\n            this.todayOrderDataLoaded = true;\n            this.isLoading = false;\n        },\n\n        getHistoryOrderData() {\n            return Promise.all([\n                this.fetchHistoryOrderDataCount().then((response) => {\n                    this.historyOrderDataCount = response;\n                }),\n                this.fetchHistoryOrderDataSum().then((response) => {\n                    this.historyOrderDataSum = response;\n                }),\n            ]);\n        },\n\n        fetchHistoryOrderDataCount() {\n            return this.fetchHistory(false, this.formatDateToISO(this.getDateAgo(this.ordersDateRange)));\n        },\n\n        fetchHistoryOrderDataSum() {\n            return this.fetchHistory(true, this.formatDateToISO(this.getDateAgo(this.turnoverDateRange)));\n        },\n\n        fetchHistory(paid: boolean, since: string) {\n            const headers = this.orderRepository.buildHeaders();\n\n            const initContainer = Cicada.Application.getContainer('init');\n            const httpClient = initContainer.httpClient;\n            const timezone = Cicada.State.get('session').currentUser?.timeZone ?? 'UTC';\n\n            return httpClient\n                .get<\n                    undefined,\n                    {\n                        data: {\n                            statistic: Array<{\n                                date: string;\n                                count: number;\n                                amount: number;\n                            }>;\n                        };\n                    }\n                >(`/_admin/dashboard/order-amount/${since}?timezone=${timezone}&paid=${paid.toString()}`, { headers })\n                .then((response) => {\n                    const buckets = response.data.statistic.map((bucket) => {\n                        return {\n                            key: bucket.date,\n                            count: bucket.count,\n                            apiAlias: 'aggregation_bucket',\n                            totalAmount: {\n                                sum: bucket.amount,\n                                name: 'totalAmount',\n                            },\n                        };\n                    });\n\n                    return {\n                        name: 'order_sum_bucket',\n                        buckets: buckets,\n                        apiAlias: 'order_sum_bucket_aggregation',\n                    } as const;\n                });\n        },\n\n        fetchTodayData() {\n            const criteria = new Criteria(1, 10);\n\n            criteria.addAssociation('currency');\n            criteria.addAssociation('stateMachineState');\n\n            criteria.addFilter(Criteria.equals('orderDate', this.formatDateToISO(new Date())));\n            criteria.addSorting(Criteria.sort(this.todayOrderDataSortBy, this.todayOrderDataSortDirection));\n\n            return this.orderRepository.search(criteria);\n        },\n\n        formatDateToISO(date: Date) {\n            return Cicada.Utils.format.toISODate(date, false);\n        },\n\n        formatChartHeadlineDate(date: Date) {\n            const lastKnownLang = Cicada.Application.getContainer('factory').locale.getLastKnownLocale();\n\n            return date.toLocaleDateString(lastKnownLang, {\n                day: 'numeric',\n                month: 'short',\n            });\n        },\n\n        orderGridColumns() {\n            return [\n                {\n                    property: 'orderNumber',\n                    label: 'sw-order.list.columnOrderNumber',\n                    routerLink: 'sw.order.detail',\n                    allowResize: true,\n                    primary: true,\n                },\n                {\n                    property: 'orderDateTime',\n                    dataIndex: 'orderDateTime',\n                    label: 'sw-dashboard.todayStats.orderTime',\n                    allowResize: true,\n                    primary: false,\n                },\n                {\n                    property: 'orderCustomer.name',\n                    dataIndex: 'orderCustomer.name,orderCustomer.name',\n                    label: 'sw-order.list.columnCustomerName',\n                    allowResize: true,\n                },\n                {\n                    property: 'stateMachineState.name',\n                    label: 'sw-order.list.columnState',\n                    allowResize: true,\n                },\n                {\n                    property: 'amountTotal',\n                    label: 'sw-order.list.columnAmount',\n                    align: 'right',\n                    allowResize: true,\n                },\n            ];\n        },\n\n        getVariantFromOrderState(order: OrderEntity): string {\n            const state = order.stateMachineState?.technicalName;\n            if (!state) {\n                return '';\n            }\n\n            return this.stateStyleDataProviderService.getStyle('order.state', state).variant;\n        },\n\n        parseDate(date: string): number {\n            const parsedDate = new Date(\n                date\n                    .replace(/-/g, '/')\n                    .replace('T', ' ')\n                    .replace(/\\..*|\\+.*/, ''),\n            );\n            return parsedDate.valueOf();\n        },\n\n        async onOrdersRangeUpdate(range: string): Promise<void> {\n            const ordersDateRange = this.rangesValueMap.find((item: HistoryDateRange) => item.label === range);\n\n            if (!ordersDateRange) {\n                throw Error('Range not found');\n            }\n\n            this.ordersDateRange = ordersDateRange;\n\n            this.historyOrderDataCount = await this.fetchHistoryOrderDataCount();\n        },\n\n        async onTurnoverRangeUpdate(range: string): Promise<void> {\n            const turnoverDateRange = this.rangesValueMap.find((item: HistoryDateRange) => item.label === range);\n\n            if (!turnoverDateRange) {\n                throw Error('Range not found');\n            }\n\n            this.turnoverDateRange = turnoverDateRange;\n            this.historyOrderDataSum = await this.fetchHistoryOrderDataSum();\n        },\n\n        getCardSubtitle(range: HistoryDateRange): string {\n            return `${this.formatChartHeadlineDate(this.getDateAgo(range))} - ${this.formatChartHeadlineDate(this.today)}`;\n        },\n\n        getDateAgo(range: HistoryDateRange): Date {\n            const date = Cicada.Utils.format.dateWithUserTimezone();\n\n            if (range.interval === 'hour') {\n                date.setHours(date.getHours() - range.range);\n\n                return date;\n            }\n\n            date.setDate(date.getDate() - range.range);\n            date.setHours(0, 0, 0, 0);\n\n            return date;\n        },\n    },\n});\n\n/**\n * @private\n */\nexport type { HistoryDateRange };\n"],"names":["template","Criteria","index","range","value","seriesData","data","today","_a","aggregation","buckets","findDateStats","dateCount","response","paid","since","headers","httpClient","timezone","bucket","criteria","date","lastKnownLang","order","state","ordersDateRange","item","turnoverDateRange"],"mappings":"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"}