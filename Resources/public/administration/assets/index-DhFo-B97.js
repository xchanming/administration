const s=`{% block sw_cms_mapping_field %} <div class="sw-cms-mapping-field"> {% block sw_cms_mapping_field_info %} <div class="sw-cms-mapping-field__info"> {% block sw_cms_mapping_field_label %} <div class="sw-cms-mapping-field__label"> {{ label }} </div> {% endblock %} {% block sw_cms_mapping_field_mapping %} <template v-if="allowedMappingTypes.length"> {% block sw_cms_mapping_field_mapping_selection %} <sw-context-button v-if="!isMapped" class="sw-cms-mapping-field__selection" :menu-width="360" > {% block sw_cms_mapping_field_mapping_selection_action %} <template #button> <div class="sw-cms-mapping-field__action"> <sw-icon name="regular-external-link" size="16" /> <span class="sw-cms-mapping-field__action-label"> {{ $tc('sw-cms.detail.label.buttonMappingAction') }} </span> </div> </template> {% endblock %} {% block sw_cms_mapping_field_mapping_selection_options %} <div class="sw-cms-mapping-field__options"> <sw-context-menu-item v-for="(prop, index) in allowedMappingTypes" :key="index" @click="onMappingSelect(prop)" > {{ prop }} </sw-context-menu-item> </div> {% endblock %} </sw-context-button> {% endblock %} {% block sw_cms_mapping_field_mapping_remove_action %} <div v-else class="sw-cms-mapping-field__action-remove" role="button" tabindex="0" @click="onMappingRemove" @keydown.enter="onMappingRemove" > <sw-icon name="regular-times" /> <span class="sw-cms-mapping-field__action-label"> {{ $tc('sw-cms.detail.label.buttonMappingRemoveAction') }} </span> </div> {% endblock %} </template> {% endblock %} </div> {% endblock %} {% block sw_cms_mapping_field_content %} <div v-if="!isMapped" class="sw-cms-mapping-field__form-field" > <slot> </slot> </div> {% endblock %} <template v-else> {% block sw_cms_mapping_field_mapping_value %} <div class="sw-cms-mapping-field__mapping-value"> {{ $tc('sw-cms.detail.label.mappingPreview') }} <b>{{ config.value }}</b> </div> {% endblock %} {% block sw_cms_mapping_field_preview %} <div v-if="hasPreview" class="sw-cms-mapping-field__preview" > <slot v-if="demoValue !== null" name="preview" :demo-value="demoValue" ></slot> <sw-alert v-else variant="info" class="sw-cms-mapping-field__empty-demo" > {{ $tc('sw-cms.detail.label.mappingEmptyPreview') }} </sw-alert> </div> {% endblock %} </template> </div> {% endblock %}`,p=Shopware.Component.wrapComponentConfig({template:s,inject:["cmsService"],props:{config:{type:Object,required:!0,default(){return{source:"static",value:null}}},valueTypes:{type:[String,Array],required:!1,default:"string"},entity:{type:String,required:!1,default:null},label:{type:String,required:!1,default:""}},data(){return{mappingTypes:{},allowedMappingTypes:[],demoValue:null}},computed:{isMapped(){return this.config.source==="mapped"},hasPreview(){return this.$slots.preview!==void 0},cmsPageState(){return Shopware.Store.get("cmsPage")}},watch:{cmsPageState:{deep:!0,handler(){this.updateMappingTypes(),this.updateDemoValue()}}},created(){this.createdComponent()},methods:{createdComponent(){this.updateMappingTypes(),this.updateDemoValue()},updateMappingTypes(){if(this.mappingTypes=this.cmsPageState.currentMappingTypes,this.getAllowedMappingTypes(),this.config.source!=="mapped")return;this.config.value.split(".")[0]!==this.cmsPageState.currentMappingEntity&&this.onMappingRemove()},updateDemoValue(){this.config.source==="mapped"&&(this.demoValue=this.getDemoValue(this.config.value))},onMappingSelect(e){this.config.source="mapped",this.config.value=e,this.demoValue=this.getDemoValue(e)},onMappingRemove(){this.config.source="static",this.config.value=this.config.type===Array?[]:null,this.demoValue=null},getAllowedMappingTypes(){let e=[];if(this.valueTypes==="entity"){const i=this.mappingTypes;this.entity!==null&&i.entity&&i.entity[this.entity]&&(e=i.entity[this.entity])}else{const i=this.mappingTypes;Object.keys(i).forEach(t=>{(t===this.valueTypes||this.valueTypes.includes(t))&&(e=[...e,...i[t]],e.sort())})}this.allowedMappingTypes=e},getDemoValue(e){return this.cmsService.getPropertyByMappingPath(this.cmsPageState.currentDemoEntity,e)}}});export{p as default};
