const a=`{% block sw_settings_shipping_price_matrices %} <div class="sw-settings-shipping-price-matrices"> {% block sw_settings_shipping_price_matrices_price_matrix %} <sw-settings-shipping-price-matrix v-for="priceGroup in shippingPriceGroups" :key="priceGroup.ruleId" :price-group="priceGroup" :disabled="disabled || undefined" @duplicate-price-matrix="onDuplicatePriceMatrix" @delete-price-matrix="onDeletePriceMatrix" /> {% endblock %} {% block sw_settings_shipping_detail_advanced_prices_actions %} <div class="sw-settings-shipping-price-matrices__actions"> {% block sw_settings_shipping_detail_advanced_prices_actions_add_button %} <sw-button v-tooltip="{ showDelay: 300, showOnDisabledElements: true, message: $tc('sw-settings-shipping.priceMatrix.newMatrixAlreadyExists'), disabled: !newPriceMatrixExists }" :disabled="newPriceMatrixExists || disabled || undefined" class="sw-settings-shipping-price-matrices__actions-add-matrix" @click="onAddNewPriceGroup" > {{ $tc('sw-settings-shipping.priceMatrix.buttonAddAdditionalPriceMatrix') }} </sw-button> {% endblock %} </div> {% endblock %} </div> {% endblock %}`,{Mixin:n,Data:{Criteria:s},Context:p}=Shopware,{cloneDeep:c}=Shopware.Utils.object,o={template:a,inject:["repositoryFactory","ruleConditionDataProviderService"],mixins:[n.getByName("notification"),n.getByName("placeholder")],props:{disabled:{type:Boolean,required:!1,default:!1}},computed:{shippingMethod(){return Shopware.Store.get("swShippingDetail").shippingMethod},shippingPriceGroups(){return Shopware.Store.get("swShippingDetail").shippingPriceGroups},usedRules(){return Shopware.Store.get("swShippingDetail").usedRules},unrestrictedPriceMatrixExists(){return Shopware.Store.get("swShippingDetail").unrestrictedPriceMatrixExists},newPriceMatrixExists(){return Shopware.Store.get("swShippingDetail").newPriceMatrixExists},ruleRepository(){return this.repositoryFactory.create("rule")},ruleFilter(){const i=new s(1,500);return i.addFilter(s.multi("OR",[s.contains("rule.moduleTypes.types","price"),s.equals("rule.moduleTypes",null)])),i},shippingPriceRepository(){return this.repositoryFactory.create("shipping_method_price")},isLoaded(){return this.currencies.length&&this.shippingMethod}},methods:{onAddNewPriceGroup(){const i=this.shippingPriceRepository.create(p.api);i.shippingMethodId=this.shippingMethod.id,i.quantityStart=1,i.ruleId=null,this.unrestrictedPriceMatrixExists&&(i._inNewMatrix=!0),this.shippingMethod.prices.add(i)},onDeletePriceMatrix(i){this.shippingMethod.prices=this.shippingMethod.prices.filter(r=>i.isNew?!r._inNewMatrix:r.ruleId!==i.ruleId)},onDuplicatePriceMatrix(i){const r=[];i.prices.forEach(t=>{const e=this.shippingPriceRepository.create(p.api);this.unrestrictedPriceMatrixExists&&(e._inNewMatrix=!0),e.ruleId=null,e.calculation=t.calculation,e.calculationRule=t.calculationRule,e.calculationRuleId=t.calculationRuleId,e.shippingMethodId=t.shippingMethodId,e.currencyPrice=c(t.currencyPrice),e.quantityStart=t.quantityStart,e.quantityEnd=t.quantityEnd,r.push(e)}),this.shippingMethod.prices.push(...r)}}};export{o as default};
