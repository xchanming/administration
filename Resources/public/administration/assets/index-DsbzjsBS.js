const r=`{% block sw_cms_detail_toolbar_language_switch %} <template #language-switch> <sw-language-switch disabled /> </template> {% endblock %} {% block sw_cms_detail_toolbar_actions_sales_channel %} {% endblock %} {% block sw_cms_detail_toolbar_actions_save %} <sw-button-process v-tooltip.bottom="tooltipSave" class="sw-cms-detail__save-action" :is-loading="isLoading" :process-success="isSaveSuccessful" :disabled="true" variant="primary" > {{ $tc('sw-cms.detail.label.buttonSave') }} </sw-button-process> {% endblock %} {% block sw_cms_detail_stage_container %} <sw-cms-create-wizard :page="page" @on-section-select="onAddSection($event, 0)" @wizard-complete="onWizardComplete" /> {% endblock %}`,{Mixin:c}=Shopware,o=Shopware.Utils,n={template:r,mixins:[c.getByName("placeholder")],data(){return{wizardComplete:!1}},beforeRouteEnter(t,e,s){t.name.includes("sw.cms.create")&&!t.params.id&&(t.params.id=o.createId()),s()},computed:{pageHasSections(){return this.page.sections.length>0&&this.wizardComplete},categoryRepository(){return this.repositoryFactory.create("category")}},methods:{createdComponent(){Shopware.Store.get("adminMenu").collapseSidebar();const t=Shopware.Store.get("context").isSystemDefaultLanguage;t||(Shopware.Store.get("context").resetLanguageToDefault(),this.$store.commit("cmsPageState/setIsSystemDefaultLanguage",t)),this.page=this.pageRepository.create(),this.page.sections=new Shopware.Data.EntityCollection(`/cms-page/${this.page.id}/sections`,"cms_section",Shopware.Context.api)},async onSave(){return this.isSaveSuccessful=!1,this.isSystemDefaultLanguage&&!this.page.name||!this.page.type?(this.createNotificationWarning({message:this.$tc("sw-cms.detail.notification.messageMissingFields")}),Promise.reject()):(this.page=await this.assignToEntity(this.page),this.deleteEntityAndRequiredConfigKey(this.page.sections),this.isLoading=!0,this.pageRepository.save(this.page).then(()=>{this.isLoading=!1,this.isSaveSuccessful=!0,this.$router.push({name:"sw.cms.detail",params:{id:this.page.id}})}).catch(t=>(this.isLoading=!1,this.createNotificationError({message:t.message}),Promise.reject(t))))},async assignToEntity(t){const{type:e,id:s}=this.$route.params;if(!s||!e)return t;try{if(e==="category"){const a=await this.categoryRepository.get(s);a&&t.categories.push(a)}if(e.startsWith("ce_")||e.startsWith("custom_entity_")){const i=await this.repositoryFactory.create(e).get(s);i&&t.extensions[`${o.string.camelCase(e)}SwCmsPage`].push(i)}}catch{this.createNotificationError({message:this.$tc("sw-cms.create.notification.assignToEntityError")})}return t},onWizardComplete(){(this.page.type==="product_list"||this.page.type==="product_detail")&&this.onPageTypeChange(this.page.type),this.wizardComplete=!0,this.onSave()}}};export{n as default};
