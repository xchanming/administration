import{C as c}from"./CicadaError-VTJe91--.js";const{string:n}=Cicada.Utils,i=class i{constructor(){this.merge=Cicada.Utils.object.merge}handleWriteErrors(r){if(!r)throw new Error("[error-resolver] handleWriteError was called without errors");const s=this.reduceErrorsByWriteIndex(r);s.systemError.length>0&&this.addSystemErrors(s.systemError),this.handleErrors(s.apiError)}cleanWriteErrors(){Cicada.State.dispatch("error/resetApiErrors")}reduceErrorsByWriteIndex(r){const s={systemError:[],apiError:{}};return r.forEach(t=>{if(!t.source||!t.source.pointer){const e=new c({code:t.code,meta:t.meta,detail:t.detail,status:t.status});s.systemError.push(e);return}const a=t.source.pointer.split("/");a[0]===""&&a.shift();const d={},l=a.length-1;a.reduce((e,o,E)=>o==="translations"||a[E-1]==="translations"?e:(E===l?e[o]=new c(t):e[o]={},e[o]),d),s.apiError=this.merge(s.apiError,d)}),s}addSystemErrors(r){r.forEach(s=>{Cicada.State.dispatch("error/addSystemError",s)})}handleErrors(r){Object.keys(r).forEach(s=>{Cicada.State.dispatch("error/addApiError",{expression:this.getErrorPath(s),error:r[s]})})}getErrorPath(r){return r=n.camelCase(r),`${i.ENTITY_NAME}.${r}`}};i.ENTITY_NAME="SYSTEM_CONFIG";let h=i;export{h as E};
//# sourceMappingURL=error-resolver.system-config.data-Cbnv_v_4.js.map
