{"version":3,"file":"index-T5pA4jYm.js","sources":["../../../app/administration/src/app/component/form/select/entity/sw-entity-single-select/sw-entity-single-select.html.twig","../../../app/administration/src/app/component/form/select/entity/sw-entity-single-select/index.js"],"sourcesContent":["<!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n{% block sw_entity_single_select %}\n<sw-select-base\n    ref=\"selectBase\"\n    class=\"sw-entity-single-select\"\n    :is-loading=\"isLoading\"\n    :disable-auto-close=\"disableAutoClose\"\n    v-bind=\"$attrs\"\n    :label=\"label\"\n    :disabled=\"disabled\"\n    @clear=\"clearInput\"\n    @select-expanded=\"onSelectExpanded\"\n    @select-collapsed=\"onSelectCollapsed\"\n    v-on=\"listeners\"\n>\n    <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n    {% block sw_entity_single_select_base %}\n    <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n    {% block sw_entity_single_select_base_selection %}\n    <template #sw-select-selection=\"{ identification, error, disabled, size, setFocusClass, removeFocusClass }\">\n        <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n        {% block sw_entity_single_select_advanced_selection_modal %}\n        <component\n            :is=\"advancedSelectionComponent\"\n            v-if=\"isAdvancedSelectionActive && isAdvancedSelectionModalVisible\"\n            :is-single-select=\"true\"\n            :initial-search-term=\"advancedSelectionInitialSearchTerm\"\n            v-bind=\"advancedSelectionParameters\"\n            @modal-close=\"closeAdvancedSelectionModal\"\n            @selection-submit=\"onAdvancedSelectionSubmit\"\n        />\n        {% endblock %}\n\n        <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n        {% block sw_entity_single_select_base_selection_slot %}\n        <div class=\"sw-entity-single-select__selection\">\n            <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n            {% block sw_entity_single_select_single_selection_inner %}\n            <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n            {% block sw_entity_single_select_single_selection_inner_label %}\n            <div\n                v-if=\"!isExpanded\"\n                class=\"sw-entity-single-select__selection-text\"\n                :class=\"selectionTextClasses\"\n            >\n                <template v-if=\"singleSelection\">\n                    <slot\n                        name=\"selection-label-property\"\n                        v-bind=\"{ item: singleSelection, labelProperty, searchTerm, getKey }\"\n                    >\n                        <sw-product-variant-info\n                            v-if=\"displayVariants\"\n                            :variations=\"singleSelection.variation\"\n                        >\n                            {{ displayLabelProperty(singleSelection) }}\n                        </sw-product-variant-info>\n                        <template v-else>\n                            {{ displayLabelProperty(singleSelection) }}\n                        </template>\n                    </slot>\n                </template>\n                <template v-else>\n                    {{ placeholder }}\n                </template>\n            </div>\n            {% endblock %}\n            <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n            {% block sw_entity_single_select_single_selection_inner_input %}\n            <!-- eslint-disable-next-line vuejs-accessibility/form-control-has-label -->\n            <input\n                ref=\"swSelectInput\"\n                v-model=\"searchTerm\"\n                class=\"sw-entity-single-select__selection-input\"\n                :class=\"inputClasses\"\n                type=\"text\"\n                :placeholder=\"placeholder\"\n                :aria-label=\"label\"\n                @input=\"onInputSearchTerm\"\n            >\n            {% endblock %}\n            {% endblock %}\n        </div>\n        {% endblock %}\n    </template>\n    {% endblock %}\n\n    <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n    {% block sw_entity_single_select_base_results %}\n    <template #results-list>\n        <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n        {% block sw_entity_single_select_base_results_slot %}\n        <sw-select-result-list\n            ref=\"resultsList\"\n            :options=\"results\"\n            :is-loading=\"isLoading\"\n            :empty-message=\"$tc('global.sw-single-select.messageNoResults', searchTerm, { term: searchTerm })\"\n            :focus-el=\"$refs.swSelectInput\"\n            @paginate=\"paginate\"\n            @item-select=\"setValue\"\n        >\n            <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n            {% block sw_entity_single_select_base_results_list %}\n            <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n            {% block sw_entity_single_select_base_results_list_before %}\n            <template #before-item-list>\n                <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n                {% block sw_entity_single_select_base_results_list_before_advanced_selection %}\n                <!-- eslint-disable-next-line vuejs-accessibility/click-events-have-key-events, vuejs-accessibility/no-static-element-interactions -->\n                <div\n                    v-if=\"isAdvancedSelectionActive\"\n                    class=\"sw-single-select-filtering__advanced-selection sw-select-result\"\n                    @click=\"openAdvancedSelectionModal\"\n                >\n                    {{ $tc('global.sw-entity-advanced-selection-modal.link') }}\n                </div>\n                {% endblock %}\n\n                <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n                {% block sw_entity_single_select_base_results_list_before_slot %}\n                <slot name=\"before-item-list\"></slot>\n                {% endblock %}\n            </template>\n            {% endblock %}\n\n            <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n            {% block sw_entity_single_select_base_results_list_result %}\n            <template #result-item=\"{ item, index }\">\n                <slot\n                    name=\"result-item\"\n                    v-bind=\"{ item, index, labelProperty, searchTerm, highlightSearchTerm, isSelected, setValue, getKey }\"\n                >\n                    <sw-select-result\n                        v-tooltip=\"getDisabledSelectionTooltip(item)\"\n                        :selected=\"isSelected(item)\"\n                        :disabled=\"isSelectionDisabled(item)\"\n                        :description-position=\"descriptionPosition\"\n                        v-bind=\"{ item, index }\"\n                        @item-select=\"setValue\"\n                    >\n                        <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n                        {% block sw_entity_multi_select_base_results_list_result_preview %}\n                        <template\n                            v-if=\"shouldShowActiveState\"\n                            #preview\n                        >\n                            <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n                            {% block sw_entity_multi_select_base_results_list_result_active %}\n                            <sw-icon\n                                class=\"sw-entity-single-select__selection-active\"\n                                size=\"6\"\n                                :color=\"getActiveIconColor(item)\"\n                                name=\"default-basic-shape-circle-filled\"\n                            />\n                            {% endblock %}\n                        </template>\n                        {% endblock %}\n\n                        <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n                        {% block sw_entity_single_select_base_results_list_result_label %}\n                        <slot\n                            name=\"result-label-property\"\n                            v-bind=\"{ item, index, labelProperty, searchTerm, highlightSearchTerm, getKey }\"\n                        >\n                            <sw-product-variant-info\n                                v-if=\"displayVariants\"\n                                :variations=\"item.variation\"\n                                :highlighted=\"true\"\n                                :search-term=\"searchTerm\"\n                            >\n                                {{ displayLabelProperty(item) }}\n                            </sw-product-variant-info>\n                            <template v-else>\n                                <sw-highlight-text\n                                    v-if=\"highlightSearchTerm && !isSelected(item)\"\n                                    :text=\"displayLabelProperty(item)\"\n                                    :search-term=\"searchTerm\"\n                                />\n                                <template v-else>\n                                    {{ displayLabelProperty(item) }}\n                                </template>\n                            </template>\n                        </slot>\n                        {% endblock %}\n                        <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n                        {% block sw_entity_multi_select_base_results_list_result_description %}\n                        <template #description>\n                            <slot\n                                name=\"result-description-property\"\n                                v-bind=\"{ item, searchTerm, highlightSearchTerm }\"\n                            ></slot>\n                        </template>\n                        {% endblock %}\n                    </sw-select-result>\n                </slot>\n            </template>\n            {% endblock %}\n\n            <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n            {% block sw_entity_single_select_base_results_list_after %}\n            <template #after-item-list>\n                <slot name=\"after-item-list\"></slot>\n            </template>\n            {% endblock %}\n            {% endblock %}\n        </sw-select-result-list>\n        {% endblock %}\n    </template>\n    {% endblock %}\n    {% endblock %}\n\n    <template #label>\n        <slot name=\"label\"></slot>\n    </template>\n\n    <template #hint>\n        <slot name=\"hint\"></slot>\n    </template>\n</sw-select-base>\n{% endblock %}\n","import './sw-entity-single-select.scss';\nimport template from './sw-entity-single-select.html.twig';\n\nconst { Component, Mixin, Utils } = Cicada;\nconst { Criteria, EntityCollection } = Cicada.Data;\nconst { debounce, get } = Cicada.Utils;\n\n/**\n * @private\n */\nComponent.register('sw-entity-single-select', {\n    template,\n\n    compatConfig: Cicada.compatConfig,\n\n    inject: [\n        'repositoryFactory',\n        'feature',\n    ],\n\n    emits: [\n        'update:value',\n        'search',\n        'option-select',\n        'before-selection-clear',\n        'search-term-change',\n    ],\n\n    mixins: [\n        Mixin.getByName('remove-api-error'),\n        Mixin.getByName('notification'),\n    ],\n\n    props: {\n        // eslint-disable-next-line vue/require-prop-types\n        value: {\n            required: true,\n        },\n        highlightSearchTerm: {\n            type: Boolean,\n            required: false,\n            // eslint-disable-next-line vue/no-boolean-default\n            default: true,\n        },\n        placeholder: {\n            type: String,\n            required: false,\n            default: '',\n        },\n        resetOption: {\n            type: String,\n            required: false,\n            default: '',\n        },\n        labelProperty: {\n            type: [\n                String,\n                Array,\n            ],\n            required: false,\n            default: 'name',\n        },\n        labelCallback: {\n            type: Function,\n            required: false,\n            default: null,\n        },\n        entity: {\n            required: true,\n            type: String,\n        },\n        resultLimit: {\n            type: Number,\n            required: false,\n            default: 25,\n        },\n        criteria: {\n            type: Object,\n            required: false,\n            default(props) {\n                return new Criteria(1, props.resultLimit);\n            },\n        },\n        context: {\n            type: Object,\n            required: false,\n            default: () => Cicada.Context.api,\n        },\n        selectionDisablingMethod: {\n            type: Function,\n            required: false,\n            default: () => false,\n        },\n        disableAutoClose: {\n            type: Boolean,\n            required: false,\n            default: false,\n        },\n        disabledSelectionTooltip: {\n            type: Object,\n            required: false,\n            default: () => {\n                return { message: '' };\n            },\n        },\n        descriptionPosition: {\n            type: String,\n            required: false,\n            default: 'right',\n            validValues: [\n                'bottom',\n                'right',\n                'left',\n            ],\n            validator(value) {\n                return [\n                    'bottom',\n                    'right',\n                    'left',\n                ].includes(value);\n            },\n        },\n        allowEntityCreation: {\n            type: Boolean,\n            required: false,\n            default: false,\n        },\n        entityCreationLabel: {\n            type: String,\n            required: false,\n            default() {\n                return Cicada.Snippet.tc('global.sw-single-select.labelEntity');\n            },\n        },\n        advancedSelectionComponent: {\n            type: String,\n            required: false,\n            default: '',\n        },\n        advancedSelectionParameters: {\n            type: Object,\n            required: false,\n            default() {\n                return {};\n            },\n        },\n        displayVariants: {\n            type: Boolean,\n            required: false,\n            default: false,\n        },\n        shouldShowActiveState: {\n            type: Boolean,\n            required: false,\n            default: false,\n        },\n        disabled: {\n            type: Boolean,\n            required: false,\n            // eslint-disable-next-line vue/no-boolean-default\n            default: undefined,\n        },\n        label: {\n            type: String,\n            required: false,\n            default: undefined,\n        },\n    },\n\n    data() {\n        return {\n            searchTerm: '',\n            isExpanded: false,\n            resultCollection: null,\n            singleSelection: null,\n            isLoading: false,\n            // used to track if an item was selected before closing the result list\n            itemRecentlySelected: false,\n            lastSelection: null,\n            entityExists: true,\n            newEntityName: '',\n            isAdvancedSelectionModalVisible: false,\n        };\n    },\n\n    computed: {\n        inputClasses() {\n            return {\n                'is--expanded': this.isExpanded,\n            };\n        },\n\n        selectionTextClasses() {\n            return {\n                'is--placeholder': !this.singleSelection,\n            };\n        },\n        repository() {\n            return this.repositoryFactory.create(this.entity);\n        },\n\n        /**\n         * @returns {EntityCollection}\n         */\n        results() {\n            return this.resultCollection;\n        },\n\n        isAdvancedSelectionActive() {\n            return this.advancedSelectionComponent && Component.getComponentRegistry().has(this.advancedSelectionComponent);\n        },\n\n        advancedSelectionInitialSearchTerm() {\n            if (this.singleSelection && this.tryGetSearchText(this.singleSelection) === this.searchTerm) {\n                return '';\n            }\n\n            return this.searchTerm;\n        },\n\n        listeners() {\n            // eslint-disable-next-line @typescript-eslint/no-unsafe-call,@typescript-eslint/no-unsafe-member-access\n            if (this.isCompatEnabled('INSTANCE_LISTENERS')) {\n                return this.$listeners;\n            }\n\n            return {};\n        },\n    },\n\n    watch: {\n        value(value) {\n            // No need to fetch again when the new value is the last one we selected\n            if (this.lastSelection && this.value === this.lastSelection.id) {\n                this.singleSelection = this.lastSelection;\n                this.lastSelection = null;\n                return;\n            }\n\n            if (value === '' || value === null) {\n                this.singleSelection = null;\n                return;\n            }\n\n            this.loadSelected();\n        },\n    },\n\n    created() {\n        this.createdComponent();\n    },\n\n    methods: {\n        createdComponent() {\n            this.loadSelected();\n        },\n\n        /**\n         * Fetches the selected entity from the server\n         */\n        loadSelected() {\n            if (!this.value || this.value.length === 0) {\n                if (this.resetOption) {\n                    this.singleSelection = {\n                        id: null,\n                        name: this.resetOption,\n                    };\n                }\n\n                return Promise.resolve();\n            }\n\n            this.isLoading = true;\n            return this.repository.get(this.value, { ...this.context, inheritance: true }, this.criteria).then((item) => {\n                if (!item) {\n                    this.$emit('update:value', null);\n                }\n\n                this.criteria.setIds([]);\n\n                this.singleSelection = item;\n                this.isLoading = false;\n                return item;\n            });\n        },\n\n        createCollection(collection) {\n            return new EntityCollection(collection.source, collection.entity, collection.criteria);\n        },\n\n        isSelected(item) {\n            return item.id === this.value;\n        },\n\n        debouncedSearch: debounce(function updateSearchTerm() {\n            this.search();\n        }, 400),\n\n        search() {\n            if (this.criteria.term === this.searchTerm) {\n                if (this.allowEntityCreation) {\n                    this.filterSearchGeneratedTags();\n                }\n                return Promise.resolve();\n            }\n\n            if (!this.allowEntityCreation) {\n                return this.handleSearchPromise();\n            }\n\n            this.isLoading = true;\n            return this.checkEntityExists(this.searchTerm).then(() => {\n                if (!this.entityExists && this.searchTerm) {\n                    const criteria = new Criteria(1, this.resultLimit);\n                    criteria.addFilter(Criteria.contains('name', this.searchTerm));\n\n                    return this.repository\n                        .search(criteria, {\n                            ...this.context,\n                            inheritance: true,\n                        })\n                        .then((result) => {\n                            this.resultCollection = result;\n\n                            const newEntity = this.repository.create(this.context, -1);\n                            newEntity.name = this.$tc('global.sw-single-select.labelEntityAdd', 0, {\n                                term: this.searchTerm,\n                                entity: this.entityCreationLabel,\n                            });\n\n                            this.resultCollection.unshift(newEntity);\n\n                            this.newEntityName = this.searchTerm;\n                            this.displaySearch(this.resultCollection);\n                            this.isLoading = false;\n\n                            return Promise.resolve();\n                        });\n                }\n                return this.handleSearchPromise();\n            });\n        },\n\n        handleSearchPromise() {\n            this.criteria.setPage(1);\n            this.criteria.setLimit(this.resultLimit);\n            this.criteria.setTerm(this.searchTerm);\n            this.resultCollection = null;\n\n            const searchPromise = this.loadData().then(() => {\n                this.resetActiveItem();\n            });\n            this.$emit('search', searchPromise);\n\n            return searchPromise;\n        },\n\n        paginate() {\n            if (!this.resultCollection || this.resultCollection.total < this.criteria.page * this.criteria.limit) {\n                return;\n            }\n\n            this.criteria.setPage(this.criteria.page + 1);\n\n            this.loadData();\n        },\n\n        loadData() {\n            this.isLoading = true;\n\n            return this.repository.search(this.criteria, { ...this.context, inheritance: true }).then((result) => {\n                this.displaySearch(result);\n\n                this.isLoading = false;\n\n                return result;\n            });\n        },\n\n        checkEntityExists(term) {\n            // Set existing entity to true to display all manufacturers when no search term is given\n            if (term.trim().length === 0) {\n                this.entityExists = true;\n                return Promise.resolve();\n            }\n\n            const criteria = new Criteria(1, this.resultLimit);\n            criteria.addIncludes({\n                [this.entity]: [\n                    'id',\n                    'name',\n                ],\n            });\n            criteria.addFilter(Criteria.equals('name', term));\n\n            return this.repository.search(criteria, this.context).then((response) => {\n                this.entityExists = response.total > 0;\n\n                return response.total > 0;\n            });\n        },\n\n        displaySearch(result) {\n            if (!this.resultCollection) {\n                this.resultCollection = result;\n            } else {\n                result.forEach((item) => {\n                    // Prevent duplicate entries\n                    if (!this.resultCollection.has(item.id)) {\n                        this.resultCollection.push(item);\n                    }\n                });\n            }\n\n            if (this.resetOption) {\n                if (!this.resultCollection.has(null)) {\n                    this.resultCollection.unshift({\n                        id: null,\n                        name: this.resetOption,\n                    });\n                }\n            }\n        },\n\n        displayLabelProperty(item) {\n            if (typeof this.labelCallback === 'function') {\n                return this.labelCallback(item);\n            }\n\n            const labelProperties = [];\n\n            if (Array.isArray(this.labelProperty)) {\n                labelProperties.push(...this.labelProperty);\n            } else {\n                labelProperties.push(this.labelProperty);\n            }\n\n            return labelProperties\n                .map((labelProperty) => {\n                    return this.getKey(item, labelProperty) || this.getKey(item, `translated.${labelProperty}`);\n                })\n                .join(' ');\n        },\n\n        onSelectExpanded() {\n            this.isExpanded = true;\n            // Always start with a fresh list when opening the result list\n            this.criteria.setPage(1);\n            this.criteria.setLimit(this.resultLimit);\n            this.criteria.setTerm('');\n            this.resultCollection = null;\n\n            this.loadData().then(() => {\n                this.resetActiveItem();\n            });\n\n            // Get the search text of the selected item as prefilled value\n            this.searchTerm = this.tryGetSearchText(this.singleSelection);\n\n            this.$nextTick(() => {\n                this.$refs.swSelectInput.select();\n                this.$refs.swSelectInput.focus();\n            });\n        },\n\n        tryGetSearchText(option) {\n            if (typeof this.labelCallback === 'function') {\n                return this.labelCallback(option);\n            }\n            let searchText = this.getKey(option, this.labelProperty, '');\n            if (!searchText) {\n                searchText = this.getKey(option, `translated.${this.labelProperty}`, '');\n            }\n            return searchText;\n        },\n\n        onSelectCollapsed() {\n            // Empty the selection if the search term is empty\n            if (this.searchTerm === '' && !this.itemRecentlySelected) {\n                this.clearSelection();\n            }\n            this.$refs.swSelectInput.blur();\n            this.searchTerm = '';\n            this.itemRecentlySelected = false;\n            this.isExpanded = false;\n        },\n\n        closeResultList() {\n            this.$refs.selectBase.collapse();\n        },\n\n        setValue(item) {\n            this.itemRecentlySelected = true;\n\n            if (!this.disableAutoClose) {\n                this.closeResultList();\n            }\n\n            // Add new entity if not exists yet\n            if (this.allowEntityCreation && !this.entityExists && item.id === -1) {\n                return this.addItem(item);\n            }\n\n            // This is a little against v-model. But so we don't need to load the selected item on every selection\n            // from the server\n            this.lastSelection = item;\n            this.$emit('update:value', item.id, item);\n\n            this.$emit('option-select', Utils.string.camelCase(this.entity), item);\n            return null;\n        },\n\n        addItem(item) {\n            if (!this.allowEntityCreation) {\n                return null;\n            }\n\n            if (item.id === -1) {\n                this.createNewEntity();\n            } else {\n                this.$super('addItem', item);\n            }\n            return null;\n        },\n\n        clearSelection() {\n            this.$emit('before-selection-clear', this.singleSelection, this.value);\n            this.$emit('update:value', null);\n\n            this.$emit('option-select', Utils.string.camelCase(this.entity), null);\n        },\n\n        clearInput() {\n            this.searchTerm = '';\n            this.clearSelection();\n            this.$refs.selectBase.collapse();\n        },\n\n        resetActiveItem(pos = 0) {\n            // Return if the result list is closed before the search request returns\n            if (!this.$refs.resultsList) {\n                return;\n            }\n            // If an item is selected the second entry is the first search result\n            if (this.singleSelection) {\n                pos = 1;\n            }\n            this.$refs.resultsList.setActiveItemIndex(pos);\n        },\n\n        onInputSearchTerm(event) {\n            const value = event.target.value;\n\n            this.$emit('search-term-change', value);\n            this.debouncedSearch();\n        },\n\n        getKey(object, keyPath, defaultValue) {\n            return get(object, keyPath, defaultValue);\n        },\n\n        isSelectionDisabled(selection) {\n            if (this.disabled) {\n                return true;\n            }\n\n            return this.selectionDisablingMethod(selection);\n        },\n\n        getDisabledSelectionTooltip(selection) {\n            return {\n                ...this.disabledSelectionTooltip,\n                disabled: this.disabledSelectionTooltip.disabled || !this.selectionDisablingMethod(selection),\n            };\n        },\n\n        createNewEntity() {\n            const entity = this.repository.create(this.context);\n            entity.name = this.newEntityName;\n\n            this.repository\n                .save(entity, this.context)\n                .then(() => {\n                    this.lastSelection = entity;\n                    this.$emit('update:value', entity.id, entity);\n\n                    this.$emit('option-select', Utils.string.camelCase(this.entity), entity);\n                    this.createNotificationSuccess({\n                        message: this.$tc('global.sw-single-select.labelEntityAddedSuccess', 0, {\n                            term: entity.name,\n                            entity: this.entityCreationLabel,\n                        }),\n                    });\n                })\n                .catch(() => {\n                    this.createNotificationError({\n                        message: this.$tc('global.notification.notificationSaveErrorMessage', 0, {\n                            entityName: this.entity,\n                        }),\n                    });\n                    Cicada.Utils.debug.error('Only Entities with \"name\" as the only required field are creatable.');\n                    this.isLoading = false;\n                });\n        },\n\n        filterSearchGeneratedTags() {\n            this.resultCollection = this.resultCollection.filter((entity) => {\n                return entity.id !== -1;\n            });\n        },\n\n        openAdvancedSelectionModal() {\n            this.isAdvancedSelectionModalVisible = true;\n        },\n\n        closeAdvancedSelectionModal() {\n            this.isAdvancedSelectionModalVisible = false;\n        },\n\n        onAdvancedSelectionSubmit(selectedItems) {\n            if (selectedItems.length > 0) {\n                this.setValue(selectedItems[0]);\n            }\n        },\n\n        getActiveIconColor(item) {\n            if (item?.active) {\n                return item.active === true ? '#37d046' : '#d1d9e0';\n            }\n\n            return '#d1d9e0';\n        },\n    },\n});\n"],"names":["template","Component","Mixin","Utils","Criteria","EntityCollection","debounce","get","props","value","item","collection","criteria","result","newEntity","searchPromise","term","response","labelProperties","labelProperty","option","searchText","pos","event","object","keyPath","defaultValue","selection","entity","selectedItems"],"mappings":"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"}