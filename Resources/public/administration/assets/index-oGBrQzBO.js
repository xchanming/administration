const s=`{% block sw_text_editor_toolbar_table_button %} <div class="sw-text-editor-toolbar-table-button"> {% block sw_text_editor_toolbar_table_button_table_head_switch %} <sw-switch-field v-model:value="addTableHead" :label="$tc('sw-text-editor-toolbar.table.addHeading')" /> {% endblock %} {% block sw_text_editor_toolbar_table_button_table_grid_input %} <div class="sw-text-editor-toolbar-table-button__grid-input"> <sw-number-field v-model:value="selectedCols" number-type="int" :min="0" :max="colMaxLimit" :label="$tc('sw-text-editor-toolbar.table.cols')" @input-change="setSelectedCols" @update:value="setSelectedCols" /> <sw-icon class="sw-text-editor-toolbar-table-button__grid-input-icon" name="regular-times" size="12" /> <sw-number-field v-model:value="selectedRows" number-type="int" :min="0" :max="rowMaxLimit" :label="$tc('sw-text-editor-toolbar.table.rows')" @input-change="setSelectedRows" @update:value="setSelectedRows" /> </div> {% endblock %} <p class="sw-text-editor-toolbar-table-button__grid-info"> {{ $tc('sw-text-editor-toolbar.table.editInfo') }} </p> {% block sw_text_editor_toolbar_table_button_table %} <table class="sw-text-editor-toolbar-table-button__table" @click="emitTable" > {% block sw_text_editor_toolbar_table_button_table_head %} <thead v-if="addTableHead" class="sw-text-editor-toolbar-table-button__table-head" > {% block sw_text_editor_toolbar_table_button_table_head_row %} <tr class="sw-text-editor-toolbar-table-button__row"> {% block sw_text_editor_toolbar_table_button_table_head_col %} <td v-for="colIndex in tableCols" :key="colIndex" class="sw-text-editor-toolbar-table-button__col" > <div class="sw-text-editor-toolbar-table-button__col-placeholder"></div> </td> {% endblock %} </tr> {% endblock %} </thead> {% endblock %} {% block sw_text_editor_toolbar_table_button_table_body %} <tbody class="sw-text-editor-toolbar-table-button__table-body"> {% block sw_text_editor_toolbar_table_button_table_body_row %} <tr v-for="rowIndex in tableRows" :key="rowIndex" class="sw-text-editor-toolbar-table-button__row" v-on="rowIndex === tableRows ? { mouseleave: (event) => onLastRowMouseOut(event) } : null" > {% block sw_text_editor_toolbar_table_button_table_body_col %} <td v-for="colIndex in tableCols" :key="colIndex" class="sw-text-editor-toolbar-table-button__col" v-on="colIndex === tableCols ? { mouseleave: (event) => onLastColMouseOut(event) } : null" @mouseover="onMouseOverColumn($event, { rows: rowIndex, cols: colIndex })" > <div class="sw-text-editor-toolbar-table-button__col-placeholder"></div> </td> {% endblock %} </tr> {% endblock %} </tbody> {% endblock %} </table> {% endblock %} {% block sw_text_editor_toolbar_table_button_table_insert %} <div class="sw-text-editor-toolbar-table-button__insert"> <sw-button size="small" variant="primary" @click="emitTable" > {{ $tc('global.default.add') }} </sw-button> </div> {% endblock %} </div> {% endblock %}`,{Component:a}=Cicada;a.register("sw-text-editor-toolbar-table-button",{template:s,compatConfig:Cicada.compatConfig,emits:["mounted","table-create"],props:{buttonConfig:{type:Object,required:!0}},data(){return{addTableHead:!1,tableRows:6,tableCols:6,tableMinCols:6,tableMinRows:6,rowMaxLimit:10,colMaxLimit:10,selectedRows:0,selectedCols:0,oldHorizontalDirection:"",oldVerticalDirection:""}},mounted(){this.mountedComponent()},methods:{mountedComponent(){this.$emit("mounted")},onMouseOverColumn(t,e){t.target&&(this.selectedRows=e.rows,this.selectedCols=e.cols,this.setSelectedTableColsAndRows())},setSelectedTableColsAndRows(){if(this.selectedRows<=0&&this.selectedCols<=0){this.tableCols=6,this.tableRows=6;return}const t=this.$el.querySelector("tbody");this.loopTableRows(t)},setSelectedCols(t){t>=this.tableCols&&(this.tableCols=t),this.$nextTick(()=>{this.selectedCols=t,this.setSelectedTableColsAndRows()})},setSelectedRows(t){t>=this.tableRows&&(this.tableRows=t),this.$nextTick(()=>{this.selectedRows=t,this.setSelectedTableColsAndRows()})},loopTableRows(t){Object.values(t.children).forEach((e,o)=>{this.loopTableCols(e,o)})},loopTableCols(t,e){Object.values(t.children).forEach((o,l)=>{l<this.selectedCols&&e<this.selectedRows?o.classList.add("is--selected"):o.classList.remove("is--selected")})},onMouseOut(t){t.target&&(this.selectedRows=0,this.selectedCols=0)},onLastRowMouseOut(t){if(!t)return;const e=this.oldVerticalDirection<t.pageY?"down":"up";this.oldVerticalDirection=t.pageY,e==="down"&&this.tableRows<this.rowMaxLimit?this.tableRows+=1:e==="up"&&this.tableRows>this.tableMinRows&&(this.tableRows-=1)},onLastColMouseOut(t){if(!t)return;const e=this.oldHorizontalDirection<t.pageX?"right":"left";this.oldHorizontalDirection=t.pageX,e==="right"&&this.tableCols<this.colMaxLimit?this.tableCols+=1:e==="left"&&this.tableCols>this.tableMinCols&&(this.tableCols-=1)},emitTable(){this.$emit("table-create",this.createHtmlTable())},createHtmlTable(){let t='<table class="sw-text-editor-table">',e='<div class="sw-text-editor-table__col-selector" contenteditable="false"></div>';if(this.addTableHead){t+='<thead class="sw-text-editor-table__head"><tr class="sw-text-editor-table__row">';for(let o=0;o<this.selectedCols;o+=1)t+=`<td class="sw-text-editor-table__col">${e}</td>`;e="",t+="</tr></thead>"}t+='<tbody class="sw-text-editor-table__body">';for(let o=0;o<this.selectedRows;o+=1){t+='<tr class="sw-text-editor-table__row">';for(let l=0;l<this.selectedCols;l+=1)t+=`<td class="sw-text-editor-table__col">${e}</td>`;e="",t+="</tr>"}t+="</tbody></table>",this.buttonConfig.value=t}}});
//# sourceMappingURL=index-oGBrQzBO.js.map
