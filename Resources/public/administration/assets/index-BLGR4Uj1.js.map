{"version":3,"file":"index-BLGR4Uj1.js","sources":["../../../app/administration/src/module/sw-settings-customer-group/page/sw-settings-customer-group-list/sw-settings-customer-group-list.html.twig","../../../app/administration/src/module/sw-settings-customer-group/page/sw-settings-customer-group-list/index.js"],"sourcesContent":["<!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n{% block sw_settings_customer_group_list %}\n<sw-page class=\"sw-settings-customer-group-list\">\n\n    <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n    {% block sw_settings_customer_group_list_search_bar %}\n    <template #search-bar>\n        <sw-search-bar\n            initial-search-type=\"customer_group\"\n            :placeholder=\"$tc('sw-settings-customer-group.general.placeholderSearchBar')\"\n            :initial-search=\"term\"\n            @search=\"onSearch\"\n        />\n    </template>\n    {% endblock %}\n\n    <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n    {% block sw_settings_customer_group_list_smart_bar_header %}\n    <template #smart-bar-header>\n        <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n        {% block sw_settings_customer_group_list_smart_bar_header_title %}\n        <h2>\n            <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n            {% block sw_settings_customer_group_list_smart_bar_header_title_text %}\n            {{ $tc('sw-settings.index.title') }}\n            <sw-icon\n                name=\"regular-chevron-right-xs\"\n                small\n            />\n            {{ $tc('sw-settings-customer-group.general.mainMenuItemGeneral') }}\n            {% endblock %}\n\n            <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n            {% block sw_settings_customer_group_list_smart_bar_header_amount %}\n            <span\n                v-if=\"!isLoading && customerGroups && total\"\n                class=\"sw-page__smart-bar-amount\"\n            >\n                ({{ total }})\n            </span>\n            {% endblock %}\n        </h2>\n        {% endblock %}\n    </template>\n    {% endblock %}\n\n    <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n    {% block sw_settings_customer_group_list_language_switch %}\n    <template #language-switch>\n        <sw-language-switch @on-change=\"onRefresh\" />\n    </template>\n    {% endblock %}\n\n    <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n    {% block sw_settings_customer_group_list_actions %}\n    <template #smart-bar-actions>\n        <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n        {% block sw_settings_customer_group_list_actions_create %}\n        <sw-button\n            v-tooltip.bottom=\"{\n                message: $tc('sw-privileges.tooltip.warning'),\n                disabled: acl.can('customer_groups.creator'),\n                showOnDisabledElements: true\n            }\"\n            class=\"sw-settings-customer-group-list__create\"\n            variant=\"primary\"\n            :disabled=\"!acl.can('customer_groups.creator') || undefined\"\n            :router-link=\"{ name: 'sw.settings.customer.group.create' }\"\n        >\n            {{ $tc('sw-settings-customer-group.general.buttonCreate') }}\n        </sw-button>\n        {% endblock %}\n    </template>\n    {% endblock %}\n\n    <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n    {% block sw_settings_customer_group_list_cardview %}\n    <template #content>\n        <sw-card-view>\n            <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n            {% block sw_settings_customer_group_list_card_content %}\n            <sw-card\n                position-identifier=\"sw-settings-customer-group-list\"\n            >\n\n                <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n                {% block sw_settings_customer_group_list_grid %}\n                <template #grid>\n                    <sw-entity-listing\n                        v-if=\"isLoading || entitySearchable\"\n                        ref=\"listing\"\n                        class=\"sw-settings-customer-group-list-grid\"\n                        identifier=\"sw-settings-customer-group-list\"\n                        detail-route=\"sw.settings.customer.group.detail\"\n                        :repository=\"customerGroupRepository\"\n                        :criteria-limit=\"limit\"\n                        :is-loading=\"isLoading\"\n                        :items=\"customerGroups\"\n                        :columns=\"columns\"\n                        :sort-by=\"currentSortBy\"\n                        :sort-direction=\"sortDirection\"\n                        :full-page=\"false\"\n                        :allow-view=\"acl.can('customer_groups.viewer')\"\n                        :allow-edit=\"acl.can('customer_groups.editor')\"\n                        :allow-inline-edit=\"acl.can('customer_groups.editor') || undefined\"\n                        :allow-delete=\"acl.can('customer_groups.deleter')\"\n                        :show-selection=\"acl.can('customer_groups.deleter') || undefined\"\n                        @column-sort=\"onSortColumn\"\n                        @page-change=\"onPageChange\"\n                    >\n\n                        <template #bulk-modal-delete-items>\n                            <sw-button\n                                variant=\"danger\"\n                                size=\"small\"\n                                @click=\"deleteCustomerGroups\"\n                            >\n                                {{ $tc('global.default.delete') }}\n                            </sw-button>\n                        </template>\n\n                        <template #delete-action=\"{ item }\">\n                            <sw-context-menu-item\n                                class=\"sw-settings-customer-group-list-grid__delete-action\"\n                                variant=\"danger\"\n                                :disabled=\"!acl.can('customer_groups.deleter') || undefined\"\n                                @click=\"onContextMenuDelete(item)\"\n                            >\n                                {{ $tc('global.default.delete') }}\n                            </sw-context-menu-item>\n                        </template>\n\n                        <template #delete-modal-delete-item=\"{ item }\">\n                            <sw-button\n                                variant=\"danger\"\n                                size=\"small\"\n                                @click=\"deleteCustomerGroup(item)\"\n                            >\n                                {{ $tc('global.default.delete') }}\n                            </sw-button>\n                        </template>\n\n                        <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n                        {% block sw_settings_customer_group_list_grid_column_display_gross %}\n                        <template #column-displayGross=\"{ item }\">\n                            <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n                                {% block sw_settings_customer_group_list_grid_column_display_gross_inner %}\n                            {{ $tc('sw-settings-customer-group.detail.fieldDisplayGrossValues', +item.displayGross) }}\n                                {% endblock %}\n                        </template>\n                        {% endblock %}\n                    </sw-entity-listing>\n                </template>\n                {% endblock %}\n\n            </sw-card>\n            {% endblock %}\n        </sw-card-view>\n\n        <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n        {% block sw_settings_customer_group_list_empty_state %}\n        <sw-empty-state\n            v-if=\"!isLoading && !total && isValidTerm(term)\"\n            :title=\"$tc('sw-empty-state.messageNoResultTitle')\"\n        >\n            <template #default>\n                {{ $tc('sw-empty-state.messageNoResultSublineBefore') }}\n                <router-link\n                    class=\"sw-empty-state__description-link\"\n                    :to=\"{ name: 'sw.profile.index.searchPreferences' }\"\n                >\n                    {{ $tc('sw-empty-state.messageNoResultSublineLink') }}\n                </router-link>\n                {{ $tc('sw-empty-state.messageNoResultSublineAfter') }}\n            </template>\n        </sw-empty-state>\n        {% endblock %}\n    </template>\n    {% endblock %}\n\n</sw-page>\n{% endblock %}\n","import template from './sw-settings-customer-group-list.html.twig';\n\n/**\n * @package discovery\n */\n\nconst { Mixin } = Cicada;\nconst { Criteria } = Cicada.Data;\n\n// eslint-disable-next-line sw-deprecation-rules/private-feature-declarations\nexport default {\n    template,\n\n    compatConfig: Cicada.compatConfig,\n\n    inject: [\n        'repositoryFactory',\n        'acl',\n    ],\n\n    mixins: [\n        Mixin.getByName('listing'),\n        Mixin.getByName('placeholder'),\n        Mixin.getByName('notification'),\n    ],\n\n    data() {\n        return {\n            isLoading: false,\n            sortBy: 'name',\n            limit: 10,\n            customerGroups: null,\n            sortDirection: 'ASC',\n            searchConfigEntity: 'customer_group',\n        };\n    },\n\n    metaInfo() {\n        return {\n            title: this.$createTitle(),\n        };\n    },\n\n    computed: {\n        columns() {\n            return this.getColumns();\n        },\n\n        customerGroupRepository() {\n            return this.repositoryFactory.create('customer_group');\n        },\n\n        allCustomerGroupsCriteria() {\n            const criteria = new Criteria(this.page, this.limit);\n\n            criteria.setTerm(this.term);\n            criteria.addSorting(Criteria.sort(this.sortBy, this.sortDirection));\n\n            return criteria;\n        },\n    },\n\n    created() {\n        this.createdComponent();\n    },\n\n    methods: {\n        createdComponent() {\n            this.getList();\n        },\n\n        async getList() {\n            this.isLoading = true;\n\n            const criteria = await this.addQueryScores(this.term, this.allCustomerGroupsCriteria);\n            if (!this.entitySearchable) {\n                this.isLoading = false;\n                this.total = 0;\n\n                return;\n            }\n\n            if (this.freshSearchTerm) {\n                criteria.resetSorting();\n            }\n\n            this.customerGroupRepository.search(criteria).then((searchResult) => {\n                this.total = searchResult.total;\n                this.customerGroups = searchResult;\n                this.isLoading = false;\n            });\n        },\n\n        getColumns() {\n            return [\n                {\n                    property: 'name',\n                    label: 'sw-settings-customer-group.list.columnName',\n                    inlineEdit: 'string',\n                    routerLink: 'sw.settings.customer.group.detail',\n                    primary: true,\n                },\n                {\n                    property: 'displayGross',\n                    label: 'sw-settings-customer-group.list.columnDisplayGross',\n                    inlineEdit: 'boolean',\n                },\n            ];\n        },\n\n        customerGroupCriteriaWithFilter(idsOfSelectedCustomerGroups) {\n            const criteria = new Criteria(1, this.limit);\n\n            criteria.addFilter(Criteria.equalsAny('id', idsOfSelectedCustomerGroups));\n\n            return criteria;\n        },\n\n        createErrorNotification() {\n            return this.createNotificationError({\n                message: this.$tc('sw-settings-customer-group.notification.errorMessageCannotDeleteCustomerGroup'),\n            });\n        },\n\n        customerGroupCanBeDeleted(customerGroup) {\n            const hasNoCustomers = customerGroup.customers.length === 0;\n            const hasNoSalesChannel = customerGroup.salesChannels.length === 0;\n\n            return hasNoCustomers && hasNoSalesChannel;\n        },\n\n        deleteCustomerGroup(customerGroup) {\n            this.$refs.listing.deleteId = null;\n\n            if (!this.customerGroupCanBeDeleted(customerGroup)) {\n                this.createErrorNotification();\n            }\n\n            this.customerGroupRepository.delete(customerGroup.id).then(() => {\n                this.$refs.listing.resetSelection();\n                this.$refs.listing.doSearch();\n            });\n        },\n\n        deleteCustomerGroups() {\n            const selectedCustomerGroups = Object.values(this.$refs.listing.selection).map((currentProxy) => {\n                return currentProxy.id;\n            });\n\n            this.customerGroupRepository\n                .search(this.customerGroupCriteriaWithFilter(selectedCustomerGroups))\n                .then((response) => {\n                    const hasError = response.reduce((accumulator, customerGroup) => {\n                        if (accumulator) {\n                            return accumulator;\n                        }\n\n                        accumulator = !this.customerGroupCanBeDeleted(customerGroup);\n                        return accumulator;\n                    }, false);\n\n                    if (hasError) {\n                        this.createErrorNotification();\n                    }\n\n                    this.$refs.listing.deleteItems();\n                });\n        },\n\n        onContextMenuDelete(customerGroup) {\n            this.$refs.listing.deleteId = customerGroup.id;\n        },\n    },\n};\n"],"names":["template","Mixin","Criteria","index","criteria","searchResult","idsOfSelectedCustomerGroups","customerGroup","hasNoCustomers","hasNoSalesChannel","selectedCustomerGroups","currentProxy","response","accumulator"],"mappings":"AAAA,MAAeA,EAAA,s3ICMT,CAAE,MAAAC,CAAO,EAAG,OACZ,CAAE,SAAAC,CAAQ,EAAK,OAAO,KAGbC,EAAA,CACX,SAAAH,EAEA,aAAc,OAAO,aAErB,OAAQ,CACJ,oBACA,KACH,EAED,OAAQ,CACJC,EAAM,UAAU,SAAS,EACzBA,EAAM,UAAU,aAAa,EAC7BA,EAAM,UAAU,cAAc,CACjC,EAED,MAAO,CACH,MAAO,CACH,UAAW,GACX,OAAQ,OACR,MAAO,GACP,eAAgB,KAChB,cAAe,MACf,mBAAoB,gBAChC,CACK,EAED,UAAW,CACP,MAAO,CACH,MAAO,KAAK,aAAc,CACtC,CACK,EAED,SAAU,CACN,SAAU,CACN,OAAO,KAAK,YACf,EAED,yBAA0B,CACtB,OAAO,KAAK,kBAAkB,OAAO,gBAAgB,CACxD,EAED,2BAA4B,CACxB,MAAMG,EAAW,IAAIF,EAAS,KAAK,KAAM,KAAK,KAAK,EAEnD,OAAAE,EAAS,QAAQ,KAAK,IAAI,EAC1BA,EAAS,WAAWF,EAAS,KAAK,KAAK,OAAQ,KAAK,aAAa,CAAC,EAE3DE,CACV,CACJ,EAED,SAAU,CACN,KAAK,iBAAgB,CACxB,EAED,QAAS,CACL,kBAAmB,CACf,KAAK,QAAO,CACf,EAED,MAAM,SAAU,CACZ,KAAK,UAAY,GAEjB,MAAMA,EAAW,MAAM,KAAK,eAAe,KAAK,KAAM,KAAK,yBAAyB,EACpF,GAAI,CAAC,KAAK,iBAAkB,CACxB,KAAK,UAAY,GACjB,KAAK,MAAQ,EAEb,MACH,CAEG,KAAK,iBACLA,EAAS,aAAY,EAGzB,KAAK,wBAAwB,OAAOA,CAAQ,EAAE,KAAMC,GAAiB,CACjE,KAAK,MAAQA,EAAa,MAC1B,KAAK,eAAiBA,EACtB,KAAK,UAAY,EACjC,CAAa,CACJ,EAED,YAAa,CACT,MAAO,CACH,CACI,SAAU,OACV,MAAO,6CACP,WAAY,SACZ,WAAY,oCACZ,QAAS,EACZ,EACD,CACI,SAAU,eACV,MAAO,qDACP,WAAY,SACf,CACjB,CACS,EAED,gCAAgCC,EAA6B,CACzD,MAAMF,EAAW,IAAIF,EAAS,EAAG,KAAK,KAAK,EAE3C,OAAAE,EAAS,UAAUF,EAAS,UAAU,KAAMI,CAA2B,CAAC,EAEjEF,CACV,EAED,yBAA0B,CACtB,OAAO,KAAK,wBAAwB,CAChC,QAAS,KAAK,IAAI,+EAA+E,CACjH,CAAa,CACJ,EAED,0BAA0BG,EAAe,CACrC,MAAMC,EAAiBD,EAAc,UAAU,SAAW,EACpDE,EAAoBF,EAAc,cAAc,SAAW,EAEjE,OAAOC,GAAkBC,CAC5B,EAED,oBAAoBF,EAAe,CAC/B,KAAK,MAAM,QAAQ,SAAW,KAEzB,KAAK,0BAA0BA,CAAa,GAC7C,KAAK,wBAAuB,EAGhC,KAAK,wBAAwB,OAAOA,EAAc,EAAE,EAAE,KAAK,IAAM,CAC7D,KAAK,MAAM,QAAQ,iBACnB,KAAK,MAAM,QAAQ,UACnC,CAAa,CACJ,EAED,sBAAuB,CACnB,MAAMG,EAAyB,OAAO,OAAO,KAAK,MAAM,QAAQ,SAAS,EAAE,IAAKC,GACrEA,EAAa,EACvB,EAED,KAAK,wBACA,OAAO,KAAK,gCAAgCD,CAAsB,CAAC,EACnE,KAAME,GAAa,CACCA,EAAS,OAAO,CAACC,EAAaN,IACvCM,IAIJA,EAAc,CAAC,KAAK,0BAA0BN,CAAa,EACpDM,GACR,EAAK,GAGJ,KAAK,wBAAuB,EAGhC,KAAK,MAAM,QAAQ,aACvC,CAAiB,CACR,EAED,oBAAoBN,EAAe,CAC/B,KAAK,MAAM,QAAQ,SAAWA,EAAc,EAC/C,CACJ,CACL"}