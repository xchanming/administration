{"version":3,"file":"index-Bd5QvQ5k.js","sources":["../../../app/administration/src/app/component/tree/sw-tree/sw-tree.html.twig","../../../app/administration/src/app/component/tree/sw-tree/index.js"],"sourcesContent":["<!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n{% block sw_tree %}\n<div\n    class=\"sw-tree\"\n    role=\"tree\"\n    :aria-label=\"$tc(`${translationContext}.general.treeHeadline`)\"\n>\n    <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n    {% block sw_tree_search %}\n    <slot name=\"search\">\n        <div\n            v-if=\"searchable\"\n            class=\"sw-tree__search\"\n        >\n            <sw-text-field\n                v-model:value=\"currentTreeSearch\"\n                name=\"treeSearch\"\n                :placeholder=\"$tc('sw-tree.general.placeholderSearch')\"\n                size=\"small\"\n                @update:value=\"searchItems\"\n            >\n                <template #prefix>\n                    <sw-icon name=\"regular-search\" />\n                </template>\n            </sw-text-field>\n        </div>\n    </slot>\n    {% endblock %}\n\n    <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n    {% block sw_tree_actions_headline %}\n    <slot name=\"headline\">\n        <div\n            v-if=\"checkedElementsCount > 0\"\n            class=\"sw-tree-actions__headline\"\n        >\n            <span> {{ $tc(`${translationContext}.general.treeHeadSelected`, 0, { count: checkedElementsCount }) }}:</span>\n            <sw-button\n                class=\"sw-tree-actions__delete_categories\"\n                :disabled=\"!allowDeleteCategories || undefined\"\n                variant=\"danger\"\n                size=\"small\"\n                @click=\"onDeleteElements(null)\"\n            >\n                {{ $tc('global.default.delete') }}\n            </sw-button>\n        </div>\n\n        <div\n            v-else\n            class=\"sw-tree-actions__headline\"\n        >\n            <span>{{ $tc(`${translationContext}.general.treeHeadline`) }}</span>\n        </div>\n    </slot>\n    {% endblock %}\n\n    <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n    {% block sw_tree_content %}\n    <div class=\"sw-tree__content\">\n        <div class=\"tree-items\">\n\n            <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n            {% block sw_tree_items %}\n            <sw-tree-input-field\n                v-if=\"hasNoItems && allowCreateCategories\"\n                :disabled=\"disableContextMenu\"\n                @new-item-create=\"onCreateNewItem\"\n            />\n            <slot\n                v-else\n                name=\"items\"\n                :tree-items=\"treeItems\"\n                :dragged-item=\"draggedItem\"\n                :new-element-id=\"newElementId\"\n                :check-item=\"checkItem\"\n                :translation-context=\"translationContext\"\n                :on-change-route=\"onChangeRoute\"\n                :sortable=\"sortable\"\n                :disable-context-menu=\"disableContextMenu\"\n                :selected-items-path-ids=\"selectedItemsPathIds\"\n                :checked-item-ids=\"checkedItemIds\"\n            >\n                <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n                {% block sw_tree_slot_items %}\n                <sw-tree-item\n                    v-for=\"item in treeItems\"\n                    :key=\"item.id\"\n                    :item=\"item\"\n                    :translation-context=\"translationContext\"\n                    :dragged-item=\"draggedItem\"\n                    :active-parent-ids=\"selectedItemsPathIds\"\n                    :active-item-ids=\"checkedItemIds\"\n                    @check-item=\"checkItem\"\n                />\n                {% endblock %}\n\n            </slot>\n            {% endblock %}\n\n        </div>\n    </div>\n    {% endblock %}\n\n    <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n    {% block sw_tree_delete_modal %}\n    <sw-modal\n        v-if=\"showDeleteModal\"\n        :title=\"$tc('global.default.warning')\"\n        variant=\"small\"\n        @modal-close=\"onCloseDeleteModal\"\n    >\n        <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n        {% block sw_tree_delete_modal_confirm_delete_text %}\n        <div v-if=\"toDeleteItem\">\n            <p\n                v-if=\"toDeleteItem.childCount > 0\"\n                class=\"sw_tree__confirm-delete-text\"\n            >\n                {{ $tc(`${translationContext}.modal.textDeleteConfirm`, 0, { name: toDeleteItem.data.name || toDeleteItem.data.translated.name }) }}<br>\n                <b>{{ $tc(`${translationContext}.modal.textDeleteChildrenConfirm`) }}</b>\n            </p>\n            <p\n                v-else\n                class=\"sw_tree__confirm-delete-text\"\n            >\n                {{ $tc(`${translationContext}.modal.textDeleteConfirm`, 0, { name: toDeleteItem.data.name || toDeleteItem.data.translated.name }) }}\n            </p>\n        </div>\n        <div v-else>\n            <p\n                v-if=\"checkedElementsChildCount > 0\"\n                class=\"sw_tree__confirm-delete-text\"\n            >\n                {{ $tc(`${translationContext}.modal.textDeleteMultipleConfirm`, 0, { count: checkedElementsCount }) }}<br>\n                <b>{{ $tc(`${translationContext}.modal.textDeleteChildrenConfirm`) }}</b>\n            </p>\n            <p\n                v-else\n                class=\"sw_tree__confirm-delete-text\"\n            >\n                {{ $tc(`${translationContext}.modal.textDeleteMultipleConfirm`, 0, { count: checkedElementsCount }) }}\n            </p>\n        </div>\n        {% endblock %}\n\n        <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n        {% block sw_tree_delete_modal_footer %}\n        <template #modal-footer>\n            <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n            {% block sw_tree_delete_modal_cancel %}\n            <sw-button\n                size=\"small\"\n                @click=\"onCloseDeleteModal\"\n            >\n                {{ $tc('global.default.cancel') }}\n            </sw-button>\n            {% endblock %}\n\n            <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n            {% block sw_tree_delete_modal_confirm %}\n            <sw-button\n                variant=\"danger\"\n                size=\"small\"\n                @click=\"onConfirmDelete()\"\n            >\n                {{ $tc('global.default.delete') }}\n            </sw-button>\n            {% endblock %}\n        </template>\n        {% endblock %}\n    </sw-modal>\n    {% endblock %}\n</div>\n{% endblock %}\n","import template from './sw-tree.html.twig';\nimport './sw-tree.scss';\n\nconst { Component } = Cicada;\nconst { debounce, sort } = Cicada.Utils;\n\n/**\n * @package admin\n *\n * @private\n * @status ready\n * @example-type static\n * @description you need to declare the functions createNewElement, getChildrenFromParent in the parent.\n * @component-example\n * <sw-tree\n *     :searchable=\"false\"\n *     :disableContextMenu=\"() => { return true; }\"\n *     :onChangeRoute=\"() => { return false; }\"\n *     :sortable=\"true\"\n *     initiallyExpandedRoot\n *     :items=\"[\n *         { id: 1, name: 'Example #1', childCount: 4, parentId: null, afterId: null, isDeleted: false },\n *             { id: 6, name: 'Example #6', childCount: 0, parentId: 1, afterId: null },\n *             { id: 7, name: 'Example #7', childCount: 0, parentId: 1, afterId: 6 },\n *             { id: 8, name: 'Example #8', childCount: 0, parentId: 1, afterId: 7 },\n *             { id: 9, name: 'Example #9', childCount: 0, parentId: 1, afterId: 8 },\n *         { id: 2, name: 'Example #2', childCount: 0, parentId: null, afterId: 1 },\n *         { id: 3, name: 'Example #3', childCount: 0, parentId: null, afterId: 2 },\n *         { id: 4, name: 'Example #4', childCount: 0, parentId: null, afterId: 3 },\n *         { id: 5, name: 'Example #5', childCount: 0, parentId: null, afterId: 4 },\n *     ]\">\n *     <template #items=\"{ treeItems, sortable, draggedItem, disableContextMenu, onChangeRoute }\">\n *         <sw-tree-item\n *             v-for=\"(item, index) in treeItems\"\n *             :key=\"item.id\"\n *             :item=\"item\"\n *             :disableContextMenu=\"disableContextMenu\"\n *             :onChangeRoute=\"onChangeRoute\"\n *             :sortable=\"true\">\n *         </sw-tree-item>\n *     </template>\n * </sw-tree>\n */\n// eslint-disable-next-line sw-deprecation-rules/private-feature-declarations\nComponent.register('sw-tree', {\n    template,\n\n    inject: ['feature'],\n\n    compatConfig: Cicada.compatConfig,\n\n    provide() {\n        if (this.isCompatEnabled('INSTANCE_CHILDREN')) {\n            return {\n                getItems: this.getItems,\n            };\n        }\n\n        return {\n            getItems: this.getItems,\n            startDrag: this.startDrag,\n            endDrag: this.endDrag,\n            moveDrag: this.moveDrag,\n            addSubElement: this.addSubElement,\n            addElement: this.addElement,\n            duplicateElement: this.duplicateElement,\n            onFinishNameingElement: this.onFinishNameingElement,\n            onDeleteElements: this.onDeleteElements,\n            abortCreateElement: this.abortCreateElement,\n        };\n    },\n\n    emits: [\n        'checked-elements-count',\n        'get-tree-items',\n        'search-tree-items',\n        'drag-start',\n        'drag-end',\n        'delete-element',\n        'editing-end',\n        'batch-delete',\n        'save-tree-items',\n    ],\n\n    props: {\n        items: {\n            type: Array,\n            required: true,\n        },\n\n        rootParentId: {\n            type: String,\n            required: false,\n            default: () => {\n                return null;\n            },\n        },\n\n        parentProperty: {\n            type: String,\n            required: false,\n            default: () => {\n                return 'parentId';\n            },\n        },\n\n        afterIdProperty: {\n            type: String,\n            required: false,\n            default: () => {\n                return 'afterId';\n            },\n        },\n\n        childCountProperty: {\n            type: String,\n            required: false,\n            default: () => {\n                return 'childCount';\n            },\n        },\n\n        searchable: {\n            type: Boolean,\n            required: false,\n            // eslint-disable-next-line vue/no-boolean-default\n            default: () => {\n                return true;\n            },\n        },\n\n        activeTreeItemId: {\n            type: String,\n            required: false,\n            default: () => {\n                return '';\n            },\n        },\n\n        routeParamsActiveElementId: {\n            type: String,\n            required: false,\n            default: () => {\n                return 'id';\n            },\n        },\n\n        translationContext: {\n            type: String,\n            required: false,\n            default: () => {\n                return 'sw-tree';\n            },\n        },\n\n        onChangeRoute: {\n            type: Function,\n            required: false,\n            default: () => {\n                return null;\n            },\n        },\n\n        disableContextMenu: {\n            type: Boolean,\n            required: false,\n            // eslint-disable-next-line vue/no-boolean-default\n            default: () => {\n                return false;\n            },\n        },\n\n        bindItemsToFolder: {\n            type: Boolean,\n            required: false,\n            // eslint-disable-next-line vue/no-boolean-default\n            default: () => {\n                return false;\n            },\n        },\n\n        sortable: {\n            type: Boolean,\n            required: false,\n            // eslint-disable-next-line vue/no-boolean-default\n            default: () => {\n                return true;\n            },\n        },\n\n        checkItemsInitial: {\n            type: Boolean,\n            required: false,\n            // eslint-disable-next-line vue/no-boolean-default\n            default: () => {\n                return false;\n            },\n        },\n\n        allowDeleteCategories: {\n            type: Boolean,\n            required: false,\n            // eslint-disable-next-line vue/no-boolean-default\n            default: () => {\n                return true;\n            },\n        },\n\n        allowCreateCategories: {\n            type: Boolean,\n            required: false,\n            // eslint-disable-next-line vue/no-boolean-default\n            default: () => {\n                return true;\n            },\n        },\n\n        initiallyExpandedRoot: {\n            type: Boolean,\n            required: false,\n            // eslint-disable-next-line vue/no-boolean-default\n            default: () => {\n                return false;\n            },\n        },\n\n        ariaLabel: {\n            type: String,\n            required: false,\n            default: null,\n        },\n    },\n\n    data() {\n        return {\n            treeItems: [],\n            draggedItem: null,\n            currentTreeSearch: null,\n            newElementId: null,\n            contextItem: null,\n            currentEditMode: null,\n            addElementPosition: null,\n            // eslint-disable-next-line vue/no-reserved-keys\n            _eventFromEdit: null,\n            createdItem: null,\n            checkedElements: {},\n            checkedElementsCount: 0,\n            showDeleteModal: false,\n            toDeleteItem: null,\n            checkedElementsChildCount: 0,\n        };\n    },\n\n    computed: {\n        activeElementId() {\n            return this.$route.params[this.routeParamsActiveElementId] || null;\n        },\n\n        isSortable() {\n            if (this.currentTreeSearch !== null) {\n                return false;\n            }\n\n            return this.sortable;\n        },\n\n        isSearched() {\n            return this.currentTreeSearch !== null && this.currentTreeSearch.length > 0;\n        },\n\n        hasActionSlot() {\n            return this.$slots && this.$slots.actions;\n        },\n\n        hasNoItems() {\n            if (this.items.length === 1 && this.items[0] && this.items[0].isDeleted) {\n                return true;\n            }\n            return this.items.length < 1;\n        },\n\n        selectedItemsPathIds() {\n            return Object.keys(this.checkedElements).reduce((acc, itemId) => {\n                const item = this.findById(itemId);\n\n                // get each parent id\n                const pathIds = item?.data?.path?.split('|').filter((pathId) => pathId.length > 0) ?? '';\n\n                // add parent id to accumulator\n                return [\n                    ...acc,\n                    ...pathIds,\n                ];\n            }, []);\n        },\n\n        checkedItemIds() {\n            return Object.keys(this.checkedElements);\n        },\n    },\n\n    watch: {\n        items: {\n            immediate: true,\n            handler() {\n                this.treeItems = this.getTreeItems(this.isSearched ? null : this.rootParentId);\n                this._eventFromEdit = null;\n            },\n            deep: true,\n        },\n\n        activeTreeItemId(val) {\n            if (val && this.activeElementId) {\n                this.openTreeById();\n            }\n        },\n    },\n\n    created() {\n        this.createdComponent();\n    },\n\n    mounted() {\n        this.mountedComponent();\n    },\n\n    unmounted() {\n        this.$emit('checked-elements-count', 0);\n    },\n\n    beforeUnmount() {\n        this.beforeUnmountedComponent();\n    },\n\n    methods: {\n        createdComponent() {\n            if (this.activeTreeItemId && this.activeElementId) {\n                this.openTreeById();\n            }\n            this.$emit('checked-elements-count', this.checkedElementsCount);\n        },\n\n        mountedComponent() {\n            // Focus handling\n            this.$el.addEventListener('focusin', this.handleFocusIn);\n            this.$el.addEventListener('keydown', this.handleKeyDown);\n        },\n\n        beforeUnmountedComponent() {\n            this.$el.removeEventListener('focusin', this.handleFocusIn);\n            this.$el.removeEventListener('keydown', this.handleKeyDown);\n        },\n\n        handleFocusIn(event) {\n            // Check if focus in already in the tree on any tree item\n            if (event.target.classList.contains('sw-tree-item')) {\n                // If focus is already on a tree item, do nothing\n                return;\n            }\n\n            // Check if target is a input element\n            if (event.target.tagName === 'INPUT') {\n                // If focus is on an input element, do nothing\n                return;\n            }\n\n            /* Check recursively if any tree item is active, if yes, focus on it.\n             * If no tree item is active, focus on the first tree item\n             */\n            const activeTreeItem = this.$el.querySelector('.sw-tree-item[aria-current=\"page\"]');\n\n            if (activeTreeItem) {\n                activeTreeItem.focus();\n            } else {\n                const firstTreeItem = this.$el.querySelector('.sw-tree-item');\n\n                if (firstTreeItem) {\n                    firstTreeItem.focus();\n                }\n            }\n        },\n\n        handleKeyDown(event) {\n            switch (event.key) {\n                case 'Tab': {\n                    // Tab out of the tree to the next focusable element\n\n                    // Add inert attribute to the tree\n                    this.$el.setAttribute('inert', '');\n\n                    // Remove inert attribute from the tree after normal tabbing behavior is done\n                    setTimeout(() => {\n                        this.$el.removeAttribute('inert');\n                    }, 0);\n\n                    break;\n                }\n\n                case 'ArrowDown': {\n                    const currentFocusedTreeItem = this.$el.querySelector('.sw-tree-item:focus');\n\n                    if (!currentFocusedTreeItem) {\n                        break;\n                    }\n\n                    // Check if current focused tree is open\n                    const isTreeItemOpen = currentFocusedTreeItem.getAttribute('aria-expanded') === 'true';\n\n                    // If tree item is open, focus on the first child tree item\n                    if (isTreeItemOpen) {\n                        const firstChildTreeItem = currentFocusedTreeItem.querySelector('.sw-tree-item');\n\n                        if (firstChildTreeItem) {\n                            firstChildTreeItem.focus();\n                            break;\n                        }\n                    }\n\n                    const nextTreeItem = currentFocusedTreeItem.nextElementSibling;\n\n                    if (nextTreeItem) {\n                        nextTreeItem.focus();\n                        break;\n                    }\n\n                    // If no next tree item is found, look at the parent tree item\n                    const parentTreeItem = currentFocusedTreeItem.parentElement.closest('.sw-tree-item');\n                    // Get the next sibling of the parent tree item\n                    const nextParentTreeItem = parentTreeItem.nextElementSibling;\n\n                    if (nextParentTreeItem) {\n                        nextParentTreeItem.focus();\n                        break;\n                    }\n\n                    break;\n                }\n\n                case 'ArrowUp': {\n                    const currentFocusedTreeItem = document.activeElement;\n\n                    // Check if current focused tree item is a tree item\n                    if (!currentFocusedTreeItem.classList.contains('sw-tree-item')) {\n                        break;\n                    }\n\n                    // Helper function to find the last visible child in an expanded tree\n                    const getLastVisibleChild = (treeItem) => {\n                        const isExpanded = treeItem?.getAttribute('aria-expanded') === 'true';\n                        if (isExpanded) {\n                            const children = treeItem.querySelectorAll('.sw-tree-item');\n                            return children[children.length - 1]; // Last child in expanded tree\n                        }\n                        return null;\n                    };\n\n                    // Step 1: Try to focus on the previous sibling\n                    let previousTreeItem = currentFocusedTreeItem.previousElementSibling;\n                    if (previousTreeItem) {\n                        // If previous sibling is expanded, go to its last child\n                        const lastChild = getLastVisibleChild(previousTreeItem);\n                        if (lastChild) {\n                            lastChild.focus();\n                        } else {\n                            previousTreeItem.focus();\n                        }\n                        break;\n                    }\n\n                    // Step 2: No previous sibling, try to go to the parent\n                    let parentTreeItem = currentFocusedTreeItem.parentElement.closest('.sw-tree-item');\n                    while (parentTreeItem) {\n                        if (parentTreeItem.previousElementSibling) {\n                            // Go to the last visible child of the parent's previous sibling\n                            previousTreeItem = parentTreeItem.previousElementSibling;\n                            const lastChild = getLastVisibleChild(previousTreeItem);\n                            if (lastChild) {\n                                lastChild.focus();\n                            } else {\n                                previousTreeItem.focus();\n                            }\n                            break;\n                        }\n                        // If no previous sibling, keep traversing up the tree\n                        parentTreeItem = parentTreeItem.parentElement.closest('.sw-tree-item');\n                    }\n\n                    // If no parent or sibling found, nothing more to focus on\n                    break;\n                }\n\n                // Space key\n                case ' ': {\n                    // Toggle the checkbox of the focused tree item\n                    const currentFocusedTreeItem = document.activeElement;\n\n                    // Check if active element is a tree item\n                    if (!currentFocusedTreeItem.classList.contains('sw-tree-item')) {\n                        break;\n                    }\n\n                    const itemId = currentFocusedTreeItem.getAttribute('data-item-id');\n\n                    if (!itemId) {\n                        break;\n                    }\n\n                    // Get tree item from the recursive this.treeItems array\n                    const treeItem = this.findById(itemId);\n\n                    if (!treeItem) {\n                        break;\n                    }\n\n                    // Toggle the tree item\n                    treeItem.checked = !treeItem.checked;\n                    this.checkItem(treeItem);\n\n                    break;\n                }\n\n                // Enter key\n                case 'Enter': {\n                    // Change route to the focused tree item\n                    const currentFocusedTreeItem = document.activeElement;\n\n                    // Check if active element is a tree item\n                    if (!currentFocusedTreeItem.classList.contains('sw-tree-item')) {\n                        break;\n                    }\n\n                    const itemId = currentFocusedTreeItem.getAttribute('data-item-id');\n\n                    if (!itemId) {\n                        break;\n                    }\n\n                    // Get tree item from the recursive this.treeItems array\n                    const treeItem = this.findById(itemId);\n\n                    if (!treeItem) {\n                        break;\n                    }\n\n                    this.onChangeRoute(treeItem);\n                    break;\n                }\n\n                case 'ArrowLeft': {\n                    /* Closing is handled by the tree item component.\n                     * This event just gets triggered when event is not handled by the tree item component.\n                     * Then we need to focus the parent tree item.\n                     */\n                    const currentFocusedTreeItem = document.activeElement;\n\n                    // Check if active element is a tree item\n                    if (!currentFocusedTreeItem.classList.contains('sw-tree-item')) {\n                        break;\n                    }\n\n                    const parentTreeItem = currentFocusedTreeItem.parentElement.closest('.sw-tree-item');\n\n                    if (parentTreeItem) {\n                        parentTreeItem.focus();\n                    }\n\n                    break;\n                }\n\n                case 'ArrowRight': {\n                    /* Opening is handled by the tree item component.\n                     * This event just gets triggered when event is not handled by the tree item component.\n                     * Then we need to focus the first child tree item.\n                     */\n                    const currentFocusedTreeItem = document.activeElement;\n\n                    // Check if active element is a tree item\n                    if (!currentFocusedTreeItem.classList.contains('sw-tree-item')) {\n                        break;\n                    }\n\n                    // Check if current focused tree is open\n                    const isTreeItemOpen = currentFocusedTreeItem.getAttribute('aria-expanded') === 'true';\n\n                    // If tree item is open, focus on the first child tree item\n                    if (!isTreeItemOpen) {\n                        break;\n                    }\n\n                    const firstChildTreeItem = currentFocusedTreeItem.querySelector('.sw-tree-item');\n\n                    if (firstChildTreeItem) {\n                        firstChildTreeItem.focus();\n                        break;\n                    }\n\n                    break;\n                }\n\n                default: {\n                    break;\n                }\n            }\n        },\n\n        getItems(parentId = this.rootParentId, searchTerm = null) {\n            this.$emit('get-tree-items', parentId, searchTerm);\n        },\n\n        searchItems: debounce(function debouncedTreeSearch() {\n            this.$emit('search-tree-items', this.currentTreeSearch);\n        }, 600),\n\n        getTreeItems(parentId) {\n            const treeItems = [];\n            this.items.forEach((item) => {\n                if (item.isDeleted) {\n                    return;\n                }\n\n                if (parentId === null && typeof this.items.find((i) => i.id === item.parentId) !== 'undefined') {\n                    return;\n                }\n\n                if (parentId !== null && item[this.parentProperty] !== parentId) {\n                    return;\n                }\n\n                const hasChildCountProperty = item.hasOwnProperty(this.childCountProperty);\n                const childCount = hasChildCountProperty ? item[this.childCountProperty] : 0;\n\n                const alreadyLoadedTreeItem = this.findById(item.id);\n\n                treeItems.push({\n                    data: item,\n                    id: item.id,\n                    schema: item.schema,\n                    parentId: parentId,\n                    childCount: childCount,\n                    children: this.getTreeItems(item.id),\n                    initialOpened: this.initiallyExpandedRoot && item.parentId === null,\n                    active: false,\n                    activeElementId: this.routeParamsActiveElementId,\n                    checked: alreadyLoadedTreeItem?.checked ?? !!this.checkItemsInitial,\n                    disabled: item.disabled,\n                    disabledToolTipText: item.disabledToolTipText,\n                    [this.afterIdProperty]: item[this.afterIdProperty],\n                });\n            });\n            return sort.afterSort(treeItems, this.afterIdProperty);\n        },\n\n        updateSorting(items) {\n            let lastId = null;\n\n            items.forEach((item) => {\n                item.data[this.afterIdProperty] = lastId;\n                lastId = item.id;\n            });\n\n            return items;\n        },\n\n        startDrag(draggedComponent) {\n            draggedComponent.opened = false;\n            this.draggedItem = draggedComponent.item;\n            this.$emit('drag-start');\n        },\n\n        endDrag() {\n            if (!this.droppedItem) {\n                this.draggedItem = null;\n                return;\n            }\n\n            const oldParentId = this.draggedItem.data.parentId;\n            const newParentId = this.droppedItem.data.parentId;\n\n            // item moved into other tree, update count\n            if (oldParentId !== newParentId) {\n                if (oldParentId !== null) {\n                    const draggedParent = this.findById(oldParentId);\n                    if (draggedParent) {\n                        draggedParent.childCount -= 1;\n                        draggedParent.data.childCount -= 1;\n                    }\n                }\n\n                if (newParentId !== null) {\n                    const droppedParent = this.findById(newParentId);\n                    droppedParent.childCount += 1;\n                    droppedParent.data.childCount += 1;\n                }\n\n                this.draggedItem.data.parentId = this.droppedItem.data.parentId;\n            }\n\n            const tree = this.findTreeByParentId(oldParentId);\n            this.updateSorting(tree);\n\n            if (oldParentId !== this.droppedItem.parentId) {\n                const dropTree = this.findTreeByParentId(this.droppedItem.parentId);\n                this.updateSorting(dropTree);\n            }\n\n            // bundle drag event data for consumer\n            const eventData = {\n                draggedItem: this.draggedItem,\n                droppedItem: this.droppedItem,\n                oldParentId,\n                newParentId,\n            };\n\n            // reset event items\n            this.draggedItem = null;\n            this.droppedItem = null;\n\n            this.isLoading = true;\n\n            this.$emit('drag-end', eventData);\n        },\n\n        moveDrag(draggedComponent, droppedComponent) {\n            if (!draggedComponent || !droppedComponent) {\n                return;\n            }\n\n            if (draggedComponent.id === droppedComponent.id) {\n                return;\n            }\n\n            const sourceTree = this.findTreeByParentId(draggedComponent.parentId);\n            const targetTree = this.findTreeByParentId(droppedComponent.parentId);\n\n            const dragItemIdx = sourceTree.findIndex((i) => i.id === draggedComponent.id);\n            const dropItemIdx = targetTree.findIndex((i) => i.id === droppedComponent.id);\n\n            if (dragItemIdx < 0 || dropItemIdx < 0) {\n                return;\n            }\n\n            droppedComponent = targetTree[dropItemIdx];\n\n            if (!this.bindItemsToFolder || draggedComponent.parentId === droppedComponent.parentId) {\n                sourceTree.splice(dragItemIdx, 1);\n                targetTree.splice(dropItemIdx, 0, draggedComponent);\n\n                if (draggedComponent.parentId !== droppedComponent.parentId) {\n                    draggedComponent.parentId = droppedComponent.parentId;\n                }\n            }\n\n            this.droppedItem = droppedComponent;\n        },\n\n        openTreeById(id = this.activeElementId) {\n            const item = this.findById(id);\n\n            if (item === null) {\n                return;\n            }\n\n            if (this.activeElementId === item.id) {\n                item.active = true;\n            } else {\n                item.initialOpened = true;\n            }\n            const activeElementParentId = item.parentId;\n\n            if (item.parentId !== null) {\n                this.openTreeById(activeElementParentId);\n            }\n        },\n\n        findTreeByParentId(parentId) {\n            const queue = [{ id: null, children: this.treeItems }];\n\n            while (queue.length > 0) {\n                const next = queue.shift();\n\n                if (next.id === parentId) {\n                    return next.children;\n                }\n\n                if (next.children.length) {\n                    queue.push(...next.children);\n                }\n            }\n\n            return null;\n        },\n\n        findById(id) {\n            const queue = [{ id: null, children: this.treeItems }];\n\n            while (queue.length > 0) {\n                const next = queue.shift();\n\n                if (next.id === id) {\n                    return next;\n                }\n\n                if (next.children.length) {\n                    queue.push(...next.children);\n                }\n            }\n\n            return null;\n        },\n\n        onCreateNewItem(name) {\n            if (!name.length || name.length <= 0) {\n                return;\n            }\n\n            let newElem = null;\n            newElem = this.$parent.$parent.createNewElement(null, null, name);\n\n            this.saveItems();\n\n            const item = this.getNewTreeItem(newElem);\n\n            this.addElement(item, 'after');\n        },\n\n        addSubElement(contextItem) {\n            if (!contextItem || !contextItem.data || !contextItem.data.id) {\n                return;\n            }\n\n            if (this.contextItem === null) {\n                this.contextItem = contextItem;\n            }\n            this.currentEditMode = this.addSubElement;\n\n            this.$parent.$parent.getChildrenFromParent(contextItem.id).then(() => {\n                const parentElement = contextItem;\n                const newElem = this.$parent.$parent.createNewElement(contextItem, contextItem.id);\n                const newTreeItem = this.getNewTreeItem(newElem);\n\n                parentElement.childCount += 1;\n                parentElement.data.childCount += 1;\n                this.newElementId = newElem.id;\n                this.createdItem = newTreeItem;\n            });\n        },\n\n        duplicateElement(contextItem) {\n            this.$parent.$parent.duplicateElement(contextItem);\n        },\n\n        addElement(contextItem, pos) {\n            let newElem = null;\n            newElem = this.$parent.$parent.createNewElement(contextItem);\n\n            const newTreeItem = this.getNewTreeItem(newElem);\n\n            if (this.contextItem === null) {\n                this.contextItem = contextItem;\n            }\n            if (this.addElementPosition === null) {\n                this.addElementPosition = pos;\n            }\n\n            if (!contextItem.hasOwnProperty('parentId')) {\n                contextItem.parentId = null;\n            }\n\n            this.currentEditMode = this.addElement;\n\n            const targetTree = this.findTreeByParentId(contextItem.parentId);\n\n            const newItemIdx = this.treeItems.findIndex((i) => i.id === newTreeItem.id);\n            const contextItemIdx = targetTree.findIndex((i) => i.id === contextItem.id);\n\n            if (pos === 'before') {\n                targetTree.splice(contextItemIdx, 1, newTreeItem, contextItem);\n            } else {\n                this.contextItem = newTreeItem;\n                targetTree.splice(contextItemIdx, 1, contextItem, newTreeItem);\n            }\n\n            this.treeItems.splice(newItemIdx, 1);\n            this.updateSorting(targetTree);\n            this.newElementId = newElem.id;\n            this.createdItem = newTreeItem;\n        },\n\n        getNewTreeItem(elem) {\n            const hasChildCountProperty = elem.hasOwnProperty(this.childCountProperty);\n            const childCount = hasChildCountProperty ? elem[this.childCountProperty] : 0;\n\n            const hasParentProperty = elem.hasOwnProperty('parentId');\n            const parentId = hasParentProperty ? elem.parentId : null;\n\n            return {\n                data: elem,\n                id: elem.id,\n                parentId: parentId,\n                childCount: childCount,\n                children: 0,\n                initialOpened: false,\n                active: false,\n            };\n        },\n\n        deleteElement(item) {\n            const targetTree = this.findTreeByParentId(item.parentId);\n            const deletedItemIdx = targetTree.findIndex((i) => i.id === item.id);\n            if (item.children.length > 0) {\n                item.children.forEach((child) => {\n                    child.data.isDeleted = true;\n                });\n            }\n            targetTree.splice(deletedItemIdx, 1);\n            this.updateSorting(targetTree);\n            this.$emit('delete-element', item);\n            this.saveItems();\n        },\n\n        abortCreateElement(item) {\n            if (this._eventFromEdit) {\n                this._eventFromEdit = null;\n                return;\n            }\n\n            if (this.currentEditMode !== null) {\n                this.deleteElement(item);\n\n                const parent = this.findById(item.parentId);\n                if (parent.id === item.parentId && parent.data) {\n                    parent.childCount -= 1;\n                    parent.data.childCount -= 1;\n                }\n            }\n\n            this.contextItem = null;\n            this.newElementId = null;\n            this.currentEditMode = null;\n            this.addElementPosition = null;\n            this.$emit('editing-end', { parentId: item.parentId });\n        },\n\n        onFinishNameingElement(draft, event) {\n            if (this.createdItem) {\n                this.createdItem.data.save().then(() => {\n                    this.createdItem = null;\n                    this.saveItems();\n                    if (this.currentEditMode !== null && this.contextItem) {\n                        this.currentEditMode(this.contextItem, this.addElementPosition);\n                    }\n                });\n            }\n            this._eventFromEdit = event;\n            this.newElementId = null;\n        },\n\n        deleteSelectedElements() {\n            if (this.checkedElements.length <= 0) {\n                return;\n            }\n\n            const batchDeleteIsFunction = this.isCompatEnabled('INSTANCE_LISTENERS')\n                ? typeof this.$listeners['batch-delete'] === 'function'\n                : typeof this.$attrs.onBatchDelete === 'function';\n\n            if (batchDeleteIsFunction) {\n                this.$emit('batch-delete', this.checkedElements);\n            } else {\n                Object.values(this.checkedElements).forEach((itemId) => {\n                    const item = this.findById(itemId);\n                    if (item) {\n                        this.deleteElement(item);\n                    }\n                });\n            }\n\n            this.checkedElements = {};\n            this.checkedElementsCount = 0;\n            this.checkedElementsChildCount = 0;\n            this.$emit('checked-elements-count', this.checkedElementsCount);\n        },\n\n        checkItem(item) {\n            if (item.checked) {\n                if (item.childCount > 0) {\n                    this.checkedElementsChildCount += 1;\n                }\n                if (this.isCompatEnabled('INSTANCE_SET')) {\n                    this.$set(this.checkedElements, item.id, item.id);\n                } else {\n                    this.checkedElements[item.id] = item.id;\n                }\n                this.checkedElementsCount += 1;\n            } else {\n                if (item.childCount > 0) {\n                    this.checkedElementsChildCount -= 1;\n                }\n                if (this.isCompatEnabled('INSTANCE_DELETE')) {\n                    this.$delete(this.checkedElements, item.id);\n                } else {\n                    delete this.checkedElements[item.id];\n                }\n                this.checkedElementsCount -= 1;\n            }\n\n            this.$emit('checked-elements-count', this.checkedElementsCount);\n        },\n\n        saveItems() {\n            this.$emit('save-tree-items');\n        },\n\n        onDeleteElements(item) {\n            this.toDeleteItem = item;\n            this.showDeleteModal = true;\n        },\n\n        onCloseDeleteModal() {\n            this.showDeleteModal = false;\n            this.toDeleteItem = null;\n        },\n\n        onConfirmDelete() {\n            if (this.toDeleteItem) {\n                this.deleteElement(this.toDeleteItem);\n            } else {\n                this.deleteSelectedElements();\n            }\n            this.showDeleteModal = false;\n            this.toDeleteItem = null;\n        },\n    },\n});\n"],"names":["template","Component","debounce","sort","acc","itemId","_a","_b","item","pathIds","pathId","val","event","activeTreeItem","firstTreeItem","currentFocusedTreeItem","firstChildTreeItem","nextTreeItem","nextParentTreeItem","getLastVisibleChild","treeItem","children","previousTreeItem","lastChild","parentTreeItem","parentId","searchTerm","treeItems","i","childCount","alreadyLoadedTreeItem","items","lastId","draggedComponent","oldParentId","newParentId","draggedParent","droppedParent","tree","dropTree","eventData","droppedComponent","sourceTree","targetTree","dragItemIdx","dropItemIdx","id","activeElementParentId","queue","next","name","newElem","contextItem","parentElement","newTreeItem","pos","newItemIdx","contextItemIdx","elem","deletedItemIdx","child","parent","draft"],"mappings":"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"}