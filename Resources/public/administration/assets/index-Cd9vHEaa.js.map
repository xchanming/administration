{"version":3,"file":"index-Cd9vHEaa.js","sources":["../../../app/administration/src/module/sw-settings-payment/page/sw-settings-payment-overview/sw-settings-payment-overview.html.twig","../../../app/administration/src/module/sw-settings-payment/page/sw-settings-payment-overview/index.ts"],"sourcesContent":["<!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n{% block sw_settings_payment_overview %}\n<sw-page class=\"sw-settings-payment-overview\">\n\n    <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n    {% block sw_settings_payment_overview_smart_bar_actions %}\n    <template #smart-bar-actions>\n\n        <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n        {% block sw_settings_payment_overview_smart_bar_actions_add %}\n        <sw-button\n            v-tooltip=\"{\n                message: $tc('sw-privileges.tooltip.warning'),\n                disabled: acl.can('payment.creator'),\n                showOnDisabledElements: true\n            }\"\n            class=\"sw-settings-payment-overview__button-create\"\n            :disabled=\"!acl.can('payment.creator') || undefined\"\n            :router-link=\"{ name: 'sw.settings.payment.create' }\"\n            variant=\"primary\"\n        >\n            {{ $tc('sw-settings-payment.list.buttonAddPaymentMethod') }}\n        </sw-button>\n        {% endblock %}\n\n    </template>\n    {% endblock %}\n\n    <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n    {% block sw_settings_payment_overview_smart_bar_header %}\n    <template #smart-bar-header>\n\n        <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n        {% block sw_settings_payment_overview_smart_bar_header_title %}\n        <h2 class=\"sw-settings-payment-overview__title\">\n            {{ $tc('sw-settings-payment.general.mainMenuItemGeneral') }}\n        </h2>\n        {% endblock %}\n\n    </template>\n    {% endblock %}\n\n    <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n    {% block sw_settings_payment_overview_language_switch %}\n    <template #language-switch>\n        <sw-language-switch @on-change=\"onChangeLanguage\" />\n    </template>\n    {% endblock %}\n\n    <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n    {% block sw_settings_payment_overview_content %}\n    <template #content>\n\n        <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n        {% block sw_settings_payment_overview_content_inner %}\n        <sw-card-view class=\"sw-settings-payment-overview__content\">\n\n            <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n            {% block sw_settings_payment_overview_sorting_modal_card %}\n            <sw-card\n                class=\"sw-settings-payment-overview__sorting_modal_card\"\n                position-identifier=\"sw-settings-payment-overview-sorting-modal-card\"\n            >\n                <sw-button-process\n                    :disabled=\"isLoading || undefined\"\n                    :is-loading=\"isLoading\"\n                    :process-success=\"false\"\n                    variant=\"ghost\"\n                    @click=\"showSortingModal = true\"\n                >\n                    {{ $tc('sw-settings-payment.overview.openSortingModalButton') }}\n                </sw-button-process>\n            </sw-card>\n            {% endblock %}\n\n            <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n            {% block sw_settings_payment_overview_list %}\n            <template\n                v-for=\"card in paymentMethodCards\"\n                :key=\"card.id\"\n            >\n\n                <template v-if=\"card.hasCustomCard\">\n                    <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n                    {% block sw_settings_payment_overview_list_card_custom_location %}\n                    <sw-extension-component-section\n                        :key=\"`extension-${card.id}`\"\n                        :position-identifier=\"card.positionId\"\n                    />\n                    {% endblock %}\n                </template>\n\n                <template v-if=\"card.hasCustomCard && card.component\">\n                    <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n                    {% block sw_settings_payment_overview_list_card_custom_card %}\n                    <component\n                        :is=\"card.component\"\n                        :key=\"`component-${card.id}`\"\n                        :payment-methods=\"card.paymentMethods\"\n                        @set-payment-active=\"togglePaymentMethodActive\"\n                    />\n                    {% endblock %}\n                </template>\n\n                <template v-if=\"!card.hasCustomCard\">\n                    <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n                    {% block sw_settings_payment_overview_list_card_default %}\n                    <sw-payment-card\n                        :key=\"`default-${card.id}`\"\n                        :payment-method=\"card.paymentMethod\"\n                        @set-payment-active=\"togglePaymentMethodActive\"\n                    />\n                    {% endblock %}\n                </template>\n\n            </template>\n            {% endblock %}\n\n            <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n            {% block sw_settings_payment_overview_empty_state %}\n            <sw-empty-state\n                v-if=\"isEmpty\"\n                :title=\"$tc('sw-empty-state.messageNoResultTitle')\"\n            >\n                <template #default>\n                    {{ $tc('sw-empty-state.messageNoResultSublineBefore') }}\n                    <router-link\n                        class=\"sw-empty-state__description-link\"\n                        :to=\"{ name: 'sw.profile.index.searchPreferences' }\"\n                    >\n                        {{ $tc('sw-empty-state.messageNoResultSublineLink') }}\n                    </router-link>\n                    {{ $tc('sw-empty-state.messageNoResultSublineAfter') }}\n                </template>\n            </sw-empty-state>\n            {% endblock %}\n\n        </sw-card-view>\n        {% endblock %}\n\n        <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n        {% block sw_settings_payment_overview_sorting_modal %}\n        <sw-settings-payment-sorting-modal\n            v-if=\"showSortingModal\"\n            :payment-methods=\"paymentMethods\"\n            @modal-close=\"showSortingModal = false\"\n            @modal-save=\"loadPaymentMethods\"\n        />\n        {% endblock %}\n    </template>\n    {% endblock %}\n</sw-page>\n{% endblock %}\n","import type CriteriaType from 'src/core/data/criteria.data';\nimport type Repository from 'src/core/data/repository.data';\nimport type { Entity } from '@cicada-ag/meteor-admin-sdk/es/_internals/data/Entity';\nimport type EntityCollection from '@cicada-ag/meteor-admin-sdk/es/_internals/data/EntityCollection';\nimport type { PaymentOverviewCard } from '../../state/overview-cards.store';\nimport template from './sw-settings-payment-overview.html.twig';\nimport './sw-settings-payment-overview.scss';\n\n/**\n * @package checkout\n */\n\ninterface PaymentMethodCard {\n    id: string;\n    hasCustomCard: boolean;\n    component?: string;\n    positionId: string;\n    position: number;\n    paymentMethod?: Entity<'payment_method'>;\n    paymentMethods?: EntityCollection<'payment_method'>;\n}\n\nconst { Mixin } = Cicada;\nconst { Criteria } = Cicada.Data;\nconst { cloneDeep } = Cicada.Utils.object;\n\n// eslint-disable-next-line sw-deprecation-rules/private-feature-declarations\nexport default Cicada.Component.wrapComponentConfig({\n    template,\n\n    compatConfig: Cicada.compatConfig,\n\n    inject: [\n        'repositoryFactory',\n        'acl',\n    ],\n\n    mixins: [\n        Mixin.getByName('notification'),\n    ],\n\n    data(): {\n        isLoading: boolean;\n        showSortingModal: boolean;\n        paymentMethods: EntityCollection<'payment_method'> | [];\n    } {\n        return {\n            paymentMethods: [],\n            isLoading: false,\n            showSortingModal: false,\n        };\n    },\n\n    metaInfo() {\n        return {\n            title: this.$createTitle(),\n        };\n    },\n\n    computed: {\n        customCards(): PaymentOverviewCard[] {\n            return Cicada.State.get('paymentOverviewCardState').cards ?? [];\n        },\n\n        paymentMethodRepository(): Repository<'payment_method'> {\n            return this.repositoryFactory.create('payment_method');\n        },\n\n        paymentMethodCriteria(): CriteriaType {\n            const criteria = new Criteria(1, 500);\n\n            criteria.addAssociation('media');\n            criteria.addSorting(Criteria.sort('position', 'ASC'));\n\n            return criteria;\n        },\n\n        isEmpty(): boolean {\n            return !this.isLoading && this.paymentMethods.length === 0;\n        },\n\n        paymentMethodCards(): PaymentMethodCard[] {\n            if (this.paymentMethods.length === 0) {\n                return [];\n            }\n\n            const paymentMethodCards = [];\n            let paymentMethods = cloneDeep(this.paymentMethods);\n\n            this.customCards.forEach((customCard: PaymentOverviewCard) => {\n                const customPaymentMethods = paymentMethods\n                    // @ts-expect-error - can be undefined\n                    .filter((pm) => customCard.paymentMethodHandlers.includes(pm.formattedHandlerIdentifier));\n\n                if (customPaymentMethods.length === 0) {\n                    return;\n                }\n\n                paymentMethodCards.push(<PaymentMethodCard>{\n                    id: customPaymentMethods[0].id,\n                    hasCustomCard: true,\n                    component: customCard.component,\n                    // @ts-expect-error - can be undefined\n                    position: Math.min(...customPaymentMethods.map((pm) => pm.position)),\n                    positionId: customCard.positionId,\n                    paymentMethods: customPaymentMethods,\n                });\n\n                // @ts-expect-error - can be undefined\n                paymentMethods = paymentMethods\n                    // @ts-expect-error - can be undefined\n                    .filter((pm) => !customCard.paymentMethodHandlers.includes(pm.formattedHandlerIdentifier));\n            });\n\n            paymentMethodCards.push(\n                ...paymentMethods.map(\n                    (paymentMethod) =>\n                        <PaymentMethodCard>{\n                            id: paymentMethod.id,\n                            hasCustomCard: false,\n                            paymentMethod,\n                            position: paymentMethod.position,\n                            positionId: '',\n                        },\n                ),\n            );\n\n            return paymentMethodCards.sort((a: PaymentMethodCard, b: PaymentMethodCard) => {\n                return a.position - b.position;\n            });\n        },\n    },\n\n    created(): void {\n        this.createdComponent();\n    },\n\n    methods: {\n        createdComponent(): void {\n            this.loadPaymentMethods();\n        },\n\n        loadPaymentMethods(): void {\n            this.isLoading = true;\n\n            void this.paymentMethodRepository\n                .search(this.paymentMethodCriteria)\n                .then((items) => {\n                    this.paymentMethods = items;\n                })\n                .finally(() => {\n                    this.isLoading = false;\n                });\n        },\n\n        onChangeLanguage(languageId: string): void {\n            Cicada.State.commit('context/setApiLanguageId', languageId);\n            this.loadPaymentMethods();\n        },\n\n        togglePaymentMethodActive(paymentMethod: Entity<'payment_method'>): void {\n            const paymentMethodEntity = this.paymentMethods.find((pm) => pm.id === paymentMethod.id);\n\n            if (!paymentMethodEntity) {\n                return;\n            }\n\n            paymentMethodEntity.active = paymentMethod.active;\n\n            this.paymentMethodRepository\n                .save(paymentMethodEntity)\n                .then(() => {\n                    this.loadPaymentMethods();\n                    this.showActivationSuccessNotification(\n                        paymentMethodEntity.translated?.name ?? '',\n                        // @ts-expect-error - can be undefined\n                        paymentMethodEntity.active,\n                    );\n                })\n                .catch(() => {\n                    this.showActivationErrorNotification(\n                        paymentMethodEntity.translated?.name ?? '',\n                        // @ts-expect-error - can be undefined\n                        paymentMethodEntity.active,\n                    );\n                    void this.$nextTick(() => {\n                        paymentMethodEntity.active = !paymentMethodEntity.active;\n                    });\n                });\n        },\n\n        showActivationSuccessNotification(name: string, active: boolean) {\n            const message = active\n                ? this.$tc('sw-settings-payment.overview.notification.activationSuccess', 0, { name })\n                : this.$tc('sw-settings-payment.overview.notification.deactivationSuccess', 0, { name });\n\n            this.createNotificationSuccess({ message });\n        },\n\n        showActivationErrorNotification(name: string, active: boolean) {\n            const message = active\n                ? this.$tc('sw-settings-payment.overview.notification.activationError', 0, { name })\n                : this.$tc('sw-settings-payment.overview.notification.deactivationError', 0, { name });\n\n            this.createNotificationError({ message });\n        },\n    },\n});\n"],"names":["template","Mixin","Criteria","cloneDeep","index","criteria","paymentMethodCards","paymentMethods","customCard","customPaymentMethods","pm","paymentMethod","a","b","items","languageId","paymentMethodEntity","_a","name","active","message"],"mappings":"AAAA,MAAeA,EAAA,g+GCsBT,CAAE,MAAAC,CAAU,EAAA,OACZ,CAAE,SAAAC,CAAS,EAAI,OAAO,KACtB,CAAE,UAAAC,CAAc,EAAA,OAAO,MAAM,OAGnCC,EAAe,OAAO,UAAU,oBAAoB,CAChD,SAAAJ,EAEA,aAAc,OAAO,aAErB,OAAQ,CACJ,oBACA,KACJ,EAEA,OAAQ,CACJC,EAAM,UAAU,cAAc,CAClC,EAEA,MAIE,CACS,MAAA,CACH,eAAgB,CAAC,EACjB,UAAW,GACX,iBAAkB,EAAA,CAE1B,EAEA,UAAW,CACA,MAAA,CACH,MAAO,KAAK,aAAa,CAAA,CAEjC,EAEA,SAAU,CACN,aAAqC,CACjC,OAAO,OAAO,MAAM,IAAI,0BAA0B,EAAE,OAAS,EACjE,EAEA,yBAAwD,CAC7C,OAAA,KAAK,kBAAkB,OAAO,gBAAgB,CACzD,EAEA,uBAAsC,CAClC,MAAMI,EAAW,IAAIH,EAAS,EAAG,GAAG,EAEpC,OAAAG,EAAS,eAAe,OAAO,EAC/BA,EAAS,WAAWH,EAAS,KAAK,WAAY,KAAK,CAAC,EAE7CG,CACX,EAEA,SAAmB,CACf,MAAO,CAAC,KAAK,WAAa,KAAK,eAAe,SAAW,CAC7D,EAEA,oBAA0C,CAClC,GAAA,KAAK,eAAe,SAAW,EAC/B,MAAO,GAGX,MAAMC,EAAqB,CAAA,EACvB,IAAAC,EAAiBJ,EAAU,KAAK,cAAc,EAE7C,YAAA,YAAY,QAASK,GAAoC,CACpD,MAAAC,EAAuBF,EAExB,OAAQG,GAAOF,EAAW,sBAAsB,SAASE,EAAG,0BAA0B,CAAC,EAExFD,EAAqB,SAAW,IAIpCH,EAAmB,KAAwB,CACvC,GAAIG,EAAqB,CAAC,EAAE,GAC5B,cAAe,GACf,UAAWD,EAAW,UAEtB,SAAU,KAAK,IAAI,GAAGC,EAAqB,IAAKC,GAAOA,EAAG,QAAQ,CAAC,EACnE,WAAYF,EAAW,WACvB,eAAgBC,CAAA,CACnB,EAGgBF,EAAAA,EAEZ,OAAQG,GAAO,CAACF,EAAW,sBAAsB,SAASE,EAAG,0BAA0B,CAAC,EAAA,CAChG,EAEkBJ,EAAA,KACf,GAAGC,EAAe,IACbI,IACsB,CACf,GAAIA,EAAc,GAClB,cAAe,GACf,cAAAA,EACA,SAAUA,EAAc,SACxB,WAAY,EAAA,EAExB,CAAA,EAGGL,EAAmB,KAAK,CAACM,EAAsBC,IAC3CD,EAAE,SAAWC,EAAE,QACzB,CACL,CACJ,EAEA,SAAgB,CACZ,KAAK,iBAAiB,CAC1B,EAEA,QAAS,CACL,kBAAyB,CACrB,KAAK,mBAAmB,CAC5B,EAEA,oBAA2B,CACvB,KAAK,UAAY,GAEZ,KAAK,wBACL,OAAO,KAAK,qBAAqB,EACjC,KAAMC,GAAU,CACb,KAAK,eAAiBA,CAAA,CACzB,EACA,QAAQ,IAAM,CACX,KAAK,UAAY,EAAA,CACpB,CACT,EAEA,iBAAiBC,EAA0B,CAChC,OAAA,MAAM,OAAO,2BAA4BA,CAAU,EAC1D,KAAK,mBAAmB,CAC5B,EAEA,0BAA0BJ,EAA+C,CAC/D,MAAAK,EAAsB,KAAK,eAAe,KAAMN,GAAOA,EAAG,KAAOC,EAAc,EAAE,EAElFK,IAILA,EAAoB,OAASL,EAAc,OAE3C,KAAK,wBACA,KAAKK,CAAmB,EACxB,KAAK,IAAM,CD3K5B,IAAAC,EC4KoB,KAAK,mBAAmB,EACnB,KAAA,oCACDA,EAAAD,EAAoB,aAApB,YAAAC,EAAgC,OAAQ,GAExCD,EAAoB,MAAA,CACxB,CACH,EACA,MAAM,IAAM,CDnL7B,IAAAC,ECoLyB,KAAA,kCACDA,EAAAD,EAAoB,aAApB,YAAAC,EAAgC,OAAQ,GAExCD,EAAoB,MAAA,EAEnB,KAAK,UAAU,IAAM,CACFA,EAAA,OAAS,CAACA,EAAoB,MAAA,CACrD,CAAA,CACJ,EACT,EAEA,kCAAkCE,EAAcC,EAAiB,CAC7D,MAAMC,EAAUD,EACV,KAAK,IAAI,8DAA+D,EAAG,CAAE,KAAAD,CAAM,CAAA,EACnF,KAAK,IAAI,gEAAiE,EAAG,CAAE,KAAAA,EAAM,EAEtF,KAAA,0BAA0B,CAAE,QAAAE,CAAA,CAAS,CAC9C,EAEA,gCAAgCF,EAAcC,EAAiB,CAC3D,MAAMC,EAAUD,EACV,KAAK,IAAI,4DAA6D,EAAG,CAAE,KAAAD,CAAM,CAAA,EACjF,KAAK,IAAI,8DAA+D,EAAG,CAAE,KAAAA,EAAM,EAEpF,KAAA,wBAAwB,CAAE,QAAAE,CAAA,CAAS,CAC5C,CACJ,CACJ,CAAC"}