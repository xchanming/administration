const l=`{% block sw_multi_tag_select_validation_valid_message %} {{ $tc('global.sw-multi-tag-ip-select.addIpAddress') }} {% endblock %} {% block sw_multi_tag_select_validation_invalid_message %} {{ $tc('global.sw-multi-tag-ip-select.enterValidIp') }} {% endblock %} {% block sw_multi_tag_select_validation_invalid %} {% parent %} <div v-for="knownIp of validUnselectedKnownIps" :key="knownIp.value" class="sw-multi-tag-select-valid" @click="addSpecific(knownIp.value)" > <span> {{ knownIp.value }} ({{ $te(knownIp.name) ? $tc(knownIp.name) : knownIp.name }}) </span> </div> {% endblock %} {% block sw_multi_tag_select_base_selection_list_label_inner %} <template v-if="getKnownIp(item)"> <slot name="selection-label-property" v-bind="{ item, index, labelProperty, valueProperty}" > {{ getKey(item, labelProperty) }} ({{ $te(getKnownIp(item).name) ? $tc(getKnownIp(item).name) : getKnownIp(item).name }}) </slot> </template> <template v-else> {% parent %} </template> {% endblock %}`,{Component:a}=Cicada,{string:i}=Cicada.Utils;a.extend("sw-multi-tag-ip-select","sw-multi-tag-select",{template:l,props:{validate:{type:Function,required:!1,default:e=>i.isValidIp(e)},knownIps:{type:Array,required:!1,default(){return[]}},errorCode:{type:String,required:!1,default(){return"CICADA_INVALID_IP"}}},computed:{errorObject(){return!this.inputIsValid&&this.searchTerm.length>0?{code:this.errorCode}:null},validKnownIps(){return this.knownIps.filter(e=>this.validate(e.value))},validUnselectedKnownIps(){return this.validKnownIps.filter(e=>this.value.indexOf(e.value)===-1)}},methods:{addSpecific(e){this.searchTerm=e,this.addItem()},getKnownIp(e){const t=this.validKnownIps.findIndex(n=>n.value===e.value);return t===-1?null:this.validKnownIps[t]}}});
//# sourceMappingURL=index-CVSKYhIK.js.map
