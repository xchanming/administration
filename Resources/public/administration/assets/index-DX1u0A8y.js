const l=`{% block sw_entity_multi_select_base_selection_list_label_inner %} <slot name="selection-label-property" v-bind="{ item, index, labelProperty, valueProperty }" > {{ item.salesChannel.translated.name }} </slot> {% endblock %} {% block sw_entity_multi_select_base_results_list_result_label %} <slot name="result-label-property" v-bind="{ item, index, labelProperty, valueProperty: 'id' }" > {{ item.translated.name }} </slot> {% endblock %}`,{EntityCollection:n,Criteria:s}=Shopware.Data,a={template:l,emits:["item-add"],props:{criteria:{type:Object,required:!1,default(e){const t=new s(1,e.resultLimit);return t.addSorting(s.sort("name","ASC")),t}}},data(){return{defaultVisibility:30}},computed:{product(){return Shopware.Store.get("swProductDetail").product},repository(){return this.repositoryFactory.create("sales_channel")},associationRepository(){return this.repositoryFactory.create("product_visibility")}},methods:{isSelected(e){return this.currentCollection.some(t=>t.salesChannelId===e.id)},addItem(e){if(this.isSelected(e)){const r=this.currentCollection.find(o=>o.salesChannelId===e.id);this.remove(r);return}const t=this.associationRepository.create(this.entityCollection.context);t.productId=this.product.id,t.productVersionId=this.product.versionId,t.salesChannelId=e.id,t.visibility=this.defaultVisibility,t.salesChannel=e,this.$emit("item-add",e);const i=n.fromCollection(this.currentCollection);i.add(t),this.emitChanges(i),this.onSelectExpanded()}}};export{a as default};
