{"version":3,"file":"index-11W0HRP5.js","sources":["../../../app/administration/src/app/component/utils/sw-duplicated-media-v2/sw-duplicated-media-v2.html.twig","../../../app/administration/src/app/component/utils/sw-duplicated-media-v2/index.js"],"sourcesContent":["<!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n{% block sw_duplicated_media_v2 %}\n<sw-modal\n    v-if=\"showModal\"\n    class=\"sw-duplicated-media-v2\"\n    :title=\"$tc('global.sw-duplicated-media-v2.titleModal')\"\n    @modal-close=\"skipAll\"\n>\n    <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n    {% block sw_duplicated_media_v2_body %}\n    <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n    {% block sw_duplicated_media_v2_body_description %}\n    <p class=\"sw-duplicated-media-v2__description\">\n        {{ $tc('global.sw-duplicated-media-v2.description', 1, { fileName: `${currentTask.fileName}.${currentTask.extension}` }) }}\n    </p>\n    {% endblock %}\n\n    <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n    {% block sw_duplicated_media_v2_body_preview %}\n    <sw-container\n        class=\"sw-duplicated-media-v2__preview\"\n        rows=\"20px 1fr\"\n        columns=\"1fr 100px 1fr\"\n        align=\"center\"\n    >\n\n        <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n        {% block sw_duplicated_media_v2_body_preview_label_old_file %}\n        <!-- eslint-disable-next-line vuejs-accessibility/label-has-for -->\n        <label class=\"sw-duplicated-media-v2__preview_label\">\n            {{ $tc('global.sw-duplicated-media-v2.labelNewFile') }}\n        </label>\n        {%  endblock %}\n\n        <div class=\"sw-duplicated-media-v2__spacer\"></div>\n\n        <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n        {% block sw_duplicated_media_v2_body_preview_label_new_file %}\n        <!-- eslint-disable-next-line vuejs-accessibility/label-has-for -->\n        <label class=\"sw-duplicated-media-v2__preview_label\">\n            {{ $tc('global.sw-duplicated-media-v2.labelOldFile') }}\n        </label>\n        {%  endblock %}\n\n        <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n        {% block sw_duplicated_media_v2_body_preview_new_media %}\n        <div class=\"sw-duplicated-media-v2__target-upload\">\n            <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n            {% block sw_media_duplicated_media_target_preview %}\n            <div class=\"sw-duplicated-media-v2__target-preview\">\n                <sw-media-preview-v2 :source=\"currentTask.src\" />\n            </div>\n            {% endblock %}\n\n            <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n            {% block sw_media_duplicated_media_target_name %}\n            <span\n                v-if=\"selectedOption !== 'Rename'\"\n                key=\"sw-duplicated-media-v2__target-label-fileName\"\n                class=\"sw-duplicated-media-v2__target-label\"\n            >\n                {{ `${currentTask.fileName}.${currentTask.extension}` }}\n            </span>\n            <span\n                v-else\n                key=\"sw-duplicated-media-v2__target-label-suggestedName\"\n                class=\"sw-duplicated-media-v2__target-label\"\n            >\n                {{ `${suggestedName}.${currentTask.extension}` }}\n            </span>\n            {% endblock %}\n\n            <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n            {% block sw_media_duplicated_media_target_details %}\n            <span class=\"sw-duplicated-media-v2__target-details\">{{ currentTaskDetails }}</span>\n            {% endblock %}\n        </div>\n        {%  endblock %}\n\n        <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n        {% block sw_duplicated_media_v2_body_preview_separator %}\n        <sw-icon\n            class=\"sw-duplicated-media-v2__preview-separator\"\n            name=\"regular-long-arrow-right\"\n        />\n        {%  endblock %}\n\n        <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n        {% block sw_duplicated_media_v2_body_preview_old_media %}\n        <sw-media-media-item\n            v-if=\"existingMedia\"\n            :item=\"existingMedia\"\n            :selected=\"false\"\n            :show-selection-indicator=\"false\"\n            :is-list=\"true\"\n            :editable=\"false\"\n            :show-context-menu-button=\"false\"\n        />\n        {% endblock %}\n    </sw-container>\n    {% endblock %}\n\n    <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n    {% block sw_duplicated_media_v2_body_options %}\n    <sw-radio-field\n        v-model:value=\"selectedOption\"\n        class=\"sw-duplicated-media-v2__options\"\n        :options=\"options\"\n    />\n    {% endblock %}\n    {% endblock %}\n\n    <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n    {% block sw_duplicated_media_v2_footer %}\n    <template #modal-footer>\n        <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n        {% block sw_duplicated_media_v2_save_selection %}\n        <sw-checkbox-field\n            v-if=\"!isLoading && hasAdditionalErrors\"\n            v-model:value=\"shouldSaveSelection\"\n            class=\"sw-duplicated-media-v2__additional-error-count\"\n            :label=\"$tc('global.sw-duplicated-media-v2.labelSaveSelection', additionalErrorCount)\"\n        />\n        {% endblock %}\n\n        <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n        {% block sw_duplicated_media_v2_cancel_button %}\n        <sw-button\n            size=\"small\"\n            :disabled=\"isLoading\"\n            @click=\"skipCurrentFile\"\n        >\n            {{ $tc('global.default.cancel') }}\n        </sw-button>\n        {% endblock %}\n\n        <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n        {% block sw_duplicated_media_v2_upload_button %}\n        <sw-button\n            class=\"sw-duplicated-media-v2__upload\"\n            :disabled=\"isLoading\"\n            size=\"small\"\n            variant=\"primary\"\n            @click=\"solveDuplicate\"\n        >\n            {{ buttonLabel }}\n        </sw-button>\n        {% endblock %}\n    </template>\n    {% endblock %}\n</sw-modal>\n{% endblock %}\n","import template from './sw-duplicated-media-v2.html.twig';\nimport './sw-duplicated-media-v2.scss';\n\nconst { Component, Context, Filter } = Cicada;\nconst { Criteria } = Cicada.Data;\n\n/**\n * @package admin\n *\n * @private\n */\n\nconst LOCAL_STORAGE_KEY_OPTION = 'sw-duplicate-media-resolve-option';\nconst LOCAL_STORAGE_SAVE_SELECTION = 'sw-duplicate-media-resolve-save-selection';\n\n// eslint-disable-next-line sw-deprecation-rules/private-feature-declarations\nComponent.register('sw-duplicated-media-v2', {\n    template,\n\n    compatConfig: Cicada.compatConfig,\n\n    inject: [\n        'repositoryFactory',\n        'mediaService',\n    ],\n\n    data() {\n        return {\n            isLoading: false,\n            shouldSaveSelection: false,\n            selectedOption: 'Replace',\n            suggestedName: '',\n            existingMedia: null,\n            targetEntity: null,\n            failedUploadTasks: [],\n            postponedFailedUploads: [],\n        };\n    },\n\n    computed: {\n        mediaRepository() {\n            return this.repositoryFactory.create('media');\n        },\n\n        additionalErrorCount() {\n            return this.failedUploadTasks.length - 1;\n        },\n\n        hasAdditionalErrors() {\n            return this.additionalErrorCount > 0;\n        },\n\n        currentTask() {\n            return this.failedUploadTasks[0];\n        },\n\n        buttonLabel() {\n            return this.$tc(`global.sw-duplicated-media-v2.button${this.selectedOption}`);\n        },\n\n        dateFilter() {\n            return Filter.getByName('date');\n        },\n\n        fileSizeFilter() {\n            return Filter.getByName('fileSize');\n        },\n\n        currentTaskDetails() {\n            if (!this.currentTask) {\n                return '';\n            }\n            const metadata = [\n                this.dateFilter(new Date(), { month: 'long' }),\n            ];\n\n            if (this.currentTask.src instanceof File) {\n                metadata.push(this.fileSizeFilter(this.currentTask.src.size));\n            }\n\n            return metadata.join(', ');\n        },\n\n        showModal() {\n            return this.failedUploadTasks.length > 0 && !this.isWorkingOnMultipleTasks;\n        },\n\n        isWorkingOnMultipleTasks() {\n            return this.isLoading && this.shouldSaveSelection;\n        },\n\n        options() {\n            return [\n                {\n                    value: 'Replace',\n                    name: this.$tc('global.sw-duplicated-media-v2.labelOptionReplace'),\n                },\n                {\n                    value: 'Rename',\n                    name: this.$tc('global.sw-duplicated-media-v2.labelOptionRename'),\n                },\n                {\n                    value: 'Keep',\n                    name: this.$tc('global.sw-duplicated-media-v2.labelOptionKeep'),\n                },\n                {\n                    value: 'Skip',\n                    name: this.$tc('global.sw-duplicated-media-v2.labelOptionSkip'),\n                },\n            ];\n        },\n    },\n\n    watch: {\n        currentTask() {\n            this.updatePreviewData();\n        },\n\n        showModal(newVal) {\n            if (newVal) {\n                this.loadDefaultOption();\n                return;\n            }\n\n            this.saveDefaultOption();\n        },\n\n        isLoading(newVal) {\n            if (newVal) {\n                return;\n            }\n\n            this.failedUploadTasks.push(...this.postponedFailedUploads.splice(0, this.postponedFailedUploads.length));\n        },\n    },\n\n    created() {\n        this.createdComponent();\n    },\n\n    beforeUnmount() {\n        this.beforeDestroyComponent();\n    },\n\n    methods: {\n        createdComponent() {\n            this.loadDefaultOption();\n            this.updatePreviewData();\n\n            this.mediaService.addDefaultListener(this.handleMediaServiceUploadEvent);\n        },\n\n        beforeDestroyComponent() {\n            this.mediaService.removeDefaultListener(this.handleMediaServiceUploadEvent);\n        },\n\n        loadDefaultOption() {\n            this.shouldSaveSelection = localStorage.getItem(LOCAL_STORAGE_SAVE_SELECTION) || false;\n\n            if (this.shouldSaveSelection) {\n                this.defaultOption = localStorage.getItem(LOCAL_STORAGE_KEY_OPTION) || 'Replace';\n            }\n\n            this.selectedOption = this.defaultOption || 'Replace';\n        },\n\n        saveDefaultOption() {\n            localStorage.setItem(LOCAL_STORAGE_SAVE_SELECTION, this.shouldSaveSelection);\n\n            if (this.shouldSaveSelection) {\n                localStorage.setItem(LOCAL_STORAGE_KEY_OPTION, this.defaultOption);\n            }\n        },\n\n        handleMediaServiceUploadEvent({ action, payload }) {\n            if (action !== 'media-upload-fail') {\n                return;\n            }\n\n            if (!this.isDuplicatedNameError(payload.error)) {\n                return;\n            }\n\n            if (this.isLoading) {\n                this.postponedFailedUploads.push(payload);\n                return;\n            }\n\n            this.failedUploadTasks.push(payload);\n        },\n\n        isDuplicatedNameError(error) {\n            return error.response.data.errors.some((err) => {\n                return err.code === 'CONTENT__MEDIA_DUPLICATED_FILE_NAME';\n            });\n        },\n\n        async updatePreviewData() {\n            if (!this.currentTask) {\n                this.existingMedia = null;\n                this.suggestedName = '';\n                return;\n            }\n\n            const criteria = new Criteria(1, 1).addFilter(\n                Criteria.multi('AND', [\n                    Criteria.equals('fileName', this.currentTask.fileName),\n                    Criteria.equals('fileExtension', this.currentTask.extension),\n                    Criteria.equals('private', this.currentTask.isPrivate),\n                ]),\n            );\n\n            const searchResult = await this.mediaRepository.search(criteria, Context.api);\n            if (searchResult?.[0]) {\n                this.existingMedia = searchResult[0];\n            }\n\n            const provided = await this.mediaService.provideName(this.currentTask.fileName, this.currentTask.extension);\n            this.suggestedName = provided.fileName;\n        },\n\n        solveDuplicate() {\n            if (!this.currentTask) {\n                this.isLoading = false;\n                return;\n            }\n\n            this.isLoading = true;\n\n            switch (this.selectedOption) {\n                case 'Rename':\n                    this.renameFile(this.currentTask);\n                    break;\n                case 'Replace':\n                    this.replaceFile(this.currentTask);\n                    break;\n                case 'Keep':\n                    this.keepFile(this.currentTask);\n                    break;\n                case 'Skip':\n                default:\n                    this.skipFile(this.currentTask);\n                    break;\n            }\n\n            this.failedUploadTasks.splice(0, 1);\n\n            if (!this.currentTask || !this.isWorkingOnMultipleTasks) {\n                this.isLoading = false;\n            } else {\n                this.solveDuplicate();\n            }\n        },\n\n        async renameFile(uploadTask) {\n            const newTask = { ...uploadTask };\n\n            const { fileName } = await this.mediaService.provideName(uploadTask.fileName, uploadTask.extension);\n            newTask.fileName = fileName;\n\n            this.mediaService.addUpload(newTask.uploadTag, newTask);\n            await this.mediaService.runUploads(newTask.uploadTag);\n        },\n\n        skipAll() {\n            this.isLoading = true;\n\n            this.skipFile(this.currentTask);\n            this.failedUploadTasks.splice(0, 1);\n\n            if (!this.currentTask) {\n                this.isLoading = false;\n            } else {\n                this.skipAll();\n            }\n        },\n\n        skipCurrentFile() {\n            this.isLoading = true;\n            this.skipFile(this.currentTask);\n\n            this.failedUploadTasks.splice(0, 1);\n            this.isLoading = false;\n        },\n\n        async skipFile(uploadTask) {\n            const oldTarget = await this.mediaRepository.get(uploadTask.targetId, Context.api);\n            if (!oldTarget.hasFile) {\n                await this.mediaRepository.delete(oldTarget.id, Context.api);\n            }\n\n            this.mediaService.cancelUpload(uploadTask.uploadTag, uploadTask);\n        },\n\n        async replaceFile(uploadTask) {\n            const criteria = new Criteria(1, 1).addFilter(\n                Criteria.multi('AND', [\n                    Criteria.equals('fileName', uploadTask.fileName),\n                    Criteria.equals('fileExtension', uploadTask.extension),\n                    Criteria.equals('private', uploadTask.isPrivate),\n                ]),\n            );\n\n            const searchResult = await this.mediaRepository.search(criteria, Context.api);\n            const newTarget = searchResult[0];\n            const oldTargetId = uploadTask.targetId;\n            uploadTask.targetId = newTarget.id;\n\n            this.mediaService.addUpload(uploadTask.uploadTag, uploadTask);\n\n            await this.mediaService.runUploads(uploadTask.uploadTag);\n            const oldTarget = await this.mediaRepository.get(oldTargetId, Context.api);\n\n            if (!oldTarget.hasFile) {\n                await this.mediaRepository.delete(oldTargetId, Context.api);\n            }\n\n            await this.mediaRepository.get(uploadTask.targetId, Context.api);\n        },\n\n        async keepFile(uploadTask) {\n            const oldTarget = await this.mediaRepository.get(uploadTask.targetId, Context.api);\n            if (!oldTarget.hasFile) {\n                await this.mediaRepository.delete(oldTarget.id, Context.api);\n            }\n\n            const criteria = new Criteria(1, 1).addFilter(\n                Criteria.multi('AND', [\n                    Criteria.equals('fileName', uploadTask.fileName),\n                    Criteria.equals('fileExtension', uploadTask.extension),\n                    Criteria.equals('private', uploadTask.isPrivate),\n                ]),\n            );\n\n            const searchResult = await this.mediaRepository.search(criteria, Context.api);\n            const newTarget = searchResult[0];\n            uploadTask.targetId = newTarget.id;\n\n            this.mediaService.keepFile(uploadTask.uploadTag, uploadTask);\n        },\n    },\n});\n"],"names":["template","Component","Context","Filter","Criteria","LOCAL_STORAGE_KEY_OPTION","LOCAL_STORAGE_SAVE_SELECTION","metadata","newVal","action","payload","error","err","criteria","searchResult","provided","uploadTask","newTask","fileName","oldTarget","newTarget","oldTargetId"],"mappings":"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"}