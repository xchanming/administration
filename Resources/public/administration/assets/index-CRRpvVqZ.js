const o=`{% block sw_product_variants_configurator_prices %} <div class="sw-product-variants-configurator-prices"> <sw-alert class="sw-product-variants-configurator-prices__alert" variant="info" > {{ $tc('sw-product.variations.configuratorModal.surchargeNotice') }} </sw-alert> <div class="sw-product-variants-configurator-prices__table"> {% block sw_product_variants_configurator_prices_groups %} <div class="sw-product-variants-configurator-prices__groups"> <ul> <li v-for="group in selectedGroups" :key="group.id" class="sw-product-variants-configurator-prices__groupElement" :class="{'is--selected': activeGroup.id == group.id}" role="button" tabindex="0" @click="activeGroup = group" @keydown.enter="activeGroup = group" > <sw-icon name="regular-folder" size="16px" /> {{ group.translated.name }} </li> </ul> </div> {% endblock %} {% block sw_product_variants_configurator_prices_prices %} <div class="sw-product-variants-configurator-prices__prices"> {% block sw_product_variants_configurator_prices_search %} <div class="sw-product-variants-configurator-prices__search"> {% block sw_product_variants_configurator_prices_search_field %} <sw-simple-search-field v-model:value="term" size="small" variant="form" :placeholder="$tc('sw-product.variations.configuratorModal.searchPlaceholder')" /> {% endblock %} </div> {% endblock %} {% block sw_product_variants_configurator_prices_grid_wrapper %} <div class="sw-product-variants-configurator-prices__grid-wrapper"> {% block sw_product_variants_configurator_prices_data_grid %} <sw-data-grid v-if="optionsForGroup.length" :data-source="optionsForGroup" :show-selection="false" :columns="optionColumns" show-settings full-page > {% block sw_product_variants_configurator_prices_column_name %} <template #column-name="{ item, isInlineEdit, compact }" > {{ item.option.translated.name }} </template> {% endblock %} {% block sw_product_variants_configurator_prices_column_currency %} <template v-for="currency in currenciesList" :key="currency.id" #[\`column-currency.\${currency.id}\`]="{ item, isInlineEdit, compact }" > <sw-product-variants-price-field :price="getCurrencyOfOption(item, currency.id)" :tax-rate="product.taxId" :currency="currency" compact /> </template> {% endblock %} {% block sw_product_variants_configurator_prices_actions %} <template #actions="{ item }" > {% block sw_product_variants_configurator_prices_actions_items %} <sw-context-menu-item variant="danger" @click="resetSurcharges(item, true)" > {{ $tc('sw-product.variations.configuratorModal.resetSurcharges') }} </sw-context-menu-item> {% endblock %} </template> {% endblock %} </sw-data-grid> {% endblock %} </div> {% endblock %} </div> {% endblock %} </div> {% block sw_product_variants_configurator_prices_loader %} <sw-loader v-if="isLoading" /> {% endblock %} </div> {% endblock %}`,{Criteria:c}=Cicada.Data,s={template:o,compatConfig:Cicada.compatConfig,inject:["repositoryFactory"],props:{product:{type:Object,required:!0},selectedGroups:{type:Array,required:!0}},data(){return{activeGroup:{},term:"",optionsForGroup:[],currencies:{},isLoading:!0}},computed:{currencyRepository(){return this.repositoryFactory.create("currency")},currenciesList(){return this.currencies.map(r=>({id:r.id,name:r.name,symbol:r.symbol}))},optionColumns(){const r=[{property:"name",label:this.$tc("sw-product.variations.configuratorModal.priceOptions"),rawData:!0}],t=this.currenciesList.map(e=>({property:`currency.${e.id}`,label:e.name,rawData:!0,allowResize:!0,width:"200px"}));return[...r,...t]}},watch:{activeGroup(){this.getOptionsForGroup()}},mounted(){this.mountedComponent()},methods:{onSearchTermChange(){this.getOptionsForGroup()},mountedComponent(){this.isLoading=!1,this.loadCurrencies()},loadCurrencies(){this.currencyRepository.search(new c(1,25)).then(r=>{this.currencies=r})},getOptionsForGroup(){this.optionsForGroup=this.product.configuratorSettings.filter(r=>r.option.groupId===this.activeGroup.id?(this.resetSurcharges(r),!0):!1).filter(r=>r.option.translated.name.toLowerCase().includes(this.term.toLowerCase()))},resetSurcharges(r,t=!1){Array.isArray(r.price)&&r.price&&r.price.length>0&&!t||(this.isCompatEnabled("INSTANCE_SET")?this.$set(r,"price",[]):r.price=[],this.currenciesList.forEach(e=>{if(!r.price.find(i=>i.currencyId===e.id)){const i={currencyId:e.id,gross:0,linked:!0,net:0};r.price.push(i)}}))},getCurrencyOfOption(r,t){return r.price.find(e=>e.currencyId===t)}}};export{s as default};
//# sourceMappingURL=index-CRRpvVqZ.js.map
