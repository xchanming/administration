{"version":3,"file":"store-context.api.service-CLfP-5y8.js","sources":["../../../app/administration/src/core/service/api/store-context.api.service.ts"],"sourcesContent":["import type { AxiosInstance } from 'axios';\nimport ApiService from '../api.service';\nimport type { LoginService } from '../login.service';\nimport type { ContextSwitchParameters } from '../../../module/sw-order/order.types';\n\n/**\n * Gateway for the API end point \"sales-channel-context\"\n * Uses the _proxy endpoint of the admin api to connect to the store-api endpoint cart\n * @class\n * @extends ApiService\n */\nclass StoreContextService extends ApiService {\n    constructor(httpClient: AxiosInstance, loginService: LoginService, apiEndpoint = 'sales-channel-context') {\n        super(httpClient, loginService, apiEndpoint, 'application/json');\n\n        this.name = 'contextStoreService';\n    }\n\n    updateCustomerContext(\n        customerId: string,\n        salesChannelId: string,\n        contextToken: string,\n        additionalParams = {},\n        additionalHeaders = {},\n        permissions = ['allowProductPriceOverwrites'],\n    ) {\n        const route = '_proxy/switch-customer';\n        const headers = this.getBasicHeaders({\n            ...additionalHeaders,\n            'sw-context-token': contextToken,\n        });\n\n        return this.httpClient.patch(\n            route,\n            {\n                customerId: customerId,\n                salesChannelId: salesChannelId,\n                permissions: permissions,\n            },\n            { ...additionalParams, headers },\n        );\n    }\n\n    updateContext(\n        context: ContextSwitchParameters,\n        salesChannelId: string,\n        contextToken: string | null,\n        additionalParams = {},\n        additionalHeaders = {},\n    ) {\n        const route = `_proxy/store-api/${salesChannelId}/context`;\n        const headers = this.getBasicHeaders({\n            ...additionalHeaders,\n            'sw-context-token': contextToken,\n        });\n\n        return this.httpClient.patch(route, context, {\n            ...additionalParams,\n            headers,\n        });\n    }\n\n    getSalesChannelContext(\n        salesChannelId: string,\n        contextToken: string | null,\n        additionalParams = {},\n        additionalHeaders = {},\n    ) {\n        const route = `_proxy/store-api/${salesChannelId}/context`;\n        const headers = this.getBasicHeaders({\n            ...additionalHeaders,\n            'sw-context-token': contextToken,\n        });\n\n        return this.httpClient.get(route, { ...additionalParams, headers });\n    }\n\n    generateImitateCustomerToken(customerId: string, salesChannelId: string, additionalParams = {}, additionalHeaders = {}) {\n        const route = '_proxy/generate-imitate-customer-token';\n        const headers = this.getBasicHeaders(additionalHeaders);\n\n        return this.httpClient.post(\n            route,\n            {\n                customerId,\n                salesChannelId,\n            },\n            { ...additionalParams, headers },\n        );\n    }\n\n    redirectToSalesChannelUrl(salesChannelDomainUrl: string, token: string, customerId: string, userId: string) {\n        const form = document.createElement('form');\n        form.method = 'POST';\n        form.action = `${salesChannelDomainUrl}/account/login/imitate-customer`;\n        form.target = '_blank';\n        document.body.appendChild(form);\n\n        this.#createHiddenInput(form, 'token', token);\n        this.#createHiddenInput(form, 'customerId', customerId);\n        this.#createHiddenInput(form, 'userId', userId);\n\n        form.submit();\n        form.remove();\n    }\n\n    #createHiddenInput(form: HTMLFormElement, name: string, value: string) {\n        const input = document.createElement('input');\n        input.type = 'hidden';\n        input.name = name;\n        input.value = value;\n        form.appendChild(input);\n    }\n}\n\n// eslint-disable-next-line sw-deprecation-rules/private-feature-declarations\nexport default StoreContextService;\n"],"names":["StoreContextService","ApiService","httpClient","loginService","apiEndpoint","__privateAdd","_StoreContextService_instances","customerId","salesChannelId","contextToken","additionalParams","additionalHeaders","permissions","route","headers","context","salesChannelDomainUrl","token","userId","form","__privateMethod","createHiddenInput_fn","name","value","input"],"mappings":"yWAWA,MAAMA,UAA4BC,CAAW,CACzC,YAAYC,EAA2BC,EAA4BC,EAAc,wBAAyB,CAChG,MAAAF,EAAYC,EAAcC,EAAa,kBAAkB,EAFvEC,EAAA,KAAAC,GAIQ,KAAK,KAAO,qBAChB,CAEA,sBACIC,EACAC,EACAC,EACAC,EAAmB,GACnBC,EAAoB,CAAC,EACrBC,EAAc,CAAC,6BAA6B,EAC9C,CACE,MAAMC,EAAQ,yBACRC,EAAU,KAAK,gBAAgB,CACjC,GAAGH,EACH,mBAAoBF,CAAA,CACvB,EAED,OAAO,KAAK,WAAW,MACnBI,EACA,CACI,WAAAN,EACA,eAAAC,EACA,YAAAI,CACJ,EACA,CAAE,GAAGF,EAAkB,QAAAI,CAAQ,CAAA,CAEvC,CAEA,cACIC,EACAP,EACAC,EACAC,EAAmB,CAAC,EACpBC,EAAoB,GACtB,CACQ,MAAAE,EAAQ,oBAAoBL,CAAc,WAC1CM,EAAU,KAAK,gBAAgB,CACjC,GAAGH,EACH,mBAAoBF,CAAA,CACvB,EAED,OAAO,KAAK,WAAW,MAAMI,EAAOE,EAAS,CACzC,GAAGL,EACH,QAAAI,CAAA,CACH,CACL,CAEA,uBACIN,EACAC,EACAC,EAAmB,CACnB,EAAAC,EAAoB,GACtB,CACQ,MAAAE,EAAQ,oBAAoBL,CAAc,WAC1CM,EAAU,KAAK,gBAAgB,CACjC,GAAGH,EACH,mBAAoBF,CAAA,CACvB,EAEM,OAAA,KAAK,WAAW,IAAII,EAAO,CAAE,GAAGH,EAAkB,QAAAI,EAAS,CACtE,CAEA,6BAA6BP,EAAoBC,EAAwBE,EAAmB,CAAI,EAAAC,EAAoB,GAAI,CACpH,MAAME,EAAQ,yCACRC,EAAU,KAAK,gBAAgBH,CAAiB,EAEtD,OAAO,KAAK,WAAW,KACnBE,EACA,CACI,WAAAN,EACA,eAAAC,CACJ,EACA,CAAE,GAAGE,EAAkB,QAAAI,CAAQ,CAAA,CAEvC,CAEA,0BAA0BE,EAA+BC,EAAeV,EAAoBW,EAAgB,CAClG,MAAAC,EAAO,SAAS,cAAc,MAAM,EAC1CA,EAAK,OAAS,OACTA,EAAA,OAAS,GAAGH,CAAqB,kCACtCG,EAAK,OAAS,SACL,SAAA,KAAK,YAAYA,CAAI,EAEzBC,EAAA,KAAAd,EAAAe,GAAA,UAAmBF,EAAM,QAASF,GAClCG,EAAA,KAAAd,EAAAe,GAAA,UAAmBF,EAAM,aAAcZ,GACvCa,EAAA,KAAAd,EAAAe,GAAA,UAAmBF,EAAM,SAAUD,GAExCC,EAAK,OAAO,EACZA,EAAK,OAAO,CAChB,CASJ,CAtGAb,EAAA,YA+FIe,EAAA,SAAmBF,EAAuBG,EAAcC,EAAe,CAC7D,MAAAC,EAAQ,SAAS,cAAc,OAAO,EAC5CA,EAAM,KAAO,SACbA,EAAM,KAAOF,EACbE,EAAM,MAAQD,EACdJ,EAAK,YAAYK,CAAK,CAC1B"}