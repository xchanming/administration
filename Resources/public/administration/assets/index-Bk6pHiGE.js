const i='{% block sw_sales_channel_defaults_select %} <sw-container class="sw-sales-channel-defaults-select" gap="0px 30px" columns="1fr 200px" > <template v-if="salesChannel"> <sw-entity-multi-select :label-property="labelProperty" :disabled="disabled" :class="multiSelectClass" :label="propertyLabel" :help-text="helpText" :entity-collection="propertyCollection" :criteria="criteria" @update:entity-collection="updateCollection" > <template v-if="shouldShowActiveState" #result-label-preview="{ item }" > <sw-icon class="sw-sales-channel-defaults-select__active-icon" size="6" :color="getActiveIconColor(item)" name="solid-circle" /> </template> </sw-entity-multi-select> <sw-entity-single-select :label-property="labelProperty" :disabled="disabled" :class="singleSelectClass" :label="defaultPropertyLabel" :help-text="helpText" required show-clearable-button :entity="propertyEntityName" :value="defaultId" :error="defaultsValueError" :criteria="criteria" :selection-disabling-method="isDisabledItem" :disabled-selection-tooltip="{ message: disabledTooltipMessage }" @update:value="updateDefault" /> </template> </sw-container> {% endblock %}',{Mixin:s}=Cicada,n={template:i,compatConfig:Cicada.compatConfig,inject:["feature"],mixins:[s.getByName("notification")],props:{salesChannel:{type:Object,required:!1,default:null},propertyName:{type:String,required:!0},propertyLabel:{type:String,required:!0},defaultPropertyName:{type:String,required:!0},defaultPropertyLabel:{type:String,required:!0},propertyNameInDomain:{type:String,required:!1,default:null},helpText:{type:String,required:!1,default:null},disabled:{type:Boolean,required:!1,default:!1},criteria:{type:Object,required:!1,default:void 0},disabledTooltipMessage:{type:String,required:!1,default:""},shouldShowActiveState:{type:Boolean,required:!1,default:!1}},computed:{propertyCollection:{get(){return this.salesChannel?this.salesChannel[this.propertyName]:[]},set(e){this.salesChannel&&(this.salesChannel[this.propertyName]=e)}},defaultId:{get(){return this.salesChannel?this.salesChannel[this.defaultPropertyName]:null},set(e){this.salesChannel&&(this.salesChannel[this.defaultPropertyName]=e)}},propertyEntityName(){return this.propertyCollection?this.propertyCollection.entity:null},propertyNameKebabCase(){return Cicada.Utils.string.kebabCase(this.propertyName)},multiSelectClass(){return`sw-sales-channel-detail__select-${this.propertyNameKebabCase}`},singleSelectClass(){return`sw-sales-channel-detail__assign-${this.propertyNameKebabCase}`},defaultsValueError(){return Cicada.State.getters["error/getApiError"](this.salesChannel,this.defaultPropertyName)},labelProperty(){return this.propertyEntityName==="payment_method"?"distinguishableName":"name"}},methods:{updateCollection(e){if(e.length>this.propertyCollection.length){this.addItem(e);return}this.removeItem(e)},getNotInCollection(e,t){return e.find(a=>!t.some(r=>r.id===a.id))||null},addItem(e){const t=this.getNotInCollection(e,this.propertyCollection);this.propertyCollection=e,this.propertyCollection.length===1&&(this.defaultId=t.id)},removeItem(e){const t=this.getNotInCollection(this.propertyCollection,e);if(t!==null){if(this.propertyNameInDomain){const l=this.getDomainUsingValue(t);if(l!==null){this.createNotificationError({message:this.$tc("sw-sales-channel.sw-sales-channel-defaults-select.messageError",0,{url:l.url})});return}}this.propertyCollection=e,this.defaultId===t.id&&(this.defaultId=null)}},getDomainUsingValue(e){return this.salesChannel.domains.find(t=>t[this.propertyNameInDomain]===e.id)||null},updateDefault(e,t){this.defaultId=e,e&&!this.propertyCollection.has(e)&&this.propertyCollection.add(t)},isDisabledItem(e){return e.active===!1},getActiveIconColor(e){return this.isDisabledItem(e)?"#d1d9e0":"#37d046"}}};export{n as default};
//# sourceMappingURL=index-Bk6pHiGE.js.map
