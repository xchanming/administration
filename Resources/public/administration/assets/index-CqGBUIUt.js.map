{"version":3,"file":"index-CqGBUIUt.js","sources":["../../../app/administration/src/app/component/grid/sw-grid/sw-grid.html.twig","../../../app/administration/src/app/component/grid/sw-grid/index.js"],"sourcesContent":["<!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n{% block sw_grid %}\n<div\n    class=\"sw-grid\"\n    :class=\"gridClasses\"\n>\n    <slot name=\"content\">\n        <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n        {% block sw_grid_slot_content %}\n        <div\n            class=\"sw-grid__content\"\n            :class=\"gridContentClasses\"\n        >\n\n            <slot\n                v-if=\"header\"\n                name=\"header\"\n            >\n                <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n                {% block sw_grid_slot_header %}\n                <div\n                    class=\"sw-grid__header\"\n                    :style=\"[columnFlex, { paddingRight: `${scrollbarOffset}px` }]\"\n                >\n                    <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n                    {% block sw_grid_slot_header_cell_selectable %}\n                    <div\n                        v-if=\"selectable\"\n                        class=\"sw-grid-column\"\n                    >\n                        <div class=\"sw-grid__cell-content\">\n                            <sw-checkbox-field\n                                v-model:value=\"allSelectedChecked\"\n                                @update:value=\"selectAll\"\n                            />\n                        </div>\n                    </div>\n                    {% endblock %}\n\n                    <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n                    {% block sw_grid_slot_header_cell %}\n                    <div\n                        v-for=\"(column, columnIndex) in columns\"\n                        :key=\"columnIndex\"\n                        :class=\"[{ 'sw-grid-column': true, 'is--sortable': column.sortable, 'is--sorted': sort === column.dataIndex }, `sw-grid-column--${column.align}`]\"\n                        role=\"gridcell\"\n                        tabindex=\"0\"\n                        @click=\"onGridCellClick($event, column)\"\n                        @keydown.enter=\"onGridCellClick($event, column)\"\n                    >\n\n                        <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n                        {% block sw_grid_slot_header_cell_content %}\n                        <div class=\"sw-grid__cell-content\">\n                            <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n                            {% block sw_grid_slot_header_cell_icon_label %}\n                            <span\n                                v-if=\"column.iconLabel\"\n                                class=\"sw-grid__cell-label\"\n                            >\n                                <sw-icon\n                                    :name=\"column.iconLabel\"\n                                    :title=\"column.label\"\n                                />\n                            </span>\n                            {% endblock %}\n\n                            <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n                            {% block sw_grid_slot_header_cell_label %}\n                            <span\n                                v-else-if=\"column.label\"\n                                class=\"sw-grid__cell-label\"\n                            >{{ column.label }}</span>\n                            {% endblock %}\n\n                            <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n                            {% block sw_grid_slot_header_cell_sortable %}\n                            <span\n                                v-if=\"column.sortable && sort === column.dataIndex\"\n                                class=\"sw-grid_cell-sortable\"\n                            >\n                                <sw-icon\n                                    v-if=\"sortDir === 'ASC'\"\n                                    name=\"regular-chevron-down-xxs\"\n                                    size=\"16px\"\n                                />\n                                <sw-icon\n                                    v-else\n                                    name=\"regular-chevron-up-xxs\"\n                                    size=\"16px\"\n                                />\n                            </span>\n                            {% endblock %}\n                        </div>\n                        {% endblock %}\n                    </div>\n                    {% endblock %}\n                </div>\n                {% endblock %}\n            </slot>\n\n            <slot name=\"body\">\n                <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n                {% block sw_grid_slot_body %}\n                <div\n                    ref=\"swGridBody\"\n                    class=\"sw-grid__body\"\n                >\n\n                    <slot\n                        v-for=\"(item, index) in items\"\n                        :key=\"getKey(item)\"\n                        name=\"items\"\n                    >\n                        <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n                        {% block sw_grid_body_slot_items %}\n                        <sw-grid-row\n                            :style=\"columnFlex\"\n                            :item=\"item\"\n                            :index=\"index\"\n                            :allow-inline-edit=\"allowInlineEdit\"\n                            :class=\"['sw-grid__row--' + index, { 'is--selected': isSelected(item.id), 'is--deleted': item.isDeleted, 'is--new': item.isLocal }]\"\n                            @inline-edit-finish=\"onInlineEditFinish\"\n                            @inline-edit-start=\"onInlineEditStart\"\n                        >\n\n                            <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n                            {% block sw_grid_body_item_selectable %}\n                            <div\n                                v-if=\"selectable\"\n                                class=\"sw-grid-column\"\n                            >\n                                <div class=\"sw-grid__cell-content\">\n                                    {# @deprecated tag:v6.7.0 - The property :disabled will be removed #}\n                                    <sw-checkbox-field\n                                        :id=\"item.id\"\n                                        :value=\"isSelected(item.id)\"\n                                        :disabled=\"isGridDisabled(item.id)\"\n                                        @update:value=\"selectItem($event, item)\"\n                                    />\n                                </div>\n                            </div>\n                            {% endblock %}\n\n                            <slot\n                                name=\"columns\"\n                                :item=\"item\"\n                            >\n                                <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n                                {% block sw_grid_slot_columns %}{% endblock %}\n                            </slot>\n                        </sw-grid-row>\n                        {% endblock %}\n                    </slot>\n\n                    <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n                    {% block sw_grid_slot_empty_columns %}\n                    <slot\n                        v-if=\"!items.length\"\n                        name=\"empty\"\n                    >\n                        <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n                        {% block sw_grid_slot_empty_columns_content %}{% endblock %}\n                    </slot>\n                    {% endblock %}\n                </div>\n                {% endblock %}\n            </slot>\n\n            <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n            {% block sw_grid_pagination %}\n            <div\n                v-if=\"hasPaginationSlot && items.length\"\n                class=\"sw-grid__pagination\"\n            >\n                <slot name=\"pagination\">\n                    <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n                    {% block sw_grid_slot_pagination %}{% endblock %}\n                </slot>\n            </div>\n            {% endblock %}\n        </div>\n        {% endblock %}\n    </slot>\n</div>\n{% endblock %}\n","import template from './sw-grid.html.twig';\nimport './sw-grid.scss';\n\nconst { Component } = Cicada;\nconst { dom } = Cicada.Utils;\n\n/**\n * @package admin\n *\n * @private\n * @status ready\n * @example-type static\n * @component-example\n * <sw-grid :items=\"[\n *     {company:'Wordify',name:'Portia Jobson'},\n *     {company:'Twitternation',name:'Baxy Eardley'},\n *     {company:'Skidoo',name:'Arturo Staker'},\n *     {company:'Meetz',name:'Dalston Top'},\n *     {company:'Photojam',name:'Neddy Jensen'}]\">\n *     <template #columns=\"{ item }\">\n *         <sw-grid-column flex=\"minmax(200px, 1fr)\" label=\"Company\">\n *             <strong>{{ item.company }}</strong>\n *         </sw-grid-column>\n *\n *         <sw-grid-column flex=\"minmax(200px, 1fr)\" label=\"Full name\">\n *             {{ item.name }}\n *         </sw-grid-column>\n *     </template>\n * </sw-grid>\n */\n// eslint-disable-next-line sw-deprecation-rules/private-feature-declarations\nComponent.register('sw-grid', {\n    template,\n\n    compatConfig: Cicada.compatConfig,\n\n    provide() {\n        return {\n            swGridInlineEditStart: this.inlineEditingStart,\n            swGridInlineEditCancel: this.disableActiveInlineEditing,\n            swOnInlineEditStart: this.onInlineEditStart,\n            swRegisterGridDisableInlineEditListener: this.registerGridDisableInlineEditListener,\n            swUnregisterGridDisableInlineEditListener: this.unregisterGridDisableInlineEditListener,\n            swGridSetColumns: this.setColumns,\n            swGridColumns: this.columns,\n        };\n    },\n\n    emits: [\n        'inline-edit-finish',\n        'inline-edit-start',\n        'sw-grid-disable-inline-editing',\n        'inline-edit-cancel',\n        'sw-grid-select-all',\n        'sw-grid-select-item',\n        'sort-column',\n    ],\n\n    props: {\n        items: {\n            type: Array,\n            required: false,\n            default: null,\n        },\n\n        selectable: {\n            type: Boolean,\n            required: false,\n            // eslint-disable-next-line vue/no-boolean-default\n            default: true,\n        },\n\n        variant: {\n            type: String,\n            required: false,\n            default: 'normal',\n        },\n\n        header: {\n            type: Boolean,\n            required: false,\n            // eslint-disable-next-line vue/no-boolean-default\n            default: true,\n        },\n\n        sortBy: {\n            type: String,\n            required: false,\n            default: null,\n        },\n\n        sortDirection: {\n            type: String,\n            required: false,\n            default: 'ASC',\n        },\n\n        isFullpage: {\n            type: Boolean,\n            required: false,\n            default: false,\n        },\n\n        table: {\n            type: Boolean,\n            required: false,\n            default: false,\n        },\n\n        allowInlineEdit: {\n            type: Boolean,\n            required: false,\n            // eslint-disable-next-line vue/no-boolean-default\n            default: true,\n        },\n    },\n\n    data() {\n        return {\n            columns: [],\n            selection: {},\n            scrollbarOffset: 0,\n            editing: null,\n            allSelectedChecked: false,\n            swGridDisableInlineEditListener: [],\n        };\n    },\n\n    computed: {\n        sort() {\n            return this.sortBy;\n        },\n\n        sortDir() {\n            return this.sortDirection;\n        },\n\n        sizeClass() {\n            return `sw-grid--${this.variant}`;\n        },\n\n        hasPaginationSlot() {\n            return !!this.$slots.pagination;\n        },\n\n        gridClasses() {\n            return {\n                'sw-grid--fullpage': this.isFullpage,\n                'sw-grid--table': this.table,\n                [this.sizeClass]: true,\n            };\n        },\n\n        gridContentClasses() {\n            return {\n                'sw-grid__content--header': this.header,\n                'sw-grid__content--pagination': this.hasPaginationSlot,\n            };\n        },\n\n        columnFlex() {\n            let flex = this.selectable === true ? '50px ' : '';\n\n            this.columns.forEach((column) => {\n                if (`${parseInt(column.flex, 10)}` === column.flex) {\n                    flex += `${column.flex}fr `;\n                } else {\n                    flex += `${column.flex} `;\n                }\n            });\n\n            return {\n                'grid-template-columns': flex.trim(),\n            };\n        },\n    },\n\n    updated() {\n        this.updatedComponent();\n    },\n\n    created() {\n        this.createdComponent();\n    },\n\n    methods: {\n        createdComponent() {\n            const that = this;\n\n            this.registerInlineEditingEvents();\n\n            this.$device.onResize({\n                listener() {\n                    that.setScrollbarOffset();\n                },\n                component: this,\n            });\n        },\n\n        updatedComponent() {\n            this.setScrollbarOffset();\n        },\n\n        registerGridDisableInlineEditListener(listener) {\n            this.swGridDisableInlineEditListener.push(listener);\n        },\n\n        unregisterGridDisableInlineEditListener(listener) {\n            this.swGridDisableInlineEditListener = this.swGridDisableInlineEditListener.filter((l) => l !== listener);\n        },\n\n        onInlineEditFinish(item) {\n            this.editing = null;\n            this.$emit('inline-edit-finish', item);\n        },\n\n        onInlineEditStart(item) {\n            this.$emit('inline-edit-start', item);\n        },\n\n        registerInlineEditingEvents() {\n            // New way is using the provide/inject\n            if (this.isCompatEnabled('INSTANCE_EVENT_EMITTER')) {\n                // eslint-disable-next-line vue/no-deprecated-events-api\n                this.$on('sw-row-inline-edit-start', this.inlineEditingStart);\n                // eslint-disable-next-line vue/no-deprecated-events-api\n                this.$on('sw-row-inline-edit-cancel', this.disableActiveInlineEditing);\n            }\n        },\n\n        inlineEditingStart(id) {\n            if (this.editing != null) {\n                this.$emit('sw-grid-disable-inline-editing', this.editing);\n            }\n\n            this.editing = id;\n        },\n\n        disableActiveInlineEditing(item, index) {\n            this.editing = null;\n            this.$emit('inline-edit-cancel', item, index);\n        },\n\n        selectAll(selected) {\n            this.selection = {};\n\n            this.items.forEach((item) => {\n                if (this.isSelected(item.id) !== selected) {\n                    this.selectItem(selected, item);\n                }\n            });\n\n            this.allSelectedChecked = selected;\n            this.$emit('sw-grid-select-all', this.selection);\n        },\n\n        getSelection() {\n            return this.selection;\n        },\n\n        selectItem(selected, item) {\n            const selection = this.selection;\n\n            if (selected === true) {\n                selection[item.id] = item;\n            } else if (!selected && selection[item.id]) {\n                delete this.selection[item.id];\n            }\n\n            this.selection = {};\n            this.selection = selection;\n\n            this.checkSelection();\n            this.$emit('sw-grid-select-item', this.selection, item, selected);\n        },\n\n        isSelected(itemId) {\n            return typeof this.selection[itemId] !== 'undefined';\n        },\n\n        /**\n         * @deprecated tag:v6.7.0 - isGridDisabled function will be removed.\n         */\n        isGridDisabled(itemId) {\n            return this.isSelected(itemId) && this.selection[itemId].gridDisabled;\n        },\n\n        checkSelection() {\n            this.allSelectedChecked = !this.items.some((item) => {\n                return this.selection[item.id] === undefined;\n            });\n        },\n\n        getScrollBarWidth() {\n            if (!this.$el) {\n                return 0;\n            }\n\n            const gridBody = this.$el.getElementsByClassName('sw-grid--body')[0];\n\n            if (gridBody.offsetWidth && gridBody.clientWidth) {\n                return gridBody.offsetWidth - gridBody.clientWidth;\n            }\n\n            return 0;\n        },\n\n        onGridCellClick(event, column) {\n            if (!column.sortable) {\n                return;\n            }\n\n            this.$emit('sw-grid-disable-inline-editing');\n            this.$emit('sort-column', column);\n        },\n\n        setScrollbarOffset() {\n            this.scrollbarOffset = dom.getScrollbarWidth(this.$refs.swGridBody);\n        },\n\n        setColumns(columns) {\n            this.columns = columns;\n        },\n\n        getKey(item) {\n            if (item.id === undefined || item.id === null) {\n                // see https://vuejs.org/api/built-in-special-attributes.html#key\n                // we use child components with state\n                // (at least sw-grid-row, maybe even form elements, depending on the slot usage)\n                // means not having a proper unique identifier for each row likely causes issues.\n                // For example the child components may not be properly destroyed and created and just\n                // \"patched\" in place with a completely different item / row\n                Cicada.Utils.debug.error(\n                    'sw-grid item without `id` property',\n                    item,\n                    'more info here: https://vuejs.org/api/built-in-special-attributes.html#key',\n                );\n                return undefined;\n            }\n\n            return item.id;\n        },\n    },\n});\n"],"names":["template","Component","dom","flex","column","that","listener","l","item","id","index","selected","selection","itemId","gridBody","event","columns"],"mappings":"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"}