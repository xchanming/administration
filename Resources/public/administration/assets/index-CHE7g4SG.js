const r='{% block sw_entity_multi_id_select %} <sw-entity-multi-select :entity-collection="collection" :context="context" :criteria="criteria" :disabled="disabled" v-bind="$attrs" @update:entity-collection="updateIds" > {% block sw_entity_multi_id_select_label_property %} <template #selection-label-property="{ item, index, labelProperty, valueProperty }"> <slot name="selection-label-property" v-bind="{ item, index, labelProperty, valueProperty }" ></slot> </template> {% endblock %} {% block sw_entity_multi_id_select_results_list_before %} <template #before-item-list> <slot name="before-item-list"></slot> </template> {% endblock %} {% block sw_entity_multi_id_select_results_list_result_label %} <template #result-label-property="{ item, index, labelProperty, valueProperty, searchTerm, getKey, highlightSearchTerm }"> <slot name="result-label-property" v-bind="{ item, index, labelProperty, valueProperty, searchTerm, getKey, highlightSearchTerm }" ></slot> </template> {% endblock %} {% block sw_entity_multi_id_select_results_list_result_description %} <template #result-description-property="{ item, searchTerm, highlightSearchTerm }"> <slot name="result-description-property" v-bind="{ item, searchTerm, highlightSearchTerm }" ></slot> </template> {% endblock %} {% block sw_entity_multi_id_select_results_list_after %} <template #after-item-list> <slot name="after-item-list"></slot> </template> {% endblock %} <template #label> <slot name="label"></slot> </template> <template #hint> <slot name="hint"></slot> </template> </sw-entity-multi-select> {% endblock %}',{Component:s,Context:o,Mixin:a}=Shopware,{EntityCollection:n,Criteria:l}=Shopware.Data;s.register("sw-entity-multi-id-select",{template:r,inheritAttrs:!1,inject:["feature"],emits:["update:value"],mixins:[a.getByName("remove-api-error")],props:{value:{type:Array,required:!1,default(){return[]}},repository:{type:Object,required:!0},criteria:{type:Object,required:!1,default(){return new l(1,25)}},context:{type:Object,required:!1,default(){return o.api}},disabled:{type:Boolean,required:!1,default:!1}},data(){return{collection:null}},watch:{value(){if(this.collection===null){this.createdComponent();return}this.collection.getIds()!==this.value&&this.createdComponent()}},created(){this.createdComponent()},methods:{createdComponent(){const e=new n(this.repository.route,this.repository.entityName,this.context);if(this.collection===null&&(this.collection=e),this.value.length<=0)return this.collection=e,Promise.resolve(this.collection);const t=l.fromCriteria(this.criteria);return t.setIds(this.value),t.setTerm(""),t.queries=[],this.repository.search(t,{...this.context,inheritance:!0}).then(i=>(this.collection=i,!this.collection.length&&this.value.length&&this.updateIds(this.collection),this.collection))},updateIds(e){this.collection=e,this.$emit("update:value",e.getIds())}}});
