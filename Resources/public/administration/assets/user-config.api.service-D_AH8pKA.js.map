{"version":3,"file":"user-config.api.service-D_AH8pKA.js","sources":["../../../app/administration/src/core/service/api/user-config.api.service.js"],"sourcesContent":["import ApiService from '../api.service';\n\n/**\n * Gateway for the API end point 'user-config'\n * @class\n * @extends ApiService\n * @package services-settings\n */\nclass UserConfigService extends ApiService {\n    constructor(httpClient, loginService, apiEndpoint = '_info/config-me') {\n        super(httpClient, loginService, apiEndpoint);\n        this.name = 'userConfigService';\n    }\n\n    /**\n     * @description Process search user-config based on provide array keys of user-config,\n     * if keys is null, get all config of current logged-in user\n     *\n     * @param {Array|null} keys\n     * [\n     *     key_1,\n     *     key_2,\n     * ]\n     * @returns {Object}\n     * {\n     *     key_1: [value1],\n     *     key_2: [value2],\n     * }\n     */\n    search(keys = null) {\n        const headers = this.getBasicHeaders();\n        const params = { keys };\n\n        return this.httpClient\n            .get(this.getApiBasePath(), {\n                params,\n                headers,\n            })\n            .then((response) => {\n                return ApiService.handleResponse(response);\n            })\n            .catch((error) => {\n                Cicada.Utils.debug.error(error);\n            });\n    }\n\n    /**\n     * @description Process mass upsert user-config for current logged-in user\n     * @param {Array} upsertData\n     * {\n     *     key_1: [value1],\n     *     key_2: [value2],\n     * }\n     */\n    upsert(upsertData) {\n        const headers = this.getBasicHeaders();\n\n        return this.httpClient.post(this.getApiBasePath(), upsertData, { headers }).then((response) => {\n            return ApiService.handleResponse(response);\n        });\n    }\n}\n\n// eslint-disable-next-line sw-deprecation-rules/private-feature-declarations\nexport default UserConfigService;\n"],"names":["UserConfigService","ApiService","httpClient","loginService","apiEndpoint","keys","headers","params","response","error","upsertData"],"mappings":"iHAQA,MAAMA,UAA0BC,CAAW,CACvC,YAAYC,EAAYC,EAAcC,EAAc,kBAAmB,CACnE,MAAMF,EAAYC,EAAcC,CAAW,EAC3C,KAAK,KAAO,mBACf,CAiBD,OAAOC,EAAO,KAAM,CAChB,MAAMC,EAAU,KAAK,kBACfC,EAAS,CAAE,KAAAF,GAEjB,OAAO,KAAK,WACP,IAAI,KAAK,iBAAkB,CACxB,OAAAE,EACA,QAAAD,CAChB,CAAa,EACA,KAAME,GACIP,EAAW,eAAeO,CAAQ,CAC5C,EACA,MAAOC,GAAU,CACd,OAAO,MAAM,MAAM,MAAMA,CAAK,CAC9C,CAAa,CACR,CAUD,OAAOC,EAAY,CACf,MAAMJ,EAAU,KAAK,kBAErB,OAAO,KAAK,WAAW,KAAK,KAAK,eAAc,EAAII,EAAY,CAAE,QAAAJ,CAAS,CAAA,EAAE,KAAME,GACvEP,EAAW,eAAeO,CAAQ,CAC5C,CACJ,CACL"}