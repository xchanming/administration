{"version":3,"file":"index-DbCBz14K.js","sources":["../../../app/administration/src/module/sw-property/component/sw-property-option-list/sw-property-option-list.html.twig","../../../app/administration/src/module/sw-property/component/sw-property-option-list/index.js"],"sourcesContent":["<!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n{% block sw_property_option_list %}\n<sw-card\n    :is-loading=\"isLoading\"\n    class=\"sw-property-option-list\"\n    position-identifier=\"sw-property-option-list\"\n    :title=\"$tc('sw-property.detail.cardTitle')\"\n>\n\n    <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n    {% block sw_property_option_list_toolbar %}\n    <div class=\"sw-property-option-list__toolbar\">\n\n        <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n        {% block sw_property_option_list_toolbar_container %}\n        <sw-container\n            columns=\"1fr 32px minmax(100px, 200px)\"\n            gap=\"0 10px\"\n        >\n\n            <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n            {% block sw_property_option_list_toolbar_search %}\n            <sw-simple-search-field\n                v-model:value=\"term\"\n                size=\"small\"\n                variant=\"form\"\n                @search-term-change=\"onSearch\"\n            />\n            {% endblock %}\n\n            <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n            {% block sw_property_option_list_toolbar_delete %}\n            <sw-button\n                v-tooltip=\"{\n                    message: $tc('sw-privileges.tooltip.warning'),\n                    disabled: acl.can('property.editor'),\n                    showOnDisabledElements: true\n                }\"\n                :disabled=\"deleteButtonDisabled || !acl.can('property.editor')\"\n                square\n                size=\"small\"\n                class=\"sw-property-option-list__delete-button\"\n                @click=\"onDeleteOptions\"\n            >\n                <sw-icon\n                    name=\"regular-trash\"\n                    small\n                />\n            </sw-button>\n            {% endblock %}\n\n            <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n            {% block sw_property_option_list_toolbar_add %}\n            <sw-container v-tooltip=\"tooltipAdd\">\n                <sw-button\n                    v-tooltip=\"{\n                        message: $tc('sw-privileges.tooltip.warning'),\n                        disabled: acl.can('property.editor'),\n                        showOnDisabledElements: true\n                    }\"\n                    :disabled=\"disableAddButton\"\n                    size=\"small\"\n                    class=\"sw-property-option-list__add-button\"\n                    @click=\"onAddOption(propertyGroup)\"\n                >\n                    {{ $tc('sw-property.detail.addOption') }}\n                </sw-button>\n            </sw-container>\n            {% endblock %}\n        </sw-container>\n        {% endblock %}\n    </div>\n    {% endblock %}\n\n    <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n    {% block sw_property_option_list_grid %}\n    <template #grid>\n        <sw-one-to-many-grid\n            ref=\"grid\"\n            :is-loading=\"isLoading\"\n            :collection=\"propertyGroup.options\"\n            :data-source=\"dataSource\"\n            :columns=\"getGroupColumns()\"\n            :full-page=\"false\"\n            :local-mode=\"propertyGroup.isNew()\"\n            :allow-inline-edit=\"allowInlineEdit\"\n            :sort-by=\"sortBy\"\n            :sort-direction=\"sortDirection\"\n            @selection-change=\"onGridSelectionChanged\"\n        >\n\n            <template #column-name=\"{ item, isInlineEdit }\">\n                <template v-if=\"isInlineEdit\">\n                    <sw-text-field\n                        v-model:value=\"item.name\"\n                        size=\"small\"\n                    />\n                </template>\n\n                <a\n                    v-else\n                    class=\"sw-settings-option-detail__link\"\n                    role=\"button\"\n                    tabindex=\"0\"\n                    @click=\"onOptionEdit(item)\"\n                    @keydown.enter=\"onOptionEdit(item)\"\n                >\n                    {{ item.translated.name }}\n                </a>\n            </template>\n\n            <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n            {% block sw_settings_property_list_grid_columns_actions %}\n            <template #more-actions=\"{ item }\">\n                <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n                {% block sw_settings_property_list_grid_columns_actions_edit %}\n                <sw-context-menu-item\n                    class=\"sw-property-option-list__edit-action\"\n                    :disabled=\"!acl.can('property.editor')\"\n                    @click=\"onOptionEdit(item)\"\n                >\n                    {{ $tc('sw-property.list.contextMenuView') }}\n                </sw-context-menu-item>\n                {% endblock %}\n            </template>\n            {% endblock %}\n\n            <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n            {% block sw_property_list_grid_columns_actions_delete %}\n            <template #delete-action=\"{ item }\">\n                <sw-context-menu-item\n                    variant=\"danger\"\n                    :disabled=\"!acl.can('property.editor')\"\n                    @click=\"onSingleOptionDelete(item.id)\"\n                >\n                    {{ $tc('sw-property.list.contextMenuDelete') }}\n                </sw-context-menu-item>\n            </template>\n            {% endblock %}\n        </sw-one-to-many-grid>\n        {% endblock %}\n    </template>\n    <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n    {% block sw_property_option_list_detail %}\n    <sw-property-option-detail\n        v-if=\"currentOption\"\n        :current-option=\"currentOption\"\n        :allow-edit=\"acl.can('property.editor')\"\n        @save-option-edit=\"onSaveOption\"\n        @cancel-option-edit=\"onCancelOption\"\n    />\n    {% endblock %}\n\n    <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n    {% block sw_property_option_list_loader %}\n    <sw-loader v-if=\"isLoading\" />\n    {% endblock %}\n</sw-card>\n{% endblock %}\n","/*\n * @package inventory\n */\n\nimport template from './sw-property-option-list.html.twig';\nimport './sw-property-option-list.scss';\n\nconst { State, Mixin } = Cicada;\n\n// eslint-disable-next-line sw-deprecation-rules/private-feature-declarations\nexport default {\n    template,\n\n    compatConfig: Cicada.compatConfig,\n\n    inject: [\n        'repositoryFactory',\n        'acl',\n    ],\n\n    mixins: [\n        Mixin.getByName('listing'),\n    ],\n\n    props: {\n        propertyGroup: {\n            type: Object,\n            required: true,\n        },\n        optionRepository: {\n            type: Object,\n            required: true,\n        },\n    },\n\n    data() {\n        return {\n            isLoading: false,\n            currentOption: null,\n            term: null,\n            naturalSorting: true,\n            selection: null,\n            deleteButtonDisabled: true,\n            sortBy: 'name',\n            sortDirection: 'ASC',\n            showDeleteModal: false,\n        };\n    },\n\n    computed: {\n        isSystemLanguage() {\n            return State.get('context').api.systemLanguageId === this.currentLanguage;\n        },\n\n        currentLanguage() {\n            return State.get('context').api.languageId;\n        },\n\n        allowInlineEdit() {\n            return !!this.acl.can('property.editor');\n        },\n\n        tooltipAdd() {\n            return {\n                message: this.$tc('sw-property.detail.addOptionNotPossible'),\n                disabled: this.isSystemLanguage,\n            };\n        },\n\n        disableAddButton() {\n            return this.propertyGroup.isLoading || !this.isSystemLanguage || !this.acl.can('property.editor');\n        },\n\n        dataSource() {\n            return this.propertyGroup.options && this.propertyGroup.options.slice(0, this.limit);\n        },\n    },\n\n    watch: {\n        currentLanguage() {\n            this.refreshOptionList();\n        },\n    },\n\n    methods: {\n        onSearch() {\n            this.propertyGroup.options.criteria.setTerm(this.term);\n            this.refreshOptionList();\n        },\n\n        onGridSelectionChanged(selection, selectionCount) {\n            this.selection = selection;\n            this.deleteButtonDisabled = selectionCount <= 0;\n        },\n\n        onOptionDelete(option) {\n            if (option.isNew()) {\n                this.propertyGroup.options.remove(option.id);\n                return Promise.resolve();\n            }\n\n            return this.optionRepository.delete(option.id);\n        },\n\n        onSingleOptionDelete(option) {\n            this.$refs.grid.deleteItem(option);\n        },\n\n        onDeleteOptions() {\n            if (!this.selection) {\n                return;\n            }\n\n            Promise.allSettled(Object.values(this.selection).map((option) => this.onOptionDelete(option))).then(() => {\n                this.refreshOptionList();\n            });\n        },\n\n        onAddOption() {\n            if (!this.isSystemLanguage) {\n                return false;\n            }\n\n            this.currentOption = this.optionRepository.create();\n\n            return true;\n        },\n\n        onCancelOption() {\n            // close modal\n            this.currentOption = null;\n\n            this.$refs.grid.load();\n        },\n\n        onSaveOption() {\n            if (this.propertyGroup.isNew()) {\n                return this.saveGroupLocal();\n            }\n\n            return this.saveGroupRemote();\n        },\n\n        saveGroupLocal() {\n            if (this.currentOption.isNew()) {\n                if (!this.propertyGroup.options.has(this.currentOption.id)) {\n                    this.propertyGroup.options.add(this.currentOption);\n                }\n\n                this.currentOption = null;\n            }\n\n            return Promise.resolve();\n        },\n\n        saveGroupRemote() {\n            return this.optionRepository.save(this.currentOption).then(() => {\n                // closing modal\n                this.currentOption = null;\n                this.$refs.grid.load();\n            });\n        },\n\n        refreshOptionList() {\n            this.isLoading = true;\n\n            this.$refs.grid.load().then(() => {\n                this.isLoading = false;\n            });\n        },\n\n        onOptionEdit(option) {\n            const localCopy = option;\n            localCopy._isNew = false;\n\n            this.currentOption = localCopy;\n        },\n\n        getGroupColumns() {\n            return [\n                {\n                    property: 'name',\n                    label: this.$tc('sw-property.detail.labelOptionName'),\n                    routerLink: 'sw.property.detail',\n                    inlineEdit: 'string',\n                    primary: true,\n                },\n                {\n                    property: 'colorHexCode',\n                    label: this.$tc('sw-property.detail.labelOptionColor'),\n                },\n                {\n                    property: 'position',\n                    label: this.$tc('sw-property.detail.labelOptionPosition'),\n                    inlineEdit: 'number',\n                },\n            ];\n        },\n    },\n};\n"],"names":["template","State","Mixin","index","selection","selectionCount","option","localCopy"],"mappings":"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"}