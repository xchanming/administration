const l=`<sw-card class="sw-flow-list-flow-templates-card" position-identifier="sw-flow-list-flow-templates-card" > <div class="sw-flow-list-my-templates"> <div class="sw-flow-list-my-templates__content"> <sw-entity-listing v-if="total" class="sw-flow-list-my-templates__grid" :show-settings="false" :allow-column-edit="false" :allow-view="false" :allow-edit="false" :allow-delete="false" :allow-bulk-edit="false" :columns="flowTemplateColumns" :sort-by="sortBy" :sort-direction="sortDirection" :repository="flowTemplateRepository" :items="flowTemplates" :is-loading="isLoading" :full-page="false" :show-selection="false" :show-actions="false" :plain-appearance="true" @column-sort="onSortColumn" @page-change="onPageChange" > <template #column-name="{ item }"> <a class="sw-flow-list-my-flows__content__update-flow-template-link" role="link" tabindex="0" @click="onEditFlow(item)" @keydown.enter="onEditFlow(item)" > {{ item.name }} </a> </template> <template #column-createFlow="{ item }"> <sw-internal-link :router-link="{ name: 'sw.flow.create', params: { flowTemplateId: item.id }}" :disabled="!acl.can('flow.creator')" class="sw-flow-list-my-flows__content__create-flow-link" > {{ $tc('sw-flow.template.create') }} </sw-internal-link> </template> </sw-entity-listing> <sw-empty-state v-else class="sw-flow-list-my_templates__empty-state" :title="$tc('sw-flow.list.emptyStateTitle')" :subline="$tc('sw-flow.list.emptyStateSubTitle')" > <template #icon> <img :alt="$tc('sw-flow.list.emptyStateTitle')" :src="assetFilter('/administration/static/img/empty-states/settings-empty-state.svg')" > </template> </sw-empty-state> </div> </div> </sw-card>`,{Mixin:a,Data:{Criteria:e}}=Cicada,s=Cicada.Component.wrapComponentConfig({template:l,compatConfig:Cicada.compatConfig,inject:["acl","repositoryFactory"],mixins:[a.getByName("listing")],props:{searchTerm:{type:String,required:!1,default:""}},data(){return{sortBy:"createdAt",sortDirection:"DESC",total:0,isLoading:!1,flowTemplates:[]}},metaInfo(){return{title:this.$createTitle()}},computed:{flowTemplateRepository(){return this.repositoryFactory.create("flow_template")},flowTemplateCriteria(){const t=new e(1,25);return this.searchTerm&&t.setTerm(this.searchTerm),t.addSorting(e.sort(this.sortBy,this.sortDirection)).addSorting(e.sort("updatedAt","DESC")),t},flowTemplateColumns(){return[{property:"name",dataIndex:"name",label:this.$tc("sw-flow.list.labelColumnName"),allowResize:!1,align:"left"},{property:"config.description",label:this.$tc("sw-flow.list.labelColumnDescription"),allowResize:!1,sortable:!1,align:"left"},{property:"createFlow",label:"",allowResize:!1,sortable:!1,align:"right"}]},assetFilter(){return Cicada.Filter.getByName("asset")}},watch:{searchTerm:{immediate:!0,handler(t){this.onSearch(t)}}},created(){this.createComponent()},methods:{createComponent(){this.getList()},getList(){this.isLoading=!0,this.flowTemplateRepository.search(this.flowTemplateCriteria).then(t=>{this.total=t.total,this.flowTemplates=t}).finally(()=>{this.isLoading=!1})},onEditFlow(t){t!=null&&t.id&&this.$router.push({name:"sw.flow.detail",params:{id:t.id},query:{type:"template"}})}}});export{s as default};
//# sourceMappingURL=index-CyRqR_qQ.js.map
