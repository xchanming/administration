{"version":3,"file":"index-CHgIZejW.js","sources":["../../../app/administration/src/module/sw-flow/view/detail/sw-flow-detail-flow/sw-flow-detail-flow.html.twig","../../../app/administration/src/module/sw-flow/view/detail/sw-flow-detail-flow/index.js"],"sourcesContent":["<!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n{% block sw_flow_detail_flow %}\n<div class=\"sw-flow-detail-flow\">\n    <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n    {% block sw_flow_detail_flow_content %}\n    <div\n        class=\"sw-flow-detail-flow__content\"\n        :class=\"{'sw-flow-detail-flow-template': isTemplate }\"\n        :style=\"flowContainerStyle\"\n    >\n        <sw-alert\n            v-if=\"isUnknownTrigger\"\n            variant=\"warning\"\n            class=\"sw-flow-detail-flow__warning-unknow-trigger\"\n        >\n            <p>{{ $tc('sw-flow.flowNotification.messageUnknownTriggerWarning') }}</p>\n            <p>{{ $tc('sw-flow.flowNotification.textIntroduce') }}</p>\n            <ul>\n                <li>{{ $tc('sw-flow.flowNotification.textGuide1') }}</li>\n                <li>{{ $tc('sw-flow.flowNotification.textGuide2') }}</li>\n                <li>{{ $tc('sw-flow.flowNotification.textGuide3') }}</li>\n            </ul>\n        </sw-alert>\n\n        <sw-alert\n            v-if=\"!isLoading && !isUnknownTrigger && showActionWarning \"\n            variant=\"warning\"\n            class=\"sw-flow-detail-flow__warning-box\"\n        >\n            {{ $tc('sw-flow.detail.warningText') }}\n        </sw-alert>\n        <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n        {% block sw_flow_detail_trigger_card %}\n        <div class=\"sw-flow-detail-flow__trigger-card\">\n            <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n            {% block sw_flow_detail_flow_trigger_select %}\n            <div class=\"sw-flow-detail-flow__trigger-select\">\n                <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n                {% block sw_flow_detail_flow_single_select %}\n                <sw-flow-trigger\n                    :disabled=\"!acl.can('flow.editor')\"\n                    :event-name=\"flow.eventName\"\n                    :is-unknown-trigger=\"isUnknownTrigger\"\n                    @option-select=\"onEventChange\"\n                />\n                {% endblock %}\n            </div>\n            {% endblock %}\n\n            <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n            {% block sw_flow_detail_flow_trigger_explains %}\n            <div\n                v-if=\"!flow.eventName\"\n                class=\"sw-flow-detail-flow__trigger-explain\"\n            >\n                <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n                {% block sw_flow_detail_flow_trigger_explains_title %}\n                <h4>{{ $tc('sw-flow.detail.trigger.title') }}</h4>\n                {% endblock %}\n\n                <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n                {% block sw_flow_detail_flow_trigger_explains_help_text %}\n                <p v-html=\"$tc('sw-flow.detail.trigger.helpText')\"></p>\n                {% endblock %}\n            </div>\n            {% endblock %}\n        </div>\n        {% endblock %}\n\n        <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n        {% block sw_flow_detail_flow_sequence_diagram %}\n        <div\n            v-if=\"flow.eventName\"\n            class=\"sw-flow-detail-flow__sequence-diagram\"\n        >\n            <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n            {% block sw_flow_detail_flow_start_line %}\n            <div class=\"sw-flow-detail-flow__oval\"></div>\n            {% endblock %}\n\n            <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n            {% block sw_flow_detail_flow_transition_group %}\n            <transition-group\n                name=\"list\"\n                tag=\"div\"\n            >\n                <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n                {% block sw_flow_detail_flow_position %}\n                <div\n                    v-for=\"sequence in formatSequences\"\n                    :key=\"getSequenceId(sequence)\"\n                    class=\"sw-flow-detail-flow__position list-item\"\n                >\n\n                    <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n                    {% block sw_flow_sequence_icon_plus %}\n                    <div\n                        class=\"sw-flow-detail-flow__position-plus\"\n                        :disabled=\"!acl.can('flow.editor')\"\n                        role=\"button\"\n                        tabindex=\"0\"\n                        @click=\"onAddRootSequence\"\n                        @keydown.enter=\"onAddRootSequence\"\n                    >\n                        <sw-icon\n                            small\n                            name=\"regular-plus-xs\"\n                        />\n                    </div>\n                    {% endblock %}\n\n                    <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n                    {% block sw_flow_sequence_icon_connection %}\n                    <div class=\"sw-flow-detail-flow__position-connection\">\n                        <sw-icon\n                            small\n                            name=\"regular-chevron-right-s\"\n                        />\n                    </div>\n                    {% endblock %}\n\n                    <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n                    {% block sw_flow_detail_flow_sequences %}\n                    <div\n                        class=\"sw-flow-detail-flow__sequences\"\n                    >\n                        <sw-flow-sequence\n                            name=\"root-sequence\"\n                            :sequence=\"sequence\"\n                            :disabled=\"!acl.can('flow.editor')\"\n                            :is-unknown-trigger=\"isUnknownTrigger\"\n                        />\n                    </div>\n                    {% endblock %}\n                </div>\n                {% endblock %}\n            </transition-group>\n            {% endblock %}\n        </div>\n        {% endblock %}\n    </div>\n    {% endblock %}\n\n    <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n    {% block sw_flow_detail_flow_modal_extension %}\n    {% endblock %}\n</div>\n{% endblock %}\n","import template from './sw-flow-detail-flow.html.twig';\nimport './sw-flow-detail-flow.scss';\n\nconst { Component, State } = Cicada;\nconst utils = Cicada.Utils;\nconst { cloneDeep } = Cicada.Utils.object;\nconst { mapGetters, mapState } = Component.getComponentHelper();\n\n/**\n * @private\n * @package services-settings\n */\nexport default {\n    template,\n\n    compatConfig: Cicada.compatConfig,\n\n    inject: [\n        'repositoryFactory',\n        'acl',\n        'flowActionService',\n        'ruleConditionDataProviderService',\n    ],\n\n    props: {\n        isLoading: {\n            type: Boolean,\n            required: false,\n            default: false,\n        },\n        isNewFlow: {\n            type: Boolean,\n            required: false,\n            default: false,\n        },\n        isTemplate: {\n            type: Boolean,\n            required: false,\n            default: false,\n        },\n        isUnknownTrigger: {\n            type: Boolean,\n            required: false,\n            default: false,\n        },\n    },\n\n    data() {\n        return {\n            flowContainerStyle: null,\n        };\n    },\n\n    computed: {\n        sequenceRepository() {\n            return this.repositoryFactory.create('flow_sequence');\n        },\n\n        formatSequences() {\n            return this.convertSequenceData();\n        },\n\n        rootSequences() {\n            return this.sequences.filter((sequence) => !sequence.parentId);\n        },\n\n        showActionWarning() {\n            if (!this.triggerActions.length || !this.sequences.length) {\n                return false;\n            }\n\n            return this.sequences.some((sequence) => {\n                const { actionName, _isNew, ruleId } = sequence;\n                if (!actionName && ruleId) {\n                    return false;\n                }\n\n                return !_isNew && !this.hasAvailableAction(actionName);\n            });\n        },\n\n        ...mapState('swFlowState', [\n            'flow',\n            'triggerActions',\n        ]),\n        ...mapGetters('swFlowState', [\n            'sequences',\n            'availableActions',\n            'hasAvailableAction',\n        ]),\n    },\n\n    watch: {\n        rootSequences: {\n            handler(value) {\n                if (!this.flow.eventName) {\n                    return;\n                }\n\n                if (!value.length) {\n                    const sequence = this.createSequence();\n                    State.commit('swFlowState/addSequence', sequence);\n                }\n            },\n            immediate: true,\n        },\n\n        sequences: {\n            handler() {\n                const sequenceContainers = document.getElementsByName('root-sequence');\n                let maxWidth = 0;\n\n                this.$nextTick(() => {\n                    Array.from(sequenceContainers).forEach((item) => {\n                        maxWidth = item.offsetWidth > maxWidth ? item.offsetWidth : maxWidth;\n                    });\n\n                    if (maxWidth <= 870) {\n                        this.flowContainerStyle = null;\n                        return;\n                    }\n\n                    if (maxWidth > 870 && maxWidth <= 1300) {\n                        this.flowContainerStyle = { 'max-width': '1300px' };\n                        return;\n                    }\n\n                    this.flowContainerStyle = { 'max-width': '100%' };\n                });\n            },\n            immediate: true,\n        },\n    },\n\n    created() {\n        this.createdComponent();\n    },\n\n    methods: {\n        createdComponent() {\n            if (!this.triggerActions?.length) {\n                this.getTriggerActions();\n            }\n        },\n\n        getTriggerActions() {\n            return this.flowActionService.getActions().then((actions) => {\n                State.commit('swFlowState/setTriggerActions', actions);\n            });\n        },\n\n        convertSequenceData() {\n            if (!this.sequences) {\n                return [];\n            }\n\n            const sequences = cloneDeep(this.sequences);\n\n            // Group sequences by its displayGroup, then those groups are arranged in ascending order.\n            const results = sequences.reduce((result, sequence) => {\n                if (!Array.isArray(result[sequence.displayGroup])) {\n                    result[sequence.displayGroup] = [];\n                }\n\n                result[sequence.displayGroup].push(sequence);\n                return result;\n            }, {});\n\n            return Object.values(results).reduce((result, item) => {\n                const rootSequence = this.convertToTreeData(item);\n\n                if (rootSequence) {\n                    result.push(rootSequence);\n                }\n\n                return result;\n            }, []);\n        },\n\n        convertToTreeData(sequences) {\n            let sequence = null;\n\n            sequences.forEach((node) => {\n                // Check if node is a root sequence\n                if (!node.parentId) {\n                    sequence = node.actionName === null ? node : { ...sequence, [node.id]: node }; // Generate action groups\n                    return;\n                }\n\n                const parentIndex = sequences.findIndex((el) => el.id === node.parentId);\n\n                // Skip node parent does not existed\n                if (!sequences[parentIndex]) {\n                    return;\n                }\n\n                // Child node is assigned to parent's true block or false block based on their trueCase\n                if (node.trueCase) {\n                    sequences[parentIndex].trueBlock = {\n                        ...sequences[parentIndex].trueBlock,\n                        [node.id]: node,\n                    };\n                } else {\n                    sequences[parentIndex].falseBlock = {\n                        ...sequences[parentIndex].falseBlock,\n                        [node.id]: node,\n                    };\n                }\n            });\n\n            return sequence;\n        },\n\n        createSequence() {\n            let sequence = this.sequenceRepository.create();\n            const newSequence = {\n                ...sequence,\n                parentId: null,\n                ruleId: null,\n                actionName: null,\n                config: {},\n                position: 1,\n                displayGroup: 1,\n                id: utils.createId(),\n            };\n\n            sequence = Object.assign(sequence, newSequence);\n            return sequence;\n        },\n\n        onEventChange(eventName) {\n            State.commit('swFlowState/setEventName', eventName);\n            State.commit('error/removeApiError', {\n                expression: `flow.${this.flow.id}.eventName`,\n            });\n\n            if (!this.rootSequences.length) {\n                const sequence = this.createSequence();\n                State.commit('swFlowState/addSequence', sequence);\n            }\n        },\n\n        onAddRootSequence() {\n            if (!this.acl.can('flow.editor')) {\n                return;\n            }\n\n            const newItem = this.createSequence();\n            newItem.position = 1;\n            newItem.displayGroup = this.rootSequences[this.rootSequences.length - 1].displayGroup + 1;\n\n            State.commit('swFlowState/addSequence', newItem);\n        },\n\n        getSequenceId(sequence) {\n            if (sequence.id) {\n                return sequence.displayGroup;\n            }\n\n            // In case of action sequence list, return displayGroup of first item\n            return Object.values(sequence)[0].displayGroup;\n        },\n    },\n};\n"],"names":["template","Component","State","utils","cloneDeep","mapGetters","mapState","index","sequence","actionName","_isNew","ruleId","value","sequenceContainers","maxWidth","item","_a","actions","results","result","rootSequence","sequences","node","parentIndex","el","newSequence","eventName","newItem"],"mappings":"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"}