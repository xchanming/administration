{"version":3,"file":"index-CR02x5Hu.js","sources":["../../../app/administration/src/module/sw-settings-tag/component/sw-settings-tag-detail-assignments/sw-settings-tag-detail-assignments.html.twig","../../../app/administration/src/module/sw-settings-tag/component/sw-settings-tag-detail-assignments/index.js"],"sourcesContent":["<!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n{% block sw_settings_tag_detail_assignments %}\n<div class=\"sw-settings-tag-detail-assignments\">\n    <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n    {% block sw_settings_tag_detail_assignments_card %}\n    <sw-card\n        class=\"sw-settings-tag-detail-assignments__card\"\n        position-identifier=\"sw-settings-tag-detail-assignments-card\"\n        large\n    >\n        <template #toolbar>\n            <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n            {% block sw_settings_tag_detail_assignments_toolbar %}\n            <sw-card-filter\n                :placeholder=\"$tc('sw-settings-tag.detail.assignments.searchPlaceholder')\"\n                @sw-card-filter-term-change=\"onTermChange\"\n            />\n            {% endblock %}\n        </template>\n\n        <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n        {% block sw_settings_tag_detail_assignments_header %}\n        <sw-container columns=\"1fr 1fr\">\n            <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n            {% block sw_settings_tag_detail_assignments_header_selected_filter %}\n            <sw-card-section\n                class=\"sw-settings-tag-detail-assignments__filter-selected\"\n                divider=\"bottom\"\n            >\n                <sw-switch-field\n                    v-model:value=\"showSelected\"\n                    :disabled=\"isLoading\"\n                    :label=\"$tc('sw-settings-tag.detail.assignments.showSelected')\"\n                />\n            </sw-card-section>\n            {% endblock %}\n            <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n            {% block sw_settings_tag_detail_assignments_header_total_selected %}\n            <sw-card-section\n                class=\"sw-settings-tag-detail-assignments__total-selected\"\n                divider=\"bottom\"\n            >\n                {{ totalAssignments }} {{ $tc('sw-settings-tag.detail.assignments.selected') }}\n            </sw-card-section>\n            {% endblock %}\n        </sw-container>\n        {% endblock %}\n\n        <template #grid>\n            <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n            {% block sw_settings_tag_detail_assignments_grid %}\n            <sw-container columns=\"300px 1fr\">\n                <sw-card-section divider=\"right\">\n                    <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n                    {% block sw_settings_tag_detail_assignments_associations_grid %}\n                    <sw-data-grid\n                        class=\"sw-settings-tag-detail-assignments__associations-grid\"\n                        :data-source=\"assignmentAssociations\"\n                        :columns=\"assignmentAssociationsColumns\"\n                        :v-bind=\"$attrs\"\n                        :show-selection=\"false\"\n                        :show-actions=\"false\"\n                        :show-header=\"false\"\n                        :plain-appearance=\"true\"\n                        :full-page=\"true\"\n                        item-identifier-property=\"entity\"\n                    >\n                        <template #column-name=\"{ item }\">\n                            <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n                            {% block sw_settings_tag_detail_assignments_associations_grid_column_name %}\n                            <sw-button\n                                class=\"associations-grid__row\"\n                                :class=\"{ 'is--selected': item.entity === selectedEntity }\"\n                                :disabled=\"isLoading\"\n                                @click.prevent=\"onAssignmentChange(item)\"\n                            >\n                                <sw-icon\n                                    v-if=\"item.entity === selectedEntity\"\n                                    name=\"regular-folder-open\"\n                                    small\n                                />\n                                <sw-icon\n                                    v-else\n                                    name=\"regular-folder\"\n                                    small\n                                />\n                                <span>\n                                    {{ item.name }}\n                                </span>\n                                <span\n                                    v-if=\"getCount(item.assignment)\"\n                                    class=\"associations-grid__count\"\n                                >\n                                    {{ getCount(item.assignment) }}\n                                    {{ $tc('sw-settings-tag.detail.assignments.assignments', getCount(item.assignment)) }}\n                                </span>\n                            </sw-button>\n                            {% endblock %}\n                        </template>\n\n                        <template #actions=\"{ item }\">\n                        </template>\n                    </sw-data-grid>\n                    {% endblock %}\n                </sw-card-section>\n                <sw-card-section>\n                    <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n                    {% block sw_settings_tag_detail_assignments_entities_grid %}\n                    <sw-entity-listing\n                        :key=\"entitiesGridKey\"\n                        class=\"sw-settings-tag-detail-assignments__entities-grid\"\n                        :items=\"entities\"\n                        :columns=\"entitiesColumns\"\n                        :repository=\"entityRepository\"\n                        :plain-appearance=\"true\"\n                        :compact-mode=\"true\"\n                        :show-selection=\"true\"\n                        :show-actions=\"false\"\n                        :show-header=\"true\"\n                        :is-loading=\"isLoading\"\n                        :disable-data-fetching=\"true\"\n                        :pre-selection=\"selectedAssignments\"\n                        :allow-inline-edit=\"false\"\n                        :allow-delete=\"false\"\n                        @page-change=\"onPageChange\"\n                        @select-item=\"onSelectionChange\"\n                    >\n                        <template #selection-content=\"{ item, isSelected, selectItem, itemIdentifierProperty }\">\n                            <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n                            {% block sw_settings_tag_detail_assignments_entities_grid_selection_content %}\n                            <div class=\"sw-data-grid__cell-content\">\n                                <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n                                {% block sw_settings_tag_detail_assignments_entities_grid_select_item_checkbox %}\n                                <sw-checkbox-field\n                                    v-if=\"isInherited(item.id, item.parentId)\"\n                                    :key=\"`${itemIdentifierProperty}-inherited`\"\n                                    :value=\"hasInheritedTag(item.id, item.parentId)\"\n                                    :disabled=\"true\"\n                                />\n                                <sw-checkbox-field\n                                    v-else\n                                    :key=\"itemIdentifierProperty\"\n                                    :value=\"isSelected(item[itemIdentifierProperty])\"\n                                    @update:value=\"selectItem($event, item)\"\n                                />\n                                {% endblock %}\n                            </div>\n                            {% endblock %}\n                        </template>\n\n                        <template #column-name=\"{ item, selectItem }\">\n                            <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n                            {% block sw_settings_tag_detail_assignments_entities_grid_column_inheritance_switch %}\n                            <sw-inheritance-switch\n                                v-if=\"isInheritable && item.parentId && parentHasTags(item.id, item.parentId)\"\n                                :is-inherited=\"isInherited(item.id, item.parentId)\"\n                                :disabled=\"!isInherited(item.id, item.parentId)\"\n                                @inheritance-remove=\"selectItem(true, item)\"\n                            />\n                            {% endblock %}\n                            <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n                            {% block sw_settings_tag_detail_assignments_entities_grid_column_name_product %}\n                            <sw-product-variant-info\n                                v-if=\"selectedEntity === 'product'\"\n                                :variations=\"item.variation\"\n                            >\n                                <sw-highlight-text\n                                    :search-term=\"term\"\n                                    :text=\"item.translated.name || item.name\"\n                                />\n                            </sw-product-variant-info>\n                            {% endblock %}\n                            <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n                            {% block sw_settings_tag_detail_assignments_entities_grid_column_name_category %}\n                            <template\n                                v-else-if=\"selectedEntity === 'category'\"\n                            >\n                                <sw-highlight-text\n                                    :search-term=\"term\"\n                                    :text=\"item.translated ? item.translated.name : item.name\"\n                                />\n                                <sw-highlight-text\n                                    v-if=\"item.breadcrumb && item.breadcrumb.length > 1\"\n                                    :text=\"item.breadcrumb.join(' / ')\"\n                                />\n                            </template>\n                            {% endblock %}\n                            <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n                            {% block sw_settings_tag_detail_assignments_entities_grid_column_name_customer %}\n                            <template\n                                v-else-if=\"selectedEntity === 'customer'\"\n                            >\n                                <sw-highlight-text\n                                    :search-term=\"term\"\n                                    :text=\"`${item.name}`\"\n                                />\n                                <sw-highlight-text\n                                    :search-term=\"term\"\n                                    :text=\"item.customerNumber\"\n                                />\n                            </template>\n                            {% endblock %}\n                            <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n                            {% block sw_settings_tag_detail_assignments_entities_grid_column_name_order %}\n                            <template\n                                v-else-if=\"selectedEntity === 'order'\"\n                            >\n                                <sw-highlight-text\n                                    :search-term=\"term\"\n                                    :text=\"`${item.orderCustomer.firstName} ${item.orderCustomer.lastName}`\"\n                                />\n                                <sw-highlight-text\n                                    :search-term=\"term\"\n                                    :text=\"item.orderNumber\"\n                                />\n                            </template>\n                            {% endblock %}\n                            <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n                            {% block sw_settings_tag_detail_assignments_entities_grid_column_name_media %}\n                            <template\n                                v-else-if=\"selectedEntity === 'media'\"\n                            >\n                                <sw-media-preview-v2\n                                    :source=\"item.id\"\n                                    :media-is-private=\"item.private\"\n                                />\n                                <sw-highlight-text\n                                    :search-term=\"term\"\n                                    :text=\"`${item.fileName}.${item.fileExtension}`\"\n                                />\n                            </template>\n                            {% endblock %}\n                            <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n                            {% block sw_settings_tag_detail_assignments_entities_grid_column_name_newsletter_recipient %}\n                            <sw-highlight-text\n                                v-else-if=\"selectedEntity === 'newsletter_recipient'\"\n                                :search-term=\"term\"\n                                :text=\"`${item.firstName} ${item.lastName}`\"\n                            />\n                            {% endblock %}\n                            <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n                            {% block sw_settings_tag_detail_assignments_entities_grid_column_name_default %}\n                            <sw-highlight-text\n                                v-else\n                                :search-term=\"term\"\n                                :text=\"item.translated ? item.translated.name : item.name\"\n                            />\n                            {% endblock %}\n                        </template>\n                    </sw-entity-listing>\n                    {% endblock %}\n                </sw-card-section>\n            </sw-container>\n            {% endblock %}\n        </template>\n    </sw-card>\n    {% endblock %}\n</div>\n{% endblock %}\n","/**\n * @package inventory\n */\nimport utils from 'src/core/service/util.service';\nimport template from './sw-settings-tag-detail-assignments.html.twig';\nimport './sw-settings-tag-detail-assignments.scss';\n\nconst { Context, Mixin } = Cicada;\nconst { Criteria } = Cicada.Data;\n\n// eslint-disable-next-line sw-deprecation-rules/private-feature-declarations\nexport default {\n    template,\n\n    compatConfig: Cicada.compatConfig,\n\n    inheritAttrs: false,\n\n    inject: [\n        'repositoryFactory',\n    ],\n\n    emits: [\n        'remove-assignment',\n        'add-assignment',\n    ],\n\n    mixins: [\n        Mixin.getByName('listing'),\n    ],\n\n    props: {\n        tag: {\n            type: Object,\n            required: true,\n        },\n        toBeAdded: {\n            type: Object,\n            required: true,\n        },\n        toBeDeleted: {\n            type: Object,\n            required: true,\n        },\n        initialCounts: {\n            type: Object,\n            required: false,\n            default() {\n                return {};\n            },\n        },\n        property: {\n            type: String,\n            required: false,\n            default: null,\n        },\n        entity: {\n            type: String,\n            required: false,\n            default: null,\n        },\n    },\n\n    data() {\n        return {\n            selectedEntity: this.entity ?? 'product',\n            selectedAssignment: this.property ?? 'products',\n            entitiesGridKey: null,\n            preSelected: {},\n            entities: null,\n            isLoading: false,\n            showSelected: this.property && this.entity,\n            counts: { ...this.initialCounts },\n            currentPageCountBuckets: [],\n            disableRouteParams: true,\n            page: 1,\n            limit: 25,\n        };\n    },\n\n    computed: {\n        tagDefinition() {\n            return Cicada.EntityDefinition.get('tag');\n        },\n\n        isInheritable() {\n            return Cicada.EntityDefinition.get(this.selectedEntity)?.properties?.tags?.flags?.inherited === true;\n        },\n\n        assignmentAssociations() {\n            const assignmentAssociations = [];\n\n            Object.entries(this.tagDefinition.properties).forEach(\n                ([\n                    propertyName,\n                    property,\n                ]) => {\n                    if (property.relation === 'many_to_many') {\n                        assignmentAssociations.push({\n                            name: this.$tc(`sw-settings-tag.detail.assignments.${propertyName}`),\n                            entity: property.entity,\n                            assignment: propertyName,\n                        });\n                    }\n                },\n            );\n\n            return assignmentAssociations;\n        },\n\n        assignmentAssociationsColumns() {\n            return [\n                {\n                    property: 'name',\n                    dataIndex: 'name',\n                    primary: true,\n                    allowResize: false,\n                    sortable: false,\n                },\n            ];\n        },\n\n        entityRepository() {\n            return this.repositoryFactory.create(this.selectedEntity);\n        },\n\n        entityCriteria() {\n            const criteria = new Criteria(this.page, this.limit);\n            criteria.setTerm(this.term);\n            criteria.addSorting(Criteria.sort('createdAt', 'DESC'));\n\n            if (this.selectedEntity === 'product') {\n                criteria.addAssociation('options.group');\n            }\n            if (this.selectedEntity === 'order') {\n                criteria.addAssociation('orderCustomer');\n            }\n\n            if (this.isInheritable) {\n                this.addTagAggregations(criteria);\n            }\n\n            if (!this.showSelected) {\n                return criteria;\n            }\n\n            const toBeAdded = Object.keys(this.toBeAdded[this.selectedAssignment]);\n            const toBeDeleted = Object.keys(this.toBeDeleted[this.selectedAssignment]).filter((id) => {\n                const parentId = this.toBeDeleted[this.selectedAssignment][id].parentId;\n\n                if (!this.isInheritable || !parentId) {\n                    return true;\n                }\n\n                return !this.isInherited(id, parentId) || !this.hasInheritedTag(id, parentId);\n            });\n\n            if (toBeAdded.length) {\n                criteria.addFilter(\n                    Criteria.multi('OR', [\n                        Criteria.equals('tags.id', this.tag.id),\n                        Criteria.equalsAny('id', toBeAdded),\n                    ]),\n                );\n            } else {\n                criteria.addFilter(Criteria.equals('tags.id', this.tag.id));\n            }\n\n            if (!toBeDeleted.length) {\n                return criteria;\n            }\n\n            criteria.addFilter(\n                Criteria.not('AND', [\n                    Criteria.equalsAny('id', toBeDeleted),\n                ]),\n            );\n\n            return criteria;\n        },\n\n        entitiesColumns() {\n            return [\n                {\n                    property: 'name',\n                    primary: true,\n                    allowResize: false,\n                    sortable: false,\n                },\n            ];\n        },\n\n        selectedAssignments() {\n            const selection = new Proxy(\n                { ...this.preSelected },\n                {\n                    get(target, key) {\n                        return target[key];\n                    },\n                    set(target, key, value) {\n                        target[key] = value;\n                        return true;\n                    },\n                },\n            );\n\n            Object.values(this.toBeAdded[this.selectedAssignment]).forEach((toBeAdded) => {\n                if (this.isCompatEnabled('INSTANCE_SET')) {\n                    this.$set(selection, toBeAdded.id, toBeAdded);\n                } else {\n                    selection[toBeAdded.id] = toBeAdded;\n                }\n            });\n\n            Object.values(this.toBeDeleted[this.selectedAssignment]).forEach((toBeDeleted) => {\n                if (selection.hasOwnProperty(toBeDeleted.id)) {\n                    if (this.isCompatEnabled('INSTANCE_DELETE')) {\n                        this.$delete(selection, toBeDeleted.id);\n                    } else {\n                        delete selection[toBeDeleted.id];\n                    }\n                }\n            });\n\n            return selection;\n        },\n\n        totalAssignments() {\n            let total = 0;\n\n            Object.values(this.counts).forEach((count) => {\n                total += count;\n            });\n\n            return total;\n        },\n    },\n\n    watch: {\n        selectedEntity() {\n            this.page = 1;\n            this.getList();\n        },\n\n        showSelected() {\n            this.page = 1;\n            this.getList();\n        },\n    },\n\n    methods: {\n        getList() {\n            this.isLoading = true;\n            const criteria = this.entityCriteria;\n\n            if (this.showSelected && this.isInheritable) {\n                return this.searchInheritedEntities(criteria)\n                    .then(() => {\n                        return this.search(criteria);\n                    })\n                    .catch(() => {\n                        this.isLoading = false;\n                    });\n            }\n\n            return this.search(criteria);\n        },\n\n        search(criteria) {\n            return this.entityRepository\n                .search(criteria, {\n                    ...Context.api,\n                    inheritance: true,\n                })\n                .then((items) => {\n                    if (this.tag.isNew() || items.total === 0) {\n                        this.entitiesGridKey = utils.createId();\n                        this.total = items.total;\n                        this.entities = items;\n                        this.isLoading = false;\n\n                        return null;\n                    }\n\n                    const entityIds = items.map(({ id }) => {\n                        return id;\n                    });\n                    const relationCriteria = new Criteria(1, this.limit);\n                    relationCriteria.addFilter(Criteria.equalsAny('id', entityIds));\n                    if (this.isInheritable) {\n                        this.addTagAggregations(relationCriteria, false);\n                    }\n                    relationCriteria.addPostFilter(Criteria.equals('tags.id', this.tag.id));\n\n                    return this.entityRepository.search(relationCriteria).then((selected) => {\n                        if (this.isInheritable) {\n                            this.currentPageCountBuckets = selected.aggregations.tags.buckets;\n                        }\n\n                        const preSelected = {};\n                        selected.forEach((item) => {\n                            preSelected[item.id] = item;\n                        });\n                        this.preSelected = preSelected;\n                        this.entitiesGridKey = utils.createId();\n\n                        this.total = items.total;\n                        this.entities = items;\n                        this.isLoading = false;\n                    });\n                })\n                .catch(() => {\n                    this.isLoading = false;\n                });\n        },\n\n        addTagAggregations(criteria, filter = true) {\n            let aggregation = Criteria.count('tags', `${this.selectedEntity}.tags.id`);\n\n            if (filter) {\n                aggregation = Criteria.filter('tags', [Criteria.equals('tags.id', this.tag.id)], aggregation);\n\n                criteria.addAggregation(\n                    Criteria.terms(\n                        'parentTags',\n                        'id',\n                        null,\n                        null,\n                        Criteria.count('parentTags', `${this.selectedEntity}.parent.tags.id`),\n                    ),\n                );\n            }\n\n            criteria.addAggregation(Criteria.terms('tags', 'id', null, null, aggregation));\n        },\n\n        searchInheritedEntities(criteria) {\n            const toBeAdded = Object.keys(this.toBeAdded[this.selectedAssignment]);\n            const toBeDeleted = Object.keys(this.toBeDeleted[this.selectedAssignment]);\n\n            if (!toBeAdded.length && !toBeDeleted.length) {\n                return Promise.resolve();\n            }\n\n            let addedPromise = Promise.resolve();\n            let deletedPromise = Promise.resolve();\n\n            if (toBeAdded.length) {\n                const inheritedAddedCriteria = new Criteria(1, 25);\n                inheritedAddedCriteria.addFilter(\n                    Criteria.multi('AND', [\n                        Criteria.equals('tags.id', null),\n                        Criteria.equalsAny('parentId', toBeAdded),\n                    ]),\n                );\n\n                addedPromise = this.entityRepository.searchIds(inheritedAddedCriteria).then(({ data, total }) => {\n                    if (total === 0) {\n                        return;\n                    }\n\n                    criteria.filters = [\n                        Criteria.multi('OR', [\n                            Criteria.multi('AND', criteria.filters),\n                            Criteria.equalsAny('id', data),\n                        ]),\n                    ];\n                });\n            }\n\n            if (toBeDeleted.length) {\n                const inheritedDeletedCriteria = new Criteria(1, 25);\n                inheritedDeletedCriteria.addFilter(Criteria.equals('tags.id', null));\n                inheritedDeletedCriteria.addFilter(Criteria.equalsAny('parentId', toBeDeleted));\n                if (toBeAdded.length) {\n                    inheritedDeletedCriteria.addFilter(\n                        Criteria.not('AND', [\n                            Criteria.equalsAny('id', toBeAdded),\n                        ]),\n                    );\n                }\n\n                deletedPromise = this.entityRepository.searchIds(inheritedDeletedCriteria).then(({ data, total }) => {\n                    if (total === 0) {\n                        return;\n                    }\n\n                    criteria.addFilter(\n                        Criteria.not('AND', [\n                            Criteria.equalsAny('id', data),\n                        ]),\n                    );\n                });\n            }\n\n            return Promise.all([\n                addedPromise,\n                deletedPromise,\n            ]);\n        },\n\n        async onTermChange(term) {\n            this.term = term;\n            this.page = 1;\n            await this.getList();\n        },\n\n        onAssignmentChange({ entity, assignment }) {\n            this.selectedEntity = entity;\n            this.selectedAssignment = assignment;\n        },\n\n        onSelectionChange(selection, item, selected) {\n            const id = item.id;\n\n            if (!selected) {\n                this.$emit('remove-assignment', this.selectedAssignment, id, item);\n                this.countDecrease(this.selectedAssignment);\n\n                return;\n            }\n\n            this.$emit('add-assignment', this.selectedAssignment, id, item);\n            this.countIncrease(this.selectedAssignment);\n        },\n\n        getCount(propertyName) {\n            if (this.counts.hasOwnProperty(propertyName)) {\n                return this.counts[propertyName];\n            }\n\n            return null;\n        },\n\n        countIncrease(propertyName) {\n            if (this.counts.hasOwnProperty(propertyName)) {\n                this.counts[propertyName] += 1;\n            } else if (this.isCompatEnabled('INSTANCE_SET')) {\n                this.$set(this.counts, propertyName, 1);\n            } else {\n                this.counts[propertyName] = 1;\n            }\n        },\n\n        countDecrease(propertyName) {\n            if (this.counts.hasOwnProperty(propertyName) && this.counts[propertyName] !== 0) {\n                this.counts[propertyName] -= 1;\n            } else if (this.isCompatEnabled('INSTANCE_SET')) {\n                this.$set(this.counts, propertyName, 0);\n            } else {\n                this.counts[propertyName] = 0;\n            }\n\n            if (!this.showSelected) {\n                return;\n            }\n\n            if (this.page > 1 && this.entities.length === 1) {\n                this.page -= 1;\n            }\n\n            this.getList();\n        },\n\n        isInherited(id, parentId) {\n            if (!this.isInheritable || !parentId || this.toBeAdded[this.selectedAssignment].hasOwnProperty(id)) {\n                return false;\n            }\n\n            const selfToBeDeleted = this.toBeDeleted[this.selectedAssignment].hasOwnProperty(id);\n            const hasOwnTags =\n                this.currentPageCountBuckets.filter(({ key, tags }) => {\n                    return key === id && (selfToBeDeleted ? tags.count - 1 : tags.count) > 0;\n                }).length > 0;\n\n            if (hasOwnTags) {\n                return false;\n            }\n\n            return this.parentHasTags(id, parentId);\n        },\n\n        parentHasTags(id, parentId) {\n            const parentToBeDeleted = this.toBeDeleted[this.selectedAssignment].hasOwnProperty(parentId);\n            const parentHasTags =\n                this.entities.aggregations.parentTags.buckets.filter(({ key, parentTags }) => {\n                    return key === id && (parentToBeDeleted ? parentTags.count - 1 : parentTags.count) > 0;\n                }).length > 0;\n\n            if (!parentHasTags) {\n                return this.toBeAdded[this.selectedAssignment].hasOwnProperty(parentId);\n            }\n\n            return true;\n        },\n\n        hasInheritedTag(id, parentId) {\n            const parentToBeAdded = this.toBeAdded[this.selectedAssignment].hasOwnProperty(parentId);\n            const parentToBeDeleted = this.toBeDeleted[this.selectedAssignment].hasOwnProperty(parentId);\n\n            if (this.preSelected.hasOwnProperty(id) || this.toBeDeleted[this.selectedAssignment].hasOwnProperty(id)) {\n                return parentToBeAdded || (this.preSelected.hasOwnProperty(parentId) && !parentToBeDeleted);\n            }\n\n            const hasInheritedTag =\n                this.entities.aggregations.tags.buckets.filter((bucket) => {\n                    return bucket.key === id;\n                }).length > 0;\n\n            return (hasInheritedTag || parentToBeAdded) && !parentToBeDeleted;\n        },\n\n        onPageChange({ page, limit }) {\n            this.page = page;\n            this.limit = limit;\n\n            this.getList();\n        },\n    },\n};\n"],"names":["template","Context","Mixin","Criteria","index","_d","_c","_b","_a","assignmentAssociations","propertyName","property","criteria","toBeAdded","toBeDeleted","id","parentId","selection","target","key","value","total","count","items","utils","entityIds","relationCriteria","selected","preSelected","item","filter","aggregation","addedPromise","deletedPromise","inheritedAddedCriteria","data","inheritedDeletedCriteria","term","entity","assignment","selfToBeDeleted","tags","parentToBeDeleted","parentTags","parentToBeAdded","bucket","page","limit"],"mappings":"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"}