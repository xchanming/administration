{"version":3,"file":"feature-grid-translation.service-CXBbmI10.js","sources":["../../../app/administration/src/module/sw-settings-product-feature-sets/service/feature-grid-translation.service.js"],"sourcesContent":["/**\n * @package inventory\n */\nconst { Criteria } = Cicada.Data;\n\n// eslint-disable-next-line sw-deprecation-rules/private-feature-declarations\nexport default class FeatureGridTranslationService {\n    /**\n     * @param {Vue} component\n     * @param {Repository} propertyGroupRepository\n     * @param {Repository} customFieldRepository\n     */\n    constructor(component, propertyGroupRepository, customFieldRepository) {\n        this.component = component;\n        this.propertyGroupRepository = propertyGroupRepository;\n        this.customFieldRepository = customFieldRepository;\n\n        this.entities = {\n            property: [],\n            customField: [],\n        };\n    }\n\n    /**\n     * @param {array} features\n     */\n    fetchPropertyGroupEntities(features) {\n        return this._fetchEntities(features, 'property', 'id', this.propertyGroupRepository);\n    }\n\n    /**\n     * @param {array} features\n     */\n    fetchCustomFieldEntities(features) {\n        return this._fetchEntities(features, 'customField', 'name', this.customFieldRepository);\n    }\n\n    /**\n     * @private\n     *\n     * @param {array} features\n     * @param {string} type\n     * @param {string} filterBy\n     * @param {Repository} repo\n     */\n    _fetchEntities(features, type, filterBy, repo) {\n        if (!features || features.length < 1) {\n            return Promise.resolve();\n        }\n\n        const identifier = features.filter((value) => value.type === type).map((value) => value[filterBy]);\n\n        if (identifier.length < 1) {\n            return Promise.resolve();\n        }\n\n        const criteria = new Criteria(1, 25);\n\n        criteria.addFilter(Criteria.equalsAny(filterBy, identifier));\n\n        return repo.search(criteria, Cicada.Context.api).then((items) => {\n            this.entities[type] = items;\n        });\n    }\n\n    /**\n     * @param {Object} item\n     * @param {string} item.type\n     * @param {string} item.name\n     * @param {string} item.id\n     */\n    getNameTranslation(item) {\n        if (item.type === 'product') {\n            return this.component.$tc(`sw-settings-product-feature-sets.modal.label.${item.name}`);\n        }\n\n        if (item.type === 'property') {\n            return this.entities.property\n                .filter((group) => group.id === item.id)\n                .map((group) => group.translated.name)\n                .pop();\n        }\n\n        if (item.type === 'customField') {\n            const language = Cicada.State.get('session').currentLocale;\n            const fallback = Cicada.Context.app.fallbackLocale;\n\n            return this.entities.customField\n                .filter((field) => field.name === item.name)\n                .map((field) => field.config.label[language] || field.config.label[fallback])\n                .pop();\n        }\n\n        if (item.type === 'referencePrice') {\n            return this.component.$tc('sw-settings-product-feature-sets.modal.label.referencePrice');\n        }\n\n        return '';\n    }\n\n    /**\n     * @param {Object} item\n     * @param {string} item.type\n     * @param {string} item.name\n     */\n    getTypeTranslation(item) {\n        if (item.type === 'product') {\n            return this.component.$tc('sw-settings-product-feature-sets.modal.textProductInfoLabel');\n        }\n\n        if (item.type === 'property') {\n            return this.component.$tc('sw-settings-product-feature-sets.modal.textPropertyLabel');\n        }\n\n        if (item.type === 'customField') {\n            return this.component.$tc('sw-settings-product-feature-sets.modal.textCustomFieldLabel');\n        }\n\n        if (item.type === 'referencePrice') {\n            return this.component.$tc('sw-settings-product-feature-sets.modal.textReferencePriceLabel');\n        }\n\n        return '';\n    }\n}\n"],"names":["Criteria","FeatureGridTranslationService","component","propertyGroupRepository","customFieldRepository","features","type","filterBy","repo","identifier","value","criteria","items","item","group","language","fallback","field"],"mappings":"AAGA,KAAM,CAAE,SAAAA,CAAQ,EAAK,OAAO,KAGb,MAAMC,CAA8B,CAM/C,YAAYC,EAAWC,EAAyBC,EAAuB,CACnE,KAAK,UAAYF,EACjB,KAAK,wBAA0BC,EAC/B,KAAK,sBAAwBC,EAE7B,KAAK,SAAW,CACZ,SAAU,CAAE,EACZ,YAAa,CAAE,CAC3B,CACK,CAKD,2BAA2BC,EAAU,CACjC,OAAO,KAAK,eAAeA,EAAU,WAAY,KAAM,KAAK,uBAAuB,CACtF,CAKD,yBAAyBA,EAAU,CAC/B,OAAO,KAAK,eAAeA,EAAU,cAAe,OAAQ,KAAK,qBAAqB,CACzF,CAUD,eAAeA,EAAUC,EAAMC,EAAUC,EAAM,CAC3C,GAAI,CAACH,GAAYA,EAAS,OAAS,EAC/B,OAAO,QAAQ,UAGnB,MAAMI,EAAaJ,EAAS,OAAQK,GAAUA,EAAM,OAASJ,CAAI,EAAE,IAAKI,GAAUA,EAAMH,CAAQ,CAAC,EAEjG,GAAIE,EAAW,OAAS,EACpB,OAAO,QAAQ,UAGnB,MAAME,EAAW,IAAIX,EAAS,EAAG,EAAE,EAEnC,OAAAW,EAAS,UAAUX,EAAS,UAAUO,EAAUE,CAAU,CAAC,EAEpDD,EAAK,OAAOG,EAAU,OAAO,QAAQ,GAAG,EAAE,KAAMC,GAAU,CAC7D,KAAK,SAASN,CAAI,EAAIM,CAClC,CAAS,CACJ,CAQD,mBAAmBC,EAAM,CACrB,GAAIA,EAAK,OAAS,UACd,OAAO,KAAK,UAAU,IAAI,gDAAgDA,EAAK,IAAI,EAAE,EAGzF,GAAIA,EAAK,OAAS,WACd,OAAO,KAAK,SAAS,SAChB,OAAQC,GAAUA,EAAM,KAAOD,EAAK,EAAE,EACtC,IAAKC,GAAUA,EAAM,WAAW,IAAI,EACpC,MAGT,GAAID,EAAK,OAAS,cAAe,CAC7B,MAAME,EAAW,OAAO,MAAM,IAAI,SAAS,EAAE,cACvCC,EAAW,OAAO,QAAQ,IAAI,eAEpC,OAAO,KAAK,SAAS,YAChB,OAAQC,GAAUA,EAAM,OAASJ,EAAK,IAAI,EAC1C,IAAKI,GAAUA,EAAM,OAAO,MAAMF,CAAQ,GAAKE,EAAM,OAAO,MAAMD,CAAQ,CAAC,EAC3E,KACR,CAED,OAAIH,EAAK,OAAS,iBACP,KAAK,UAAU,IAAI,6DAA6D,EAGpF,EACV,CAOD,mBAAmBA,EAAM,CACrB,OAAIA,EAAK,OAAS,UACP,KAAK,UAAU,IAAI,6DAA6D,EAGvFA,EAAK,OAAS,WACP,KAAK,UAAU,IAAI,0DAA0D,EAGpFA,EAAK,OAAS,cACP,KAAK,UAAU,IAAI,6DAA6D,EAGvFA,EAAK,OAAS,iBACP,KAAK,UAAU,IAAI,gEAAgE,EAGvF,EACV,CACL"}