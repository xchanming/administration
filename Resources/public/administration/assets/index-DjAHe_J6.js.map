{"version":3,"file":"index-DjAHe_J6.js","sources":["../../../app/administration/src/app/component/form/sw-form-field-renderer/sw-form-field-renderer.html.twig","../../../app/administration/src/app/component/form/sw-form-field-renderer/index.js"],"sourcesContent":["<!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n{% block sw_form_field_renderer %}\n<component\n    :is=\"componentName\"\n    v-bind=\"bind\"\n    ref=\"component\"\n    v-model:value=\"currentValue\"\n    class=\"sw-form-field-renderer\"\n    :error=\"error\"\n    @update:value=\"emitUpdate\"\n    @update:ids=\"emitUpdate\"\n    @update:entity-collection=\"emitUpdate\"\n>\n    <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n    {% block sw_form_field_renderer_scope_slots %}\n    <!-- eslint-disable vue/v-slot-style -->\n    <template\n        v-for=\"(slot, slotName) in getScopedSlots()\"\n        #[slotName]=\"slotData\"\n    >\n        <!-- eslint-enable vue/v-slot-style -->\n        <slot\n            :name=\"slotName\"\n            v-bind=\"slotData\"\n        >\n        </slot>\n    </template>\n    {% endblock %}\n\n    <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n    {% block sw_form_field_renderer_inner %}\n    <slot>\n    <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n    {% block sw_form_field_renderer_inner_slot %}{% endblock %}\n    </slot>\n    {% endblock %}\n</component>\n{% endblock %}\n","import template from './sw-form-field-renderer.html.twig';\n\nconst { Component, Mixin } = Cicada;\nconst { types } = Cicada.Utils;\n/**\n * @package admin\n *\n * @private\n * @status ready\n * @description\n * Dynamically renders components with a given configuration. The rendered component can be forced by defining\n * the config.componentName property. If not set the form-field-renderer will guess a suitable\n * component for the type. Everything inside the config prop will be passed to the rendered child prop as properties.\n * Also all additional props will be passed to the child.\n * @example-type code-only\n * @component-example\n * {# Datepicker #}\n * <sw-form-field-renderer\n *     v-model=\"yourValue\"\n *     type=\"datetime\">\n * </sw-form-field-renderer>\n *\n * {# Text field #}\n * <sw-form-field-renderer\n *     v-model=\"yourValue\"\n *     type=\"string\">\n * </sw-form-field-renderer>\n *\n * {# sw-number-field #}\n * <sw-form-field-renderer\n *     v-model=\"yourValue\"\n *     :config=\"{\n *         componentName: 'sw-field',\n *         type: 'number',\n *         numberType: 'float'\n *     }\">\n * </sw-form-field-renderer>\n *\n * {# sw-select - multi #}\n * <sw-form-field-renderer\n *     v-model=\"yourValue\"\n *     :config=\"{\n *         componentName: 'sw-multi-select',\n *         label: {\n *             'en-GB': 'Multi Select'\n *         },\n *         multi: true,\n *         options: [\n *             { value: 'option1', label: { 'en-GB': 'One' } },\n *             { value: 'option2', label: 'Two' },\n *             { value: 'option3', label: { 'en-GB': 'Three', 'zh-CN': 'Drei' } }\n *         ]\n *     }\">\n * </sw-form-field-renderer>\n *\n * {# sw-select - single #}\n * <sw-form-field-renderer\n *     v-model=\"yourValue\"\n *     :componentName: 'sw-single-select',\n *     :config=\"{\n *         label: 'Single Select',\n *         options: [\n *             { value: 'option1', label: { 'en-GB': 'One' } },\n *             { value: 'option2', label: 'Two' },\n *             { value: 'option3', label: { 'en-GB': 'Three', 'zh-CN': 'Drei' } }\n *         ]\n *     }\">\n * </sw-form-field-renderer>\n */\nComponent.register('sw-form-field-renderer', {\n    template,\n\n    inheritAttrs: false,\n\n    compatConfig: Cicada.compatConfig,\n\n    inject: [\n        'repositoryFactory',\n        'feature',\n    ],\n\n    emits: ['update:value'],\n\n    mixins: [\n        Mixin.getByName('sw-inline-snippet'),\n    ],\n\n    props: {\n        type: {\n            type: String,\n            required: false,\n            default: null,\n        },\n        config: {\n            type: Object,\n            required: false,\n            default: null,\n        },\n        // eslint-disable-next-line vue/require-prop-types\n        value: {\n            required: true,\n        },\n        error: {\n            type: Object,\n            required: false,\n            default: null,\n        },\n    },\n\n    data() {\n        return {\n            currency: { id: Cicada.Context.app.systemCurrencyId, factor: 1 },\n            currentComponentName: '',\n            swFieldConfig: {},\n            currentValue: this.value,\n        };\n    },\n\n    computed: {\n        bind() {\n            let bind = {};\n\n            if (!this.isCompatEnabled('INSTANCE_LISTENERS')) {\n                // Filter all listeners from the $attrs object\n                Object.keys(this.$attrs).forEach((key) => {\n                    if (!['onUpdate:value'].includes(key)) {\n                        bind[key] = this.$attrs[key];\n                    }\n                });\n            } else {\n                bind = {\n                    ...this.$attrs,\n                };\n            }\n\n            bind = {\n                ...bind,\n                ...this.config,\n                ...this.swFieldType,\n                ...this.translations,\n                ...this.optionTranslations,\n            };\n\n            if (this.componentName === 'sw-entity-multi-id-select') {\n                bind.repository = this.createRepository(this.config.entity);\n            }\n\n            return bind;\n        },\n\n        hasConfig() {\n            return !!this.config;\n        },\n\n        componentName() {\n            if (this.hasConfig) {\n                // Handle old \"sw-field\" component with custom type\n                if (this.config.componentName === 'sw-field') {\n                    return this.getComponentFromType(this.config.type);\n                }\n\n                return this.config.componentName || this.getComponentFromType();\n            }\n            return this.getComponentFromType();\n        },\n\n        swFieldType() {\n            if (this.type === 'price') {\n                return {\n                    type: 'price',\n                    allowModal: true,\n                    hideListPrices: true,\n                    currency: this.currency,\n                };\n            }\n\n            if (this.hasConfig && this.config.hasOwnProperty('type')) {\n                return {};\n            }\n\n            if (this.type === 'int') {\n                return { type: 'number', numberType: 'int' };\n            }\n\n            if (this.type === 'float') {\n                return { type: 'number', numberType: 'float' };\n            }\n\n            if (this.type === 'string' || this.type === 'text') {\n                return { type: 'text' };\n            }\n\n            if (this.type === 'bool') {\n                return { type: 'switch', bordered: true };\n            }\n\n            if (this.type === 'datetime') {\n                return { type: 'date', dateType: 'datetime' };\n            }\n\n            if (this.type === 'date') {\n                return { type: 'date', dateType: 'date' };\n            }\n\n            if (this.type === 'time') {\n                return { type: 'date', dateType: 'time' };\n            }\n\n            return { type: this.type };\n        },\n\n        translations() {\n            return this.getTranslations(this.componentName);\n        },\n\n        optionTranslations() {\n            if (\n                [\n                    'sw-single-select',\n                    'sw-multi-select',\n                ].includes(this.componentName)\n            ) {\n                if (!this.config.hasOwnProperty('options')) {\n                    return {};\n                }\n\n                const options = [];\n                let labelProperty = 'label';\n\n                // Use custom label property if defined\n                if (this.config.hasOwnProperty('labelProperty')) {\n                    labelProperty = this.config.labelProperty;\n                }\n\n                this.config.options.forEach((option) => {\n                    const translation = this.getTranslations('options', option, [labelProperty]);\n                    if (!translation.label) {\n                        translation.label = option.value;\n                    }\n                    // Merge original option with translation\n                    const translatedOption = { ...option, ...translation };\n                    options.push(translatedOption);\n                });\n\n                return { options };\n            }\n\n            return {};\n        },\n    },\n\n    watch: {\n        currentValue(value) {\n            if (\n                Array.isArray(value) &&\n                Array.isArray(this.value) &&\n                value.length === this.value.length &&\n                value.every((val, index) => val === this.value[index])\n            ) {\n                return;\n            }\n\n            if (value !== this.value) {\n                this.$emit('update:value', value);\n            }\n        },\n        value() {\n            this.currentValue = this.value;\n        },\n    },\n\n    created() {\n        this.createdComponent();\n    },\n\n    methods: {\n        createdComponent() {\n            this.fetchSystemCurrency();\n\n            if (this.type === 'price' && !Array.isArray(this.currentValue)) {\n                this.currentValue = [\n                    {\n                        currencyId: Cicada.Context.app.systemCurrencyId,\n                        gross: null,\n                        net: null,\n                        linked: true,\n                    },\n                ];\n            }\n        },\n\n        emitUpdate(data) {\n            this.$emit('update:value', data);\n        },\n\n        getTranslations(\n            componentName,\n            config = this.config,\n            translatableFields = [\n                'label',\n                'placeholder',\n                'helpText',\n            ],\n        ) {\n            if (!translatableFields) {\n                return {};\n            }\n\n            const translations = {};\n            translatableFields.forEach((field) => {\n                if (config[field] && config[field] !== '') {\n                    translations[field] = this.getInlineSnippet(config[field]);\n                }\n            });\n\n            return translations;\n        },\n\n        getComponentFromType(customType = undefined) {\n            const type = customType ?? this.type;\n\n            const components = {\n                bool: 'sw-switch-field',\n                checkbox: 'sw-checkbox-field',\n                colorpicker: 'sw-colorpicker',\n                compactColorpicker: 'sw-compact-colorpicker',\n                date: 'sw-datepicker',\n                datetime: 'sw-datepicker',\n                email: 'sw-email-field',\n                float: 'sw-number-field',\n                int: 'sw-number-field',\n                'multi-entity-id-select': 'sw-entity-multi-id-select',\n                'multi-select': 'sw-multi-select',\n                number: 'sw-number-field',\n                password: 'sw-password-field',\n                price: 'sw-price-field',\n                radio: 'sw-radio-field',\n                'single-entity-id-select': 'sw-entity-single-select',\n                'single-select': 'sw-single-select',\n                string: 'sw-text-field',\n                switch: 'sw-switch-field',\n                tagged: 'sw-tagged-field',\n                text: 'sw-text-field',\n                textarea: 'sw-textarea-field',\n                time: 'sw-datepicker',\n                url: 'sw-url-field',\n            };\n\n            return components[type] ?? 'sw-text-field';\n        },\n\n        createRepository(entity) {\n            if (types.isUndefined(entity)) {\n                throw new Error('sw-form-field-renderer - sw-entity-multi-id-select component needs entity property');\n            }\n\n            return this.repositoryFactory.create(entity);\n        },\n\n        fetchSystemCurrency() {\n            const systemCurrencyId = Cicada.Context.app.systemCurrencyId;\n\n            this.createRepository('currency')\n                .get(systemCurrencyId)\n                .then((response) => {\n                    this.currency = response;\n                });\n        },\n\n        getScopedSlots() {\n            if (this.isCompatEnabled('INSTANCE_SCOPED_SLOTS')) {\n                return {\n                    ...this.$scopedSlots,\n                };\n            }\n\n            return this.$slots;\n        },\n    },\n});\n"],"names":["template","Component","Mixin","types","bind","key","options","labelProperty","option","translation","translatedOption","value","val","index","data","componentName","config","translatableFields","translations","field","customType","type","entity","systemCurrencyId","response"],"mappings":"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"}