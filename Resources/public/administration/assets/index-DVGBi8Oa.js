const o=`{% block sw_cms_element_buy_box_config %} <div class="sw-cms-el-config-buy-box"> {% block sw_cms_element_buy_box_config_tabs %} <sw-tabs position-identifier="sw-cms-element-config-buy-box" class="sw-cms-el-config-buy-box__tabs" default-item="content" > <template #default="{ active }"> {% block sw_cms_element_buy_box_config_tab_content %} <sw-tabs-item name="content" :title="$tc('sw-cms.elements.general.config.tab.content')" :active-tab="active" > {{ $tc('sw-cms.elements.general.config.tab.content') }} </sw-tabs-item> {% endblock %} {% block sw_cms_element_buy_box_config_tab_option %} <sw-tabs-item name="options" :title="$tc('sw-cms.elements.general.config.tab.options')" :active-tab="active" > {{ $tc('sw-cms.elements.general.config.tab.options') }} </sw-tabs-item> {% endblock %} </template> <template #content="{ active }"> <div v-if="active === 'content'" class="sw-cms-el-config-buy-box__tab-content" > {% block sw_cms_element_buy_box_config_content_warning %} <mt-banner v-if="isProductPage" class="sw-cms-el-config-buy-box__warning" variant="info" > {{ $tc('sw-cms.elements.buyBox.infoText.tooltipSettingDisabled') }} </mt-banner> {% endblock %} {% block sw_cms_element_buy_box_config_product_select %} <sw-entity-single-select v-if="!isProductPage" ref="cmsProductSelection" v-model:value="element.config.product.value" entity="product" :label="$tc('sw-cms.elements.buyBox.config.label.selection')" :placeholder="$tc('sw-cms.elements.buyBox.config.placeholder.selection')" :criteria="productCriteria" :context="productSelectContext" show-clearable-button @update:value="onProductChange" > {% block sw_cms_element_buy_box_config_product_variant_label %} <template #selection-label-property="{ item }"> <sw-product-variant-info :variations="item.variation"> {{ item.translated.name || item.name }} </sw-product-variant-info> </template> {% endblock %} {% block sw_cms_element_buy_box_config_product_select_result_item %} <template #result-item="{ item, index }"> <sw-select-result v-bind="{ item, index }" > {% block sw_entity_single_select_base_results_list_result_label %} <span class="sw-select-result__result-item-text"> <sw-product-variant-info :variations="item.variation"> {{ item.translated.name || item.name }} </sw-product-variant-info> </span> {% endblock %} </sw-select-result> </template> {% endblock %} </sw-entity-single-select> {% endblock %} </div> <div v-if="active === 'options'" class="sw-cms-el-config-buy-box__tab-options" > {% block sw_cms_element_buy_box_config_options %} <sw-select-field v-model:value="element.config.alignment.value" class="sw-cms-el-config-buy-box__alignment" :label="$tc('sw-cms.elements.general.config.label.alignment')" :placeholder="$tc('sw-cms.elements.general.config.label.alignment')" > {% block sw_cms_element_product_box_config_alignment_options %} <option value="flex-start"> {{ $tc('sw-cms.elements.general.config.label.verticalAlignTop') }} </option> <option value="center"> {{ $tc('sw-cms.elements.general.config.label.verticalAlignCenter') }} </option> <option value="flex-end"> {{ $tc('sw-cms.elements.general.config.label.verticalAlignBottom') }} </option> {% endblock %} </sw-select-field> {% endblock %} </div> </template> </sw-tabs> {% endblock %} </div> {% endblock %}`,{Mixin:c}=Shopware,{Criteria:n}=Shopware.Data,i={template:o,inject:["repositoryFactory"],emits:["element-update"],mixins:[c.getByName("cms-element")],computed:{productRepository(){return this.repositoryFactory.create("product")},productSelectContext(){return{...Shopware.Context.api,inheritance:!0}},productCriteria(){const e=new n(1,25);return e.addAssociation("options.group"),e},selectedProductCriteria(){const e=new n(1,25);return e.addAssociation("deliveryTime"),e},isProductPage(){var e,t;return((t=(e=this.cmsPageState)==null?void 0:e.currentPage)==null?void 0:t.type)==="product_detail"}},created(){this.createdComponent()},methods:{createdComponent(){this.initElementConfig("buy-box")},async onProductChange(e){e?await this.fetchProduct(e):this.deleteProduct(),this.$emit("element-update",this.element)},async fetchProduct(e){const t=await this.productRepository.get(e,this.productSelectContext,this.selectedProductCriteria);this.element.config.product.value=e,this.element.data.productId=e,this.element.data.product=t},deleteProduct(){this.element.config.product.value=null,this.element.data.productId=null,this.element.data.product=null}}};export{i as default};
