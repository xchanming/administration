const i=`{% block sw_media_folder_content %} <div class="sw-media-folder-content"> {% block sw_media_folder_content_folder_listing %} <ul v-if="subFolders.length > 0 || parentFolder !== null" class="sw-media-folder-content__folder-listing" > {% block sw_media_folder_content_list_item %} <li v-if="parentFolder !== null" class="sw-media-folder-content__list-item" > <button class="sw-media-folder-content__button sw-media-folder-content__parent-folder" @click="emitInput(parentFolder)" > {% block sw_media_folder_content_folder_icon %} <img :src="assetFilter('/administration/static/img/media/folder-thumbnail.svg')" class="sw-media-folder-content__folder-icon" alt="Folder thumbnail" > {% endblock %} {{ parentFolder.name }} </button> </li> <li v-for="(folder, index) in subFolders" :key="folder.id" :class="[{'is--selected': folder.id === selectedId}, 'sw-media-folder-content__list-item--' + index ]" class="sw-media-folder-content__list-item" role="button" tabindex="0" @click="emitInput(folder)" @keydown.enter="emitInput(folder)" > {% block sw_media_folder_content_button_folder %} {% block sw_media_folder_content_button_folder_button %} <button class="sw-media-folder-content__button sw-media-folder-content__folder-button"> {% block sw_media_folder_content_folder_button_icon %} <img :src="assetFilter('/administration/static/img/media/folder-thumbnail.svg')" class="sw-media-folder-content__folder-icon" alt="Folder thumbnail" > {% endblock %} {{ folder.name }} </button> {% endblock %} {% block sw_media_folder_content_switch_button %} <sw-icon v-if="getChildCount(folder) > 0" class="sw-media-folder-content__switch-button" name="regular-chevron-right-xxs" size="12px" /> {% endblock %} {% endblock %} </li> {% endblock %} </ul> {% endblock %} </div> {% endblock %}`,{Context:o}=Cicada,{Criteria:l}=Cicada.Data,n={template:i,compatConfig:Cicada.compatConfig,inject:["filterItems","repositoryFactory"],emits:["selected"],props:{startFolderId:{type:String,required:!1,default:null},selectedId:{type:String,required:!1,default:null}},data(){return{subFolders:[],parentFolder:null}},computed:{mediaFolderRepository(){return this.repositoryFactory.create("media_folder")},assetFilter(){return Cicada.Filter.getByName("asset")}},watch:{startFolderId(){this.getSubFolders(this.startFolderId),this.fetchParentFolder(this.startFolderId)}},mounted(){this.mountedComponent()},methods:{mountedComponent(){this.getSubFolders(this.startFolderId),this.fetchParentFolder(this.startFolderId)},async getSubFolders(e){const t=new l(1,50).addFilter(l.equals("parentId",e)).addAssociation("children").addSorting(l.sort("name","asc")),d=await this.mediaFolderRepository.search(t,o.api);this.subFolders=d.filter(this.filterItems)},getChildCount(e){return e.children.filter(this.filterItems).length},async fetchParentFolder(e){if(e!==null){const t=await this.mediaFolderRepository.get(e,o.api);this.updateParentFolder(t)}else this.parentFolder=null},async updateParentFolder(e){e.id===null?this.parentFolder=null:e.parentId===null?this.parentFolder={id:null,name:this.$tc("sw-media.index.rootFolderName")}:this.parentFolder=await this.mediaFolderRepository.get(e.parentId,o.api)},emitInput(e){this.$emit("selected",e)}}};export{n as default};
//# sourceMappingURL=index-BJ39tXUp.js.map
