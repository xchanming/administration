{"version":3,"file":"error-resolver.system-config.data-Cbnv_v_4.js","sources":["../../../app/administration/src/core/data/error-resolver.system-config.data.ts"],"sourcesContent":["import CicadaError from 'src/core/data/CicadaError';\n\nconst { string } = Cicada.Utils;\n\n// eslint-disable-next-line sw-deprecation-rules/private-feature-declarations\ninterface ApiError {\n    code: string;\n    title: string;\n    detail: string;\n    meta: {\n        parameters: object;\n    };\n    status: string;\n    source?: {\n        pointer?: string;\n    };\n}\n\n/**\n * @package services-settings\n *\n * @private\n */\nexport default class ErrorResolverSystemConfig {\n    public static ENTITY_NAME = 'SYSTEM_CONFIG';\n\n    private readonly merge;\n\n    constructor() {\n        this.merge = Cicada.Utils.object.merge;\n    }\n\n    public handleWriteErrors(errors?: ApiError[]) {\n        if (!errors) {\n            throw new Error('[error-resolver] handleWriteError was called without errors');\n        }\n\n        const writeErrors = this.reduceErrorsByWriteIndex(errors);\n\n        if (writeErrors.systemError.length > 0) {\n            this.addSystemErrors(writeErrors.systemError);\n        }\n\n        this.handleErrors(writeErrors.apiError);\n    }\n\n    public cleanWriteErrors() {\n        void Cicada.State.dispatch('error/resetApiErrors');\n    }\n\n    private reduceErrorsByWriteIndex(errors: ApiError[]) {\n        const writeErrors: {\n            systemError: CicadaError[];\n            apiError: {\n                [key: string]: CicadaError;\n            };\n        } = {\n            systemError: [],\n            apiError: {},\n        };\n\n        errors.forEach((current) => {\n            if (!current.source || !current.source.pointer) {\n                const systemError = new CicadaError({\n                    code: current.code,\n                    meta: current.meta,\n                    detail: current.detail,\n                    status: current.status,\n                });\n                writeErrors.systemError.push(systemError);\n\n                return;\n            }\n\n            const segments = current.source.pointer.split('/');\n\n            // remove first empty element in list\n            if (segments[0] === '') {\n                segments.shift();\n            }\n\n            const denormalized = {};\n            const lastIndex = segments.length - 1;\n\n            segments.reduce((pointer: { [key: string]: Partial<CicadaError> }, segment, index) => {\n                // skip translations\n                if (segment === 'translations' || segments[index - 1] === 'translations') {\n                    return pointer;\n                }\n\n                if (index === lastIndex) {\n                    pointer[segment] = new CicadaError(current);\n                } else {\n                    pointer[segment] = {};\n                }\n\n                return pointer[segment];\n            }, denormalized);\n\n            writeErrors.apiError = this.merge(writeErrors.apiError, denormalized);\n        });\n\n        return writeErrors;\n    }\n\n    private addSystemErrors(errors: CicadaError[]) {\n        errors.forEach((error) => {\n            void Cicada.State.dispatch('error/addSystemError', error);\n        });\n    }\n\n    private handleErrors(errors: { [key: string]: CicadaError }) {\n        Object.keys(errors).forEach((key: string) => {\n            void Cicada.State.dispatch('error/addApiError', {\n                expression: this.getErrorPath(key),\n                error: errors[key],\n            });\n        });\n    }\n\n    private getErrorPath(key: string) {\n        key = string.camelCase(key);\n\n        return `${ErrorResolverSystemConfig.ENTITY_NAME}.${key}`;\n    }\n}\n"],"names":["string","_ErrorResolverSystemConfig","errors","writeErrors","current","systemError","CicadaError","segments","denormalized","lastIndex","pointer","segment","index","error","key","ErrorResolverSystemConfig"],"mappings":"8CAEA,KAAM,CAAE,OAAAA,CAAO,EAAI,OAAO,MAqBLC,EAArB,MAAqBA,CAA0B,CAK3C,aAAc,CACL,KAAA,MAAQ,OAAO,MAAM,OAAO,KACrC,CAEO,kBAAkBC,EAAqB,CAC1C,GAAI,CAACA,EACK,MAAA,IAAI,MAAM,6DAA6D,EAG3E,MAAAC,EAAc,KAAK,yBAAyBD,CAAM,EAEpDC,EAAY,YAAY,OAAS,GAC5B,KAAA,gBAAgBA,EAAY,WAAW,EAG3C,KAAA,aAAaA,EAAY,QAAQ,CAC1C,CAEO,kBAAmB,CACjB,OAAO,MAAM,SAAS,sBAAsB,CACrD,CAEQ,yBAAyBD,EAAoB,CACjD,MAAMC,EAKF,CACA,YAAa,CAAC,EACd,SAAU,CAAC,CAAA,EAGR,OAAAD,EAAA,QAASE,GAAY,CACxB,GAAI,CAACA,EAAQ,QAAU,CAACA,EAAQ,OAAO,QAAS,CACtC,MAAAC,EAAc,IAAIC,EAAY,CAChC,KAAMF,EAAQ,KACd,KAAMA,EAAQ,KACd,OAAQA,EAAQ,OAChB,OAAQA,EAAQ,MAAA,CACnB,EACWD,EAAA,YAAY,KAAKE,CAAW,EAExC,MACJ,CAEA,MAAME,EAAWH,EAAQ,OAAO,QAAQ,MAAM,GAAG,EAG7CG,EAAS,CAAC,IAAM,IAChBA,EAAS,MAAM,EAGnB,MAAMC,EAAe,CAAA,EACfC,EAAYF,EAAS,OAAS,EAEpCA,EAAS,OAAO,CAACG,EAAkDC,EAASC,IAEpED,IAAY,gBAAkBJ,EAASK,EAAQ,CAAC,IAAM,eAC/CF,GAGPE,IAAUH,EACVC,EAAQC,CAAO,EAAI,IAAIL,EAAYF,CAAO,EAElCM,EAAAC,CAAO,EAAI,GAGhBD,EAAQC,CAAO,GACvBH,CAAY,EAEfL,EAAY,SAAW,KAAK,MAAMA,EAAY,SAAUK,CAAY,CAAA,CACvE,EAEML,CACX,CAEQ,gBAAgBD,EAAuB,CACpCA,EAAA,QAASW,GAAU,CACjB,OAAO,MAAM,SAAS,uBAAwBA,CAAK,CAAA,CAC3D,CACL,CAEQ,aAAaX,EAAwC,CACzD,OAAO,KAAKA,CAAM,EAAE,QAASY,GAAgB,CACpC,OAAO,MAAM,SAAS,oBAAqB,CAC5C,WAAY,KAAK,aAAaA,CAAG,EACjC,MAAOZ,EAAOY,CAAG,CAAA,CACpB,CAAA,CACJ,CACL,CAEQ,aAAaA,EAAa,CACxB,OAAAA,EAAAd,EAAO,UAAUc,CAAG,EAEnB,GAAGb,EAA0B,WAAW,IAAIa,CAAG,EAC1D,CACJ,EArGIb,EAAc,YAAc,gBADhC,IAAqBc,EAArBd"}