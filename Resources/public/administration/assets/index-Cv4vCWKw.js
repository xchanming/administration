import{C as c}from"./sw-customer.constant-v-M3S1F-.js";const n=`{% block sw_customer_create %} <sw-page class="sw-customer-create"> {% block sw_customer_create_header %} <template #smart-bar-header> <h2>{{ salutationFilter(customer, $tc('sw-customer.general.newCustomer')) }}</h2> </template> {% endblock %} {% block sw_customer_create_language_switch %} <template #language-switch> <sw-language-switch v-tooltip="{ message: $tc('sw-customer.general.tooltipLanguageSwitch') }" disabled /> </template> {% endblock %} {% block sw_customer_create_actions %} <template #smart-bar-actions> <sw-button-process class="sw-customer-create__save-action" :is-loading="isLoading" :disabled="isLoading" :process-success="isSaveSuccessful" variant="primary" @update:process-success="saveFinish" @click.prevent="onSave" > {{ $tc('sw-customer.detail.buttonSave') }} </sw-button-process> </template> {% endblock %} {% block sw_customer_create_content %} <template #content> <sw-card-view> {% block sw_customer_create_base_form %} <sw-card :title="$tc('sw-customer.detailBase.labelAccountCard')" position-identifier="sw-customer-create-base-form" > <sw-customer-base-form v-if="customer" :is-loading="isLoading" :customer="customer" @sales-channel-change="onChangeSalesChannel" /> </sw-card> {% endblock %} </sw-card-view> </template> {% endblock %} </sw-page> {% endblock %}`,{CicadaError:u}=Cicada.Classes,{Mixin:l}=Cicada,{Criteria:i}=Cicada.Data,d={template:n,compatConfig:Cicada.compatConfig,inject:["repositoryFactory","numberRangeService","systemConfigApiService","customerValidationService"],mixins:[l.getByName("notification")],data(){return{customer:null,customerNumberPreview:"",isSaveSuccessful:!1,isLoading:!1}},computed:{customerRepository(){return this.repositoryFactory.create("customer")},languageRepository(){return this.repositoryFactory.create("language")},languageCriteria(){var t;const e=new i;return e.setLimit(1),(t=this.customer)!=null&&t.salesChannelId&&e.addFilter(i.equals("salesChannelDefaultAssignments.id",this.customer.salesChannelId)),e},languageId(){var e;return this.loadLanguage((e=this.customer)==null?void 0:e.salesChannelId)},salutationRepository(){return this.repositoryFactory.create("salutation")},salutationCriteria(){const e=new i(1,1);return e.addFilter(i.equals("salutationKey","not_specified")),e},salutationFilter(){return Cicada.Filter.getByName("salutation")}},watch:{"customer.salesChannelId"(e){this.systemConfigApiService.getValues("core.systemWideLoginRegistration").then(t=>{t["core.systemWideLoginRegistration.isCustomerBoundToSalesChannel"]&&(this.customer.boundSalesChannelId=e)})}},created(){this.createdComponent()},methods:{async createdComponent(){const e=await this.getDefaultSalutation();Cicada.State.commit("context/resetLanguageToDefault"),this.customer=this.customerRepository.create(),this.customer.accountType=c.ACCOUNT_TYPE_PRIVATE,this.customer.password="",this.customer.vatIds=[],this.customer.salutationId=e},saveFinish(){this.isSaveSuccessful=!1,this.$router.push({name:"sw.customer.detail",params:{id:this.customer.id}})},validateEmail(){const{id:e,email:t,boundSalesChannelId:s}=this.customer;return t?this.customerValidationService.checkCustomerEmail({id:e,email:t,boundSalesChannelId:s}).then(a=>a).catch(a=>{Cicada.State.dispatch("error/addApiError",{expression:`customer.${this.customer.id}.email`,error:new u(a.response.data.errors[0])})}):Promise.resolve({isValid:!0})},async onSave(){this.isLoading=!0;let e=!1;const t=await this.validateEmail();(!t||!t.isValid)&&(e=!0),this.isSaveSuccessful=!1;let s=Promise.resolve();if(this.customerNumberPreview===this.customer.customerNumber&&(s=this.numberRangeService.reserve("customer",this.customer.salesChannelId).then(r=>{this.customerNumberPreview="reserved",this.customer.customerNumber=r.number})),e)return this.createNotificationError({message:this.$tc("sw-customer.detail.messageSaveError")}),this.isLoading=!1,!1;const a=await this.languageId,o={...Cicada.Context.api,languageId:a};return s.then(()=>this.customerRepository.save(this.customer,o).then(r=>(this.isLoading=!1,this.isSaveSuccessful=!0,r)).catch(r=>{throw this.createNotificationError({message:this.$tc("sw-customer.detail.messageSaveError")}),this.isLoading=!1,r}))},onChangeSalesChannel(e){this.customer.salesChannelId=e,this.numberRangeService.reserve("customer",e,!0).then(t=>{this.customerNumberPreview=t.number,this.customer.customerNumber=t.number})},async loadLanguage(e){const t=Cicada.Context.api.languageId;if(!e)return t;const s=await this.languageRepository.searchIds(this.languageCriteria);return s!=null&&s.data?s.data[0]:t},async getDefaultSalutation(){var t;return(t=(await this.salutationRepository.searchIds(this.salutationCriteria)).data)==null?void 0:t[0]}}};export{d as default};
//# sourceMappingURL=index-Cv4vCWKw.js.map
