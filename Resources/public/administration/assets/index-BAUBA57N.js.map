{"version":3,"mappings":"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","names":["ACTION","ACTION_TYPE","GENERAL_GROUP","TAG_GROUP","CUSTOMER_GROUP","ORDER_GROUP","ACTION_GROUP","Utils","EntityDefinition","capitalizeString","camelCase","snakeCase","FlowBuilderService","context","callback","icons","labels","key","actions","groups","actionGroup","actionName","keyName","index","entity","format","description","value","label","text","config","translator","snippet","data","sequence","_a","item","convertedDescription","cloneConfig","descriptions","fieldName","fieldValue","html","val","valPreview","appActions","selectedAppAction","field","option","opt","_b","_c","_d","_e","customerGroup","customFieldSets","customFields","customFieldSet","customField","stateMachineState","orderStatus","orderStatusName","deliveryStatus","deliveryStatusName","paymentStatus","paymentStatusName","forceTransition","tagsString","mailTemplateData","mailSendDescription","mailDescription","selectedAction","allowedAware","entityProperties","availableEntities","entityName","properties","entityProperty","camelCaseText","normalText","entities","action","aware","parent","arrayResult","child","items","itemsKeyMapping","map","itemsNodeList","node","Application","Service","EntityCollection","types","flowState","state","flow","event","events","eventName","sequences","sequenceIds","sequenceId","params","sequenceIndex","el","updatedSequence","invalidSequences","documentTypes","customerGroups","mailTemplates","rules","firstSequence","availableAction","actionType","service","name","commit","id","result","Module","State","__vitePreload","route"],"ignoreList":[],"sources":["../../../app/administration/src/module/sw-flow/constant/flow.constant.js","../../../app/administration/src/module/sw-flow/service/flow-builder.service.ts","../../../app/administration/src/module/sw-flow/service/index.ts","../../../app/administration/src/module/sw-flow/acl/index.js","../../../app/administration/src/module/sw-flow/state/flow.state.js","../../../app/administration/src/module/sw-flow/index.js"],"sourcesContent":["/**\n * @private\n * @package services-settings\n */\nexport const ACTION = Object.freeze({\n    ADD_TAG: 'action.add.tag',\n    ADD_ORDER_TAG: 'action.add.order.tag',\n    ADD_CUSTOMER_TAG: 'action.add.customer.tag',\n    REMOVE_TAG: 'action.remove.tag',\n    REMOVE_ORDER_TAG: 'action.remove.order.tag',\n    REMOVE_CUSTOMER_TAG: 'action.remove.customer.tag',\n    SET_ORDER_STATE: 'action.set.order.state',\n    GRANT_DOWNLOAD_ACCESS: 'action.grant.download.access',\n    MAIL_SEND: 'action.mail.send',\n    STOP_FLOW: 'action.stop.flow',\n    SET_ORDER_CUSTOM_FIELD: 'action.set.order.custom.field',\n    SET_CUSTOMER_CUSTOM_FIELD: 'action.set.customer.custom.field',\n    SET_CUSTOMER_GROUP_CUSTOM_FIELD: 'action.set.customer.group.custom.field',\n    CHANGE_CUSTOMER_GROUP: 'action.change.customer.group',\n    CHANGE_CUSTOMER_STATUS: 'action.change.customer.status',\n    ADD_CUSTOMER_AFFILIATE_AND_CAMPAIGN_CODE: 'action.add.customer.affiliate.and.campaign.code',\n    ADD_ORDER_AFFILIATE_AND_CAMPAIGN_CODE: 'action.add.order.affiliate.and.campaign.code',\n    APP_FLOW_ACTION: 'action.app.flow',\n});\n\n/**\n * @private\n * @package services-settings\n */\nexport const ACTION_TYPE = Object.freeze({\n    ADD_TAG: 'action.add.entity.tag',\n    REMOVE_TAG: 'action.remove.entity.tag',\n    SET_CUSTOM_FIELD: 'action.set.entity.custom.field',\n    ADD_AFFILIATE_AND_CAMPAIGN_CODE: 'action.add.entity.affiliate.and.campaign.code',\n});\n\n/**\n * @private\n * @package services-settings\n */\nexport const GENERAL_GROUP = 'general';\n/**\n * @private\n * @package services-settings\n */\nexport const TAG_GROUP = 'tag';\n/**\n * @private\n * @package services-settings\n */\nexport const CUSTOMER_GROUP = 'customer';\n/**\n * @private\n * @package services-settings\n */\nexport const ORDER_GROUP = 'order';\n\n/**\n * @private\n * @package services-settings\n */\nexport const ACTION_GROUP = Object.freeze({\n    [ACTION.ADD_ORDER_TAG]: TAG_GROUP,\n    [ACTION.ADD_CUSTOMER_TAG]: TAG_GROUP,\n    [ACTION.REMOVE_ORDER_TAG]: TAG_GROUP,\n    [ACTION.REMOVE_CUSTOMER_TAG]: TAG_GROUP,\n    [ACTION.CHANGE_CUSTOMER_GROUP]: CUSTOMER_GROUP,\n    [ACTION.CHANGE_CUSTOMER_STATUS]: CUSTOMER_GROUP,\n    [ACTION.SET_CUSTOMER_CUSTOM_FIELD]: CUSTOMER_GROUP,\n    [ACTION.SET_CUSTOMER_GROUP_CUSTOM_FIELD]: CUSTOMER_GROUP,\n    [ACTION.ADD_CUSTOMER_AFFILIATE_AND_CAMPAIGN_CODE]: CUSTOMER_GROUP,\n    [ACTION.ADD_ORDER_AFFILIATE_AND_CAMPAIGN_CODE]: ORDER_GROUP,\n    [ACTION.SET_ORDER_CUSTOM_FIELD]: ORDER_GROUP,\n    [ACTION.GRANT_DOWNLOAD_ACCESS]: ORDER_GROUP,\n    [ACTION.GENERATE_DOCUMENT]: GENERAL_GROUP,\n    [ACTION.MAIL_SEND]: GENERAL_GROUP,\n    [ACTION.STOP_FLOW]: GENERAL_GROUP,\n});\n\n/**\n * @private\n * @package services-settings\n */\nexport const GROUPS = [\n    TAG_GROUP,\n    CUSTOMER_GROUP,\n    ORDER_GROUP,\n    GENERAL_GROUP,\n];\n\n/**\n * @private\n * @package services-settings\n */\nexport default {\n    ACTION,\n    ACTION_TYPE,\n    ACTION_GROUP,\n    GROUPS,\n    GENERAL_GROUP,\n};\n","import type { Entity } from '@cicada-ag/meteor-admin-sdk/es/_internals/data/Entity';\nimport type EntityCollection from '@cicada-ag/meteor-admin-sdk/es/_internals/data/EntityCollection';\nimport type { I18n } from 'vue-i18n';\nimport {\n    ACTION,\n    ACTION_GROUP,\n    ACTION_TYPE,\n    CUSTOMER_GROUP,\n    GENERAL_GROUP,\n    ORDER_GROUP,\n    TAG_GROUP,\n} from '../constant/flow.constant';\n\nconst { Utils, EntityDefinition } = Cicada;\nconst { capitalizeString, camelCase, snakeCase } = Cicada.Utils.string;\n\ntype Node = {\n    id: string;\n    parentId: string;\n    children: Node[];\n};\n\ntype Primitive = string | number | boolean | null;\ntype SequenceConfigValues = {\n    [key: string]: Primitive | Primitive[] | { [key: string]: Primitive | Primitive[] };\n};\n\ntype AppAction = Entity<'app_flow_action'> & {\n    config: Array<{\n        name: string;\n        type: string;\n        label: { [key: string]: string };\n        options: Array<{\n            value: string | number;\n            label: { [key: string]: string };\n        }>;\n    }>;\n};\n\ntype Action = {\n    name: string;\n    delayable: boolean;\n    requirements: string[];\n    extensions: never[];\n    config: { [key: string]: string };\n};\n\ntype ActionData = {\n    appActions: AppAction[];\n    customerGroups: EntityCollection<'customer_group'>;\n    customFields: EntityCollection<'custom_field'>;\n    customFieldSets: EntityCollection<'custom_field_set'>;\n    stateMachineState: EntityCollection<'state_machine_state'>;\n    mailTemplates: EntityCollection<'mail_template'>;\n};\n\ntype ActionTranslator = {\n    // eslint-disable-next-line @typescript-eslint/ban-types\n    $tc: I18n<{}, {}, {}, string, true>['global']['tc'];\n    currentLocale: string;\n    getInlineSnippet(value: { [key: string]: string }): string;\n};\n\ntype ActionSequence = Entity<'flow_sequence'> & {\n    config: SequenceConfigValues & {\n        value?: boolean;\n        entity?: string;\n        active?: boolean;\n        order?: string;\n        mailTemplateId?: string;\n        order_delivery?: string;\n        optionLabel?: string;\n        customFieldId?: string;\n        customFieldSetId?: string;\n        customerGroupId?: string;\n        order_transaction?: string;\n        force_transition?: boolean;\n        documentType?: string;\n        affiliateCode?: {\n            upsert?: boolean;\n            value?: string;\n        };\n        campaignCode?: {\n            upsert?: boolean;\n            value?: string;\n        };\n    };\n};\n\n/**\n * @private\n * @package services-settings\n */\nexport type ActionContext = {\n    data: ActionData;\n    sequence: ActionSequence;\n    translator: ActionTranslator;\n};\n\n/**\n * @private\n * @package services-settings\n */\nexport default class FlowBuilderService {\n    private $actionNames = { ...ACTION };\n\n    private $actionGroupsMapping = { ...ACTION_GROUP };\n\n    private $icon = {\n        addEntityTag: 'regular-tag',\n        mailSend: 'regular-envelope',\n        removeEntityTag: 'regular-tag',\n        stopFlow: 'regular-times-circle',\n        changeCustomerStatus: 'regular-user',\n        changeCustomerGroup: 'regular-users',\n        generateDocument: 'regular-file-text',\n        setOrderState: 'regular-shopping-bag-alt',\n        grantDownloadAccess: 'regular-file-signature',\n        setEntityCustomField: 'regular-file-signature',\n        addEntityAffiliateAndCampaignCode: 'regular-file-signature',\n    };\n\n    private $labelSnippet = {\n        stopFlow: 'sw-flow.actions.stopFlow',\n        mailSend: 'sw-flow.actions.mailSend',\n        addEntityTag: 'sw-flow.actions.addTag',\n        removeEntityTag: 'sw-flow.actions.removeTag',\n        setOrderState: 'sw-flow.actions.setOrderState',\n        generateDocument: 'sw-flow.actions.generateDocument',\n        grantDownloadAccess: 'sw-flow.actions.grantDownloadAccess',\n        changeCustomerGroup: 'sw-flow.actions.changeCustomerGroup',\n        changeCustomerStatus: 'sw-flow.actions.changeCustomerStatus',\n        setEntityCustomField: 'sw-flow.actions.changeCustomFieldContent',\n        addEntityAffiliateAndCampaignCode: 'sw-flow.actions.addAffiliateAndCampaignCode',\n    };\n\n    private $descriptionCallbacks = {\n        [this.$actionNames.MAIL_SEND]: (context: ActionContext) => this.getMailSendDescription(context),\n        [this.$actionNames.STOP_FLOW]: (context: ActionContext) => this.getStopFlowActionDescription(context),\n        [this.$actionNames.SET_ORDER_STATE]: (context: ActionContext) => this.getSetOrderStateDescription(context),\n        [this.$actionNames.CHANGE_CUSTOMER_GROUP]: (context: ActionContext) => this.getCustomerGroupDescription(context),\n        [this.$actionNames.GRANT_DOWNLOAD_ACCESS]: (context: ActionContext) => this.getDownloadAccessDescription(context),\n        [this.$actionNames.SET_CUSTOMER_CUSTOM_FIELD]: (context: ActionContext) => this.getCustomFieldDescription(context),\n        [this.$actionNames.CHANGE_CUSTOMER_STATUS]: (context: ActionContext) => this.getCustomerStatusDescription(context),\n        [this.$actionNames.ADD_ORDER_AFFILIATE_AND_CAMPAIGN_CODE]: (context: ActionContext) =>\n            this.getAffiliateAndCampaignCodeDescription(context),\n        [this.$actionNames.ADD_CUSTOMER_AFFILIATE_AND_CAMPAIGN_CODE]: (context: ActionContext) =>\n            this.getAffiliateAndCampaignCodeDescription(context),\n    };\n\n    private $entityAction = {\n        [this.$actionNames.ADD_ORDER_TAG]: 'order',\n        [this.$actionNames.REMOVE_ORDER_TAG]: 'order',\n        [this.$actionNames.ADD_CUSTOMER_TAG]: 'customer',\n        [this.$actionNames.SET_ORDER_CUSTOM_FIELD]: 'order',\n        [this.$actionNames.REMOVE_CUSTOMER_TAG]: 'customer',\n        [this.$actionNames.SET_CUSTOMER_CUSTOM_FIELD]: 'customer',\n        [this.$actionNames.ADD_ORDER_AFFILIATE_AND_CAMPAIGN_CODE]: 'order',\n        [this.$actionNames.SET_CUSTOMER_GROUP_CUSTOM_FIELD]: 'customer_group',\n        [this.$actionNames.ADD_CUSTOMER_AFFILIATE_AND_CAMPAIGN_CODE]: 'customer',\n    };\n\n    private $groups = {\n        TAG: TAG_GROUP,\n        ORDER: ORDER_GROUP,\n        GENERAL: GENERAL_GROUP,\n        CUSTOMER: CUSTOMER_GROUP,\n    };\n\n    public addDescriptionCallbacks(callback: (context: ActionContext) => string) {\n        Object.assign(this.$descriptionCallbacks, callback);\n    }\n\n    public getDescriptionCallbacks() {\n        return this.$descriptionCallbacks;\n    }\n\n    public addIcons(icons: string) {\n        return Object.assign(this.$icon, icons);\n    }\n\n    public addLabels(labels: { [key: string]: string }) {\n        return Object.assign(this.$labelSnippet, labels);\n    }\n\n    public getActionName(key: keyof typeof this.$actionNames) {\n        return this.$actionNames[key];\n    }\n\n    public addActionNames(actions: { [key: string]: string }) {\n        return Object.assign(this.$actionNames, actions);\n    }\n\n    public addGroups(groups: { [key: string]: string }) {\n        return Object.assign(this.$groups, groups);\n    }\n\n    public getGroup(key: keyof typeof this.$groups) {\n        return this.$groups[key];\n    }\n\n    public getGroups(): string[] {\n        return Object.values(this.$groups);\n    }\n\n    public getActionGroupMapping(key: keyof typeof this.$actionGroupsMapping) {\n        return this.$actionGroupsMapping[key];\n    }\n\n    public addActionGroupMapping(actionGroup: { [key: string]: string }) {\n        return Object.assign(this.$actionGroupsMapping, actionGroup);\n    }\n\n    public isKeyOfActionName(key: string): key is keyof typeof this.$entityAction {\n        return key in this.$entityAction;\n    }\n\n    public isKeyOfActionLabel(key: string): key is keyof typeof this.$labelSnippet {\n        return key in this.$labelSnippet;\n    }\n\n    public isKeyOfActionDescription(key: string): key is keyof typeof this.$descriptionCallbacks {\n        return key in this.$descriptionCallbacks;\n    }\n\n    public isKeyOfEntityIcon(key: string): key is keyof typeof this.$icon {\n        return key in this.$icon;\n    }\n\n    public getActionTitle(actionName: keyof typeof this.$entityAction) {\n        if (!actionName) {\n            return null;\n        }\n\n        let keyName = '';\n        const name = this.mapActionType(actionName) ?? actionName;\n\n        name.split('.').forEach((key, index) => {\n            if (!index) {\n                return;\n            }\n\n            if (index === 1) {\n                keyName = key;\n                return;\n            }\n\n            keyName += capitalizeString(key);\n        });\n\n        return {\n            value: actionName,\n            icon: this.isKeyOfEntityIcon(keyName) ? this.$icon[keyName] : 'regular-question-circle-s',\n            label: this.isKeyOfActionLabel(keyName) ? this.$labelSnippet[keyName] : 'sw-flow.actions.unknownLabel',\n        };\n    }\n\n    public mapActionType(actionName: keyof typeof this.$entityAction) {\n        let entity = this.$entityAction[actionName];\n\n        if (entity === undefined) {\n            return null;\n        }\n\n        entity = entity.replace('_', '.');\n\n        return actionName.replace(entity, 'entity');\n    }\n\n    public getEntityNameByAction(actionName: keyof typeof this.$entityAction) {\n        return this.$entityAction[actionName];\n    }\n\n    public getDescription(format: { [key: string]: string }) {\n        const description: string[] = [];\n\n        Object.entries(format).forEach(\n            ([\n                key,\n                value,\n            ]) => {\n                let label = value;\n\n                if (Utils.types.isPlainObject(value)) {\n                    label = Object.values(value).join(', ');\n                }\n\n                const text = `<span>${key}:</span> <span>${label}</span></br>`;\n                description.push(`<p class=\"${key.toLowerCase().replace(/ /g, '_')}\">${text}</p>`);\n            },\n        );\n\n        return description.join('');\n    }\n\n    public convertConfig(config: ActionSequence['config'], translator: ActionTranslator) {\n        const description = {};\n        const entries = Object.entries(config);\n\n        entries.forEach(\n            ([\n                key,\n                value,\n            ]) => {\n                if (!this.isKeyOfActionLabel(key)) {\n                    return;\n                }\n\n                const snippet = translator.$tc(this.$labelSnippet[key]);\n\n                if (!snippet) {\n                    return;\n                }\n\n                Object.assign(description, {\n                    [snippet]: value,\n                });\n            },\n        );\n\n        return description;\n    }\n\n    public getActionDescriptions(data: ActionData, sequence: ActionSequence, translator: ActionTranslator) {\n        const context: ActionContext = { data, sequence, translator };\n\n        if (!sequence.actionName) {\n            return '';\n        }\n\n        const selectedAppAction = data.appActions?.find((item) => item.name === sequence.actionName);\n\n        if (selectedAppAction) {\n            return this.getAppFlowActionDescription(context);\n        }\n\n        if (\n            this.isKeyOfActionDescription(sequence.actionName) &&\n            typeof this.$descriptionCallbacks[sequence.actionName] === 'function'\n        ) {\n            return this.$descriptionCallbacks[sequence.actionName](context);\n        }\n\n        const convertedDescription = this.convertConfig(sequence.config, translator);\n\n        return this.getDescription(convertedDescription);\n    }\n\n    public getAppFlowActionDescription(context: ActionContext) {\n        const {\n            sequence: { config },\n        } = context;\n\n        const cloneConfig = { ...config } as SequenceConfigValues;\n        let descriptions = '';\n\n        Object.entries(cloneConfig).forEach(\n            ([\n                fieldName,\n                fieldValue,\n            ]) => {\n                if (Array.isArray(fieldValue) && fieldValue.length > 1) {\n                    let html = '';\n\n                    fieldValue.forEach((val) => {\n                        const valPreview = this.formatValuePreview(context, fieldName, val);\n                        html = `${html}- ${valPreview.toString()}<br/>`;\n                    });\n\n                    descriptions = `${descriptions}${this.convertLabelPreview(context, fieldName)}:<br/> ${html}`;\n                } else {\n                    const valPreview = this.formatValuePreview(context, fieldName, fieldValue);\n                    // eslint-disable-next-line max-len\n                    descriptions = `${descriptions}${this.convertLabelPreview(context, fieldName)}: ${valPreview.toString()}<br/>`;\n                }\n            },\n        );\n\n        return descriptions;\n    }\n\n    public formatValuePreview(\n        context: ActionContext,\n        fieldName: string,\n        val: SequenceConfigValues[keyof SequenceConfigValues],\n    ) {\n        const {\n            data: { appActions },\n            sequence: { actionName },\n        } = context;\n\n        const value: string = this.configValuesToString(val);\n        const selectedAppAction = appActions.find((item) => item.name === actionName);\n\n        if (selectedAppAction === undefined) {\n            return value;\n        }\n\n        const config = selectedAppAction.config?.find((field) => field.name === fieldName);\n        if (config === undefined) {\n            return value;\n        }\n\n        if (['password'].includes(config.type)) {\n            return value?.replace(/([^;])/g, '*');\n        }\n\n        if (\n            [\n                'single-select',\n                'multi-select',\n            ].includes(config.type)\n        ) {\n            const option = config.options.find((opt) => opt.value === value);\n\n            if (option === undefined) {\n                return value;\n            }\n\n            return option.label[context.translator.currentLocale] ?? config.label['en-GB'] ?? value;\n        }\n\n        if (\n            [\n                'datetime',\n                'date',\n                'time',\n            ].includes(config.type)\n        ) {\n            return new Date(value);\n        }\n\n        if (['colorpicker'].includes(config.type)) {\n            return `<span class=\"sw-color-badge is--default\" style=\"background: ${value};\"></span> ${value}`;\n        }\n\n        return value;\n    }\n\n    public convertLabelPreview(context: ActionContext, fieldName: string) {\n        const {\n            data: { appActions },\n            sequence: { actionName },\n        } = context;\n\n        const selectedAppAction = appActions.find((item) => item.name === actionName);\n\n        if (selectedAppAction === undefined) {\n            return fieldName;\n        }\n\n        const config = selectedAppAction.config?.find((field) => field.name === fieldName);\n        if (config === undefined) {\n            return fieldName;\n        }\n\n        return config.label[context.translator.currentLocale] ?? config.label['en-GB'] ?? fieldName;\n    }\n\n    public getActionModalName(actionName: keyof typeof this.$entityAction) {\n        if (!actionName) {\n            return '';\n        }\n\n        if (\n            this.mapActionType(actionName) === ACTION_TYPE.ADD_TAG ||\n            this.mapActionType(actionName) === ACTION_TYPE.REMOVE_TAG\n        ) {\n            return 'sw-flow-tag-modal';\n        }\n\n        if (this.mapActionType(actionName) === ACTION_TYPE.SET_CUSTOM_FIELD) {\n            return 'sw-flow-set-entity-custom-field-modal';\n        }\n\n        if (this.mapActionType(actionName) === ACTION_TYPE.ADD_AFFILIATE_AND_CAMPAIGN_CODE) {\n            return 'sw-flow-affiliate-and-campaign-code-modal';\n        }\n\n        if (this.mapActionType(actionName) === ACTION.GRANT_DOWNLOAD_ACCESS) {\n            return 'sw-flow-grant-download-access-modal';\n        }\n\n        return `${actionName.replace(/\\./g, '-').replace('action', 'sw-flow')}-modal`;\n    }\n\n    public getStopFlowActionDescription(context: ActionContext) {\n        return context.translator.$tc('sw-flow.actions.textStopFlowDescription');\n    }\n\n    public getCustomerStatusDescription(context: ActionContext) {\n        const {\n            sequence: { config },\n            translator,\n        } = context;\n\n        return config.active\n            ? translator.$tc('sw-flow.modals.customerStatus.active')\n            : translator.$tc('sw-flow.modals.customerStatus.inactive');\n    }\n\n    public getAffiliateAndCampaignCodeDescription(context: ActionContext) {\n        const {\n            translator,\n            sequence: { config },\n        } = context;\n\n        let description = translator.$tc('sw-flow.actions.labelTo', 0, {\n            entity: capitalizeString(config?.entity),\n        });\n\n        if (config?.affiliateCode?.upsert || config?.affiliateCode?.value != null) {\n            description = `${description}<br>${translator.$tc('sw-flow.actions.labelAffiliateCode', 0, {\n                affiliateCode: config.affiliateCode.value || '',\n            })}`;\n        }\n\n        if (config.campaignCode?.upsert || config?.campaignCode?.value != null) {\n            description = `${description}<br>${translator.$tc('sw-flow.actions.labelCampaignCode', 0, {\n                campaignCode: config?.campaignCode?.value || '',\n            })}`;\n        }\n\n        return description;\n    }\n\n    public getCustomerGroupDescription(context: ActionContext) {\n        const {\n            data,\n            sequence: { config },\n        } = context;\n\n        const customerGroup = data.customerGroups.find((item) => item.id === config.customerGroupId);\n        return customerGroup?.translated?.name;\n    }\n\n    public getCustomFieldDescription(context: ActionContext) {\n        const {\n            data: { customFieldSets, customFields },\n            sequence: { config },\n            translator,\n        } = context;\n\n        const customFieldSet = customFieldSets.find((item) => item.id === config.customFieldSetId);\n        const customField = customFields.find((item) => item.id === config.customFieldId) as Entity<'custom_field'> & {\n            config?: { label?: { [key: string]: string } };\n        };\n\n        if (!customFieldSet || !customField) {\n            return '';\n        }\n\n        if (typeof customField.config !== 'object' || !customField.config) {\n            return '';\n        }\n\n        if (!customField.config.hasOwnProperty('label')) {\n            return '';\n        }\n\n        if (!customField.config.label) {\n            return '';\n        }\n\n        return `${translator.$tc('sw-flow.actions.labelCustomFieldSet', 0, {\n            customFieldSet: translator.getInlineSnippet(customField.config.label) || customFieldSet.name,\n        })}<br>${translator.$tc('sw-flow.actions.labelCustomField', 0, {\n            customField: translator.getInlineSnippet(customField.config.label) || customField.name,\n        })}<br>${translator.$tc('sw-flow.actions.labelCustomFieldOption', 0, {\n            customFieldOption: config.optionLabel,\n        })}`;\n    }\n\n    public getSetOrderStateDescription(context: ActionContext) {\n        const {\n            data: { stateMachineState },\n            sequence: { config },\n            translator,\n        } = context;\n\n        const description = [];\n        if (config.order) {\n            const orderStatus = stateMachineState.find(\n                (item) => item.technicalName === config.order && item.stateMachine?.technicalName === 'order.state',\n            );\n            const orderStatusName = orderStatus?.translated?.name || '';\n            description.push(`${translator.$tc('sw-flow.modals.status.labelOrderStatus')}: ${orderStatusName}`);\n        }\n\n        if (config.order_delivery) {\n            const deliveryStatus = stateMachineState.find(\n                (item) =>\n                    item.technicalName === config.order_delivery &&\n                    item.stateMachine?.technicalName === 'order_delivery.state',\n            );\n            const deliveryStatusName = deliveryStatus?.translated?.name || '';\n            description.push(`\n                ${translator.$tc('sw-flow.modals.status.labelDeliveryStatus')}: ${deliveryStatusName}\n            `);\n        }\n\n        if (config.order_transaction) {\n            const paymentStatus = stateMachineState.find(\n                (item) =>\n                    item.technicalName === config.order_transaction &&\n                    item.stateMachine?.technicalName === 'order_transaction.state',\n            );\n            const paymentStatusName = paymentStatus?.translated?.name || '';\n            description.push(`${translator.$tc('sw-flow.modals.status.labelPaymentStatus')}: ${paymentStatusName}`);\n        }\n\n        const forceTransition = config.force_transition\n            ? translator.$tc('global.default.yes')\n            : translator.$tc('global.default.no');\n\n        description.push(`${translator.$tc('sw-flow.modals.status.forceTransition')}: ${forceTransition}`);\n\n        return description.join('<br>');\n    }\n\n    public convertTagString(tagsString: string[]) {\n        return tagsString.toString().replace(/,/g, ', ');\n    }\n\n    public getMailSendDescription(context: ActionContext) {\n        const {\n            data,\n            sequence: { config },\n            translator,\n        } = context;\n\n        const mailTemplateData = data.mailTemplates.find((item) => item.id === config.mailTemplateId);\n\n        let mailSendDescription = translator.$tc('sw-flow.actions.labelTemplate', 0, {\n            template: mailTemplateData?.mailTemplateType?.name,\n        });\n\n        let mailDescription = mailTemplateData?.description;\n\n        if (mailDescription) {\n            // Truncate description string\n            mailDescription = mailDescription.length > 60 ? `${mailDescription.substring(0, 60)}...` : mailDescription;\n\n            mailSendDescription = `${mailSendDescription}<br>${translator.$tc('sw-flow.actions.labelDescription', 0, {\n                description: mailDescription,\n            })}`;\n        }\n\n        return mailSendDescription;\n    }\n\n    public getDownloadAccessDescription(context: ActionContext) {\n        const {\n            sequence: { config },\n            translator,\n        } = context;\n\n        return config.value\n            ? translator.$tc('sw-flow.actions.downloadAccessLabel.granted')\n            : translator.$tc('sw-flow.actions.downloadAccessLabel.revoked');\n    }\n\n    public getAvailableEntities(\n        selectedAction: keyof typeof this.$entityAction,\n        actions: Action[],\n        allowedAware: string[],\n        entityProperties: string[] = [],\n    ) {\n        const availableEntities: { label: string; value: string }[] = [];\n        const entities = this.getEntities(selectedAction, actions, allowedAware);\n\n        entities.forEach((entityName) => {\n            if (!EntityDefinition.has(snakeCase(entityName))) {\n                return;\n            }\n\n            const properties = EntityDefinition.get(snakeCase(entityName)).properties;\n\n            // Check if the entity has the needed properties\n            const hasProperties = entityProperties.every((entityProperty) => properties.hasOwnProperty(entityProperty));\n\n            if (!hasProperties) {\n                return;\n            }\n\n            availableEntities.push({\n                label: this.convertEntityName(camelCase(entityName)),\n                value: entityName,\n            });\n        });\n\n        return availableEntities;\n    }\n\n    public convertEntityName(camelCaseText: string) {\n        if (!camelCaseText) {\n            return '';\n        }\n\n        const normalText = camelCaseText.replace(/([A-Z])/g, ' $1');\n\n        return capitalizeString(normalText);\n    }\n\n    public getEntities(selectedAction: keyof typeof this.$entityAction, actions: Action[], allowedAware: string[]) {\n        const entities: string[] = [];\n\n        actions.forEach((action) => {\n            if (!this.isKeyOfActionName(action.name)) {\n                return;\n            }\n\n            // Excluding actions which do have different action type with selected action\n            if (\n                this.mapActionType(action.name) === null ||\n                this.mapActionType(action.name) !== this.mapActionType(selectedAction)\n            ) {\n                return;\n            }\n\n            const isValid = action.requirements.some((aware) => allowedAware.includes(aware));\n            if (isValid) {\n                entities.push(this.$entityAction[action.name]);\n            }\n        });\n\n        return entities;\n    }\n\n    public flattenNodeList(parent: Node, arrayResult: Node[]) {\n        arrayResult.push(parent);\n\n        if (parent.children.length === 0) {\n            return;\n        }\n\n        parent.children.forEach((child) => {\n            this.flattenNodeList(child, arrayResult);\n        });\n    }\n\n    public configValuesToString(val: SequenceConfigValues[keyof SequenceConfigValues]): string {\n        if (val === null) {\n            return 'null';\n        }\n\n        if (typeof val === 'string' || typeof val === 'number' || typeof val === 'boolean') {\n            return val.toString();\n        }\n\n        if (Array.isArray(val)) {\n            return `[${val.map((item) => this.configValuesToString(item)).join(', ')}]`;\n        }\n\n        if (typeof val === 'object') {\n            return `{${Object.keys(val)\n                .map((key) => `${key}: ${this.configValuesToString(val[key])}`)\n                .join(', ')}}`;\n        }\n\n        return '';\n    }\n\n    public rearrangeArrayObjects(items: Node[]) {\n        const itemsKeyMapping = items.reduce(\n            (map, item) => {\n                map[item.id] = item;\n                map[item.id].children = [];\n\n                return map;\n            },\n            {} as { [key: string]: Node },\n        );\n\n        const itemsNodeList: Node[] = [];\n\n        items.forEach((item) => {\n            if (!item.parentId) {\n                itemsNodeList.push(item);\n            } else {\n                const parentNode = itemsKeyMapping[item.parentId];\n                parentNode.children.push(item);\n            }\n        });\n\n        const arrayResult: Node[] = [];\n        itemsNodeList.forEach((node) => {\n            this.flattenNodeList(node, arrayResult);\n        });\n\n        arrayResult.forEach((item) => {\n            item.children = [];\n            return item;\n        });\n\n        return arrayResult;\n    }\n}\n","import type { SubContainer } from 'src/global.types';\nimport FlowBuilderService from './flow-builder.service';\n\nconst { Application } = Cicada;\n\n/**\n * @private\n * @package services-settings\n */\ndeclare global {\n    interface ServiceContainer extends SubContainer<'service'> {\n        flowBuilderService: FlowBuilderService;\n    }\n}\n\nApplication.addServiceProvider('flowBuilderService', () => {\n    return new FlowBuilderService();\n});\n","Cicada.Service('privileges').addPrivilegeMappingEntry({\n    category: 'permissions',\n    parent: 'settings',\n    key: 'flow',\n    roles: {\n        viewer: {\n            privileges: [\n                'flow:read',\n                'flow_sequence:read',\n                'rule:read',\n                'mail_template:read',\n                'mail_template_type:read',\n                'document_type:read',\n                'state_machine:read',\n                'state_machine_state:read',\n                'tag:read',\n            ],\n            dependencies: [],\n        },\n        editor: {\n            privileges: [\n                'flow:update',\n                'flow_sequence:update',\n                'flow_sequence:create',\n                'flow_sequence:delete',\n                'tag:create',\n                Cicada.Service('privileges').getPrivileges('rule.creator'),\n                Cicada.Service('privileges').getPrivileges('mail_templates.creator'),\n            ],\n            dependencies: [\n                'flow.viewer',\n            ],\n        },\n        creator: {\n            privileges: [\n                'flow:create',\n            ],\n            dependencies: [\n                'flow.viewer',\n                'flow.editor',\n            ],\n        },\n        deleter: {\n            privileges: [\n                'flow:delete',\n            ],\n            dependencies: [\n                'flow.viewer',\n            ],\n        },\n    },\n});\n","const { Service } = Cicada;\nconst { EntityCollection } = Cicada.Data;\nconst { types } = Cicada.Utils;\n\n/**\n * @private\n * @package services-settings\n * @deprecated tag:v6.7.0 - Will be replaced with Pinia store\n */\nexport default {\n    namespaced: true,\n\n    state: {\n        flow: {\n            eventName: '',\n            sequences: [],\n        },\n        originFlow: {},\n        triggerEvent: {},\n        triggerEvents: [],\n        triggerActions: [],\n        invalidSequences: [],\n        stateMachineState: [],\n        documentTypes: [],\n        mailTemplates: [],\n        customFieldSets: [],\n        customFields: [],\n        customerGroups: [],\n        restrictedRules: [],\n        appActions: [],\n        originAvailableActions: [],\n    },\n\n    mutations: {\n        setAppActions(state, actions) {\n            state.appActions = [\n                ...state.appActions,\n                ...actions,\n            ];\n        },\n\n        setFlow(state, flow) {\n            state.flow = flow;\n            if (flow.config) {\n                state.flow.description = flow.config.description;\n                state.flow.sequences = flow.config.sequences;\n                state.flow.eventName = flow.config.eventName;\n            }\n        },\n\n        setOriginFlow(state, flow) {\n            state.originFlow = {\n                ...flow,\n                sequences: Array.from(flow.sequences).map((item) => Object.assign(item, {})),\n            };\n        },\n\n        setTriggerActions(state, actions) {\n            state.triggerActions = actions;\n        },\n\n        setTriggerEvent(state, event) {\n            state.triggerEvent = event;\n        },\n\n        setTriggerEvents(state, events) {\n            state.triggerEvents = events;\n        },\n\n        setEventName(state, eventName) {\n            state.flow.eventName = eventName;\n        },\n\n        setSequences(state, sequences) {\n            state.flow.sequences = sequences;\n        },\n\n        addSequence(state, sequence) {\n            if (state.flow.sequences instanceof EntityCollection) {\n                state.flow.sequences.add(sequence);\n                return;\n            }\n\n            state.flow.sequences.push(sequence);\n        },\n\n        removeSequences(state, sequenceIds) {\n            sequenceIds.forEach((sequenceId) => {\n                state.flow.sequences.remove(sequenceId);\n            });\n        },\n\n        updateSequence(state, params) {\n            const sequences = state.flow.sequences;\n            const sequenceIndex = sequences.findIndex((el) => el.id === params.id);\n\n            let updatedSequence = {\n                ...sequences[sequenceIndex],\n                ...params,\n            };\n\n            updatedSequence = Object.assign(sequences[sequenceIndex], updatedSequence);\n\n            state.flow.sequences = new EntityCollection(sequences.source, sequences.entity, Cicada.Context.api, null, [\n                ...sequences.slice(0, sequenceIndex),\n                updatedSequence,\n                ...sequences.slice(sequenceIndex + 1),\n            ]);\n        },\n\n        setStateMachineState(state, stateMachineState) {\n            state.stateMachineState = stateMachineState;\n        },\n\n        setInvalidSequences(state, invalidSequences) {\n            state.invalidSequences = invalidSequences;\n        },\n\n        setDocumentTypes(state, documentTypes) {\n            state.documentTypes = documentTypes;\n        },\n\n        setCustomerGroups(state, customerGroups) {\n            state.customerGroups = customerGroups;\n        },\n\n        setMailTemplates(state, mailTemplates) {\n            state.mailTemplates = mailTemplates;\n        },\n\n        removeCurrentFlow(state) {\n            state.flow = {\n                eventName: '',\n                sequences: [],\n            };\n        },\n\n        removeInvalidSequences(state) {\n            state.invalidSequences = [];\n        },\n\n        removeTriggerEvent(state) {\n            state.triggerEvent = {};\n        },\n\n        setCustomFieldSets(state, customFieldSet) {\n            state.customFieldSets = customFieldSet;\n        },\n\n        setCustomFields(state, customField) {\n            state.customFields = customField;\n        },\n\n        setRestrictedRules(state, rules) {\n            state.restrictedRules = rules;\n        },\n    },\n\n    getters: {\n        appActions(state) {\n            return state.appActions;\n        },\n\n        getSelectedAppAction(state) {\n            return (actionName) => {\n                return state.appActions?.find((item) => item.name === actionName);\n            };\n        },\n\n        sequences(state) {\n            return state.flow.sequences;\n        },\n\n        hasFlowChanged(state) {\n            const flow = {\n                ...state.flow,\n                sequences: Array.from(state.flow.sequences).filter((item) => {\n                    if (item.actionName || item.ruleId) {\n                        return Object.assign(item, {});\n                    }\n\n                    return false;\n                }),\n            };\n\n            return !types.isEqual(state.originFlow, flow);\n        },\n\n        isSequenceEmpty(state) {\n            if (!state.flow.sequences.length) {\n                return true;\n            }\n\n            if (state.flow.sequences.length > 1) {\n                return false;\n            }\n\n            const firstSequence = state.flow.sequences[0];\n            return !firstSequence.actionName && !firstSequence.ruleId;\n        },\n\n        availableActions(state) {\n            state.originAvailableActions = [];\n\n            if (!state.triggerEvent || !state.triggerActions) return [];\n\n            const availableAction = [];\n\n            state.triggerActions.forEach((action) => {\n                if (!action.requirements.length) {\n                    state.originAvailableActions.push(action.name);\n                    availableAction.push(action.name);\n                    return;\n                }\n\n                // check if the current active action contains any required keys from an action option.\n                const isActive = action.requirements.some((item) => state.triggerEvent?.aware?.includes(item));\n\n                if (!isActive) {\n                    return;\n                }\n\n                if (!state.originAvailableActions.includes(action.name)) {\n                    state.originAvailableActions.push(action.name);\n                }\n\n                const actionType = Service('flowBuilderService').mapActionType(action.name);\n\n                if (actionType) {\n                    const duplicateAction = availableAction.find(\n                        (option) => Service('flowBuilderService').mapActionType(option) === actionType,\n                    );\n\n                    if (duplicateAction !== undefined) {\n                        return;\n                    }\n                }\n\n                availableAction.push(action.name);\n            });\n\n            return availableAction;\n        },\n\n        mailTemplateIds(state) {\n            return state.flow.sequences\n                .filter((item) => item.actionName === Service('flowBuilderService').getActionName('MAIL_SEND'))\n                .map((item) => item.config?.mailTemplateId);\n        },\n\n        customFieldSetIds(state) {\n            const service = Service('flowBuilderService');\n            return state.flow.sequences\n                .filter(\n                    (item) =>\n                        item.actionName === service.getActionName('SET_CUSTOMER_CUSTOM_FIELD') ||\n                        item.actionName === service.getActionName('SET_ORDER_CUSTOM_FIELD') ||\n                        item.actionName === service.getActionName('SET_CUSTOMER_GROUP_CUSTOM_FIELD'),\n                )\n                .map((item) => item.config?.customFieldSetId);\n        },\n\n        customFieldIds(state) {\n            const service = Service('flowBuilderService');\n            return state.flow.sequences\n                .filter(\n                    (item) =>\n                        item.actionName === service.getActionName('SET_CUSTOMER_CUSTOM_FIELD') ||\n                        item.actionName === service.getActionName('SET_ORDER_CUSTOM_FIELD') ||\n                        item.actionName === service.getActionName('SET_CUSTOMER_GROUP_CUSTOM_FIELD'),\n                )\n                .map((item) => item.config?.customFieldId);\n        },\n\n        actionGroups() {\n            return Service('flowBuilderService').getGroups();\n        },\n\n        triggerEvents(state) {\n            return state.triggerEvents;\n        },\n\n        hasAvailableAction: (state) => (actionName) => {\n            return state.originAvailableActions?.some((name) => name === actionName) ?? false;\n        },\n    },\n\n    actions: {\n        resetFlowState({ commit }) {\n            commit('removeCurrentFlow');\n            commit('removeInvalidSequences');\n            commit('removeTriggerEvent');\n        },\n\n        setRestrictedRules({ commit }, id) {\n            Cicada.Service('ruleConditionDataProviderService')\n                .getRestrictedRules(`flowTrigger.${id}`)\n                .then((result) => {\n                    commit('setRestrictedRules', result);\n                });\n        },\n\n        fetchTriggerActions({ commit }) {\n            Service('businessEventService')\n                .getBusinessEvents()\n                .then((result) => {\n                    commit('setTriggerEvents', result);\n                })\n                .catch(() => {\n                    commit('setTriggerEvents', []);\n                });\n        },\n    },\n};\n","import './service';\nimport './acl';\n\nimport flowState from './state/flow.state';\n\nconst { Module, State } = Cicada;\nState.registerModule('swFlowState', flowState);\n\n/* eslint-disable max-len, sw-deprecation-rules/private-feature-declarations */\nCicada.Component.register('sw-flow-index', () => import('./page/sw-flow-index'));\nCicada.Component.register('sw-flow-detail', () => import('./page/sw-flow-detail'));\nCicada.Component.register('sw-flow-detail-flow', () => import('./view/detail/sw-flow-detail-flow'));\nCicada.Component.register('sw-flow-sequence-modal', () => import('./component/sw-flow-sequence-modal'));\nCicada.Component.register('sw-flow-detail-general', () => import('./view/detail/sw-flow-detail-general'));\nCicada.Component.register('sw-flow-list', () => import('./view/listing/sw-flow-list'));\nCicada.Component.register('sw-flow-list-flow-templates', () => import('./view/listing/sw-flow-list-flow-templates'));\nCicada.Component.register('sw-flow-trigger', () => import('./component/sw-flow-trigger'));\nCicada.Component.register('sw-flow-sequence', () => import('./component/sw-flow-sequence'));\nCicada.Component.register('sw-flow-sequence-action', () => import('./component/sw-flow-sequence-action'));\nCicada.Component.register('sw-flow-sequence-condition', () => import('./component/sw-flow-sequence-condition'));\nCicada.Component.register('sw-flow-sequence-selector', () => import('./component/sw-flow-sequence-selector'));\nCicada.Component.register('sw-flow-sequence-action-error', () => import('./component/sw-flow-sequence-action-error'));\nCicada.Component.register('sw-flow-rule-modal', () => import('./component/modals/sw-flow-rule-modal'));\nCicada.Component.register('sw-flow-tag-modal', () => import('./component/modals/sw-flow-tag-modal'));\nCicada.Component.register('sw-flow-set-order-state-modal', () => import('./component/modals/sw-flow-set-order-state-modal'));\nCicada.Component.register(\n    'sw-flow-grant-download-access-modal',\n    () => import('./component/modals/sw-flow-grant-download-access-modal'),\n);\nCicada.Component.register('sw-flow-mail-send-modal', () => import('./component/modals/sw-flow-mail-send-modal'));\nCicada.Component.register(\n    'sw-flow-create-mail-template-modal',\n    () => import('./component/modals/sw-flow-create-mail-template-modal'),\n);\nCicada.Component.register(\n    'sw-flow-event-change-confirm-modal',\n    () => import('./component/modals/sw-flow-event-change-confirm-modal'),\n);\nCicada.Component.register(\n    'sw-flow-change-customer-group-modal',\n    () => import('./component/modals/sw-flow-change-customer-group-modal'),\n);\nCicada.Component.register(\n    'sw-flow-change-customer-status-modal',\n    () => import('./component/modals/sw-flow-change-customer-status-modal'),\n);\nCicada.Component.register(\n    'sw-flow-set-entity-custom-field-modal',\n    () => import('./component/modals/sw-flow-set-entity-custom-field-modal'),\n);\nCicada.Component.register(\n    'sw-flow-affiliate-and-campaign-code-modal',\n    () => import('./component/modals/sw-flow-affiliate-and-campaign-code-modal'),\n);\nCicada.Component.register('sw-flow-app-action-modal', () => import('./component/modals/sw-flow-app-action-modal'));\nCicada.Component.register('sw-flow-leave-page-modal', () => import('./component/modals/sw-flow-leave-page-modal'));\n/* eslint-enable max-len, sw-deprecation-rules/private-feature-declarations */\n\n/**\n * @private\n * @package services-settings\n */\nModule.register('sw-flow', {\n    type: 'core',\n    name: 'flow',\n    title: 'sw-flow.general.mainMenuItemGeneral',\n    description: 'sw-flow.general.descriptionTextModule',\n    version: '1.0.0',\n    targetVersion: '1.0.0',\n    color: '#9AA8B5',\n    icon: 'regular-cog',\n    favicon: 'icon-module-settings.png',\n    entity: 'flow',\n\n    routes: {\n        index: {\n            component: 'sw-flow-index',\n            path: 'index',\n            meta: {\n                parentPath: 'sw.settings.index',\n                privilege: 'flow.viewer',\n            },\n            redirect: {\n                name: 'sw.flow.index.flows',\n            },\n            children: {\n                flows: {\n                    component: 'sw-flow-list',\n                    path: 'flows',\n                    meta: {\n                        parentPath: 'sw.settings.index',\n                        privilege: 'flow.viewer',\n                    },\n                },\n                templates: {\n                    component: 'sw-flow-list-flow-templates',\n                    path: 'templates',\n                    meta: {\n                        parentPath: 'sw.settings.index',\n                        privilege: 'flow.viewer',\n                    },\n                },\n            },\n        },\n        detail: {\n            component: 'sw-flow-detail',\n            path: 'detail/:id',\n            meta: {\n                parentPath: 'sw.flow.index',\n                privilege: 'flow.viewer',\n            },\n            props: {\n                default(route) {\n                    return {\n                        flowId: route.params.id,\n                    };\n                },\n            },\n            redirect: {\n                name: 'sw.flow.detail.general',\n            },\n            children: {\n                general: {\n                    component: 'sw-flow-detail-general',\n                    path: 'general',\n                    meta: {\n                        parentPath: 'sw.flow.index',\n                        privilege: 'flow.viewer',\n                    },\n                },\n                flow: {\n                    component: 'sw-flow-detail-flow',\n                    path: 'flow',\n                    meta: {\n                        parentPath: 'sw.flow.index',\n                        privilege: 'flow.viewer',\n                    },\n                },\n            },\n        },\n        create: {\n            component: 'sw-flow-detail',\n            path: 'create/:flowTemplateId?',\n            meta: {\n                parentPath: 'sw.flow.index',\n                privilege: 'flow.creator',\n            },\n            redirect: {\n                name: 'sw.flow.create.general',\n            },\n            children: {\n                general: {\n                    component: 'sw-flow-detail-general',\n                    path: 'general',\n                    meta: {\n                        parentPath: 'sw.flow.index',\n                        privilege: 'flow.viewer',\n                    },\n                },\n                flow: {\n                    component: 'sw-flow-detail-flow',\n                    path: 'flow',\n                    meta: {\n                        parentPath: 'sw.flow.index',\n                        privilege: 'flow.viewer',\n                    },\n                },\n            },\n        },\n    },\n\n    settingsItem: {\n        group: 'shop',\n        to: 'sw.flow.index',\n        icon: 'regular-flow',\n        privilege: 'flow.viewer',\n    },\n});\n"],"file":"assets/index-BAUBA57N.js"}