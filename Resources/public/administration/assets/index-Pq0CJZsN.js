import{r as o}from"./main.vite-GBE0T_D3.js";import"./administration-BlrHhDOI.js";import"./channel-DxwX5hMG.js";const a=`{% block sw_customer_detail_addresses %} <div class="sw-customer-detail-addresses"> {% block sw_customer_detail_addresses_card %} <sw-card position-identifier="sw-customer-detail-addresses" :is-loading="isLoading" :large="true" > {% block sw_customer_detail_addresses_toolbar %} <template #toolbar> <sw-card-filter placeholder="" @sw-card-filter-term-change="onChange" > <template #filter> {% block sw_customer_detail_addresses_add_button %} <sw-button class="sw-customer-detail-addresses__add-address-action" :disabled="!customerEditMode" size="small" @click="onCreateNewAddress" > <sw-icon name="regular-plus-circle-s" small /> {{ $tc('sw-customer.detailAddresses.buttonAddAddress') }} </sw-button> {% endblock %} </template> </sw-card-filter> </template> {% endblock %} {% block sw_customer_detail_addresses_add_modal %} <sw-modal v-if="currentAddress" :title="$tc('sw-customer.detailAddresses.modalTitleAddress')" @modal-close="onCloseAddressModal" > {% block sw_customer_detail_addresses_add_modal_address_form %} <sw-customer-address-form :address="currentAddress" :customer="activeCustomer" > <sw-customer-address-form-options :address="currentAddress" :customer="activeCustomer" :custom-field-sets="customerAddressCustomFieldSets" @default-address-change="onChangeDefaultAddress" /> </sw-customer-address-form> {% endblock %} {% block sw_customer_detail_addresses_add_modal_footer %} <template #modal-footer> {% block sw_customer_detail_addresses_add_modal_cancel %} <sw-button size="small" @click="onCloseAddressModal" > {{ $tc('global.default.cancel') }} </sw-button> {% endblock %} {% block sw_customer_detail_addresses_add_modal_apply %} <sw-button variant="primary" size="small" @click="onSaveAddress" > {{ $tc('global.default.apply') }} </sw-button> {% endblock %} </template> {% endblock %} </sw-modal> {% endblock %} {% block sw_customer_detail_addresses_grid %} <template #grid> <sw-one-to-many-grid ref="addressGrid" :collection="sortedAddresses" :local-mode="false" :columns="addressColumns" :show-selection="false" :sort-direction="addressSortDirection" :sort-by="addressSortProperty" :is-loading="isLoading" @column-sort="setAddressSorting" > {% block sw_customer_detail_addresses_grid_columns %} {% block sw_customer_detail_addresses_grid_columns_default_shipping_address %} <template #column-defaultShippingAddress="{ item }"> <sw-radio-field v-model:value="activeCustomer.defaultShippingAddressId" :disabled="!customerEditMode" name="defaultShippingAddress" :options="[{ value: item.id }]" @update:value="onChangeDefaultShippingAddress" /> </template> {% endblock %} {% block sw_customer_detail_addresses_grid_columns_default_billing_address %} <template #column-defaultBillingAddress="{ item }"> <sw-radio-field v-model:value="activeCustomer.defaultBillingAddressId" :disabled="!customerEditMode" name="defaultBillingAddress" :options="[{ value: item.id }]" @update:value="onChangeDefaultBillingAddress" /> </template> {% endblock %} {% block sw_customer_detail_addresses_grid_columns_name %} <template #column-name="{ item }"> <a v-if="customerEditMode" role="link" tabindex="0" @click="onEditAddress(item.id)" @keydown.enter="onEditAddress(item.id)" > {{ item.name }} </a> <template v-else> {{ item.name }} </template> </template> {% endblock %} {% endblock %} {% block sw_customer_detail_addresses_grid_columns_actions %} <template #actions="{ item }"> {% block sw_customer_detail_addresses_grid_columns_actions_edit %} <sw-context-menu-item :disabled="!customerEditMode" @click="onEditAddress(item.id)" > {{ $tc('sw-customer.detailAddresses.contextMenuEdit') }} </sw-context-menu-item> {% endblock %} {% block sw_customer_detail_addresses_grid_columns_actions_duplicate %} <sw-context-menu-item :disabled="!customerEditMode" @click="onDuplicateAddress(item.id)" > {{ $tc('sw-customer.detailAddresses.contextMenuDuplicate') }} </sw-context-menu-item> {% endblock %} {% block sw_customer_detail_addresses_grid_columns_actions_defaultShippingAddress %} <sw-context-menu-item :disabled="!customerEditMode" @click="onChangeDefaultShippingAddress(item.id)" > {{ $tc('sw-customer.detailAddresses.contextMenuDefaultShippingAddress') }} </sw-context-menu-item> {% endblock %} {% block sw_customer_detail_addresses_grid_columns_actions_defaultBillingAddress %} <sw-context-menu-item :disabled="!customerEditMode" @click="onChangeDefaultBillingAddress(item.id)" > {{ $tc('sw-customer.detailAddresses.contextMenuDefaultBillingAddress') }} </sw-context-menu-item> {% endblock %} {% block sw_customer_detail_addresses_grid_columns_actions_delete %} <sw-context-menu-item variant="danger" :disabled="!customerEditMode || isDefaultAddress(item.id)" @click="onDeleteAddress(item.id)" > {{ $tc('sw-customer.detailAddresses.contextMenuDelete') }} </sw-context-menu-item> {% endblock %} </template> {% endblock %} {% block sw_customer_detail_addresses_grid_columns_action_modals %} <template #action-modals="{ item }"> {% block sw_customer_detail_addresses_delete_modal %} <sw-modal v-if="showDeleteAddressModal === item.id" :title="$tc('global.default.warning')" variant="small" @modal-close="onCloseDeleteAddressModal" > {% block sw_customer_detail_addresses_delete_modal_confirm_delete_text %} <p class="sw-customer-detail-addresses__confirm-delete-text"> {{ $tc('sw-customer.detailAddresses.textDeleteAddressConfirm') }} </p> {% endblock %} {% block sw_customer_detail_addresses_delete_modal_address_item %} <sw-address class="sw-customer-detail-addresses__confirm-delete-address" :address="item" /> {% endblock %} {% block sw_customer_detail_addresses_delete_modal_footer %} <template #modal-footer> {% block sw_customer_detail_addresses_delete_modal_cancel %} <sw-button size="small" @click="onCloseDeleteAddressModal" > {{ $tc('global.default.cancel') }} </sw-button> {% endblock %} {% block sw_customer_detail_addresses_delete_modal_confirm %} <sw-button variant="danger" size="small" @click="onConfirmDeleteAddress(item.id)" > {{ $tc('sw-customer.detailAddresses.buttonDelete') }} </sw-button> {% endblock %} </template> {% endblock %} </sw-modal> {% endblock %} </template> {% endblock %} </sw-one-to-many-grid> </template> {% endblock %} </sw-card> {% endblock %} </div> {% endblock %}`,{CicadaError:l}=Cicada.Classes,{Mixin:c,EntityDefinition:n}=Cicada,{Criteria:i}=Cicada.Data,p={template:a,compatConfig:Cicada.compatConfig,inject:["repositoryFactory"],mixins:[c.getByName("notification")],props:{customer:{type:Object,required:!0},customerEditMode:{type:Boolean,required:!0}},data(){return{isLoading:!1,activeCustomer:this.customer,showAddAddressModal:!1,showEditAddressModal:!1,showDeleteAddressModal:!1,addressSortProperty:null,addressSortDirection:"",currentAddress:null,customerAddressCustomFieldSets:null}},computed:{customerRepository(){return this.repositoryFactory.create("customer")},customFieldSetRepository(){return this.repositoryFactory.create("custom_field_set")},customerAddressRepository(){return this.repositoryFactory.create("customer_address")},addressColumns(){return this.getAddressColumns()},addressRepository(){return this.repositoryFactory.create(this.activeCustomer.addresses.entity,this.activeCustomer.addresses.source)},sortedAddresses(){return this.addressSortProperty?this.activeCustomer.addresses.sort((e,s)=>{const t=e[this.addressSortProperty],r=s[this.addressSortProperty];let d=null;return typeof t=="string"&&typeof r=="string"&&(d=t.toUpperCase()>r.toUpperCase()),typeof t=="number"&&typeof r=="number"&&(d=t-r>0),d!==null?this.addressSortDirection==="DESC"?d?-1:1:d?1:-1:0}):this.activeCustomer.addresses},salutationRepository(){return this.repositoryFactory.create("salutation")},salutationCriteria(){const e=new i(1,1);return e.addFilter(i.equals("salutationKey","not_specified")),e}},created(){this.createdComponent()},methods:{createdComponent(){if(this.isLoading=!0,!this.activeCustomer.id&&this.$route.params.id){this.customerRepository.get(this.$route.params.id).then(s=>{this.activeCustomer=s,this.isLoading=!1});return}if(!this.activeCustomer.id){this.$router.push({name:"sw.customer.detail.base",params:{id:this.$route.params.id}});return}const e=new i(1,25);e.addFilter(i.equals("relations.entityName","customer_address")),this.customFieldSetRepository.search(e).then(s=>{this.customerAddressCustomFieldSets=s}),this.isLoading=!1},getAddressColumns(){return[{property:"defaultShippingAddress",label:this.$tc("sw-customer.detailAddresses.columnDefaultShippingAddress"),align:"center",iconLabel:"regular-shopping-cart",iconTooltip:this.$tc("sw-customer.detailAddresses.columnDefaultShippingAddress")},{property:"defaultBillingAddress",label:this.$tc("sw-customer.detailAddresses.columnDefaultBillingAddress"),align:"center",iconLabel:"regular-file-text",iconTooltip:this.$tc("sw-customer.detailAddresses.columnDefaultBillingAddress")},{property:"name",label:this.$tc("sw-customer.detailAddresses.columnName")},{property:"company",label:this.$tc("sw-customer.detailAddresses.columnCompany")},{property:"street",label:this.$tc("sw-customer.detailAddresses.columnStreet")},{property:"zipcode",label:this.$tc("sw-customer.detailAddresses.columnZipCode"),align:"right"},{property:"city",label:this.$tc("sw-customer.detailAddresses.columnCity")}]},setAddressSorting(e){this.addressSortProperty=e.property;let s="ASC";this.addressSortProperty===e.dataIndex&&this.addressSortDirection===s&&(s="DESC"),this.addressSortProperty=e.dataIndex,this.addressSortDirection=s},onCreateNewAddress(){this.showAddAddressModal=!0,this.createNewCustomerAddress()},async createNewCustomerAddress(){const e=await this.getDefaultSalutation(),s=this.addressRepository.create();s.customerId=this.activeCustomer.id,s.salutationId=e,this.currentAddress=s},onSaveAddress(){if(this.currentAddress===null||!this.isValidAddress(this.currentAddress))return;let e=this.activeCustomer.addresses.get(this.currentAddress.id);(typeof e>"u"||e===null)&&(e=this.addressRepository.create(Cicada.Context.api,this.currentAddress.id)),Object.assign(e,this.currentAddress),this.customer.addresses.has(e.id)&&this.customer.addresses.remove(e.id),this.customer.addresses.push(e),this.currentAddress=null},isValidAddress(e){const s=["createdAt"],t=Object.keys(n.getRequiredFields("customer_address"));let r=!0;return t.forEach(d=>{s.indexOf(d)!==-1||o(e[d])||(r=!1,Cicada.State.dispatch("error/addApiError",{expression:`customer_address.${this.currentAddress.id}.${d}`,error:new l({code:"c1051bb4-d103-4f74-8988-acbcafc7fdc3"})}))}),r},onCloseAddressModal(){this.defaultShippingAddressId&&(this.activeCustomer.defaultShippingAddressId=this.defaultShippingAddressId),this.defaultBillingAddressId&&(this.activeCustomer.defaultBillingAddressId=this.defaultBillingAddressId),this.$route.query.detailId&&(this.$route.query.detailId=null),this.currentAddress=null},onEditAddress(e){const s=this.addressRepository.create(Cicada.Context.api,e);Object.assign(s,this.activeCustomer.addresses.get(e)),this.currentAddress=s,this.showEditAddressModal=e},onDeleteAddress(e){this.isDefaultAddress(e)||(this.showDeleteAddressModal=e)},onConfirmDeleteAddress(e){return this.onCloseDeleteAddressModal(),this.customerAddressRepository.delete(e).then(()=>{this.refreshList()})},onCloseDeleteAddressModal(){this.showDeleteAddressModal=!1},isDefaultAddress(e){return this.activeCustomer.defaultBillingAddressId===e||this.activeCustomer.defaultShippingAddressId===e},onChangeDefaultBillingAddress(e){this.activeCustomer.defaultBillingAddressId=e,this.customer.defaultBillingAddressId=e},onChangeDefaultShippingAddress(e){this.activeCustomer.defaultShippingAddressId=e,this.customer.defaultShippingAddressId=e},async onDuplicateAddress(e){const{id:s}=await this.customerAddressRepository.clone(e),t=await this.customerAddressRepository.get(s);this.activeCustomer.addresses.push(t)},onChangeDefaultAddress(e){if(!e.value){this.defaultShippingAddressId&&(this.activeCustomer.defaultShippingAddressId=this.defaultShippingAddressId),this.defaultBillingAddressId&&(this.activeCustomer.defaultBillingAddressId=this.defaultBillingAddressId);return}const t=`default${this.createPrefix(e.name,"-address")}AddressId`;this[t]=this.activeCustomer[t],this.activeCustomer[t]=e.id,this.customer[t]=e.id},onChange(e){this.activeCustomer.addresses.criteria.setPage(1),this.activeCustomer.addresses.criteria.setTerm(e),this.refreshList()},refreshList(){this.$refs.addressGrid.load()},createPrefix(e,s){const t=e.replace(s,"");return`${t.charAt(0).toUpperCase()}${t.slice(1)}`},async getDefaultSalutation(){var s;return(s=(await this.salutationRepository.searchIds(this.salutationCriteria)).data)==null?void 0:s[0]}}};export{p as default};
//# sourceMappingURL=index-Pq0CJZsN.js.map
