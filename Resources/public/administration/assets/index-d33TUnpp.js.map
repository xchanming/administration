{"version":3,"file":"index-d33TUnpp.js","sources":["../../../app/administration/src/module/sw-settings-snippet/page/sw-settings-snippet-list/sw-settings-snippet-list.html.twig","../../../app/administration/src/module/sw-settings-snippet/page/sw-settings-snippet-list/index.js"],"sourcesContent":["<!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n{% block sw_settings_snippet_list %}\n<sw-page class=\"sw-settings-snippet-list\">\n\n    <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n    {% block sw_settings_snippet_set_list_search_bar %}\n    <template #search-bar>\n        <sw-search-bar\n            initial-search-type=\"snippet\"\n            :placeholder=\"$tc('sw-settings-snippet.general.placeholderSearchBarSnippets')\"\n            :initial-search=\"term\"\n            @search=\"onSearch\"\n        />\n    </template>\n    {% endblock %}\n\n    <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n    {% block sw_settings_snippet_list_smart_bar_header %}\n    <template #smart-bar-header>\n        {# Hack for fixing this problem: https://github.com/vuejs/core/issues/9308 #}\n        <div style=\"display: none;\"></div>\n        <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n        {% block sw_settings_snippet_list_smart_bar_header_title %}\n        <h2\n            v-if=\"!isLoading && snippetSets\"\n            class=\"sw-settings-snippet-list__smart_bar_header\"\n        >\n            <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n            {% block sw_settings_snippet_list_smart_bar_header_title_text %}\n            <span class=\"sw-settings_snippet_list__smart-bar-title-text\">\n                {{ $tc('sw-settings-snippet.list.textSnippetList', snippetSets.length, { setName: metaName }) }}\n            </span>\n            {% endblock %}\n\n            <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n            {% block sw_settings_snippet_list_smart_bar_header_amount %}\n            <span class=\"sw-page__smart-bar-amount\">\n                ({{ total }})\n            </span>\n            {% endblock %}\n        </h2>\n        {% endblock %}\n    </template>\n    {% endblock %}\n\n    <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n    {% block sw_settings_snippet_list_smart_bar_actions %}\n    <template #smart-bar-actions>\n        <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n        {% block sw_settings_snippet_list_smart_bar_actions_add %}\n        <sw-button\n            v-tooltip.bottom=\"getNoPermissionsTooltip('snippet.creator')\"\n            :router-link=\"{ name: 'sw.settings.snippet.create', query: { ids: queryIds, limit, page } }\"\n            :disabled=\"isLoading || !acl.can('snippet.creator') || undefined\"\n            variant=\"primary\"\n        >\n            {{ $tc('sw-settings-snippet.list.buttonAdd') }}\n        </sw-button>\n        {% endblock %}\n    </template>\n    {% endblock %}\n\n    <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n    {% block sw_settings_snippet_list_content %}\n    <template #content>\n        <div class=\"sw-settings-snippet-list__content\">\n\n            <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n            {% block sw_settings_snippet_list_grid %}\n            <sw-data-grid\n                :is-loading=\"isLoading || !snippetSets\"\n                :data-source=\"grid\"\n                :columns=\"columns\"\n                class=\"sw-settings-snippet-list__grid\"\n                :full-page=\"true\"\n                :skeleton-item-amount=\"skeletonItemAmount\"\n                :sort-by=\"sortBy\"\n                :sort-direction=\"sortDirection\"\n                :allow-inline-edit=\"acl.can('snippet.editor')\"\n                :allow-column-edit=\"true\"\n                :show-settings=\"true\"\n                :show-selection=\"false\"\n                @column-sort=\"onSortColumn\"\n                @page-change=\"onPageChange\"\n                @inline-edit-cancel=\"onInlineEditCancel\"\n                @inline-edit-save=\"onInlineEditSave\"\n            >\n\n                <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n                {% block sw_settings_salutations_list_columns %}\n                <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n                {% block sw_settings_snippet_list_column_id %}\n                <template\n                    #column-id=\"{ item, isInlineEdit }\"\n                >\n                    <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n                    {% block sw_settings_snippet_list_column_id_inline_edit %}\n                    <template v-if=\"isInlineEdit\">\n                        {{ item.id }}\n                    </template>\n                    {% endblock %}\n\n                    <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n                    {% block sw_settings_snippet_list_column_id_content %}\n                    <template v-else>\n                        <router-link\n                            :to=\"{\n                                name: 'sw.settings.snippet.detail',\n                                params: { key: item[metaId].translationKey, origin: item[metaId].translationKey },\n                                query: { ids: queryIds, limit, page }\n                            }\"\n                        >\n                            {{ item.id }}\n                        </router-link>\n                    </template>\n                    {% endblock %}\n                </template>\n                {% endblock %}\n\n                <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n                {% block sw_settings_snippet_list_column_value %}\n                <template\n                    v-for=\"set in snippetSets\"\n                    :key=\"set.id\"\n                    #[`column-${set.id}`]=\"{ item, compact, isInlineEdit }\"\n                >\n                    <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n                    {% block sw_settings_snippet_list_column_value_inline_edit %}\n                    <template v-if=\"isInlineEdit\">\n                        <sw-text-field\n                            v-model:value=\"item[set.id].value\"\n                            :placeholder=\"item[set.id].origin || $tc('sw-settings-snippet.general.placeholderValue')\"\n                            :size=\"compact ? 'small' : 'default'\"\n                        />\n                    </template>\n                    {% endblock %}\n\n                    <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n                    {% block sw_settings_snippet_list_column_value_content %}\n                    <template v-else>\n                        {{ item[set.id].value }}\n                    </template>\n                    {% endblock %}\n                </template>\n                {% endblock %}\n\n                <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n                {% block sw_settings_snippet_list_grid_column_actions %}\n                <template #actions=\"{ item }\">\n                    <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n                    {% block sw_settings_snippet_list_grid_column_actions_edit %}\n                    <sw-context-menu-item\n                        class=\"sw-settings-snippet-list__edit-action\"\n                        :router-link=\"{\n                            name: 'sw.settings.snippet.detail',\n                            params: { key: item[metaId].translationKey, origin: item[metaId].translationKey },\n                            query: { ids: queryIds, limit, page }\n                        }\"\n                    >\n                        {{ contextMenuEditSnippet }}\n                    </sw-context-menu-item>\n                    {% endblock %}\n\n                    <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n                    {% block sw_settings_snippet_list_grid_column_actions_delete %}\n                    <sw-context-menu-item\n                        v-tooltip.left=\"getNoPermissionsTooltip('snippet.deleter')\"\n                        class=\"sw-settings-snippet-list__delete-action\"\n                        variant=\"danger\"\n                        :disabled=\"!acl.can('snippet.deleter') || undefined\"\n                        @click=\"onReset(item)\"\n                    >\n                        {{ $tc('sw-settings-snippet.list.contextMenuDelete', item.isCustomSnippet) }}\n                    </sw-context-menu-item>\n                    {% endblock %}\n                </template>\n                {% endblock %}\n\n                <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n                {% block sw_settings_salutation_list_action_modals %}\n                <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n                {% block sw_settings_snippet_list_delete_modal %}\n                <template\n                    #action-modals=\"{ item }\"\n                >\n                    <sw-modal\n                        v-if=\"showDeleteModal === item\"\n                        class=\"sw-settings-snippet-list__delete-modal\"\n                        :title=\"$tc('global.default.warning')\"\n                        variant=\"large\"\n                        @modal-close=\"onCloseDeleteModal\"\n                    >\n                        <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n                        {% block sw_settings_snippet_list_delete_modal_text %}\n                        <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n                        {% block sw_settings_snippet_list_delete_modal_text_reset %}\n                        <span\n                            v-if=\"!item.isCustomSnippet\"\n                            class=\"sw-settings-snippet-list__delete-modal-confirm-reset-text\"\n                        >\n                            {{ $tc('sw-settings-snippet.list.textResetConfirm', queryIdCount, { key: item[metaId].translationKey }) }}\n                        </span>\n                        {% endblock %}\n\n                        <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n                        {% block sw_settings_snippet_list_delete_modal_text_delete %}\n                        <span\n                            v-else\n                            class=\"sw-settings-snippet-list__delete-modal-confirm-delete-text\"\n                        >\n                            {{ $tc('sw-settings-snippet.list.textDeleteConfirm', 0, { key: item[metaId].translationKey }) }}\n                        </span>\n                        {% endblock %}\n\n                        <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n                        {% block sw_settings_snippet_list_delete_modal_grid %}\n                        <sw-grid\n                            v-if=\"!item.isCustomSnippet && resetItems.length > 1\"\n                            class=\"sw-settings-snippet-list__delete-modal-grid\"\n                            :items=\"resetItems\"\n                            table\n                            @sw-grid-select-item=\"onSelectionChanged\"\n                            @sw-grid-select-all=\"onSelectionChanged\"\n                        >\n                            <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n                            {% block sw_settings_snippet_list_delete_modal_grid_template %}\n                            <template\n                                #columns=\"{ item }\"\n                            >\n                                <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n                                {% block sw_settings_snippet_list_delete_modal_grid_name %}\n                                <sw-grid-column\n                                    :label=\"$tc('sw-settings-snippet.list.columnHeaderGridColumnTitleSet')\"\n                                    flex=\"minmax(150px, 1fr)\"\n                                >\n                                    {{ item.setName }}\n                                </sw-grid-column>\n                                {% endblock %}\n\n                                <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n                                {% block sw_settings_snippet_list_delete_modal_grid_value %}\n                                <sw-grid-column\n                                    :label=\"$tc('sw-settings-snippet.list.columnValue')\"\n                                    flex=\"minmax(50px,1fr)\"\n                                >\n                                    {{ item.value }}\n                                </sw-grid-column>\n                                {% endblock %}\n\n                                <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n                                {% block sw_settings_snippet_list_delete_modal_grid_origin %}\n                                <sw-grid-column\n                                    :label=\"$tc('sw-settings-snippet.list.columnHeaderResetTo')\"\n                                    flex=\"minmax(50px,1fr)\"\n                                >\n                                    {{ item.origin }}\n                                </sw-grid-column>\n                                {% endblock %}\n                            </template>\n                            {% endblock %}\n                        </sw-grid>\n                        {% endblock %}\n                        {% endblock %}\n\n                        <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n                        {% block sw_settings_snippet_list_delete_modal_footer %}\n                        <template #modal-footer>\n                            <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n                            {% block sw_settings_snippet_list_delete_modal_cancel %}\n                            <sw-button\n                                size=\"small\"\n                                @click=\"onCloseDeleteModal\"\n                            >\n                                {{ $tc('global.default.cancel') }}\n                            </sw-button>\n                            {% endblock %}\n\n                            <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n                            {% block sw_settings_snippet_list_delete_modal_confirm %}\n                            <sw-button\n                                :disabled=\"hasResetableItems && !item.isCustomSnippet && resetItems.length !== 1 || undefined\"\n                                variant=\"danger\"\n                                size=\"small\"\n                                @click=\"onConfirmReset(item)\"\n                            >\n                                {{ $tc('sw-settings-snippet.list.contextMenuDelete', item.isCustomSnippet) }}\n                            </sw-button>\n                            {% endblock %}\n                        </template>\n                        {% endblock %}\n                    </sw-modal>\n                </template>\n                {% endblock %}\n                {% endblock %}\n                {% endblock %}\n\n                <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n                {% block sw_settings_snippet_list_grid_pagination %}\n                <template #pagination>\n                    <sw-pagination\n                        :page=\"page\"\n                        :limit=\"limit\"\n                        :total=\"total\"\n                        :total-visible=\"7\"\n                        :steps=\"steps\"\n                        @page-change=\"onPageChange\"\n                    />\n                </template>\n                {% endblock %}\n\n            </sw-data-grid>\n            {% endblock %}\n        </div>\n    </template>\n\n    <template #sidebar>\n        <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n        {% block sw_settings_snippet_list_grid_sidebar %}\n        <sw-settings-snippet-sidebar\n            class=\"sw-settings-snippet-list__grid-sidebar\"\n            :filter-items=\"filterItems\"\n            :author-filters=\"authorFilters\"\n            :filter-settings=\"filterSettings\"\n            @sidebar-reset-all=\"onResetAll\"\n            @change=\"onChange\"\n            @sw-sidebar-collaps-refresh-grid=\"getList\"\n            @sw-sidebar-close=\"onSidebarClose\"\n        />\n        {% endblock %}\n    </template>\n\n    {% endblock %}\n\n</sw-page>\n{% endblock %}\n","/**\n * @package discovery\n */\nimport Sanitizer from 'src/core/helper/sanitizer.helper';\nimport template from './sw-settings-snippet-list.html.twig';\nimport './sw-settings-snippet-list.scss';\n\nconst {\n    Mixin,\n    Data: { Criteria },\n} = Cicada;\n\n// eslint-disable-next-line sw-deprecation-rules/private-feature-declarations\nexport default {\n    template,\n\n    compatConfig: Cicada.compatConfig,\n\n    inject: [\n        'snippetSetService',\n        'snippetService',\n        'userService',\n        'repositoryFactory',\n        'acl',\n        'userConfigService',\n    ],\n\n    mixins: [\n        Mixin.getByName('sw-settings-list'),\n    ],\n\n    data() {\n        return {\n            entityName: 'snippet',\n            sortBy: 'id',\n            sortDirection: 'ASC',\n            metaId: '',\n            currentAuthor: '',\n            snippetSets: null,\n            hasResetableItems: true,\n            showOnlyEdited: false,\n            showOnlyAdded: false,\n            emptySnippets: false,\n            grid: [],\n            resetItems: [],\n            filterItems: [],\n            authorFilters: [],\n            appliedFilter: [],\n            appliedAuthors: [],\n            emptyIcon: this.$route.meta.$module.icon,\n            skeletonItemAmount: 25,\n            filterSettings: null,\n        };\n    },\n\n    metaInfo() {\n        return {\n            title: this.$createTitle(this.identifier),\n        };\n    },\n\n    computed: {\n        identifier() {\n            return this.snippetSets\n                ? this.$tc('sw-settings-snippet.list.identifier', this.snippetSets.length, {\n                      setName: this.metaName,\n                  })\n                : '';\n        },\n\n        columns() {\n            return this.getColumns();\n        },\n\n        snippetRepository() {\n            return this.repositoryFactory.create('snippet');\n        },\n\n        snippetSetRepository() {\n            return this.repositoryFactory.create('snippet_set');\n        },\n\n        queryIds() {\n            return Array.isArray(this.$route.query.ids) ? this.$route.query.ids : [this.$route.query.ids];\n        },\n\n        snippetSetCriteria() {\n            const criteria = new Criteria(1, 25);\n\n            criteria.addFilter(Criteria.equalsAny('id', this.queryIds));\n            criteria.addSorting(Criteria.sort('name', 'ASC'));\n\n            if (this.term) {\n                criteria.setTerm(this.term);\n            }\n\n            return criteria;\n        },\n\n        queryIdCount() {\n            return this.queryIds.length;\n        },\n\n        metaName() {\n            return this.snippetSets[0]?.name;\n        },\n\n        filter() {\n            const filter = {};\n            if (this.showOnlyEdited) {\n                filter.edited = true;\n            }\n            if (this.showOnlyAdded) {\n                filter.added = true;\n            }\n            if (this.emptySnippets) {\n                filter.empty = true;\n            }\n            if (this.term) {\n                filter.term = this.term;\n            }\n            if (this.appliedFilter.length > 0) {\n                filter.namespace = this.appliedFilter;\n            }\n            if (this.appliedAuthors.length > 0) {\n                filter.author = this.appliedAuthors;\n            }\n\n            return filter;\n        },\n\n        contextMenuEditSnippet() {\n            return this.acl.can('snippet.editor') ? this.$tc('global.default.edit') : this.$tc('global.default.view');\n        },\n\n        hasActiveFilters() {\n            if (!this.filterSettings) {\n                return false;\n            }\n\n            return Object.values(this.filterSettings).some((value) => value === true);\n        },\n\n        activeFilters() {\n            let filter = {};\n\n            if (!this.hasActiveFilters) {\n                return filter;\n            }\n\n            if (this.filterSettings.editedSnippets) {\n                filter = { ...filter, edited: true };\n            }\n            if (this.filterSettings.addedSnippets) {\n                filter = { ...filter, added: true };\n            }\n            if (this.filterSettings.emptySnippets) {\n                filter = { ...filter, empty: true };\n            }\n\n            filter = { ...filter, author: [] };\n            this.authorFilters.forEach((item) => {\n                if (this.filterSettings[item] === true) {\n                    filter.author.push(item);\n                }\n            });\n\n            filter = { ...filter, namespace: [] };\n            this.filterItems.forEach((item) => {\n                if (this.filterSettings[item] === true) {\n                    filter.namespace.push(item);\n                }\n            });\n\n            return filter;\n        },\n    },\n\n    created() {\n        this.createdComponent();\n    },\n\n    beforeUnmount() {\n        this.beforeDestroyComponent();\n    },\n\n    methods: {\n        async createdComponent() {\n            this.addEventListeners();\n\n            this.snippetSetRepository.search(this.snippetSetCriteria).then((sets) => {\n                this.snippetSets = sets;\n            });\n\n            this.userService.getUser().then((response) => {\n                this.currentAuthor = `user/${response.data.username}`;\n            });\n\n            const filterItems = await this.snippetService.getFilter();\n            this.filterItems = filterItems.data;\n\n            const authorFilters = await this.snippetSetService.getAuthors();\n            this.authorFilters = authorFilters.data;\n\n            await this.getFilterSettings();\n\n            if (this.hasActiveFilters) {\n                this.initializeSnippetSet(this.activeFilters);\n            }\n        },\n\n        beforeDestroyComponent() {\n            this.saveUserConfig();\n            this.removeEventListeners();\n        },\n\n        addEventListeners() {\n            window.addEventListener('beforeunload', (event) => this.beforeUnloadListener(event));\n        },\n\n        removeEventListeners() {\n            window.removeEventListener('beforeunload', (event) => this.beforeUnloadListener(event));\n        },\n\n        // eslint-disable-next-line no-unused-vars\n        beforeUnloadListener(event) {\n            this.saveUserConfig();\n        },\n\n        async getFilterSettings() {\n            const userConfig = await this.getUserConfig();\n\n            this.filterSettings = userConfig.data['grid.filter.setting-snippet-list']\n                ? userConfig.data['grid.filter.setting-snippet-list']\n                : this.createFilterSettings();\n        },\n\n        getUserConfig() {\n            return this.userConfigService.search([\n                'grid.filter.setting-snippet-list',\n            ]);\n        },\n\n        saveUserConfig() {\n            return this.userConfigService.upsert({\n                'grid.filter.setting-snippet-list': this.filterSettings,\n            });\n        },\n\n        createFilterSettings() {\n            const authorFilters = this.authorFilters.reduce((acc, item) => ({ ...acc, [item]: false }), {});\n            const moreFilters = this.filterItems.reduce((acc, item) => ({ ...acc, [item]: false }), {});\n\n            return {\n                emptySnippets: false,\n                editedSnippets: false,\n                addedSnippets: false,\n                ...authorFilters,\n                ...moreFilters,\n            };\n        },\n\n        getList() {\n            if (this.hasActiveFilters) {\n                this.initializeSnippetSet(this.activeFilters);\n            } else {\n                this.initializeSnippetSet();\n            }\n        },\n\n        getColumns() {\n            const columns = [\n                {\n                    property: 'id',\n                    label: 'sw-settings-snippet.list.columnKey',\n                    inlineEdit: true,\n                    allowResize: true,\n                    rawData: true,\n                    primary: true,\n                },\n            ];\n\n            if (this.snippetSets) {\n                this.snippetSets.forEach((item) => {\n                    columns.push({\n                        property: item.id,\n                        label: item.name,\n                        allowResize: true,\n                        inlineEdit: 'string',\n                        rawData: true,\n                    });\n                });\n            }\n            return columns;\n        },\n\n        initializeSnippetSet(filter = this.filter) {\n            if (!this.$route.query.ids) {\n                this.backRoutingError();\n                return;\n            }\n\n            this.isLoading = true;\n\n            const sort = {\n                sortBy: this.sortBy,\n                sortDirection: this.sortDirection,\n            };\n\n            this.snippetSetService.getCustomList(this.page, this.limit, filter, sort).then((response) => {\n                this.metaId = this.queryIds[0];\n                this.total = response.total;\n                this.grid = this.prepareGrid(response.data);\n                this.isLoading = false;\n            });\n        },\n\n        prepareGrid(grid) {\n            function prepareContent(items) {\n                const content = items.reduce((acc, item) => {\n                    item.resetTo = item.value;\n                    acc[item.setId] = item;\n                    acc.isCustomSnippet = item.author.includes('user/');\n                    return acc;\n                }, {});\n                content.id = items[0].translationKey;\n\n                return content;\n            }\n\n            return Object.values(grid).reduce((accumulator, items) => {\n                accumulator.push(prepareContent(items));\n                return accumulator;\n            }, []);\n        },\n\n        onEdit(snippet) {\n            if (snippet?.id) {\n                this.$router.push({\n                    name: 'sw.settings.snippet.detail',\n                    params: {\n                        id: snippet.id,\n                    },\n                });\n            }\n        },\n\n        onInlineEditSave(result) {\n            const responses = [];\n            const key = result[this.metaId].translationKey;\n\n            this.snippetSets.forEach((item) => {\n                const snippet = result[item.id];\n                snippet.value = Sanitizer.sanitize(snippet.value);\n\n                if (!snippet.value && typeof snippet.value !== 'string') {\n                    snippet.value = snippet.origin;\n                }\n\n                if (!snippet.hasOwnProperty('author') || snippet.author === '') {\n                    snippet.author = this.currentAuthor;\n                }\n\n                if (snippet.origin !== snippet.value) {\n                    const snippetEntity = this.snippetRepository.create();\n\n                    if (snippet.id) {\n                        snippetEntity._isNew = false;\n                    }\n\n                    snippetEntity.author = snippet.author;\n                    snippetEntity.id = snippet.id;\n                    snippetEntity.value = snippet.value;\n                    snippetEntity.origin = snippet.origin;\n                    snippetEntity.translationKey = snippet.translationKey;\n                    snippetEntity.setId = snippet.setId;\n\n                    responses.push(this.snippetRepository.save(snippetEntity));\n                } else if (snippet.id !== null && !snippet.author.startsWith('user/')) {\n                    responses.push(this.snippetRepository.delete(snippet.id));\n                }\n            });\n\n            Promise.all(responses)\n                .then(() => {\n                    this.inlineSaveSuccessMessage(key);\n                    this.getList();\n                })\n                .catch(() => {\n                    this.inlineSaveErrorMessage(key);\n                    this.getList();\n                });\n        },\n\n        onInlineEditCancel(rowItems) {\n            Object.keys(rowItems).forEach((itemKey) => {\n                const item = rowItems[itemKey];\n                if (typeof item !== 'object' || item.value === undefined) {\n                    return;\n                }\n\n                item.value = item.resetTo;\n            });\n        },\n\n        onEmptyClick() {\n            this.showOnlyEdited = false;\n            this.getList();\n        },\n\n        onSearch(term) {\n            this.term = term;\n            this.page = 1;\n\n            this.updateRoute(\n                {\n                    term: term,\n                    page: 1,\n                },\n                {\n                    ids: this.queryIds,\n                },\n            );\n        },\n\n        backRoutingError() {\n            this.$router.push({ name: 'sw.settings.snippet.index' });\n\n            this.createNotificationError({\n                message: this.$tc('sw-settings-snippet.general.errorBackRoutingMessage'),\n            });\n        },\n\n        inlineSaveSuccessMessage(key) {\n            const titleSaveSuccess = this.$tc('global.default.success');\n            const messageSaveSuccess = this.$tc('sw-settings-snippet.list.messageSaveSuccess', this.queryIdCount, { key });\n\n            this.createNotificationSuccess({\n                title: titleSaveSuccess,\n                message: messageSaveSuccess,\n            });\n        },\n\n        inlineSaveErrorMessage(key) {\n            const titleSaveError = this.$tc('global.default.error');\n            const messageSaveError = this.$tc('sw-settings-snippet.list.messageSaveError', this.queryIdCount, { key });\n\n            this.createNotificationError({\n                title: titleSaveError,\n                message: messageSaveError,\n            });\n        },\n\n        onReset(item) {\n            this.isLoading = true;\n\n            this.snippetSetRepository\n                .search(this.snippetSetCriteria)\n                .then((response) => {\n                    const resetItems = [];\n                    const ids = Array.isArray(this.$route.query.ids) ? this.$route.query.ids : [this.$route.query.ids];\n\n                    Object.values(item).forEach((currentItem, index) => {\n                        if (!(currentItem instanceof Object) || !ids.find((id) => id === currentItem.setId)) {\n                            return;\n                        }\n\n                        currentItem.setName = this.getName(response, currentItem.setId);\n                        if (currentItem.id === null) {\n                            currentItem.id = index;\n                            currentItem.isFileSnippet = true;\n                        }\n\n                        resetItems.push(currentItem);\n                    });\n\n                    this.resetItems = resetItems.sort((a, b) => {\n                        return a.setName <= b.setName ? -1 : 1;\n                    });\n                    this.showDeleteModal = item;\n                })\n                .finally(() => {\n                    this.isLoading = false;\n                });\n        },\n\n        getName(list, id) {\n            let name = '';\n            list.forEach((item) => {\n                if (item.id === id) {\n                    name = item.name;\n                }\n            });\n\n            return name;\n        },\n\n        onSelectionChanged(selection) {\n            this.snippetSelection = selection;\n            this.hasResetableItems = Object.keys(selection).length === 0;\n        },\n\n        onConfirmReset(fullSelection) {\n            let items;\n            const promises = [];\n\n            if (this.showOnlyEdited) {\n                items = Object.values(fullSelection).filter((item) => typeof item !== 'string');\n            } else if (this.snippetSelection !== undefined) {\n                items = Object.values(this.snippetSelection);\n            } else {\n                items = Object.values(this.resetItems);\n            }\n\n            this.showDeleteModal = false;\n\n            this.$nextTick(() => {\n                items.forEach((item) => {\n                    if (item.hasOwnProperty('isFileSnippet') || item.id === null) {\n                        return;\n                    }\n                    item.isCustomSnippet = fullSelection.isCustomSnippet;\n                    this.isLoading = true;\n\n                    promises.push(\n                        this.snippetRepository\n                            .delete(item.id)\n                            .then(() => {\n                                this.createSuccessMessage(item);\n                            })\n                            .catch(() => {\n                                this.createResetErrorNote(item);\n                            }),\n                    );\n                });\n                Promise.all(promises)\n                    .then(() => {\n                        this.isLoading = false;\n                        this.getList();\n                    })\n                    .catch(() => {\n                        this.isLoading = false;\n                        this.getList();\n                    });\n            });\n        },\n\n        createSuccessMessage(item) {\n            const title = this.$tc('global.default.success');\n            const message = this.$tc('sw-settings-snippet.list.resetSuccessMessage', !item.isCustomSnippet, {\n                key: item.value,\n            });\n\n            this.createNotificationSuccess({\n                title,\n                message,\n            });\n        },\n\n        createResetErrorNote(item) {\n            const title = this.$tc('global.default.error');\n            const message = this.$tc('sw-settings-snippet.list.resetErrorMessage', item.isCustomSnippet ? 2 : 0, {\n                key: item.value,\n            });\n\n            this.createNotificationError({\n                title,\n                message,\n            });\n        },\n\n        onChange(field) {\n            this.$set(this.filterSettings, [field.name], field.value);\n\n            this.page = 1;\n            if (field.group === 'editedSnippets') {\n                this.showOnlyEdited = field.value;\n                this.initializeSnippetSet();\n                return;\n            }\n\n            if (field.group === 'addedSnippets') {\n                this.showOnlyAdded = field.value;\n                this.initializeSnippetSet();\n                return;\n            }\n\n            if (field.group === 'emptySnippets') {\n                this.emptySnippets = field.value;\n                this.initializeSnippetSet();\n                return;\n            }\n\n            let selector = 'appliedFilter';\n            if (field.group === 'authorFilter') {\n                selector = 'appliedAuthors';\n            }\n\n            if (field.value) {\n                if (this[selector].indexOf(field.name) !== -1) {\n                    return;\n                }\n\n                this[selector].push(field.name);\n                this.initializeSnippetSet();\n                return;\n            }\n\n            this[selector].splice(this[selector].indexOf(field.name), 1);\n            this.initializeSnippetSet();\n        },\n\n        onSidebarClose() {\n            this.showOnlyEdited = false;\n            this.emptySnippets = false;\n            this.appliedAuthors = [];\n            this.appliedFilter = [];\n            this.initializeSnippetSet();\n        },\n\n        onSortColumn(column) {\n            if (this.sortDirection === 'ASC' && column.dataIndex === this.sortBy) {\n                this.sortDirection = 'DESC';\n            } else {\n                this.sortDirection = 'ASC';\n            }\n            this.updateRoute(\n                {\n                    sortDirection: this.sortDirection,\n                    sortBy: column.dataIndex,\n                },\n                {\n                    ids: this.queryIds,\n                },\n            );\n        },\n\n        onPageChange({ page, limit }) {\n            this.updateRoute(\n                { page, limit },\n                {\n                    ids: this.queryIds,\n                },\n            );\n        },\n\n        getNoPermissionsTooltip(role, showOnDisabledElements = true) {\n            return {\n                showDelay: 300,\n                appearance: 'dark',\n                showOnDisabledElements,\n                disabled: this.acl.can(role),\n                message: this.$tc('sw-privileges.tooltip.warning'),\n            };\n        },\n\n        onResetAll() {\n            this.showOnlyEdited = false;\n            this.showOnlyAdded = false;\n            this.emptySnippets = false;\n            this.appliedFilter = [];\n            this.appliedAuthors = [];\n\n            Object.keys(this.filterSettings).forEach((key) => {\n                if (this.isCompatEnabled('INSTANCE_SET')) {\n                    this.$set(this.filterSettings, key, false);\n                } else {\n                    this.filterSettings[key] = false;\n                }\n            });\n\n            this.initializeSnippetSet({});\n        },\n    },\n};\n"],"names":["template","Mixin","Criteria","index","criteria","_a","filter","value","item","sets","response","filterItems","authorFilters","event","userConfig","acc","moreFilters","columns","sort","grid","prepareContent","items","content","accumulator","snippet","result","responses","key","Sanitizer","snippetEntity","rowItems","itemKey","term","titleSaveSuccess","messageSaveSuccess","titleSaveError","messageSaveError","resetItems","ids","currentItem","id","a","b","list","name","selection","fullSelection","promises","title","message","field","selector","column","page","limit","role","showOnDisabledElements"],"mappings":"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"}