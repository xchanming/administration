{"version":3,"file":"index-o48YVMQN.js","sources":["../../../app/administration/src/module/sw-settings-rule/component/sw-settings-rule-category-tree/sw-settings-rule-category-tree.html.twig","../../../app/administration/src/module/sw-settings-rule/component/sw-settings-rule-category-tree/index.js"],"sourcesContent":["<!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n{% block sw_settings_rule_category_tree %}\n<sw-card\n    class=\"sw-settings-rule-category-tree\"\n    position-identifier=\"sw-settings-rule-category-tree\"\n>\n    <template #toolbar>\n        <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n        {% block sw_settings_rule_category_tree_toolbar %}\n        <sw-card-filter @sw-card-filter-term-change=\"searchTreeItems\" />\n        {% endblock %}\n    </template>\n\n    <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n    {% block sw_settings_rule_category_tree_component %}\n    <sw-settings-rule-tree\n        ref=\"swTree\"\n        :allow-create-categories=\"false\"\n        :allow-delete-categories=\"false\"\n        :items=\"categories\"\n        after-id-property=\"afterCategoryId\"\n        :sortable=\"false\"\n        @get-tree-items=\"getTreeItems\"\n        @search-tree-items=\"searchTreeItems\"\n        @check-item=\"onCheckItem\"\n    >\n        <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n        {% block sw_settings_rule_category_tree_items %}\n        <template\n            #items=\"{\n                treeItems,\n                sortable,\n                draggedItem,\n                newElementId,\n                checkItem,\n                translationContext,\n                onChangeRoute,\n                disableContextMenu,\n            }\"\n        >\n            <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n            {% block sw_settings_rule_category_tree_item %}\n            <sw-settings-rule-tree-item\n                v-for=\"item in treeItems\"\n                :key=\"item.id\"\n                :association=\"association\"\n                :item=\"item\"\n                :sortable=\"false\"\n                should-focus\n                :mark-inactive=\"true\"\n                :hide-action=\"true\"\n                @check-item=\"checkItem\"\n            />\n            {% endblock %}\n        </template>\n        <template\n            v-if=\"hideHeadline\"\n            #headline\n        >\n            <span></span>\n        </template>\n        <template\n            v-if=\"hideSearch\"\n            #search\n        >\n            <span></span>\n        </template>\n        {% endblock %}\n    </sw-settings-rule-tree>\n    {% endblock %}\n</sw-card>\n{% endblock %}\n","import template from './sw-settings-rule-category-tree.html.twig';\nimport './sw-settings-rule-category-tree.scss';\n\nconst { Criteria } = Cicada.Data;\n\n/**\n * @private\n * @package services-settings\n */\nexport default {\n    template,\n\n    compatConfig: Cicada.compatConfig,\n\n    inject: ['repositoryFactory'],\n\n    emits: ['on-selection'],\n\n    props: {\n        rule: {\n            type: Object,\n            required: true,\n        },\n        association: {\n            type: String,\n            required: true,\n        },\n        categoriesCollection: {\n            type: Array,\n            required: true,\n        },\n        hideHeadline: {\n            type: Boolean,\n            required: false,\n            default: false,\n        },\n        hideSearch: {\n            type: Boolean,\n            required: false,\n            default: false,\n        },\n    },\n\n    data() {\n        return {\n            categories: [],\n            isComponentReady: false,\n            isFetching: false,\n        };\n    },\n\n    computed: {\n        categoryRepository() {\n            return this.repositoryFactory.create('category');\n        },\n\n        treeCriteria() {\n            const categoryCriteria = new Criteria(1, 500);\n            categoryCriteria.getAssociation(this.association).addFilter(Criteria.equals('id', this.rule.id));\n\n            return categoryCriteria;\n        },\n    },\n\n    watch: {\n        categoriesCollection: {\n            handler() {\n                if (this.categoriesCollection.entity && !this.isComponentReady && !this.isFetching) {\n                    Promise.all([\n                        this.getTreeItems(),\n                    ]).then(() => {\n                        this.isComponentReady = true;\n                    });\n                }\n            },\n            immediate: true,\n        },\n    },\n\n    methods: {\n        searchTreeItems(term) {\n            this.getTreeItems(null, term, true);\n        },\n\n        onCheckItem(checkedItems) {\n            this.$emit('on-selection', checkedItems);\n        },\n\n        getTreeItems(parentId = null, term = null, withTermFilter = false) {\n            this.isFetching = true;\n\n            const categoryCriteria = this.treeCriteria;\n\n            categoryCriteria.filters = categoryCriteria.filters.filter((filter) => {\n                if (filter.type === 'equals' && filter.field === 'parentId') {\n                    return false;\n                }\n\n                return !(filter.type === 'contains' && filter.field === 'name');\n            });\n\n            if (term && withTermFilter) {\n                categoryCriteria.addFilter(Criteria.contains('name', term));\n            }\n\n            if (!term) {\n                categoryCriteria.addFilter(Criteria.equals('parentId', parentId));\n            }\n\n            // search for categories\n            return this.categoryRepository.search(categoryCriteria, Cicada.Context.api).then((searchResult) => {\n                // when requesting root categories, replace the data\n                if (parentId === null) {\n                    this.categories = searchResult;\n                    this.isFetching = false;\n                    return Promise.resolve();\n                }\n\n                // add new categories\n                searchResult.forEach((category) => {\n                    this.categories.add(category);\n                });\n\n                return Promise.resolve();\n            });\n        },\n    },\n};\n"],"names":["template","Criteria","index","categoryCriteria","term","checkedItems","parentId","withTermFilter","filter","searchResult","category"],"mappings":"AAAA,MAAeA,EAAA,yyCCGT,CAAE,SAAAC,CAAQ,EAAK,OAAO,KAMbC,EAAA,CACX,SAAAF,EAEA,aAAc,OAAO,aAErB,OAAQ,CAAC,mBAAmB,EAE5B,MAAO,CAAC,cAAc,EAEtB,MAAO,CACH,KAAM,CACF,KAAM,OACN,SAAU,EACb,EACD,YAAa,CACT,KAAM,OACN,SAAU,EACb,EACD,qBAAsB,CAClB,KAAM,MACN,SAAU,EACb,EACD,aAAc,CACV,KAAM,QACN,SAAU,GACV,QAAS,EACZ,EACD,WAAY,CACR,KAAM,QACN,SAAU,GACV,QAAS,EACZ,CACJ,EAED,MAAO,CACH,MAAO,CACH,WAAY,CAAE,EACd,iBAAkB,GAClB,WAAY,EACxB,CACK,EAED,SAAU,CACN,oBAAqB,CACjB,OAAO,KAAK,kBAAkB,OAAO,UAAU,CAClD,EAED,cAAe,CACX,MAAMG,EAAmB,IAAIF,EAAS,EAAG,GAAG,EAC5C,OAAAE,EAAiB,eAAe,KAAK,WAAW,EAAE,UAAUF,EAAS,OAAO,KAAM,KAAK,KAAK,EAAE,CAAC,EAExFE,CACV,CACJ,EAED,MAAO,CACH,qBAAsB,CAClB,SAAU,CACF,KAAK,qBAAqB,QAAU,CAAC,KAAK,kBAAoB,CAAC,KAAK,YACpE,QAAQ,IAAI,CACR,KAAK,aAAc,CAC3C,CAAqB,EAAE,KAAK,IAAM,CACV,KAAK,iBAAmB,EAChD,CAAqB,CAER,EACD,UAAW,EACd,CACJ,EAED,QAAS,CACL,gBAAgBC,EAAM,CAClB,KAAK,aAAa,KAAMA,EAAM,EAAI,CACrC,EAED,YAAYC,EAAc,CACtB,KAAK,MAAM,eAAgBA,CAAY,CAC1C,EAED,aAAaC,EAAW,KAAMF,EAAO,KAAMG,EAAiB,GAAO,CAC/D,KAAK,WAAa,GAElB,MAAMJ,EAAmB,KAAK,aAE9B,OAAAA,EAAiB,QAAUA,EAAiB,QAAQ,OAAQK,GACpDA,EAAO,OAAS,UAAYA,EAAO,QAAU,WACtC,GAGJ,EAAEA,EAAO,OAAS,YAAcA,EAAO,QAAU,OAC3D,EAEGJ,GAAQG,GACRJ,EAAiB,UAAUF,EAAS,SAAS,OAAQG,CAAI,CAAC,EAGzDA,GACDD,EAAiB,UAAUF,EAAS,OAAO,WAAYK,CAAQ,CAAC,EAI7D,KAAK,mBAAmB,OAAOH,EAAkB,OAAO,QAAQ,GAAG,EAAE,KAAMM,GAE1EH,IAAa,MACb,KAAK,WAAaG,EAClB,KAAK,WAAa,GACX,QAAQ,YAInBA,EAAa,QAASC,GAAa,CAC/B,KAAK,WAAW,IAAIA,CAAQ,CAChD,CAAiB,EAEM,QAAQ,UAClB,CACJ,CACJ,CACL"}