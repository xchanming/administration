{"version":3,"file":"snippet.api.service-Bh_qi1Qk.js","sources":["../../../app/administration/src/core/service/api/snippet.api.service.js"],"sourcesContent":["import ApiService from '../api.service';\n\n/**\n * Gateway for the API end point \"snippet\"\n * @class\n * @extends ApiService\n * @package services-settings\n */\nclass SnippetApiService extends ApiService {\n    constructor(httpClient, loginService, apiEndpoint = 'snippet') {\n        super(httpClient, loginService, apiEndpoint);\n        this.name = 'snippetService';\n    }\n\n    /**\n     * @returns {Promise<T>}\n     */\n    getByKey(translationKey, page, limit, isCustom = false) {\n        const headers = this.getBasicHeaders();\n\n        return this.httpClient\n            .post(`/_action/${this.getApiBasePath()}`, { translationKey, page, limit, isCustom }, { headers })\n            .then((response) => {\n                return ApiService.handleResponse(response);\n            });\n    }\n\n    /**\n     * @returns {Promise<T>}\n     */\n    getFilter() {\n        const headers = this.getBasicHeaders();\n\n        return this.httpClient.get(`/_action/${this.getApiBasePath()}/filter`, { headers }).then((response) => {\n            return ApiService.handleResponse(response);\n        });\n    }\n\n    /**\n     * Get snippets\n     *\n     * @returns {Promise<T>}\n     */\n    getSnippets(localeFactory, code) {\n        const headers = this.getBasicHeaders();\n        const locale = code || localeFactory.getLastKnownLocale();\n\n        return this.httpClient\n            .get(`/_admin/snippets?locale=${locale}`, {\n                headers,\n            })\n            .then((response) => {\n                return ApiService.handleResponse(response);\n            })\n            .then((allSnippets) => {\n                const registry = localeFactory.getLocaleRegistry();\n\n                Object.entries(allSnippets).forEach(\n                    ([\n                        localeKey,\n                        snippets,\n                    ]) => {\n                        const fnName = registry.has(localeKey) ? 'extend' : 'register';\n\n                        localeFactory[fnName](localeKey, snippets);\n                    },\n                );\n            });\n    }\n}\n\n// eslint-disable-next-line sw-deprecation-rules/private-feature-declarations\nexport default SnippetApiService;\n"],"names":["SnippetApiService","ApiService","httpClient","loginService","apiEndpoint","translationKey","page","limit","isCustom","headers","response","localeFactory","code","locale","allSnippets","registry","localeKey","snippets","fnName"],"mappings":"iHAQA,MAAMA,UAA0BC,CAAW,CACvC,YAAYC,EAAYC,EAAcC,EAAc,UAAW,CAC3D,MAAMF,EAAYC,EAAcC,CAAW,EAC3C,KAAK,KAAO,gBACf,CAKD,SAASC,EAAgBC,EAAMC,EAAOC,EAAW,GAAO,CACpD,MAAMC,EAAU,KAAK,kBAErB,OAAO,KAAK,WACP,KAAK,YAAY,KAAK,eAAgB,CAAA,GAAI,CAAE,eAAAJ,EAAgB,KAAAC,EAAM,MAAAC,EAAO,SAAAC,CAAQ,EAAI,CAAE,QAAAC,CAAO,CAAE,EAChG,KAAMC,GACIT,EAAW,eAAeS,CAAQ,CAC5C,CACR,CAKD,WAAY,CACR,MAAMD,EAAU,KAAK,kBAErB,OAAO,KAAK,WAAW,IAAI,YAAY,KAAK,eAAgB,CAAA,UAAW,CAAE,QAAAA,CAAO,CAAE,EAAE,KAAMC,GAC/ET,EAAW,eAAeS,CAAQ,CAC5C,CACJ,CAOD,YAAYC,EAAeC,EAAM,CAC7B,MAAMH,EAAU,KAAK,kBACfI,EAASD,GAAQD,EAAc,mBAAkB,EAEvD,OAAO,KAAK,WACP,IAAI,2BAA2BE,CAAM,GAAI,CACtC,QAAAJ,CAChB,CAAa,EACA,KAAMC,GACIT,EAAW,eAAeS,CAAQ,CAC5C,EACA,KAAMI,GAAgB,CACnB,MAAMC,EAAWJ,EAAc,oBAE/B,OAAO,QAAQG,CAAW,EAAE,QACxB,CAAC,CACGE,EACAC,CACxB,IAA0B,CACF,MAAMC,EAASH,EAAS,IAAIC,CAAS,EAAI,SAAW,WAEpDL,EAAcO,CAAM,EAAEF,EAAWC,CAAQ,CAC5C,CACrB,CACA,CAAa,CACR,CACL"}