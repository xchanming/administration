{"version":3,"mappings":"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","names":["template$3","Component","Criteria","cloneDeep","DefaultAddressFormat","template","criteria","value","_a","address","dragConfig","draggedElement","dragElement","dragData","dropData","_b","_c","position","dragPosition","source","dest","snippet","swag","newSnippets","_","key","index","newSnippet","item","customerId","customer","response","snippets","res","rendered","string","camelCase","path","template$2","utils","listeners","data","keyWords","results","selections","mappedObj","generate","currentIndex","argument","result","name","currentKey","nextKey","convertTreeToArray","nodes","output","getName","parentId","id","children","eventName","node","template$1","DEFAULT_MIN_LINES","DEFAULT_MAX_LINES","props","config","element","newValue","selection","Module","__vitePreload"],"ignoreList":[],"sources":["../../../app/administration/src/module/sw-settings-country/component/sw-settings-country-address-handling/sw-settings-country-address-handling.html.twig","../../../app/administration/src/module/sw-settings-country/component/sw-settings-country-address-handling/index.ts","../../../app/administration/src/module/sw-settings-country/component/sw-settings-country-new-snippet-modal/sw-settings-country-new-snippet-modal.html.twig","../../../app/administration/src/module/sw-settings-country/component/sw-settings-country-new-snippet-modal/index.ts","../../../app/administration/src/module/sw-settings-country/component/sw-multi-snippet-drag-and-drop/sw-multi-snippet-drag-and-drop.html.twig","../../../app/administration/src/module/sw-settings-country/component/sw-multi-snippet-drag-and-drop/index.ts","../../../app/administration/src/module/sw-settings-country/component/sw-settings-country-preview-template/sw-settings-country-preview-template.html.twig","../../../app/administration/src/module/sw-settings-country/component/sw-settings-country-preview-template/index.ts","../../../app/administration/src/module/sw-settings-country/acl/index.js","../../../app/administration/src/module/sw-settings-country/index.js"],"sourcesContent":["<div class=\"sw-settings-country-address-handling\">\n    <sw-card\n        position-identifier=\"sw-settings-country-address-handling-options\"\n        :title=\"$tc('sw-settings-country.detail.titleOptions')\"\n        :is-loading=\"isLoading\"\n    >\n        <sw-container class=\"sw-settings-country-address-handling__options-container\">\n            <sw-switch-field\n                :value=\"country.forceStateInRegistration\"\n                class=\"sw-settings-country-address-handling__option-items\"\n                bordered\n                :disabled=\"!acl.can('country.editor') || undefined\"\n                :label=\"$tc('sw-settings-country.detail.labelForceStateInRegistration')\"\n                @update:value=\"updateCountry('forceStateInRegistration', $event)\"\n            />\n\n            <sw-switch-field\n                :value=\"country.postalCodeRequired\"\n                class=\"sw-settings-country-address-handling__option-items\"\n                bordered\n                :disabled=\"!acl.can('country.editor') || undefined\"\n                :label=\"$tc('sw-settings-country.detail.labelPostalCodeRequired')\"\n                @update:value=\"updateCountry('postalCodeRequired', $event)\"\n            />\n\n            <sw-switch-field\n                :value=\"country.checkPostalCodePattern\"\n                class=\"sw-settings-country-address-handling__option-items\"\n                bordered\n                :disabled=\"!hasDefaultPostalCodePattern || !acl.can('country.editor') || undefined\"\n                :label=\"$tc('sw-settings-country.detail.labelCheckPostalCodePattern')\"\n                :help-text=\"$tc('sw-settings-country.detail.helpTextCheckPostalCodePattern')\"\n                @update:value=\"updateCountry('checkPostalCodePattern', $event)\"\n            />\n\n            <div class=\"sw-settings-country-address-handling__option-items advanced-postal-code\">\n                <sw-switch-field\n                    :value=\"country.checkAdvancedPostalCodePattern\"\n                    class=\"sw-settings-country-address-handling__option-items\"\n                    :disabled=\"!acl.can('country.editor') || disabledAdvancedPostalCodePattern || undefined\"\n                    :label=\"$tc('sw-settings-country.detail.labelCheckAdvancedPostalCodePattern')\"\n                    :help-text=\"$tc('sw-settings-country.detail.helpTextAdvancedPostalCodePattern', 0, {5: '{5}', 4: '{4}', 2: '{2}'})\"\n                    @update:value=\"updateCountry('checkAdvancedPostalCodePattern', $event)\"\n                />\n\n                <sw-text-field\n                    :value=\"country.advancedPostalCodePattern\"\n                    class=\"sw-settings-country-address-handling__text-field\"\n                    :class=\"{'is--disabled': !country.checkAdvancedPostalCodePattern}\"\n                    :disabled=\"!acl.can('country.editor') || undefined\"\n                    :placeholder=\"$tc('sw-settings-country.detail.placeholderAdvancedPostalCodePattern')\"\n                    @update:value=\"updateCountry('advancedPostalCodePattern', $event)\"\n                />\n            </div>\n        </sw-container>\n    </sw-card>\n\n    <sw-card\n        position-identifier=\"sw-settings-country-address-handling-formatting\"\n        :title=\"$tc('sw-settings-country.detail.titleFormatting')\"\n        :is-loading=\"isLoading\"\n    >\n        <sw-container class=\"sw-settings-country-address-handling__options-container\">\n            <div class=\"sw-settings-country-address-handling__address-markup\">\n                <sw-multi-snippet-drag-and-drop\n                    v-for=\"(snippet, index) in addressFormat\"\n                    :key=\"index\"\n                    v-droppable=\"{ data: { snippet, index }, dragGroup: 'sw-multi-snippet' }\"\n                    v-draggable=\"{ ...dragConf, data: { snippet, index }}\"\n                    :value=\"snippet\"\n                    :line-position=\"index\"\n                    :get-label-property=\"getLabelProperty\"\n                    :total-lines=\"addressFormat.length\"\n                    @update:value=\"change\"\n                    @drop-end=\"onDropEnd\"\n                    @position-move=\"moveToNewPosition\"\n                    @add-new-line=\"addNewLineAt\"\n                    @open-snippet-modal=\"openSnippetModal\"\n                />\n            </div>\n\n            <div class=\"sw-settings-country-address-handling__address-preview\">\n                <div class=\"sw-card__title\">\n                    {{ $tc('sw-settings-country.detail.previewTitle') }}\n                </div>\n\n                <sw-entity-single-select\n                    v-model:value=\"customerId\"\n                    class=\"sw-settings-country-address-handling__customer-select\"\n                    :label=\"$tc('sw-settings-country.detail.labelCustomer')\"\n                    :placeholder=\"$tc('sw-settings-country.detail.placeholderSelectCustomer')\"\n                    entity=\"customer\"\n                    show-clearable-button\n                    :criteria=\"customerCriteria\"\n                    :label-callback=\"customerLabel\"\n                    @update:value=\"onChangeCustomer\"\n                />\n\n                <sw-settings-country-preview-template :formatting-address=\"formattingAddress\" />\n\n                <sw-button\n                    class=\"sw-settings-country-address-handling__button-reset\"\n                    variant=\"ghost-danger\"\n                    @click=\"resetMarkup\"\n                >\n                    {{ $tc('sw-settings-country.detail.buttonResetMarkup') }}\n                </sw-button>\n            </div>\n        </sw-container>\n    </sw-card>\n\n    <sw-settings-country-new-snippet-modal\n        v-if=\"isOpenModal\"\n        :selections=\"snippets\"\n        :current-position=\"currentPosition\"\n        :address-format=\"addressFormat\"\n        :get-label-property=\"getLabelProperty\"\n        @change=\"change\"\n        @modal-close=\"onCloseModal\"\n    />\n</div>\n","import camelCase from 'lodash/camelCase';\nimport type CriteriaType from 'src/core/data/criteria.data';\nimport type { PropType } from 'vue';\nimport type { Entity } from '@cicada-ag/meteor-admin-sdk/es/_internals/data/Entity';\nimport type { DragConfig } from 'src/app/directive/dragdrop.directive';\nimport template from './sw-settings-country-address-handling.html.twig';\nimport './sw-settings-country-address-handling.scss';\n\nconst { Component } = Cicada;\nconst { Criteria } = Cicada.Data;\nconst { cloneDeep } = Cicada.Utils.object;\n\ninterface TreeItem {\n    id: string;\n    name: string;\n    parentId?: string | null;\n}\n\ninterface DragItem {\n    index: number;\n    linePosition?: number | null;\n    snippet: string[];\n}\n\nconst DefaultAddressFormat = [\n    [\n        'address/company',\n        'symbol/dash',\n        'address/department',\n    ],\n    [\n        'address/name',\n    ],\n    ['address/street'],\n    [\n        'address/zipcode',\n        'address/city',\n    ],\n    ['address/country'],\n] as string[][];\n\n/**\n * @package buyers-experience\n *\n * @private\n */\nComponent.register('sw-settings-country-address-handling', {\n    template,\n\n    compatConfig: Cicada.compatConfig,\n\n    inject: [\n        'acl',\n        'customSnippetApiService',\n    ],\n\n    props: {\n        country: {\n            type: Object as PropType<EntitySchema.Entities['country']>,\n            required: true,\n        },\n\n        isLoading: {\n            type: Boolean,\n            required: true,\n        },\n    },\n\n    data(): {\n        advancedPostalCodePattern: string | null;\n        draggedItem: DragItem | null;\n        droppedItem: DragItem | null;\n        snippets: TreeItem[] | [];\n        customerId: string | null;\n        customer: Entity<'customer'> | null;\n        isOpenModal: boolean;\n        currentPosition: number | null;\n        formattingAddress: string;\n    } {\n        return {\n            advancedPostalCodePattern: null,\n            draggedItem: null,\n            droppedItem: null,\n            snippets: [],\n            customerId: null,\n            customer: null,\n            isOpenModal: false,\n            currentPosition: null,\n            formattingAddress: '',\n        };\n    },\n\n    computed: {\n        customerCriteria(): CriteriaType {\n            const criteria = new Criteria(1, null);\n            criteria\n                .addAssociation('salutation')\n                .addAssociation('defaultBillingAddress.country')\n                .addAssociation('defaultBillingAddress.countryState')\n                .addAssociation('defaultBillingAddress.salutation');\n\n            return criteria;\n        },\n\n        dragConf(): DragConfig<DragItem> {\n            return {\n                delay: 200,\n                dragGroup: 'sw-multi-snippet',\n                validDragCls: 'is--valid-drag',\n                // eslint-disable-next-line @typescript-eslint/unbound-method\n                onDragStart: this.onDragStart,\n                // eslint-disable-next-line @typescript-eslint/unbound-method\n                onDragEnter: this.onDragEnter,\n                // eslint-disable-next-line @typescript-eslint/unbound-method\n                onDrop: this.onDrop,\n                preventEvent: false,\n            } as DragConfig<DragItem>;\n        },\n\n        addressFormat(): Array<string[]> {\n            return this.country.addressFormat as Array<string[]>;\n        },\n\n        hasDefaultPostalCodePattern(): boolean {\n            return !!this.country.defaultPostalCodePattern;\n        },\n\n        disabledAdvancedPostalCodePattern(): boolean {\n            if (!this.hasDefaultPostalCodePattern) {\n                return false;\n            }\n\n            return !this.country.checkPostalCodePattern;\n        },\n    },\n\n    watch: {\n        'country.checkPostalCodePattern'(value) {\n            if (value) {\n                return;\n            }\n\n            if (this.isCompatEnabled('INSTANCE_SET')) {\n                this.$set(this.country, 'checkAdvancedPostalCodePattern', false);\n            } else {\n                this.updateCountry('checkAdvancedPostalCodePattern', false);\n            }\n        },\n\n        'country.checkAdvancedPostalCodePattern'(value) {\n            if (value) {\n                if (this.country.advancedPostalCodePattern && !this.advancedPostalCodePattern) {\n                    return;\n                }\n\n                if (this.isCompatEnabled('INSTANCE_SET')) {\n                    this.$set(\n                        this.country,\n                        'advancedPostalCodePattern',\n                        this.advancedPostalCodePattern || this.country.defaultPostalCodePattern,\n                    );\n                } else {\n                    this.$emit(\n                        'update:country',\n                        'advancedPostalCodePattern',\n                        this.advancedPostalCodePattern || this.country.defaultPostalCodePattern,\n                    );\n                }\n                return;\n            }\n\n            if (!this.hasDefaultPostalCodePattern) {\n                if (this.isCompatEnabled('INSTANCE_SET')) {\n                    this.$set(this.country, 'checkPostalCodePattern', value);\n                } else {\n                    this.updateCountry('checkPostalCodePattern', value);\n                }\n            }\n\n            this.advancedPostalCodePattern = this.country?.advancedPostalCodePattern ?? null;\n            if (this.isCompatEnabled('INSTANCE_SET')) {\n                this.$set(this.country, 'advancedPostalCodePattern', null);\n            } else {\n                this.updateCountry('advancedPostalCodePattern', null);\n            }\n        },\n\n        'country.addressFormat'(address) {\n            if (!address) {\n                return;\n            }\n\n            void this.renderFormattingAddress(this.customer?.defaultBillingAddress);\n        },\n    },\n\n    created() {\n        this.createdComponent();\n    },\n\n    methods: {\n        createdComponent(): void {\n            this.advancedPostalCodePattern = cloneDeep(this.country.advancedPostalCodePattern) as string | null;\n\n            void this.getSnippets();\n        },\n\n        // eslint-disable-next-line @typescript-eslint/no-unused-vars\n        onDragStart(dragConfig: DragConfig<DragItem>, draggedElement: Element, dragElement: Element): void {\n            this.draggedItem = dragConfig.data;\n        },\n\n        onDragEnter(dragData: DragItem, dropData: DragItem): void {\n            if (!this.draggedItem) {\n                return;\n            }\n\n            if (!dragData || !dropData) {\n                return;\n            }\n\n            this.droppedItem = dropData;\n        },\n\n        // eslint-disable-next-line @typescript-eslint/no-unused-vars\n        onDrop(dragData: DragItem, dropData: DragItem): void {\n            if (!this.addressFormat?.length || !this.droppedItem || !this.draggedItem) {\n                return;\n            }\n\n            if (\n                ![\n                    this.draggedItem?.index,\n                    this.droppedItem?.index,\n                ].every((position) => typeof position === 'number')\n            ) {\n                return;\n            }\n\n            this.country.addressFormat = Object.assign([], this.country.addressFormat, {\n                // @ts-expect-error - value exists\n                // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n                [this.draggedItem.index]: this.country.addressFormat[this.droppedItem.index],\n                // @ts-expect-error - value exists\n                // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n                [this.droppedItem.index]: this.country.addressFormat[this.draggedItem.index],\n            });\n\n            this.draggedItem = null;\n            this.droppedItem = null;\n        },\n\n        onDropEnd(dragPosition: number, { dragData, dropData }: { dragData: DragItem; dropData: DragItem }): void {\n            // swap positions in different lines\n            if (\n                typeof dropData?.linePosition === 'number' &&\n                typeof dragData?.linePosition === 'number' &&\n                dragData.linePosition !== dropData.linePosition\n            ) {\n                if (this.isCompatEnabled('INSTANCE_SET')) {\n                    // @ts-expect-error - value exists\n                    // eslint-disable-next-line @typescript-eslint/no-unsafe-argument\n                    this.$set(this.country.addressFormat[dragData.linePosition], dragData.index, dropData.snippet);\n                } else {\n                    this.$emit(\n                        'update:country',\n                        `addressFormat[${dragData.linePosition}][${dragData.index}]`,\n                        dropData.snippet,\n                    );\n                }\n\n                if (this.isCompatEnabled('INSTANCE_SET')) {\n                    // @ts-expect-error - value exists\n                    // eslint-disable-next-line @typescript-eslint/no-unsafe-argument\n                    this.$set(this.country.addressFormat[dropData.linePosition], dropData.index, dragData.snippet);\n                } else {\n                    this.$emit(\n                        'update:country',\n                        `addressFormat[${dropData.linePosition}][${dropData.index}]`,\n                        dragData.snippet,\n                    );\n                }\n                return;\n            }\n\n            if (this.isCompatEnabled('INSTANCE_SET')) {\n                // move to another line\n                this.$set(\n                    // @ts-expect-error - value exists\n                    this.country.addressFormat,\n                    `${dropData.index}`,\n                    [\n                        // @ts-expect-error - value exists\n                        // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n                        ...this.country.addressFormat[dropData.index],\n                        dragData.snippet,\n                    ],\n                );\n            } else {\n                this.$emit('update:country', `addressFormat[${dropData.index}]`, [\n                    // @ts-expect-error - value exists\n                    // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n                    ...this.country.addressFormat[dropData.index],\n                    dragData.snippet,\n                ]);\n            }\n\n            if (this.isCompatEnabled('INSTANCE_SET')) {\n                // @ts-expect-error - value exists\n                // eslint-disable-next-line @typescript-eslint/no-unsafe-call,@typescript-eslint/no-unsafe-member-access\n                this.country.addressFormat[dragPosition].splice(dragData.index, 1);\n                this.$set(\n                    // @ts-expect-error - value exists\n                    this.country.addressFormat,\n                    dragPosition,\n                    // @ts-expect-error - value exists\n                    this.country.addressFormat[dragPosition],\n                );\n            } else {\n                // @ts-expect-error - value exists\n                // eslint-disable-next-line @typescript-eslint/no-unsafe-call,@typescript-eslint/no-unsafe-member-access\n                this.country.addressFormat[dragPosition].splice(dragData.index, 1);\n\n                // @ts-expect-error - value exists\n                this.updateCountry(`addressFormat[${dragPosition}]`, this.country.addressFormat[dragPosition]);\n            }\n        },\n\n        moveToNewPosition(source: number, dest: number | null): void {\n            if (!this.addressFormat) {\n                return;\n            }\n\n            dest = typeof dest !== 'number' ? this.addressFormat.length - 1 : dest;\n            // @ts-expect-error - value exists\n            // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n            const snippet = this.country.addressFormat[source];\n\n            if (this.isCompatEnabled('INSTANCE_SET')) {\n                // eslint-disable-next-line @typescript-eslint/no-unsafe-argument\n                this.$set(this.country, 'addressFormat', this.swapPosition(source, dest, [snippet]) ?? []);\n            } else {\n                // eslint-disable-next-line @typescript-eslint/no-unsafe-argument\n                this.updateCountry('addressFormat', this.swapPosition(source, dest, [snippet]) ?? []);\n            }\n        },\n\n        addNewLineAt(source: number, dest: string | null): void {\n            if (!this.addressFormat?.length) {\n                return;\n            }\n\n            const snippet = this.addressFormat[source];\n            const swag =\n                dest === 'above'\n                    ? [\n                          [],\n                          snippet,\n                      ]\n                    : [\n                          snippet,\n                          [],\n                      ];\n\n            if (this.isCompatEnabled('INSTANCE_SET')) {\n                this.$set(this.country, 'addressFormat', this.swapPosition(source, source, swag) ?? []);\n            } else {\n                this.updateCountry('addressFormat', this.swapPosition(source, source, swag) ?? []);\n            }\n        },\n\n        swapPosition(source: number, dest: number, swag: Array<string[]>): Array<string[]> | null {\n            if (!this.addressFormat?.length) {\n                return null;\n            }\n\n            const newSnippets = [\n                // @ts-expect-error - value exists\n                // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment,@typescript-eslint/no-unsafe-call\n                ...this.country.addressFormat.filter((_, key) => key !== source),\n            ];\n\n            newSnippets.splice(dest, 0, ...swag);\n\n            // eslint-disable-next-line @typescript-eslint/no-unsafe-return\n            return newSnippets;\n        },\n\n        change(index: number, newSnippet?: string): void {\n            if (!newSnippet) {\n                if (this.isCompatEnabled('INSTANCE_SET')) {\n                    this.$set(\n                        this.country,\n                        'addressFormat',\n                        this.addressFormat.filter((_, key) => index !== key),\n                    );\n                } else {\n                    this.updateCountry(\n                        'addressFormat',\n                        this.addressFormat.filter((_, key) => index !== key),\n                    );\n                }\n\n                return;\n            }\n\n            if (this.isCompatEnabled('INSTANCE_SET')) {\n                // @ts-expect-error - value exists\n                this.$set(this.country.addressFormat, index, newSnippet);\n            } else {\n                this.updateCountry(`addressFormat[${index}]`, newSnippet);\n            }\n        },\n\n        customerLabel(item: Entity<'customer'>): string {\n            if (!item) {\n                return '';\n            }\n\n            return `${item.name}`;\n        },\n\n        onChangeCustomer(customerId: string, customer: Entity<'customer'>): void {\n            this.customer = null;\n            if (!customerId || !customer) {\n                return;\n            }\n\n            this.customer = customer;\n\n            void this.renderFormattingAddress(this.customer.defaultBillingAddress);\n        },\n\n        resetMarkup(): void {\n            if (this.isCompatEnabled('INSTANCE_SET')) {\n                this.$set(this.country, 'addressFormat', cloneDeep(DefaultAddressFormat));\n            } else {\n                this.updateCountry('addressFormat', cloneDeep(DefaultAddressFormat));\n            }\n        },\n\n        openSnippetModal(position: number) {\n            this.isOpenModal = true;\n            this.currentPosition = position;\n        },\n\n        onCloseModal() {\n            this.currentPosition = null;\n            this.isOpenModal = false;\n        },\n\n        getSnippets(): Promise<unknown> {\n            return this.customSnippetApiService\n                .snippets()\n                .then((response) => {\n                    const snippets = (response as { data: string[] }).data;\n\n                    this.snippets = snippets?.map((snippet: string) => {\n                        return {\n                            id: snippet,\n                            name: this.getLabelProperty(snippet),\n                        };\n                    });\n                    // eslint-disable-next-line @typescript-eslint/no-empty-function\n                })\n                .catch(() => {});\n        },\n\n        renderFormattingAddress(address?: EntitySchema.Entities['customer_address']): Promise<unknown> {\n            if (!address) {\n                this.formattingAddress = '';\n                return Promise.resolve();\n            }\n\n            return (\n                this.customSnippetApiService\n                    // @ts-expect-error - value exists\n                    .render(address, this.country.addressFormat)\n                    .then((res) => {\n                        const { rendered } = res as { rendered: string };\n\n                        this.formattingAddress = rendered;\n                    })\n            );\n        },\n\n        getLabelProperty(value: string): string {\n            const string = value\n                .split('/')\n                .map((item: string) => camelCase(item))\n                .join('.');\n\n            return this.$te(`sw-custom-snippet.${string}`) ? this.$tc(`sw-custom-snippet.${string}`) : value;\n        },\n\n        updateCountry(path: string, value: unknown): void {\n            this.$emit('update:country', path, value);\n        },\n    },\n});\n","<sw-modal\n    class=\"sw-settings-country-new-snippet-modal\"\n    :title=\"$tc('sw-settings-country.detail.newSnippetModalTitle')\"\n    @modal-close=\"onCloseModal\"\n>\n    <sw-contextual-field\n        class=\"sw-settings-country-new-snippet-modal__search-field\"\n        required\n        :disabled=\"disabled\"\n        :error=\"null\"\n    >\n        <template #sw-field-input=\"{ identification, disabled, error, size, setFocusClass, removeFocusClass }\">\n            <!-- eslint-disable-next-line vuejs-accessibility/form-control-has-label -->\n            <input\n                ref=\"searchInput\"\n                v-model=\"searchTerm\"\n                type=\"text\"\n                class=\"sw-settings-country-new-snippet-modal__input-field\"\n                :placeholder=\"$tc('sw-settings-country.detail.placeholderSearchSnippet')\"\n                :disabled=\"disabled\"\n                @input=\"debouncedSearch\"\n            >\n\n            <sw-loader\n                v-if=\"isLoading\"\n                class=\"sw-settings-country-new-snippet-modal__loader\"\n                size=\"16px\"\n            />\n\n            <sw-icon\n                class=\"sw-settings-country-new-snippet-modal__search-icon\"\n                name=\"regular-search-s\"\n                small\n            />\n        </template>\n    </sw-contextual-field>\n\n    <sw-tree\n        :sortable=\"false\"\n        :items=\"searchResults\"\n        :searchable=\"false\"\n        :disable-context-menu=\"true\"\n        bind-items-to-folder\n        :active-tree-item-id=\"activeFocusId\"\n        initially-expanded-root\n        route-params-active-element-id=\"snippet\"\n    >\n\n        <template #headline>\n            <span></span>\n        </template>\n\n        <template #search>\n            <span></span>\n        </template>\n\n        <template\n            #items=\"{\n                treeItems,\n                sortable,\n                disableContextMenu,\n                onChangeRoute,\n                newElementId,\n                checkItem,\n                checkedItemIds,\n                selectedItemsPathIds,\n            }\"\n        >\n            <sw-tree-item\n                v-for=\"item in treeItems\"\n                :key=\"item.id\"\n                should-focus\n                :item=\"item\"\n                :active=\"item.active\"\n                :sortable=\"sortable\"\n                :on-change-route=\"onChangeRoute\"\n                :active-parent-ids=\"selectedItemsPathIds\"\n                :active-item-ids=\"checkedItemIds\"\n                @check-item=\"checkItem\"\n            >\n\n                <template #actions=\"{ item }\">\n\n                    <sw-button\n                        v-if=\"item.childCount === 0\"\n                        @click=\"addElement(item.data)\"\n                    >\n                        {{ $tc('sw-settings-country.detail.buttonInsertSnippet') }}\n                    </sw-button>\n                </template>\n            </sw-tree-item>\n        </template>\n    </sw-tree>\n\n    <sw-select-base\n        class=\"sw-multi-snippet-select\"\n        :is-loading=\"isLoading\"\n        :error=\"null\"\n        v-bind=\"$attrs\"\n        v-on=\"listeners\"\n    >\n        <template #sw-select-selection=\"{ identification, error, disabled, size, expand, collapse }\">\n            <ul\n                ref=\"selectionList\"\n                class=\"sw-select-selection-list\"\n            >\n                <!-- eslint-disable vue/no-use-v-if-with-v-for -->\n                <li\n                    v-for=\"(snippet, index) in selection\"\n                    :key=\"index\"\n                    class=\"sw-select-selection-list__item-holder\"\n                    :class=\"'sw-select-selection-list__item-holder--' + index\"\n                    :data-id=\"snippet\"\n                >\n                    <slot\n                        name=\"selected-option\"\n                        v-bind=\"{ snippet, defaultLabel: snippet, disabled }\"\n                    >\n                        <sw-label\n                            :dismissable=\"true\"\n                            :size=\"size\"\n                            @dismiss=\"onClickDismiss(index)\"\n                        >\n                            <span class=\"sw-select-selection-list__item\">\n                                <slot\n                                    name=\"label-property\"\n                                    v-bind=\"{ item: snippet, index }\"\n                                >\n                                    {{ getLabelProperty(snippet) }}\n                                </slot>\n                            </span>\n                        </sw-label>\n                    </slot>\n                </li>\n\n                <li>\n                    <slot name=\"input\">\n                        <!-- eslint-disable-next-line vuejs-accessibility/form-control-has-label -->\n                        <input\n                            class=\"sw-select-selection-list__input\"\n                            type=\"text\"\n                            :disabled=\"disabled || undefined\"\n                        >\n                    </slot>\n                </li>\n            </ul>\n        </template>\n    </sw-select-base>\n</sw-modal>\n","import type { PropType } from 'vue';\nimport template from './sw-settings-country-new-snippet-modal.html.twig';\nimport './sw-settings-country-new-snippet-modal.scss';\n\nconst { Component } = Cicada;\nconst utils = Cicada.Utils;\n\ninterface Selection {\n    id: string;\n    name: string;\n    parentId?: string | null;\n}\n\ninterface TreeItem {\n    id: string;\n    name: string;\n    parentId?: string | null;\n    childCount?: number;\n    children: {\n        [key: string]: TreeItem;\n    };\n}\n\n/**\n * @package buyers-experience\n *\n * @private\n */\nComponent.register('sw-settings-country-new-snippet-modal', {\n    template,\n\n    compatConfig: Cicada.compatConfig,\n\n    props: {\n        selections: {\n            type: Array as PropType<Selection[]>,\n            required: false,\n            default: () => [],\n        },\n\n        currentPosition: {\n            type: Number,\n            required: true,\n        },\n\n        addressFormat: {\n            type: Array as PropType<Array<string[]>>,\n            required: true,\n        },\n\n        disabled: {\n            type: Boolean,\n            required: false,\n            default: false,\n        },\n\n        getLabelProperty: {\n            type: Function,\n            required: false,\n            default: (value: string) => value,\n        },\n    },\n\n    data(): {\n        searchTerm: string;\n        isLoading: boolean;\n        searchResults: TreeItem[] | null;\n        activeFocusId: string | null;\n    } {\n        return {\n            searchTerm: '',\n            isLoading: false,\n            searchResults: null,\n            activeFocusId: null,\n        };\n    },\n\n    computed: {\n        selection(): string[] {\n            return this.addressFormat[this.currentPosition];\n        },\n\n        listeners() {\n            const listeners = {};\n\n            if (this.isCompatEnabled('INSTANCE_LISTENERS')) {\n                return this.$listeners;\n            }\n\n            return listeners;\n        },\n    },\n\n    watch: {\n        activeFocusId: {\n            immediate: true,\n            handler(value) {\n                // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n                this.$route.params.snippet = value;\n            },\n        },\n    },\n\n    created() {\n        this.createdComponent();\n    },\n\n    methods: {\n        createdComponent() {\n            this.getSnippetsTree(this.selections);\n        },\n\n        onCloseModal() {\n            this.$emit('modal-close');\n        },\n\n        addElement(data: Selection) {\n            this.addressFormat[this.currentPosition].push(data.id.replace('.', '/'));\n\n            this.$emit('change', this.currentPosition, this.addressFormat[this.currentPosition]);\n        },\n\n        debouncedSearch: utils.debounce(function updateSnippets(this: $TSFixMe): void {\n            // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n            if (!this.searchTerm) {\n                // eslint-disable-next-line @typescript-eslint/no-unsafe-call,@typescript-eslint/no-unsafe-member-access\n                this.getSnippetsTree(this.selections);\n                return;\n            }\n\n            // eslint-disable-next-line @typescript-eslint/no-unsafe-call,@typescript-eslint/no-unsafe-member-access\n            this.search();\n        }, 750),\n\n        search(): void {\n            this.activeFocusId = null;\n\n            const keyWords = this.searchTerm.split(/[\\W_]+/gi);\n\n            if (!keyWords) {\n                return;\n            }\n\n            const results = this.selections.filter((item) =>\n                keyWords.every((key) => item.name.toLowerCase().includes(key.toLowerCase())),\n            );\n\n            if (results.length === 0) {\n                return;\n            }\n\n            this.activeFocusId = results[0].id;\n            this.getSnippetsTree(results);\n        },\n\n        getSnippetsTree(selections: Selection[]): void {\n            const mappedObj = {};\n\n            const generate = (\n                currentIndex: number,\n                argument: { keyWords: string[]; name: string },\n                result: { [key: string]: TreeItem },\n            ) => {\n                const { keyWords, name } = argument;\n                const currentKey = keyWords[currentIndex];\n\n                // next key is child of current key\n                const nextKey = keyWords[currentIndex + 1];\n\n                result[currentKey] = result[currentKey] || {\n                    id: currentKey,\n                    name,\n                    parentId: null,\n                    children: {},\n                };\n\n                if (!nextKey) {\n                    return;\n                }\n\n                // Put next key into children of current key\n                result[currentKey].children[nextKey] = result[currentKey]?.children[nextKey] || {\n                    id: `${result[currentKey].id}.${nextKey}`,\n                    name,\n                    parentId: result[currentKey].id,\n                    children: {},\n                };\n\n                generate(currentIndex + 1, { keyWords, name }, result[currentKey].children);\n            };\n\n            const convertTreeToArray = (nodes: TreeItem[], output: TreeItem[] = []) => {\n                const getName = ({ parentId = null, id, children, name }: TreeItem): string => {\n                    const [eventName] = parentId ? id.split('.').reverse() : [id];\n\n                    // Replace '_' or '-' to blank space.\n                    return !Object.values(children).length ? name : eventName.replace(/_|-/g, ' ');\n                };\n\n                nodes.forEach((node) => {\n                    const children = node.children ? Object.values(node.children) : [];\n                    output.push({\n                        id: node.id,\n                        name: getName(node),\n                        childCount: children.length,\n                        parentId: node.parentId,\n                        children: {},\n                    });\n\n                    if (children.length > 0) {\n                        output = convertTreeToArray(children, output);\n                    }\n                });\n\n                return output;\n            };\n\n            selections.forEach((snippet) => {\n                const keyWords = snippet.id.split('/');\n                if (keyWords.length === 0) {\n                    return;\n                }\n\n                generate(0, { keyWords, ...snippet }, mappedObj);\n            });\n\n            this.searchResults = convertTreeToArray(Object.values(mappedObj));\n        },\n\n        onClickDismiss(index: number) {\n            this.$emit(\n                'change',\n                this.currentPosition,\n                this.addressFormat[this.currentPosition].filter((_, key) => key !== index),\n            );\n        },\n    },\n});\n","<div class=\"sw-multi-snippet-drag-and-drop\">\n    <sw-icon\n        class=\"sw-multi-snippet-drag-and-drop__action\"\n        name=\"regular-grip-vertical\"\n        size=\"12\"\n    />\n\n    <sw-select-base\n        class=\"sw-multi-snippet-select\"\n        :is-loading=\"isLoading\"\n        :error=\"errorObject\"\n        v-bind=\"$attrs\"\n        v-on=\"listeners\"\n    >\n        <template #sw-select-selection=\"{ identification, error, disabled, size, expand, collapse }\">\n            <ul\n                ref=\"selectionList\"\n                class=\"sw-select-selection-list\"\n            >\n                <!-- eslint-disable vue/no-use-v-if-with-v-for -->\n                <li\n                    v-for=\"(snippet, index) in value\"\n                    :key=\"index\"\n                    class=\"sw-select-selection-list__item-holder\"\n                    :class=\"'sw-select-selection-list__item-holder--' + index\"\n                    :data-id=\"snippet\"\n                >\n                    <slot\n                        name=\"selected-option\"\n                        v-bind=\"{ snippet, defaultLabel: snippet, disabled, linePosition }\"\n                    >\n                        <sw-label\n                            v-droppable=\"{ ...mergedDropConfig, data: { snippet, index, linePosition }}\"\n                            v-draggable=\"{ ...mergedDragConfig, data: { snippet, index, linePosition }}\"\n                            :dismissable=\"!isSelectionDisabled(snippet)\"\n                            :size=\"size\"\n                            @dismiss=\"onClickDismiss(index)\"\n                        >\n                            <span class=\"sw-select-selection-list__item\">\n                                <slot\n                                    name=\"label-property\"\n                                    v-bind=\"{ item: snippet, index, getLabelProperty }\"\n                                >\n                                    {{ getLabelProperty(snippet) }}\n                                </slot>\n                            </span>\n                        </sw-label>\n                    </slot>\n                </li>\n\n                <li>\n                    <slot name=\"input\">\n                        <!-- eslint-disable-next-line vuejs-accessibility/form-control-has-label -->\n                        <input\n                            class=\"sw-select-selection-list__input\"\n                            type=\"text\"\n                            :disabled=\"disabled\"\n                        >\n                    </slot>\n                </li>\n            </ul>\n        </template>\n    </sw-select-base>\n\n    <sw-context-button class=\"sw-multi-snippet-drag-and-drop__context-button\">\n        <sw-context-menu-item\n            :disabled=\"isMaxLines\"\n            @click=\"openModal\"\n        >\n            {{ $tc('sw-settings-country.general.actions.newSnippet') }}\n        </sw-context-menu-item>\n\n        <sw-context-menu-item\n            :disabled=\"isMaxLines\"\n            @click=\"addNewLineAt('above')\"\n        >\n            {{ $tc('sw-settings-country.general.actions.createBefore') }}\n        </sw-context-menu-item>\n\n        <sw-context-menu-item\n            :disabled=\"isMaxLines\"\n            @click=\"addNewLineAt('below')\"\n        >\n            {{ $tc('sw-settings-country.general.actions.createAfter') }}\n        </sw-context-menu-item>\n\n        <sw-context-menu-item\n            :disabled=\"isMinLines\"\n            @click=\"moveToNewPosition(0)\"\n        >\n            {{ $tc('sw-settings-country.general.actions.moveTop') }}\n        </sw-context-menu-item>\n\n        <sw-context-menu-item\n            :disabled=\"isMinLines\"\n            @click=\"moveToNewPosition\"\n        >\n            {{ $tc('sw-settings-country.general.actions.moveBottom') }}\n        </sw-context-menu-item>\n\n        <sw-context-menu-item\n            variant=\"danger\"\n            :disabled=\"isMinLines\"\n            @click=\"onDelete\"\n        >\n            {{ $tc('global.default.delete') }}\n        </sw-context-menu-item>\n    </sw-context-button>\n</div>\n","import type { PropType, ComponentObjectPropsOptions } from 'vue';\nimport type { DragConfig } from 'src/app/directive/dragdrop.directive';\nimport template from './sw-multi-snippet-drag-and-drop.html.twig';\nimport './sw-multi-snippet-drag-and-drop.scss';\n\nconst { Component } = Cicada;\n\ninterface DragItem {\n    index: number;\n    linePosition?: number | null;\n    snippet: string[];\n}\n\nconst DEFAULT_MIN_LINES = 1 as number;\nconst DEFAULT_MAX_LINES = 10 as number;\n\n/**\n * @package buyers-experience\n *\n * @private\n */\nComponent.register('sw-multi-snippet-drag-and-drop', {\n    template,\n\n    compatConfig: Cicada.compatConfig,\n\n    inject: ['feature'],\n\n    props: {\n        value: {\n            type: Array as PropType<Array<string[]>>,\n            required: true,\n        },\n\n        totalLines: {\n            type: Number,\n            required: true,\n        },\n\n        linePosition: {\n            type: Number,\n            required: true,\n        },\n\n        isLoading: {\n            type: Boolean,\n            required: false,\n            default: false,\n        },\n\n        disabled: {\n            type: Boolean,\n            required: false,\n            default: false,\n        },\n\n        selectionDisablingMethod: {\n            type: Function,\n            required: false,\n            default: () => false,\n        },\n\n        dragConfig: {\n            type: Object,\n            required: false,\n            default(props: ComponentObjectPropsOptions<{ disabled: boolean }>): DragConfig<DragItem> {\n                return {\n                    delay: 200,\n                    dragGroup: 'sw-multi-snippet',\n                    validDragCls: 'is--valid-drag',\n                    preventEvent: true,\n                    disabled: props.disabled,\n                } as unknown as DragConfig<DragItem>;\n            },\n        },\n\n        dropConfig: {\n            type: Object,\n            required: false,\n            default(props: ComponentObjectPropsOptions<{ disabled: boolean }>): DragConfig<DragItem> {\n                return {\n                    delay: 200,\n                    dragGroup: 'sw-multi-snippet',\n                    validDragCls: 'is--valid-drag',\n                    preventEvent: true,\n                    disabled: props.disabled,\n                } as unknown as DragConfig<DragItem>;\n            },\n        },\n\n        getLabelProperty: {\n            type: Function,\n            required: false,\n            default: (value: string) => value,\n        },\n    },\n\n    data(): {\n        defaultConfig: DragConfig<DragItem>;\n    } {\n        return {\n            defaultConfig: {\n                delay: 200,\n                dragGroup: 'sw-multi-snippet',\n                validDragCls: 'is--valid-drag',\n                preventEvent: true,\n                disabled: this.disabled,\n            } as DragConfig<DragItem>,\n        };\n    },\n\n    computed: {\n        errorObject(): null {\n            return null;\n        },\n\n        mergedDragConfig(): DragConfig<DragItem> {\n            return {\n                ...this.defaultConfig,\n                // eslint-disable-next-line @typescript-eslint/unbound-method\n                onDragStart: this.onDragStart,\n                // eslint-disable-next-line @typescript-eslint/unbound-method\n                onDragEnter: this.onDragEnter,\n                // eslint-disable-next-line @typescript-eslint/unbound-method\n                onDrop: this.onDrop,\n                ...this.dragConfig,\n            } as DragConfig<DragItem>;\n        },\n\n        mergedDropConfig(): DragConfig {\n            return {\n                ...this.defaultConfig,\n                ...this.dropConfig,\n            } as DragConfig;\n        },\n\n        isMaxLines(): boolean {\n            return this.totalLines >= DEFAULT_MAX_LINES;\n        },\n\n        isMinLines(): boolean {\n            return this.totalLines <= DEFAULT_MIN_LINES;\n        },\n\n        /**\n         * @deprecated tag:v6.7.0 - Will be removed.\n         */\n        listeners() {\n            let listeners = {};\n\n            if (this.isCompatEnabled('INSTANCE_LISTENERS')) {\n                listeners = this.$listeners;\n            }\n\n            return listeners;\n        },\n    },\n\n    methods: {\n        onDragStart(config: DragConfig<DragItem>, element: HTMLElement, dragElement: HTMLElement): void {\n            this.$emit('drag-start', { config, element, dragElement });\n        },\n\n        onDragEnter(dragData: DragItem, dropData: DragItem) {\n            if (!dragData || !dropData) {\n                return;\n            }\n\n            this.$emit('drag-enter', { dragData, dropData });\n        },\n\n        onDrop(dragData: DragItem, dropData: DragItem) {\n            if (!dragData || !dropData) {\n                return;\n            }\n\n            if (dragData.linePosition === dropData.linePosition) {\n                const newValue = Object.assign([], this.value, {\n                    [dragData.index]: this.value[dropData.index],\n                    [dropData.index]: this.value[dragData.index],\n                });\n\n                this.$emit('update:value', this.linePosition, newValue);\n\n                return;\n            }\n\n            this.$emit('drop-end', this.linePosition, { dragData, dropData });\n        },\n\n        isSelectionDisabled(selection: $TSFixMe): boolean {\n            if (this.disabled) {\n                return true;\n            }\n\n            // eslint-disable-next-line @typescript-eslint/no-unsafe-return\n            return this.selectionDisablingMethod(selection);\n        },\n\n        onClickDismiss(index: number) {\n            this.$emit(\n                'update:value',\n                this.linePosition,\n                this.value.filter((_, key) => key !== index),\n            );\n        },\n\n        addNewLineAt(position: number) {\n            this.$emit('add-new-line', this.linePosition, position);\n        },\n\n        moveToNewPosition(position = null) {\n            this.$emit('position-move', this.linePosition, position);\n        },\n\n        onDelete() {\n            this.$emit('update:value', this.linePosition);\n        },\n\n        openModal() {\n            this.$emit('open-snippet-modal', this.linePosition);\n        },\n    },\n});\n","<div class=\"sw-settings-country-preview-template\">\n    <div v-html=\"displayFormattingAddress\"></div>\n</div>\n","import template from './sw-settings-country-preview-template.html.twig';\nimport './sw-settings-country-preview-template.scss';\n\nconst { Component } = Cicada;\n\n/**\n * @package buyers-experience\n *\n * @private\n */\nComponent.register('sw-settings-country-preview-template', {\n    template,\n\n    props: {\n        formattingAddress: {\n            type: String,\n            required: true,\n        },\n    },\n\n    computed: {\n        displayFormattingAddress(): string {\n            return this.formattingAddress;\n        },\n    },\n});\n","/**\n * @package buyers-experience\n */\nCicada.Service('privileges').addPrivilegeMappingEntry({\n    category: 'permissions',\n    parent: 'settings',\n    key: 'country',\n    roles: {\n        viewer: {\n            privileges: [\n                'country:read',\n                'country_state:read',\n                'custom_field_set:read',\n                'custom_field:read',\n                'custom_field_set_relation:read',\n                'currency:read',\n                'user_config:read',\n                'customer:read',\n                'salutation:read',\n                'customer_address:read',\n            ],\n            dependencies: [],\n        },\n        editor: {\n            privileges: [\n                'country:update',\n                'country_state:read',\n                'country_state:create',\n                'country_state:update',\n                'country_state:delete',\n            ],\n            dependencies: [\n                'country.viewer',\n            ],\n        },\n        creator: {\n            privileges: [\n                'country:create',\n            ],\n            dependencies: [\n                'country.viewer',\n                'country.editor',\n            ],\n        },\n        deleter: {\n            privileges: [\n                'country:delete',\n            ],\n            dependencies: [\n                'country.viewer',\n            ],\n        },\n    },\n});\n","/**\n * @package buyers-experience\n */\nimport './component/sw-settings-country-address-handling';\nimport './component/sw-settings-country-new-snippet-modal';\nimport './component/sw-multi-snippet-drag-and-drop';\nimport './component/sw-settings-country-preview-template';\n\nimport './acl';\n\nconst { Module } = Cicada;\n\n/* eslint-disable max-len, sw-deprecation-rules/private-feature-declarations */\nCicada.Component.register('sw-settings-country-list', () => import('./page/sw-settings-country-list'));\nCicada.Component.register('sw-settings-country-detail', () => import('./page/sw-settings-country-detail'));\nCicada.Component.extend(\n    'sw-settings-country-create',\n    'sw-settings-country-detail',\n    () => import('./page/sw-settings-country-create'),\n);\nCicada.Component.register('sw-country-state-detail', () => import('./component/sw-country-state-detail'));\nCicada.Component.register('sw-settings-country-general', () => import('./component/sw-settings-country-general'));\nCicada.Component.register('sw-settings-country-state', () => import('./component/sw-settings-country-state'));\nCicada.Component.register(\n    'sw-settings-country-currency-dependent-modal',\n    () => import('./component/sw-settings-country-currency-dependent-modal'),\n);\nCicada.Component.register(\n    'sw-settings-country-currency-hamburger-menu',\n    () => import('./component/sw-settings-country-currency-hamburger-menu'),\n);\n/* eslint-enable max-len, sw-deprecation-rules/private-feature-declarations */\n\n// eslint-disable-next-line sw-deprecation-rules/private-feature-declarations\nModule.register('sw-settings-country', {\n    type: 'core',\n    name: 'settings-country',\n    title: 'sw-settings-country.general.mainMenuItemGeneral',\n    description: 'Country section in the settings module',\n    color: '#9AA8B5',\n    icon: 'regular-cog',\n    favicon: 'icon-module-settings.png',\n    entity: 'country',\n\n    routes: {\n        index: {\n            component: 'sw-settings-country-list',\n            path: 'index',\n            meta: {\n                parentPath: 'sw.settings.index',\n                privilege: 'country.viewer',\n            },\n        },\n        detail: {\n            component: 'sw-settings-country-detail',\n            path: 'detail/:id',\n            meta: {\n                parentPath: 'sw.settings.country.index',\n                privileges: [\n                    'country.viewer',\n                    'country.editor',\n                ],\n            },\n\n            redirect: {\n                name: 'sw.settings.country.detail.general',\n            },\n\n            children: {\n                general: {\n                    component: 'sw-settings-country-general',\n                    path: 'general',\n                    meta: {\n                        parentPath: 'sw.settings.country.index',\n                        privileges: [\n                            'country.editor',\n                            'country.creator',\n                        ],\n                    },\n                },\n\n                state: {\n                    component: 'sw-settings-country-state',\n                    path: 'state',\n                    meta: {\n                        parentPath: 'sw.settings.country.index',\n                        privileges: [\n                            'country.editor',\n                            'country.creator',\n                        ],\n                    },\n                },\n\n                'address-handling': {\n                    component: 'sw-settings-country-address-handling',\n                    path: 'address-handling',\n                    meta: {\n                        parentPath: 'sw.settings.country.index',\n                        privileges: [\n                            'country.editor',\n                            'country.creator',\n                        ],\n                    },\n                },\n            },\n        },\n        create: {\n            component: 'sw-settings-country-create',\n            path: 'create',\n            meta: {\n                parentPath: 'sw.settings.country.index',\n                privilege: 'country.creator',\n            },\n\n            redirect: {\n                name: 'sw.settings.country.create.general',\n            },\n\n            children: {\n                general: {\n                    component: 'sw-settings-country-general',\n                    path: 'general',\n                    meta: {\n                        parentPath: 'sw.settings.country.index',\n                        privilege: 'country.creator',\n                    },\n                },\n\n                state: {\n                    component: 'sw-settings-country-state',\n                    path: 'state',\n                    meta: {\n                        parentPath: 'sw.settings.country.index',\n                        privilege: 'country.creator',\n                    },\n                },\n\n                'address-handling': {\n                    component: 'sw-settings-country-address-handling',\n                    path: 'address-handling',\n                    meta: {\n                        parentPath: 'sw.settings.country.index',\n                        privileges: 'country.creator',\n                    },\n                },\n            },\n        },\n    },\n\n    settingsItem: {\n        group: 'shop',\n        to: 'sw.settings.country.index',\n        icon: 'regular-map',\n        privilege: 'country.viewer',\n    },\n});\n"],"file":"assets/index-BlJ7P2fB.js"}