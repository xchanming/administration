const o=`<div class="sw-order-create-general"> <sw-card class="sw-order-create-general__general-info" position-identifier="sw-order-create-general-info" :title="$tc('sw-order.createBase.generalTab.labelGeneralInfoCard')" > <sw-order-create-general-info :cart="cart" :context="context" :is-loading="isLoading" /> </sw-card> <sw-extension-component-section position-identifier="sw-order-create-base-line-items__before" /> <sw-card class="sw-order-create-general__line-items" position-identifier="sw-order-create-line-items" :is-loading="isLoading" :title="$tc('sw-order.createBase.generalTab.labelLineItemsCard')" > <template #grid> <sw-order-line-items-grid-sales-channel editable :cart="cart" :currency="currency" :sales-channel-id="context.salesChannel.id" :is-loading="isLoading" :is-customer-active="isCustomerActive" @on-save-item="onSaveItem" @on-remove-items="onRemoveItems" /> <sw-card-section v-show="cart.lineItems.length" divider="top" slim > <sw-container class="sw-order-create-summary" columns="1fr 1fr" > <sw-description-list class="sw-order-create-summary__data" grid="1fr 1fr" > <dt>{{ $tc('sw-order.createBase.summaryLabelAmount') }}</dt> <dd>{{ currencyFilter(cart.price ? cart.price.positionPrice : 0, currency.isoCode, currency.totalRounding.decimals) }}</dd> <template v-if="cartDelivery"> <dt>{{ $tc('sw-order.createBase.summaryLabelShippingCosts') }}</dt> <dd> <sw-order-saveable-field v-tooltip="{ showDelay: 300, message: shippingCostsDetail, disabled: taxStatus === 'tax-free' }" type="number" editable :value="cartDelivery.shippingCosts.totalPrice" @value-change="onShippingChargeEdited" @update:value="onShippingChargeUpdated" > {{ currencyFilter(cartDelivery.shippingCosts.totalPrice, currency.isoCode, currency.totalRounding.decimals) }} </sw-order-saveable-field> </dd> </template> <template v-for="(delivery, index) in cartDeliveryDiscounts" :key="index" > <dt> {{ $tc('sw-order.createBase.discountLabelShippingCosts') }} </dt> <dd> {{ currencyFilter(delivery.shippingCosts.totalPrice, currency.isoCode, currency.totalRounding.decimals) }} </dd> </template> <template v-if="taxStatus !== 'tax-free'"> <dt><strong>{{ $tc('sw-order.createBase.summaryLabelAmountWithoutTaxes') }}</strong></dt> <dd> <strong>{{ currencyFilter(cart.price ? cart.price.netPrice : 0, currency.isoCode, currency.totalRounding.decimals) }}</strong> </dd> </template> <template v-if="taxStatus !== 'tax-free'"> <template v-for="(calculatedTax, index) in filteredCalculatedTaxes" :key="index" > <dt> {{ $tc('sw-order.createBase.summaryLabelTaxes', 1, { taxRate: calculatedTax.taxRate }) }} </dt> <dd> {{ currencyFilter(calculatedTax.tax, currency.isoCode, currency.totalRounding.decimals) }} </dd> </template> </template> <template v-if="taxStatus !== 'tax-free'"> <dt><strong>{{ $tc('sw-order.createBase.summaryLabelAmountTotal') }}</strong></dt> <dd> <strong>{{ currencyFilter(orderTotal, currency.isoCode, currency.totalRounding.decimals) }}</strong> </dd> <template v-if="displayRounded"> <dt><strong>{{ $tc('sw-order.createBase.summaryLabelAmountTotalRounded') }}</strong> </dt> <dd> <strong>{{ currencyFilter(cart.price ? cart.price.totalPrice : 0, currency.isoCode, currency.totalRounding.decimals) }}</strong> </dd> </template> </template> <template v-if="taxStatus === 'tax-free'"> <dt><strong>{{ $tc('sw-order.detailBase.summaryLabelAmount') }}</strong></dt> <dd> <strong>{{ currencyFilter(cart.price ? cart.price.totalPrice : 0, currency.isoCode, currency.totalRounding.decimals) }}</strong> </dd> </template> </sw-description-list> </sw-container> </sw-card-section> </template> </sw-card> <sw-extension-component-section position-identifier="sw-order-create-base-line-items__after" /> </div>`,{Component:d,State:r,Mixin:n,Utils:l}=Cicada,{get:c,format:u,array:m}=l,p=d.wrapComponentConfig({template:o,compatConfig:Cicada.compatConfig,mixins:[n.getByName("notification"),n.getByName("cart-notification")],data(){return{isLoading:!1}},computed:{customer(){return r.get("swOrder").customer},cart(){return r.get("swOrder").cart},currency(){return r.get("swOrder").context.currency},context(){return r.get("swOrder").context},isCustomerActive(){return r.getters["swOrder/isCustomerActive"]},cartDelivery(){return c(this.cart,"deliveries[0]",null)},cartDeliveryDiscounts(){return m.slice(this.cart.deliveries,1)||[]},taxStatus(){return c(this.cart,"price.taxStatus","")},shippingCostsDetail(){if(!this.cartDelivery)return null;const t=this.sortByTaxRate(this.cartDelivery.shippingCosts.calculatedTaxes).map(a=>{var i;return this.$tc("sw-order.createBase.shippingCostsTax",0,{taxRate:a.taxRate,tax:u.currency(a.tax,this.currency.isoCode,(i=this.currency.totalRounding)==null?void 0:i.decimals)})});return`${this.$tc("sw-order.createBase.tax")}<br>${t.join("<br>")}`},filteredCalculatedTaxes(){return!this.cart.price||!this.cart.price.calculatedTaxes?[]:this.sortByTaxRate(this.cart.price.calculatedTaxes??[]).filter(e=>e.tax!==0)},displayRounded(){return this.cart.price?this.cart.price.rawTotal!==this.cart.price.totalPrice:!1},orderTotal(){return this.cart.price?this.displayRounded?this.cart.price.rawTotal:this.cart.price.totalPrice:0},currencyFilter(){return Cicada.Filter.getByName("currency")}},created(){this.createdComponent()},methods:{createdComponent(){if(!this.customer){this.$nextTick(()=>{this.$router.push({name:"sw.order.create.initial"})});return}this.isLoading=!0,this.loadCart().finally(()=>{this.isLoading=!1})},onSaveItem(e){var t;return this.isLoading=!0,r.dispatch("swOrder/saveLineItem",{salesChannelId:(t=this.customer)==null?void 0:t.salesChannelId,contextToken:this.cart.token,item:e}).finally(()=>{this.isLoading=!1})},onShippingChargeEdited(){var e;this.isLoading=!0,r.dispatch("swOrder/modifyShippingCosts",{salesChannelId:(e=this.customer)==null?void 0:e.salesChannelId,contextToken:this.cart.token,shippingCosts:this.cartDelivery.shippingCosts}).catch(t=>{this.$emit("error",t)}).finally(()=>{this.isLoading=!1})},onRemoveItems(e){var t;return this.isLoading=!0,r.dispatch("swOrder/removeLineItems",{salesChannelId:(t=this.customer)==null?void 0:t.salesChannelId,contextToken:this.cart.token,lineItemKeys:e}).then(()=>{e.forEach(a=>{const i=r.get("swOrder").promotionCodes.find(s=>s.discountId===a);i&&r.commit("swOrder/setPromotionCodes",r.get("swOrder").promotionCodes.filter(s=>s.discountId!==i.discountId))})}).finally(()=>{this.isLoading=!1})},loadCart(){var e;return r.dispatch("swOrder/getCart",{salesChannelId:(e=this.customer)==null?void 0:e.salesChannelId,contextToken:this.cart.token})},sortByTaxRate(e){return e.sort((t,a)=>t.taxRate-a.taxRate)},onShippingChargeUpdated(e){const t=Math.abs(e);this.cartDelivery.shippingCosts.unitPrice=t,this.cartDelivery.shippingCosts.totalPrice=t}}});export{p as default};
//# sourceMappingURL=index-O3vcH0Kf.js.map
