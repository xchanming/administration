const s=`{% block sw_media_sidebar %} <div class="sw-media-sidebar" :class="mediaSidebarClasses" > {% block sw_media_sidebar_headline %} <h3 v-if="headLine" class="sw-media-sidebar__headline" > {{ headLine }} </h3> {% endblock %} {% block sw_media_sidebar_item_quickinfo_content %} <div class="sw-media-sidebar__quickinfo-scroll-container"> <sw-media-quickinfo v-if="isSingleFile && firstEntity.getEntityName() === 'media'" :item="firstEntity" :editable="editable" v-bind="filteredAttributes" v-on="listeners" @update:item="onFirstItemUpdated" /> <sw-media-folder-info v-else-if="isSingleFile && firstEntity.getEntityName() === 'media_folder'" :media-folder="firstEntity" :editable="editable" v-bind="filteredAttributes" v-on="listeners" /> <sw-media-quickinfo-multiple v-else-if="isMultipleFile" :editable="editable" :items="items" v-bind="filteredAttributes" v-on="listeners" /> <sw-media-folder-info v-else-if="currentFolder" :media-folder="currentFolder" :editable="editable" v-bind="filteredAttributes" @media-folder-renamed="onMediaFolderRenamed" v-on="listeners" /> <sw-empty-state v-else :title="$tc('sw-media.sidebar.labelNoMediaSelected')" > <template #icon> <img :src="assetFilter('/administration/static/img/empty-states/media-empty-state.svg')" :alt="$tc('sw-media.sidebar.labelNoMediaSelected')" > </template> </sw-empty-state> </div> {% endblock %} </div> {% endblock %}`,{Filter:a,Context:r}=Cicada,d={template:s,compatConfig:Cicada.compatConfig,inject:["repositoryFactory"],emits:["media-sidebar-folder-renamed"],mixins:[Cicada.Mixin.getByName("notification")],props:{items:{required:!0,type:Array,validator(t){return t.filter(i=>!["media","media_folder"].includes(i.getEntityName())).length===0}},currentFolderId:{type:String,required:!1,default:null},editable:{type:Boolean,required:!1,default:!1}},data(){return{currentFolder:null}},computed:{mediaRepository(){return this.repositoryFactory.create("media")},mediaFolderRepository(){return this.repositoryFactory.create("media_folder")},mediaNameFilter(){return a.getByName("mediaName")},mediaSidebarClasses(){return{"no-headline":!this.headLine}},isSingleFile(){return this.items.length===1},isMultipleFile(){return this.items.length>1},headLine(){return this.isSingleFile?this.firstEntity.getEntityName()==="media"?this.mediaNameFilter(this.firstEntity):this.firstEntity.name:this.isMultipleFile?this.getSelectedFilesCount:this.currentFolder?this.currentFolder.name:null},getSelectedFilesCount(){return`${this.$tc("sw-media.sidebar.labelHeadlineMultiple",this.items.length,{count:this.items.length})}`},firstEntity(){return this.items[0]},assetFilter(){return Cicada.Filter.getByName("asset")},listeners(){return this.isCompatEnabled("INSTANCE_LISTENERS")?this.$listeners:{}},filteredAttributes(){if(this.isCompatEnabled("INSTANCE_LISTENERS"))return{};const t={};return Object.entries(this.$attrs).forEach(([e,i])=>{e.startsWith("on")&&typeof i=="function"&&(t[e]=i)}),t}},watch:{currentFolderId(){this.fetchCurrentFolder()}},created(){this.createdComponent()},methods:{createdComponent(){this.fetchCurrentFolder()},async fetchCurrentFolder(){if(!this.currentFolderId){this.currentFolder=null;return}this.currentFolder=await this.mediaFolderRepository.get(this.currentFolderId,r.api)},onMediaFolderRenamed(){this.$emit("media-sidebar-folder-renamed")},async onFirstItemUpdated(t){const e=this.items[0];try{e.isLoading=!0,Object.assign(this.items[0],t),await this.mediaRepository.save(e,r.api),this.createNotificationSuccess({message:this.$tc("global.sw-media-media-item.notification.settingsSuccess.message")})}catch{this.createNotificationError({message:this.$tc("global.notification.unspecifiedSaveErrorMessage")})}finally{e.isLoading=!1}}}};export{d as default};
//# sourceMappingURL=index-ngKGzbZZ.js.map
