import{C as g}from"./index-UoIeQ8lD.js";import"./administration-d9Z5Qnc-.js";import"./channel-Cvr-E4M4.js";import"./main-BVD2thQ1.js";import"./user-config.class-N_oi0Wh7.js";import"./store-BoTaGDaZ.js";const u=`{% block sw_cms_sidebar %} <sw-sidebar class="sw-cms-sidebar"> {% block sw_cms_sidebar_page_settings %} <sw-sidebar-item ref="pageConfigSidebar" icon="regular-cog" :title="$tc('sw-cms.detail.sidebar.titlePageSettings')" :has-simple-badge="hasPageConfigErrors" badge-type="error" :disabled="page.locked || disabled" > {% block sw_cms_sidebar_page_settings_content %} <sw-sidebar-collapse :expand-on-loading="true"> {% block sw_cms_sidebar_page_settings_header %} <template #header> <span>{{ $tc('sw-cms.detail.sidebar.headerPageSettings') }}</span> </template> {% endblock %} {% block sw_cms_sidebar_page_settings_form %} <template #content> <div class="sw-cms-sidebar__settings"> {% block sw_cms_sidebar_page_settings_name_field %} <sw-text-field v-model:value="page.name" :label="$tc('sw-cms.detail.label.pageName')" :placeholder="placeholder(page, 'name')" :error="pageNameError" /> {% endblock %} {% block sw_cms_sidebar_page_settings_css_class_field %} <sw-text-field v-model:value="page.cssClass" :label="$tc('sw-cms.detail.label.pageCssClass')" :placeholder="placeholder(page, 'cssClass')" :help-text="$tc('sw-cms.detail.helpText.cssClassField')" /> {% endblock %} {% block sw_cms_sidebar_page_settings_type_field %} <sw-select-field v-tooltip.bottom="tooltipDisabled" :value="page.type" :label="$tc('sw-cms.detail.label.pageTypeSelection')" :disabled="!isSystemDefaultLanguage || page.type === 'product_detail' || undefined" @update:value="onPageTypeChange" > {% block sw_cms_sidebar_page_settings_type_field_options %} <option v-for="pageType in pageTypes" :key="pageType.name" :value="pageType.name" :disabled="isDisabledPageType(pageType) || undefined" > {{ $tc(pageType.title) }} </option> {% endblock %} </sw-select-field> {% endblock %} {% block sw_cms_sidebar_page_settings_demo_field %} <sw-entity-single-select v-if="demoEntity !== null" v-model:value="demoEntityId" :label="$tc('sw-cms.detail.label.demoEntity')" :placeholder="$tc('sw-cms.detail.placeholder.demoEntity')" :entity="demoEntity" :criteria="demoCriteria" :context="demoContext" show-clearable-button @update:value="onDemoEntityChange" > {% block sw_cms_sidebar_page_settings_demo_field_variant_label %} <template v-if="demoEntity === 'product'" #selection-label-property="{ item }" > <sw-product-variant-info :variations="item.variation"> {{ item.translated.name || item.name }} </sw-product-variant-info> </template> {% endblock %} {% block sw_cms_sidebar_page_settings_demo_field_result_item %} <template v-if="demoEntity === 'product'" #result-item="{ item, index }" > <sw-select-result v-bind="{ item, index }" > {% block sw_cms_sidebar_page_settings_demo_field_result_label %} <span class="sw-select-result__result-item-text"> <sw-product-variant-info :variations="item.variation"> {{ item.translated.name || item.name }} </sw-product-variant-info> </span> {% endblock %} </sw-select-result> </template> {% endblock %} </sw-entity-single-select> {% endblock %} </div> </template> {% endblock %} </sw-sidebar-collapse> {% endblock %} </sw-sidebar-item> {% endblock %} {% block sw_cms_sidebar_block_overview %} <sw-sidebar-item ref="blockSelectionSidebar" icon="regular-plus-circle" :title="addBlockTitle" :disabled="currentDeviceView === 'form' || !isSystemDefaultLanguage || page.locked || disabled" > {% block sw_cms_sidebar_block_overview_content %} <div class="sw-cms-sidebar__block-overview"> {% block sw_cms_sidebar_block_overview_category %} <div class="sw-cms-sidebar__block-category"> <sw-select-field v-model:value="currentBlockCategory" :label="$tc('sw-cms.detail.label.blockCategorySelection')" > {% block sw_cms_sidebar_block_overview_category_options %} <option v-for="blockCategory in cmsBlockCategories" :key="blockCategory.value" :value="blockCategory.value" > {{ $tc(blockCategory.label) }} </option> {% endblock %} </sw-select-field> </div> {% endblock %} {% block sw_cms_sidebar_block_overview_preview %} <div class="sw-cms-sidebar__block-selection" > <sw-empty-state v-if="cmsBlocksBySelectedBlockCategory.length === 0 && currentBlockCategory === 'favorite'" icon="solid-heart" :absolute="false" :title="$tc('sw-cms.detail.title.blockFavoriteEmptyState')" > {{ $tc('sw-cms.detail.label.blockFavoriteEmptyState') }} </sw-empty-state> <div v-for="block in cmsBlocksBySelectedBlockCategory" :key="block.name" class="sw-cms-sidebar__block" > <div class="sw-cms-sidebar__block-preview-with-actions"> <div v-draggable="{ dragGroup: 'cms-stage', data: { block }, onDrop: onBlockStageDrop }" class="sw-cms-sidebar__block-preview" :class="{ 'has--no-label': !block.label }" > {% block sw_cms_sidebar_block_overview_preview_component %} <component :is="block.previewComponent" :block="block" /> {% endblock %} </div> {% block sw_cms_sidebar_block_overview_preview_favorite_action %} <sw-button class="sw-cms-sidebar__block-favorite" size="small" square block :disabled="block.appName === 'SwagCeToRiseUpsellingApp'" @click="onToggleBlockFavorite(block.name)" > <sw-icon v-if="cmsBlockFavorites.isFavorite(block.name)" name="solid-heart" size="20" class="sw-cms-sidebar__icon-cms-block-favorite" /> <sw-icon v-else name="regular-heart" size="20" class="sw-cms-sidebar__icon-cms-block-favorite" /> </sw-button> {% endblock %} </div> {% block sw_cms_sidebar_block_overview_preview_label %} <span v-if="block.label" class="sw-cms-sidebar__block-label" > {{ $tc(block.label) }} </span> {% endblock %} </div> </div> {% endblock %} </div> {% endblock %} </sw-sidebar-item> {% endblock %} {% block sw_cms_sidebar_block_and_section_settings %} <sw-sidebar-item ref="itemConfigSidebar" icon="regular-file-edit" :title="sidebarItemSettings" :disabled="(selectedBlock === null && selectedSection === null) || page.locked || disabled" @close-content="onCloseBlockConfig" > {% block sw_cms_sidebar_block_settings %} <div class="sw-cms-sidebar__block-settings"> <template v-if="selectedBlock !== null"> {% block sw_cms_sidebar_block_settings_content %} <sw-sidebar-collapse :expand-on-loading="true"> {% block sw_cms_sidebar_block_settings_header %} <template #header> <span> {{ $tc('sw-cms.sidebar.contentMenu.generalSettings') }} </span> </template> {% endblock %} {% block sw_cms_sidebar_block_settings_form %} <template #content> <sw-cms-block-config :block="selectedBlock" @block-delete="onBlockDelete" @block-duplicate="onBlockDuplicate" /> </template> {% endblock %} </sw-sidebar-collapse> {% endblock %} {% block sw_cms_sidebar_block_layout_settings_content %} <sw-sidebar-collapse :expand-on-loading="false"> {% block sw_cms_sidebar_block_layout_settings_header %} <template #header> <span> {{ $tc('sw-cms.sidebar.contentMenu.layoutSettings') }}</span> </template> {% endblock %} {% block sw_cms_sidebar_block_layout_settings_form %} <template #content> <sw-cms-block-layout-config :block="selectedBlock" /> </template> {% endblock %} </sw-sidebar-collapse> {% endblock %} <sw-sidebar-collapse :expand-on-loading="false"> <template #header> <span>{{ $tc('sw-cms.sidebar.contentMenu.visibilitySettings') }}</span> </template> <template #content> <sw-cms-visibility-config class="sw-cms-sidebar__visibility-config-block" :visibility="selectedBlock.visibility" @visibility-change="(viewport, isVisible) => onVisibilityChange(selectedBlock, viewport, isVisible)" /> </template> </sw-sidebar-collapse> </template> </div> {% endblock %} {% block sw_cms_sidebar_section_settings %} <div class="sw-cms-sidebar__section-settings"> <template v-if="selectedSection !== null"> {% block sw_cms_sidebar_section_settings_content %} <sw-sidebar-collapse :expand-on-loading="true"> {% block sw_cms_sidebar_section_settings_header %} <template #header> <span> {{ $tc('sw-cms.sidebar.contentMenu.generalSettings') }} </span> </template> {% endblock %} {% block sw_cms_sidebar_section_settings_form %} <template #content> <sw-cms-section-config :section="selectedSection" @section-duplicate="onSectionDuplicate" @section-delete="onSectionDelete" /> </template> {% endblock %} </sw-sidebar-collapse> <sw-sidebar-collapse :expand-on-loading="false"> <template #header> <span>{{ $tc('sw-cms.sidebar.contentMenu.visibilitySettings') }}</span> </template> <template #content> <sw-cms-visibility-config class="sw-cms-sidebar__visibility-config-section" :visibility="selectedSection.visibility" @visibility-change="(viewport, isVisible) => onVisibilityChange(selectedSection, viewport, isVisible)" /> </template> </sw-sidebar-collapse> {% endblock %} </template> </div> {% endblock %} </sw-sidebar-item> {% endblock %} {% block sw_cms_sidebar_navigator %} <sw-sidebar-item ref="blockNavigator" icon="regular-layer-group" :title="$tc('sw-cms.detail.sidebar.titleNavigator')" :disabled="!page.sections.length === 0 || currentDeviceView === 'form' || page.locked || disabled" @click="onSidebarNavigatorClick" > {% block sw_cms_sidebar_navigator_content %} <div class="sw-cms-sidebar__navigator"> {% block sw_cms_sidebar_navigator_section %} <div v-for="(section, sectionIndex) in page.sections" :id="\`sw-cms-sidebar__section-\${section.id}\`" :key="section.id" class="sw-cms-sidebar__navigator-section" > {% block sw_cms_sidebar_navigator_section_header %} <div class="sw-cms-sidebar__navigator-section-header"> <template v-if="section.name"> {{ $tc('sw-cms.section.layoutSection') }} - {{ section.name }} </template> <template v-else-if="section.type === 'sidebar'"> {{ $tc('sw-cms.section.isSidebar') }} </template> <template v-else> {{ $tc('sw-cms.section.isDefault') }} </template> {% block sw_cms_sidebar_navigator_section_menu %} <sw-context-button :key="section.position"> {% block sw_cms_sidebar_navigator_section_menu_move_up %} <sw-context-menu-item class="sw-cms-sidebar__navigator-section-move-up" :disabled="section.position === 0 || undefined" @click="moveSectionUp(section)" > {{ $tc('sw-cms.sidebar.contentMenu.moveUp') }} </sw-context-menu-item> {% endblock %} {% block sw_cms_sidebar_navigator_section_menu_move_down %} <sw-context-menu-item class="sw-cms-sidebar__navigator-section-move-down" :disabled="section.position === page.sections.length - 1 || undefined" @click="moveSectionDown(section)" > {{ $tc('sw-cms.sidebar.contentMenu.moveDown') }} </sw-context-menu-item> {% endblock %} {% block sw_cms_sidebar_navigator_section_menu_settings %} <sw-context-menu-item class="sw-cms-sidebar__navigator-section-settings" @click="openSectionSettings(sectionIndex)" > {{ $tc('sw-cms.sidebar.contentMenu.settings') }} </sw-context-menu-item> {% endblock %} {% block sw_cms_sidebar_navigator_section_menu_duplicate %} <sw-context-menu-item class="sw-cms-sidebar__navigator-section-duplicate" :disabled="!sectionIsDuplicable(section)" @click="onSectionDuplicate(section)" > {{ $tc('global.default.duplicate') }} </sw-context-menu-item> {% endblock %} {% block sw_cms_sidebar_navigator_section_menu_delete %} <sw-context-menu-item class="sw-cms-sidebar__navigator-section-delete" variant="danger" @click="onSectionDelete(section.id)" > {{ $tc('sw-cms.general.buttonDelete') }} </sw-context-menu-item> {% endblock %} </sw-context-button> {% endblock %} </div> {% endblock %} {% block sw_cms_sidebar_navigator_main_elements %} <template v-if="getMainContentBlocks(section.blocks).length > 0"> {% block sw_cms_sidebar_navigator_main_element %} <template v-for="block in getMainContentBlocks(section.blocks)" :key="block.id" > <sw-cms-sidebar-nav-element v-draggable="getDragData(block, sectionIndex)" v-droppable="getDropData(block, sectionIndex)" :block="block" class="sw-cms-sidebar__navigator-block" :removable="blockIsRemovable(block)" :duplicable="blockIsDuplicable(block)" :class="{ 'is--dragging': block.isDragging }" @block-delete="onBlockDelete($event, section)" @block-duplicate="onBlockDuplicate($event, section)" /> </template> {% endblock %} </template> <template v-else> {% block sw_cms_sidebar_navigator_main_empty %} <div :key="section.id + '_main'" v-droppable="getDropData({ position: 0, sectionPosition: 'main' }, sectionIndex)" class="sw-cms-sidebar__navigator-empty-element" > {{ $tc('sw-cms.detail.label.addBlocks') }} </div> {% endblock %} </template> {% endblock %} <template v-if="section.type === 'sidebar'"> <div class="sw-cms-sidebar__navigator-section-spacer"></div> {% block sw_cms_sidebar_navigator_sidebar_elements %} <template v-if="getSidebarContentBlocks(section.blocks).length > 0"> {% block sw_cms_sidebar_navigator_sidebar_element %} <template v-for="block in getSidebarContentBlocks(section.blocks)" :key="block.id" > <sw-cms-sidebar-nav-element v-draggable="getDragData(block, sectionIndex)" v-droppable="getDropData(block, sectionIndex)" :block="block" :removable="blockIsRemovable(block)" class="sw-cms-sidebar__navigator-block is--sidebar" :class="{ 'is--dragging': block.isDragging }" @block-delete="onBlockDelete($event, section)" @block-duplicate="onBlockDuplicate($event, section)" /> </template> {% endblock %} </template> <template v-else> {% block sw_cms_sidebar_navigator_sidebar_empty %} <div :key="section.id + '_sidebar'" v-droppable="getDropData({ position: 0, sectionPosition: 'sidebar' }, sectionIndex)" class="sw-cms-sidebar__navigator-empty-element" > {{ $tc('sw-cms.detail.label.addBlocks') }} </div> {% endblock %} </template> {% endblock %} </template> </div> {% endblock %} </div> {% endblock %} </sw-sidebar-item> {% endblock %} {% block sw_cms_sidebar_layout_assignment %} <sw-sidebar-item ref="layoutAssignment" class="sw-cms-sidebar__layout-assignment" icon="regular-share" :title="$tc('sw-cms.detail.sidebar.titleLayoutAssignment')" :disabled="page.locked || disabled" > {% block sw_cms_sidebar_layout_assignment_content %} <div class="sw-cms-sidebar__layout-assignment-content"> {% block sw_cms_sidebar_layout_assignment_headline %} <h3 class="sw-cms-sidebar__layout-assignment-headline"> {{ $tc('sw-cms.sidebar.layoutAssignment.headline') }} </h3> {% endblock %} {% block sw_cms_sidebar_layout_assignment_info_text %} <p class="sw-cms-sidebar__layout-assignment-info-text"> {{ $tc('sw-cms.sidebar.layoutAssignment.infoText') }} </p> {% endblock %} {% block sw_cms_sidebar_layout_assignment_action_open %} <sw-button variant="ghost" size="small" class="sw-cms-sidebar__layout-assignment-open" @click="onOpenLayoutAssignment" > {{ $tc('sw-cms.sidebar.layoutAssignment.actionAssignLayout') }} </sw-button> {% endblock %} </div> {% endblock %} <div v-if="showDefaultLayoutSelection" class="sw-cms-sidebar__layout-set-as-default-content" > <h3 class="sw-cms-sidebar__layout-set-as-default-headline"> {{ $tc('sw-cms.sidebar.layoutSetAsDefault.headline') }} </h3> <p class="sw-cms-sidebar__layout-set-as-default-info-text"> {{ $tc('sw-cms.components.setDefaultLayoutModal.infoText', page.type === 'product_detail') }} </p> <sw-button variant="ghost" size="small" class="sw-cms-sidebar__layout-set-as-default-open" @click="onOpenLayoutSetAsDefault" > {{ $tc('sw-cms.sidebar.layoutSetAsDefault.actionSetAsDefaultLayout') }} </sw-button> </div> </sw-sidebar-item> {% endblock %} {% block sw_cms_sidebar_navigator_confirm_modal %} <sw-modal v-if="showSidebarNavigatorModal" class="sw-cms-sidebar__navigator-confirm-modal" :title="$tc('global.default.warning')" variant="small" @modal-close="onSidebarNavigationCancel" > {% block sw_cms_sidebar_navigator_confirm_modal_content %} <p class="sw-confirm-modal__text"> {{ $tc('sw-cms.detail.sidebar.confirmTextNavigator') }} {% block sw_cms_sidebar_navigator_confirm_modal_content_input_reminder %} <sw-checkbox-field v-model:value="navigatorDontRemind" class="sw-cms-sidebar__navigator-confirm-modal-reminder" :label="$tc('sw-cms.detail.sidebar.confirmReminderNavigator')" /> {% endblock %} </p> {% endblock %} <template #modal-footer> {% block sw_cms_sidebar_navigator_confirm_modal_content_footer %} {% block sw_cms_sidebar_navigator_confirm_modal_content_footer_cancel %} <sw-button class="sw-cms-sidebar__navigator-confirm-modal-cancel" size="small" @click="onSidebarNavigationCancel" > {{ $tc('global.default.cancel') }} </sw-button> {% endblock %} {% block sw_cms_sidebar_navigator_confirm_modal_content_footer_confirm %} <sw-button class="sw-cms-sidebar__navigator-confirm-modal-confirm" variant="primary" size="small" @click="onSidebarNavigationConfirm" > {{ $tc('global.default.confirm') }} </sw-button> {% endblock %} {% endblock %} </template> </sw-modal> {% endblock %} </sw-sidebar> {% endblock %}`,{Component:v,Mixin:p}=Shopware,{mapPropertyErrors:w}=v.getComponentHelper(),{Criteria:_}=Shopware.Data,{cloneDeep:k}=Shopware.Utils.object,f=Shopware.Utils.types,$=Shopware.Component.wrapComponentConfig({template:u,inject:["acl","cmsService","repositoryFactory","feature","cmsBlockFavorites","cmsPageTypeService"],emits:["page-type-change","demo-entity-change","page-save","block-stage-drop","current-block-change","section-duplicate","block-duplicate","page-update","open-layout-assignment","open-layout-set-as-default"],mixins:[p.getByName("cms-state"),p.getByName("placeholder")],props:{page:{type:Object,required:!0},demoEntity:{type:String,required:!1,default:null},demoEntityIdProp:{type:String,required:!1,default:null},disabled:{type:Boolean,required:!1,default:!1},isDefaultLayout:{type:Boolean,required:!1,default:!1}},data(){return{demoEntityId:this.demoEntityIdProp,currentBlockCategory:"text",currentDragSectionIndex:null,showSidebarNavigatorModal:!1,navigatorDontRemind:!1}},computed:{pageTypes(){return this.cmsPageTypeService.getTypes()},blockRepository(){return this.repositoryFactory.create("cms_block")},slotRepository(){return this.repositoryFactory.create("cms_slot")},cmsBlocks(){const e=Shopware.Store.get("cmsPage").currentPageType;if(!e)return{};const t=Object.entries(this.cmsService.getCmsBlockRegistry()).filter(([i,s])=>s&&!s.hidden&&this.cmsService.isBlockAllowedInPageType(i,e));return Object.fromEntries(t)},cmsBlockCategories(){const e=[{value:"favorite",label:"sw-cms.detail.label.blockCategoryFavorite"},{value:"text",label:"sw-cms.detail.label.blockCategoryText"},{value:"image",label:"sw-cms.detail.label.blockCategoryImage"},{value:"video",label:"sw-cms.detail.label.blockCategoryVideo"},{value:"text-image",label:"sw-cms.detail.label.blockCategoryTextImage"},{value:"commerce",label:"sw-cms.detail.label.blockCategoryCommerce"},{value:"sidebar",label:"sw-cms.detail.label.blockCategorySidebar"},{value:"form",label:"sw-cms.detail.label.blockCategoryForm"},{value:"html",label:"sw-cms.detail.label.blockCategoryHtml"}];Object.values(this.cmsService.getCmsBlockRegistry()).some(s=>(s==null?void 0:s.category)==="app")&&e.push({value:"app",label:"sw-cms.detail.label.blockCategoryApp"});const t=Object.values(this.cmsService.getCmsBlockRegistry()).map(s=>s==null?void 0:s.category);return[...new Set(t)].forEach(s=>{e.some(o=>o.value===s)||e.push({value:s,label:`apps.sw-cms.detail.label.blockCategory.${s}`})}),e},mediaRepository(){return this.repositoryFactory.create("media")},addBlockTitle(){return this.isSystemDefaultLanguage?this.$tc("sw-cms.detail.sidebar.titleBlockOverview"):this.$tc("sw-cms.general.disabledAddingBlocksToolTip")},pageSections(){return this.page.sections},sidebarItemSettings(){return this.selectedBlock!==null?this.$tc("sw-cms.detail.sidebar.titleBlockSettings"):this.$tc("sw-cms.detail.sidebar.titleSectionSettings")},tooltipDisabled(){return{message:this.$tc("sw-cms.detail.tooltip.cannotSelectProductPageLayout"),disabled:this.page.type!=="product_detail"}},demoCriteria(){if(this.demoEntity==="product"){const e=new _(1,25);return e.addAssociation("options.group"),e}return new _(1,25)},demoContext(){return this.demoEntity==="product"?{...Shopware.Context.api,inheritance:!0}:Shopware.Context.api},blockTypes(){return Object.keys(this.cmsService.getCmsBlockRegistry())},pageConfigErrors(){return[this.pageNameError].filter(e=>!!e)},hasPageConfigErrors(){return this.pageConfigErrors.length>0},showDefaultLayoutSelection(){return!this.acl.can("system_config:read")||!this.acl.can("system_config:update")||!this.acl.can("system_config:create")||!this.acl.can("system_config:delete")?!1:this.page.type==="product_list"||this.page.type==="product_detail"?!this.isDefaultLayout:!1},cmsBlocksBySelectedBlockCategory(){const e=Object.values(this.cmsBlocks).filter(t=>t&&!t.hidden);return this.currentBlockCategory==="favorite"?e.filter(t=>t&&this.cmsBlockFavorites.isFavorite(t.name)):e.filter(t=>t&&t.category===this.currentBlockCategory)},...w("page",["name"])},created(){this.createdComponent()},methods:{createdComponent(){this.blockTypes.some(e=>this.cmsBlockFavorites.isFavorite(e))&&(this.currentBlockCategory="favorite")},onPageTypeChange(e){this.$emit("page-type-change",e)},onDemoEntityChange(e){this.$emit("demo-entity-change",e)},onCloseBlockConfig(){const e=Shopware.Store.get("cmsPage");e.removeSelectedBlock(),e.removeSelectedSection()},isDisabledPageType(e){return this.page.type==="product_detail"?!0:this.page.type.includes("custom_entity_")?!e.name.includes("custom_entity_"):e.name==="product_detail"||e.name.includes("custom_entity_")},openSectionSettings(e){Shopware.Store.get("cmsPage").setSection(this.page.sections[e]),this.$refs.itemConfigSidebar.openContent()},blockIsRemovable(e){var i;return((i=this.cmsService.getCmsBlockRegistry()[e.type])==null?void 0:i.removable)&&this.isSystemDefaultLanguage},blockIsUnique(e){return this.page.type!==g.PAGE_TYPES.PRODUCT_DETAIL?!1:e.slots.some(t=>g.UNIQUE_SLOTS_KEBAB.includes(t.type))},blockIsDuplicable(e){return!this.blockIsUnique(e)},sectionIsDuplicable(e){return e.blocks.every(t=>this.blockIsDuplicable(t))},onBlockDragSort(e,t,i){if(!i)return;const s=e.sectionIndex,o=t.sectionIndex,a=this.page.sections[o];if(s<0||s>=this.page.sections.length||o<0||o>=this.page.sections.length)return;e.block.sectionPosition!==t.block.sectionPosition&&(e.block.isDragging=!0,e.block.sectionPosition=t.block.sectionPosition),this.currentDragSectionIndex===null&&(this.currentDragSectionIndex=s);const r=a.blocks.has(e.block.id);if(this.currentDragSectionIndex!==o&&!r){e.block.isDragging=!0;let l=s;this.currentDragSectionIndex!==s&&Math.abs(this.currentDragSectionIndex-o)===1&&(l=this.currentDragSectionIndex),this.currentDragSectionIndex-o<0&&(this.currentDragSectionIndex+=1),this.currentDragSectionIndex-o>0&&(this.currentDragSectionIndex-=1),e.block.sectionId=a.id,a.blocks.add(e.block);const c=this.page.sections[l];c.blocks.remove(e.block.id),c._origin.blocks.remove(e.block.id),this.refreshPosition(c.blocks),this.refreshPosition(a.blocks);return}e.block.position!==t.block.position&&(this.page.sections[o].blocks.moveItem(e.block.position,t.block.position),this.refreshPosition(a.blocks))},refreshPosition(e){return e.forEach((t,i)=>{t.position=i})},onSidebarNavigatorClick(){if(this.$refs.blockNavigator.isActive){if(localStorage.getItem("cmsNavigatorDontRemind")==="true"){this.onSidebarNavigationConfirm();return}this.navigatorDontRemind=!1,this.showSidebarNavigatorModal=!0}},onSidebarNavigationConfirm(){this.navigatorDontRemind&&localStorage.setItem("cmsNavigatorDontRemind","true"),this.$emit("page-save"),this.showSidebarNavigatorModal=!1},onSidebarNavigationCancel(){const e=this.$refs.pageConfigSidebar;this.showSidebarNavigatorModal=!1,this.$nextTick(()=>{e.openContent()})},getDragData(e,t){return{delay:300,dragGroup:"cms-navigator",data:{block:e,sectionIndex:t},validDragCls:null,onDragEnter:this.onBlockDragSort.bind(this),onDrop:this.onBlockDragStop.bind(this)}},getDropData(e,t){return{dragGroup:"cms-navigator",data:{block:e,sectionIndex:t,dropIndex:-1,section:null,sectionPosition:""},onDrop:this.onBlockDropAbort.bind(this)}},onBlockDragStop(e){this.currentDragSectionIndex=null,e.block.isDragging=!1},onBlockDropAbort(e,t){const i=e.sectionIndex,s=t.sectionIndex;if(i<0||s<0)return;const o=this.page.sections[i].blocks.has(e.block.id),a=this.page.sections[s].blocks.has(e.block.id);!o&&!a&&this.page.sections[i].blocks.add(e.block)},onBlockStageDrop(e,t){if(!t||!e.block||t.dropIndex<0||!t.section)return;const i=this.cmsService.getCmsBlockRegistry(),s=t.section,o=i[e.block.name],a=this.blockRepository.create();a.type=e.block.name,a.position=t.dropIndex,a.sectionPosition=t.sectionPosition,a.sectionId=s.id,a.visibility={desktop:!0,tablet:!0,mobile:!0},Object.assign(a,k((o==null?void 0:o.defaultConfig)||{})),Object.keys(o==null?void 0:o.slots).forEach(r=>{var d,b,m;const l=o==null?void 0:o.slots[r],c=this.slotRepository.create();if(c.blockId=a.id,c.slot=r,typeof l=="object"){c.type=l.type,l.default&&f.isPlainObject(l.default)&&Object.assign(c,k(l.default));const n=(d=l.default)==null?void 0:d.data;[(b=n==null?void 0:n.media)==null?void 0:b.source,(m=n==null?void 0:n.sliderItems)==null?void 0:m.source].includes("default")&&(c.config={...c.config,...n})}else c.type=l;a.slots.add(c)}),this.page.sections[s.position].blocks.splice(t.dropIndex,0,a),this.$emit("block-stage-drop"),this.$emit("current-block-change",s.id,a)},moveSectionUp(e){this.page.sections.moveItem(e.position,e.position-1),this.$emit("page-save",!0)},moveSectionDown(e){this.page.sections.moveItem(e.position,e.position+1),this.$emit("page-save",!0)},onSectionDuplicate(e){this.$emit("section-duplicate",e)},onSectionDelete(e){Shopware.Store.get("cmsPage").removeSelectedSection(),this.page.sections.remove(e),this.$emit("page-save")},onBlockDelete(e,t){var i;t||(t=this.page.sections.get(e.sectionId)),(i=t==null?void 0:t.blocks)==null||i.remove(e.id),this.selectedBlock&&this.selectedBlock.id===e.id&&Shopware.Store.get("cmsPage").removeSelectedBlock(),this.$emit("page-save",!0)},onBlockDuplicate(e,t){t||(t=this.page.sections.get(e.sectionId)),this.$emit("block-duplicate",e,t)},onRemoveSectionBackgroundMedia(e){e.backgroundMediaId=void 0,e.backgroundMedia=void 0,this.pageUpdate()},onSetSectionBackgroundMedia([e],t){t.backgroundMediaId=e.id,t.backgroundMedia=e,this.pageUpdate()},onToggleBlockFavorite(e){this.cmsBlockFavorites.update(!this.cmsBlockFavorites.isFavorite(e),e)},successfulUpload(e,t){t.backgroundMediaId=e.targetId,this.mediaRepository.get(e.targetId).then(i=>{t.backgroundMedia=i??void 0,this.pageUpdate()})},uploadTag(e){return`cms-section-media-config-${e.id}`},getMainContentBlocks(e){return e.filter(t=>this.blockTypeExists(t.type)&&t.sectionPosition==="main")},getSidebarContentBlocks(e){return e.filter(t=>this.blockTypeExists(t.type)&&t.sectionPosition==="sidebar")},pageUpdate(){this.$emit("page-update")},onOpenLayoutAssignment(){this.$emit("open-layout-assignment")},onOpenLayoutSetAsDefault(){this.$emit("open-layout-set-as-default")},blockTypeExists(e){return this.blockTypes.includes(e)},onVisibilityChange(e,t,i){e.visibility[t]=i}}});export{$ as default};
