const d={namespaced:!0,state(){return{salesChannelCollection:null,seoUrlCollection:null,originalSeoUrls:[],defaultSeoUrl:null,currentSeoUrl:null}},mutations:{setSeoUrlCollection(e,t){e.seoUrlCollection=t},setOriginalSeoUrls(e,t){e.originalSeoUrls=t},setCurrentSeoUrl(e,t){e.currentSeoUrl=t},setDefaultSeoUrl(e,t){e.defaultSeoUrl=t},setSalesChannelCollection(e,t){e.salesChannelCollection=t}},getters:{isLoading:e=>e.loading,getNewOrModifiedUrls:e=>()=>{const t=[];return e.seoUrlCollection.forEach(l=>{if(l.seoPathInfo===null)return;const a=e.originalSeoUrls.find(r=>r.id===l.id);a&&a.seoPathInfo===l.seoPathInfo||!a&&!l.seoPathInfo||t.push(l)}),t}}},u=`{% block sw_seo_url %} <div class="sw-seo-url"> <sw-card class="sw-seo-url__card" position-identifier="sw-seo-url" :title="$tc('sw-seo-url.titleCard')" :is-loading="isLoading" > {% block sw_seo_url_card %} <template v-if="showEmptySeoUrlError"> {{ $tc('sw-seo-url.textEmptySeoUrls') }} </template> <template v-else> {% block sw_seo_url_card_seo_path %} <sw-inherit-wrapper v-model:value="currentSeoUrl.seoPathInfo" :has-parent="currentSalesChannelId !== null && !isHeadlessSalesChannel && hasDefaultTemplate" :inherited-value="(currentSeoUrl.salesChannelId !== null && !isHeadlessSalesChannel) ? defaultSeoUrl.seoPathInfo : null" > <template #content="props"> {% block sw_seo_url_card_seo_path_edit %} <sw-text-field :map-inheritance="props" :value="props.currentValue" :disabled="props.isInherited || isHeadlessSalesChannel || !allowInput" :disable-inheritance-toggle="isHeadlessSalesChannel" :label="$tc('sw-seo-url.labelSeoPathInfo')" :help-text="seoUrlHelptext" @update:value="props.updateCurrentValue" /> {% endblock %} </template> </sw-inherit-wrapper> {% endblock %} </template> {% block sw_seo_url_card_toolbar %} <template v-if="!showEmptySeoUrlError" #toolbar > <sw-sales-channel-switch ref="salesChannelSwitch" :disabled="disabled || undefined" :label="$tc('sw-seo-url.labelSalesChannelSelect')" @change-sales-channel-id="onSalesChannelChanged" /> </template> {% endblock %} <div v-if="hasAdditionalSeoSlot" class="sw-seo-url__card-seo-additional" > <slot name="seo-additional" v-bind="{currentSalesChannelId}" > {% block sw_seo_url_additional %}{% endblock %} </slot> </div> {% endblock %} </sw-card> </div> {% endblock %}`,i=Cicada.Data.Criteria,c=Cicada.Data.EntityCollection,h={template:u,compatConfig:Cicada.compatConfig,inject:["repositoryFactory"],emits:["on-change-sales-channel"],mixins:[],props:{salesChannelId:{type:String,required:!1,default:null},urls:{type:Array,required:!1,default(){return[]}},isLoading:{type:Boolean,required:!1,default:!1},hasDefaultTemplate:{type:Boolean,required:!1,default:!0},disabled:{type:Boolean,required:!1,default:!1},resultLimit:{type:Number,required:!1,default:25}},data(){return{currentSalesChannelId:this.salesChannelId,showEmptySeoUrlError:!1}},computed:{seoUrlCollection(){return Cicada.State.get("swSeoUrl").seoUrlCollection},currentSeoUrl(){return Cicada.State.get("swSeoUrl")?Cicada.State.get("swSeoUrl").currentSeoUrl:{}},defaultSeoUrl(){return Cicada.State.get("swSeoUrl").defaultSeoUrl},seoUrlRepository(){return this.repositoryFactory.create("seo_url")},salesChannelRepository(){return this.repositoryFactory.create("sales_channel")},isHeadlessSalesChannel(){if(!Cicada.State.get("swSeoUrl")||Cicada.State.get("swSeoUrl").salesChannelCollection===null)return!0;const e=Cicada.State.get("swSeoUrl").salesChannelCollection.find(t=>t.id===this.currentSalesChannelId);return this.currentSalesChannelId!==null&&(e==null?void 0:e.typeId)==="f183ee5650cf4bdb8a774337575067a6"},seoUrlHelptext(){return this.isHeadlessSalesChannel?this.$tc("sw-seo-url.textSeoUrlsDisallowedForHeadless"):null},hasAdditionalSeoSlot(){return this.$slots.hasOwnProperty("seo-additional")},allowInput(){return this.hasDefaultTemplate||this.currentSalesChannelId!==null}},watch:{urls(){this.initSeoUrlCollection(),this.refreshCurrentSeoUrl()}},beforeCreate(){Cicada.State.list().includes("swSeoUrl")||Cicada.State.registerModule("swSeoUrl",d)},created(){this.isCompatEnabled("INSTANCE_EVENT_EMITTER")?this.$root.$on("seo-url-save-finish",this.clearDefaultSeoUrls):Cicada.Utils.EventBus.on("sw-product-detail-save-finish",this.clearDefaultSeoUrls),this.createdComponent()},beforeUnmount(){this.isCompatEnabled("INSTANCE_EVENT_EMITTER")?this.$root.$off("seo-url-save-finish",this.clearDefaultSeoUrls):Cicada.Utils.EventBus.off("sw-product-detail-save-finish",this.clearDefaultSeoUrls),Cicada.State.unregisterModule("swSeoUrl")},methods:{createdComponent(){this.initSalesChannelCollection(),this.initSeoUrlCollection(),this.showEmptySeoUrlError||this.refreshCurrentSeoUrl()},initSalesChannelCollection(){const e=new i(1,this.resultLimit);e.addAssociation("type"),this.salesChannelRepository.search(e).then(t=>{Cicada.State.commit("swSeoUrl/setSalesChannelCollection",t)})},initSeoUrlCollection(){this.showEmptySeoUrlError=!1;const e=new c(this.seoUrlRepository.route,this.seoUrlRepository.schema.entity,Cicada.Context.api,new i(1,this.resultLimit)),t=this.urls.find(a=>a.salesChannelId===null);t===void 0&&(this.hasDefaultTemplate||this.urls.length<=0)&&(this.showEmptySeoUrlError=!0);const l=this.seoUrlRepository.create();Object.assign(l,t),e.add(l),Cicada.State.commit("swSeoUrl/setDefaultSeoUrl",l),this.urls.forEach(a=>{const r=this.seoUrlRepository.create();Object.assign(r,a),e.add(r)}),Cicada.State.get("swSeoUrl").defaultSeoUrl||(this.showEmptySeoUrlError=!0),Cicada.State.commit("swSeoUrl/setSeoUrlCollection",e),Cicada.State.commit("swSeoUrl/setOriginalSeoUrls",this.urls),this.clearDefaultSeoUrls()},clearDefaultSeoUrls(){this.seoUrlCollection.forEach(e=>{e.id!==this.defaultSeoUrl.id&&e.seoPathInfo===this.defaultSeoUrl.seoPathInfo&&(e.seoPathInfo=null)})},refreshCurrentSeoUrl(){var l,a,r;const e=Cicada.Context.api.languageId,t=this.seoUrlCollection.find(s=>s.languageId===e&&s.salesChannelId===this.currentSalesChannelId);if(!t){const s=this.seoUrlRepository.create(),o=this.seoUrlCollection.find(n=>n.pathInfo&&n.routeName&&n.foreignKey)||{};s.foreignKey=((l=this.defaultSeoUrl)==null?void 0:l.foreignKey)??o.foreignKey,s.isCanonical=!0,s.languageId=e,s.salesChannelId=this.currentSalesChannelId,s.routeName=((a=this.defaultSeoUrl)==null?void 0:a.routeName)??o.routeName,s.pathInfo=((r=this.defaultSeoUrl)==null?void 0:r.pathInfo)??o.pathInfo,s.isModified=!0,this.seoUrlCollection.add(s),Cicada.State.commit("swSeoUrl/setCurrentSeoUrl",s);return}Cicada.State.commit("swSeoUrl/setCurrentSeoUrl",t)},onSalesChannelChanged(e){this.currentSalesChannelId=e,this.$emit("on-change-sales-channel",e),this.refreshCurrentSeoUrl()}}};export{h as default};
//# sourceMappingURL=index-CFYKp-9l.js.map
