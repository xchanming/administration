{"version":3,"file":"string.utils-CcfYXjow.js","sources":["../../../app/administration/node_modules/lodash/kebabCase.js","../../../app/administration/node_modules/lodash/snakeCase.js","../../../app/administration/src/core/service/utils/string.utils.ts"],"sourcesContent":["var createCompounder = require('./_createCompounder');\n\n/**\n * Converts `string` to\n * [kebab case](https://en.wikipedia.org/wiki/Letter_case#Special_case_styles).\n *\n * @static\n * @memberOf _\n * @since 3.0.0\n * @category String\n * @param {string} [string=''] The string to convert.\n * @returns {string} Returns the kebab cased string.\n * @example\n *\n * _.kebabCase('Foo Bar');\n * // => 'foo-bar'\n *\n * _.kebabCase('fooBar');\n * // => 'foo-bar'\n *\n * _.kebabCase('__FOO_BAR__');\n * // => 'foo-bar'\n */\nvar kebabCase = createCompounder(function(result, word, index) {\n  return result + (index ? '-' : '') + word.toLowerCase();\n});\n\nmodule.exports = kebabCase;\n","var createCompounder = require('./_createCompounder');\n\n/**\n * Converts `string` to\n * [snake case](https://en.wikipedia.org/wiki/Snake_case).\n *\n * @static\n * @memberOf _\n * @since 3.0.0\n * @category String\n * @param {string} [string=''] The string to convert.\n * @returns {string} Returns the snake cased string.\n * @example\n *\n * _.snakeCase('Foo Bar');\n * // => 'foo_bar'\n *\n * _.snakeCase('fooBar');\n * // => 'foo_bar'\n *\n * _.snakeCase('--FOO-BAR--');\n * // => 'foo_bar'\n */\nvar snakeCase = createCompounder(function(result, word, index) {\n  return result + (index ? '_' : '') + word.toLowerCase();\n});\n\nmodule.exports = snakeCase;\n","/**\n * @package admin\n *\n * @module core/service/utils/string\n */\nimport capitalizeString from 'lodash/capitalize';\nimport camelCase from 'lodash/camelCase';\nimport kebabCase from 'lodash/kebabCase';\nimport snakeCase from 'lodash/snakeCase';\nimport upperFirst from 'lodash/upperFirst';\n\n// eslint-disable-next-line sw-deprecation-rules/private-feature-declarations\nexport default {\n    capitalizeString,\n    upperFirst,\n    camelCase,\n    kebabCase,\n    snakeCase,\n    isEmptyOrSpaces,\n    isUrl,\n    isValidIp,\n    isValidCidr,\n};\n\n/**\n * Gets if the content of the string is really empty.\n * This does also remove any whitespaces that might\n * exist in the text.\n */\nfunction isEmptyOrSpaces(value: string): boolean {\n    return !value || value.length <= 0 ? true : value.trim().length <= 0;\n}\n\n/**\n * Checks if the provided value is a URL\n */\nfunction isUrl(value: string): boolean {\n    try {\n        return Boolean(new URL(value));\n    } catch (e) {\n        return false;\n    }\n}\n\nfunction isValidIp(ip: string): boolean {\n    // https://regex101.com/r/qHTUIe/1\n    // eslint-disable-next-line max-len\n    return /((^\\s*((([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5]))\\s*$)|(^\\s*((([0-9A-Fa-f]{1,4}:){7}([0-9A-Fa-f]{1,4}|:))|(([0-9A-Fa-f]{1,4}:){6}(:[0-9A-Fa-f]{1,4}|((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3})|:))|(([0-9A-Fa-f]{1,4}:){5}(((:[0-9A-Fa-f]{1,4}){1,2})|:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3})|:))|(([0-9A-Fa-f]{1,4}:){4}(((:[0-9A-Fa-f]{1,4}){1,3})|((:[0-9A-Fa-f]{1,4})?:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){3}(((:[0-9A-Fa-f]{1,4}){1,4})|((:[0-9A-Fa-f]{1,4}){0,2}:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){2}(((:[0-9A-Fa-f]{1,4}){1,5})|((:[0-9A-Fa-f]{1,4}){0,3}:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){1}(((:[0-9A-Fa-f]{1,4}){1,6})|((:[0-9A-Fa-f]{1,4}){0,4}:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:))|(:(((:[0-9A-Fa-f]{1,4}){1,7})|((:[0-9A-Fa-f]{1,4}){0,5}:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:)))(%.+)?\\s*$))/.test(\n        ip,\n    );\n}\n\nfunction isValidCidr(cidr: string): boolean {\n    // https://regex101.com/r/Ay33YI/1\n    // eslint-disable-next-line max-len\n    return /^(((([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\/(3[0-2]|[1-2][0-9]|[0-9])))|(((([0-9A-Fa-f]{1,4}:){7}([0-9A-Fa-f]{1,4}|:))|(([0-9A-Fa-f]{1,4}:){6}(:[0-9A-Fa-f]{1,4}|((25[0-5]|2[0-4]d|1dd|[1-9]?d)(.(25[0-5]|2[0-4]d|1dd|[1-9]?d)){3})|:))|(([0-9A-Fa-f]{1,4}:){5}(((:[0-9A-Fa-f]{1,4}){1,2})|:((25[0-5]|2[0-4]d|1dd|[1-9]?d)(.(25[0-5]|2[0-4]d|1dd|[1-9]?d)){3})|:))|(([0-9A-Fa-f]{1,4}:){4}(((:[0-9A-Fa-f]{1,4}){1,3})|((:[0-9A-Fa-f]{1,4})?:((25[0-5]|2[0-4]d|1dd|[1-9]?d)(.(25[0-5]|2[0-4]d|1dd|[1-9]?d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){3}(((:[0-9A-Fa-f]{1,4}){1,4})|((:[0-9A-Fa-f]{1,4}){0,2}:((25[0-5]|2[0-4]d|1dd|[1-9]?d)(.(25[0-5]|2[0-4]d|1dd|[1-9]?d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){2}(((:[0-9A-Fa-f]{1,4}){1,5})|((:[0-9A-Fa-f]{1,4}){0,3}:((25[0-5]|2[0-4]d|1dd|[1-9]?d)(.(25[0-5]|2[0-4]d|1dd|[1-9]?d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){1}(((:[0-9A-Fa-f]{1,4}){1,6})|((:[0-9A-Fa-f]{1,4}){0,4}:((25[0-5]|2[0-4]d|1dd|[1-9]?d)(.(25[0-5]|2[0-4]d|1dd|[1-9]?d)){3}))|:))|(:(((:[0-9A-Fa-f]{1,4}){1,7})|((:[0-9A-Fa-f]{1,4}){0,5}:((25[0-5]|2[0-4]d|1dd|[1-9]?d)(.(25[0-5]|2[0-4]d|1dd|[1-9]?d)){3}))|:)))(%.+)?s*(\\/(12[0-8]|1[0-1][0-9]|[1-9][0-9]|[0-9]))))$/.test(\n        cidr,\n    );\n}\n"],"names":["createCompounder","require$$0","kebabCase","result","word","index","kebabCase_1","snakeCase","snakeCase_1","string","capitalizeString","upperFirst","camelCase","isEmptyOrSpaces","isUrl","isValidIp","isValidCidr","value","ip","cidr"],"mappings":"2GAAA,IAAIA,EAAmBC,EAuBnBC,EAAYF,EAAiB,SAASG,EAAQC,EAAMC,EAAO,CAC7D,OAAOF,GAAUE,EAAQ,IAAM,IAAMD,EAAK,aAC5C,CAAC,EAEDE,EAAiBJ,eC3BjB,IAAIF,EAAmBC,EAuBnBM,EAAYP,EAAiB,SAASG,EAAQC,EAAMC,EAAO,CAC7D,OAAOF,GAAUE,EAAQ,IAAM,IAAMD,EAAK,aAC5C,CAAC,EAEDI,EAAiBD,eCfFE,EAAA,CACX,iBAAAC,EACA,WAAAC,EACA,UAAAC,EAAA,UACAV,EAAA,UACAK,EACA,gBAAAM,EACA,MAAAC,EACA,UAAAC,EACA,YAAAC,CACJ,EAOA,SAASH,EAAgBI,EAAwB,CACtC,MAAA,CAACA,GAASA,EAAM,QAAU,EAAI,GAAOA,EAAM,KAAK,EAAE,QAAU,CACvE,CAKA,SAASH,EAAMG,EAAwB,CAC/B,GAAA,CACA,MAAO,EAAQ,IAAI,IAAIA,CAAK,OACpB,CACD,MAAA,EACX,CACJ,CAEA,SAASF,EAAUG,EAAqB,CAGpC,MAAO,krCAAkrC,KACrrCA,CAAA,CAER,CAEA,SAASF,EAAYG,EAAuB,CAGxC,MAAO,4qCAA4qC,KAC/qCA,CAAA,CAER","x_google_ignoreList":[0,1]}