const r='{% block sw_select_rule_create %} <div class="sw-select-rule-create"> <sw-entity-multi-select v-if="rules !== null" v-model:entityCollection="collection" :criteria="ruleFilter" v-bind="$attrs" advanced-selection-component="sw-advanced-selection-rule" :advanced-selection-parameters="getAdvancedSelectionParameters()" > <template #before-item-list> {% block sw_select_rule_create_select_before %} <div class="sw-select-rule-create__create-rule-item sw-select-result" @click="openCreateRuleModal" > {{ $tc(\'sw-select-rule-create.addNewRule\') }} </div> {% endblock %} </template> <template #result-item="{ item, index, labelProperty, valueProperty, searchTerm, highlightSearchTerm, isSelected, addItem, getKey }"> {% block sw_select_rule_create_select_multi_select_result_list_item %} <slot name="result-item" v-bind="{ item, index, labelProperty, valueProperty, searchTerm, highlightSearchTerm, isSelected, addItem, getKey }" > <sw-select-result v-tooltip="tooltipConfig(item)" :selected="isSelected(item)" :disabled="isRuleRestricted(item)" v-bind="{ item, index }" @item-select="addItem" > {% block sw_select_rule_create_select_multi_select_result_item_label %} <slot name="result-label-property" v-bind="{ item, index, labelProperty, valueProperty, searchTerm, highlightSearchTerm, getKey }" > <sw-highlight-text v-if="highlightSearchTerm" :text="getKey(item, labelProperty) || getKey(item, `translated.${labelProperty}`)" :search-term="searchTerm" /> <template v-else> {{ getKey(item, labelProperty) || getKey(item, `translated.${labelProperty}`) }} </template> </slot> {% endblock %} </sw-select-result> </slot> {% endblock %} </template> </sw-entity-multi-select> {% block sw_select_rule_create_select %} <sw-entity-single-select v-else entity="rule" :criteria="ruleFilter" :value="ruleId" v-bind="$attrs" show-clearable-button advanced-selection-component="sw-advanced-selection-rule" :advanced-selection-parameters="getAdvancedSelectionParameters()" @update:value="onSelectRule" > <template #before-item-list> {% block sw_select_rule_create_single_select_before %} <div class="sw-select-rule-create__create-rule-item sw-select-result" @click="openCreateRuleModal" > {{ $tc(\'sw-select-rule-create.addNewRule\') }} </div> {% endblock %} </template> <template #result-item="{ item, index, labelProperty, searchTerm, highlightSearchTerm, isSelected, setValue, getKey }"> {% block sw_select_rule_create_select_entity_select_result_list_item %} <slot name="result-item" v-bind="{ item, index, labelProperty, searchTerm, highlightSearchTerm, isSelected, setValue, getKey }" > <sw-select-result v-tooltip="tooltipConfig(item)" :selected="isSelected(item)" :disabled="isRuleRestricted(item)" v-bind="{ item, index }" @item-select="setValue" > {% block sw_select_rule_create_select_entity_select_result_item_label %} <slot name="result-label-property" v-bind="{ item, index, labelProperty, searchTerm, highlightSearchTerm, getKey }" > <sw-highlight-text v-if="highlightSearchTerm" :text="getKey(item, labelProperty) || getKey(item, `translated.${labelProperty}`)" :search-term="searchTerm" /> <template v-else> {{ getKey(item, labelProperty) || getKey(item, `translated.${labelProperty}`) }} </template> </slot> {% endblock %} </sw-select-result> </slot> {% endblock %} </template> </sw-entity-single-select> {% endblock %} {% block sw_select_rule_create_rule_modal %} <slot name="rule-modal" v-bind="{ showRuleModal, onSaveRule, onCloseRuleModal }" > {% block sw_select_rule_create_rule_modal_inner%} <sw-rule-modal v-if="showRuleModal" :rule-aware-group-key="ruleAwareGroupKey" @save="onSaveRule" @modal-close="onCloseRuleModal" /> {% endblock %} </slot> {% endblock %} </div> {% endblock %}',{Component:s}=Cicada,{Criteria:l}=Cicada.Data;s.register("sw-select-rule-create",{template:r,inheritAttrs:!1,compatConfig:Cicada.compatConfig,inject:["repositoryFactory","feature","ruleConditionDataProviderService"],emits:["save-rule","dismiss-rule"],props:{ruleId:{type:String,required:!1,default:null},rules:{type:Array,required:!1,default:null},ruleFilter:{type:Object,required:!1,default(){const e=new l(1,25);return e.addSorting(l.sort("name","ASC",!1)).addAssociation("conditions"),e}},ruleAwareGroupKey:{type:String,required:!1,default:null},restrictedRuleIds:{type:Array,required:!1,default(){return[]}},restrictedRuleIdsTooltipLabel:{type:String,required:!1,default(){return""}}},data(){return{itemAddNewRule:{index:-1,id:""},showRuleModal:!1}},computed:{collection:{get(){return this.rules},set(e){e.forEach(t=>{this.rules.has(t.id)||this.rules.add(t)}),this.rules.forEach(t=>{e.has(t.id)||this.rules.remove(t.id)})}}},methods:{onSaveRule(e,t){this.rules&&this.rules.add(t),this.$emit("save-rule",e,t)},onSelectRule(e){e!==this.ruleId&&this.onSaveRule(e)},openCreateRuleModal(){this.showRuleModal=!0},onCloseRuleModal(){this.showRuleModal=!1},onRuleSelectInput(e){e||this.$emit("dismiss-rule")},isRuleRestricted(e){return this.restrictedRuleIds.includes(e.id)||this.ruleConditionDataProviderService.isRuleRestricted(e.conditions,this.ruleAwareGroupKey)},getAdvancedSelectionParameters(){return{ruleAwareGroupKey:this.ruleAwareGroupKey,restrictedRuleIds:this.restrictedRuleIds,restrictedRuleIdsTooltipLabel:this.restrictedRuleIdsTooltipLabel}},tooltipConfig(e){return this.restrictedRuleIds.includes(e.id)?{message:this.restrictedRuleIdsTooltipLabel,disabled:!1}:this.ruleConditionDataProviderService.getRestrictedRuleTooltipConfig(e.conditions,this.ruleAwareGroupKey)}}});
//# sourceMappingURL=index-SCeAwRyp.js.map
