import{s as g}from"./sw-bulk-edit.state-CBUvT6ts.js";const w=`{% block sw_bulk_edit_order %} <sw-page class="sw-bulk-edit-order"> {% block sw_bulk_edit_order_search_bar %} <template #search-bar> <sw-search-bar /> </template> {% endblock %} {% block sw_bulk_edit_order_smart_bar_header %} <template #smart-bar-header> <h2>{{ $tc('sw-bulk-edit.order.textTitle', selectedIds.length, { orderTotal: selectedIds.length }) }}</h2> </template> {% endblock %} {% block sw_bulk_edit_order_content_smart_bar_actions %} <template #smart-bar-actions> {% block sw_bulk_edit_order_actions_save %} <sw-button-process class="sw-bulk-edit-order__save-action" variant="primary" :is-loading="isLoading" :process-success="false" :disabled="isLoading || !hasChanges || undefined" @click="openModal" > {{ $tc('sw-bulk-edit.applyChanges') }} </sw-button-process> {% endblock %} </template> {% endblock %} {% block sw_bulk_edit_order_content %} <template #content> <sw-card-view v-if="selectedIds.length > 0 && isLoadedData" > <sw-card v-if="restrictedFields.length" class="sw-bulk-edit-order__restricted-fields" position-identifier="sw-bulk-edit-order-restricted-fields" > <sw-alert :title="$tc('sw-bulk-edit.order.alertRestrictedFields.title')" variant="warning" > <span v-html="$tc('sw-bulk-edit.order.alertRestrictedFields.message')"></span> <ul> <li v-for="(restrictedField, index) in restrictedFields" :key="index" > {{ $tc(\`sw-bulk-edit.order.alertRestrictedFields.\${restrictedField}\`) }} </li> </ul> </sw-alert> </sw-card> {% block sw_bulk_edit_order_content_order_status_card %} <sw-card class="sw-bulk-edit-order-base__status" position-identifier="sw-bulk-edit-order-status" :title="$tc('sw-bulk-edit.order.status.cardTitle')" :is-loading="isLoading" > {% block sw_bulk_edit_order_content_order_status_section %} <sw-bulk-edit-change-type-field-renderer :form-fields="statusFormFields" :bulk-edit-data="bulkEditData" :entity="order" /> {% endblock %} </sw-card> {% endblock %} {% block sw_bulk_edit_order_content_documents %} <sw-card class="sw-bulk-edit-order-base__documents" position-identifier="sw-bulk-edit-order-documents" :title="$tc('sw-bulk-edit.order.documents.cardTitle')" :is-loading="isLoading" > {% block sw_bulk_edit_order_content_documents_content %} <sw-bulk-edit-change-type-field-renderer :form-fields="documentsFormFields" :bulk-edit-data="bulkEditData" :entity="order" @change-value="onChangeDocument" /> {% endblock %} </sw-card> {% endblock %} {% block sw_bulk_edit_order_tags_card %} <sw-card class="sw-bulk-edit-order-base__tags" position-identifier="sw-bulk-edit-order-tags" :title="$tc('sw-bulk-edit.order.tags.cardTitle')" :is-loading="isLoading" > {% block sw_bulk_edit_order_tags %} <sw-bulk-edit-change-type-field-renderer :form-fields="tagsFormFields" :bulk-edit-data="bulkEditData" :entity="order" /> {% endblock %} </sw-card> {% endblock %} {% block sw_bulk_edit_order_custom_field_card %} <sw-card class="sw-bulk-edit-order-base__custom_fields" position-identifier="sw-bulk-edit-order-custom-fields" :title="$tc('sw-bulk-edit.order.customFields.cardTitle')" :is-loading="isLoading" > <sw-bulk-edit-custom-fields class="sw-bulk-edit__custom-fields" :sets="customFieldSets" @change.self="onCustomFieldsChange" /> </sw-card> {% endblock %} </sw-card-view> {% block sw_bulk_edit_order_empty_state %} <sw-empty-state v-if="selectedIds.length <= 0 && !isLoading" :title="$tc('sw-bulk-edit.order.messageEmptyTitle')" :subline="$tc('sw-bulk-edit.order.messageEmptySubline')" /> {% endblock %} {% block sw_bulk_edit_order_save_modal %} <router-view v-slot="{ Component }" > <component :is="Component" :item-total="selectedIds.length" :is-loading="isLoading" :process-status="processStatus" :bulk-edit-data="bulkEditData" @modal-close="closeModal" @bulk-save="onSave" /> </router-view> {% endblock %} </template> {% endblock %} </sw-page> {% endblock %}`,{Mixin:f}=Cicada,{Criteria:d}=Cicada.Data,{types:_}=Cicada.Utils,{intersectionBy:S,chunk:k,uniqBy:C}=Cicada.Utils.array,y={template:w,compatConfig:Cicada.compatConfig,inject:["bulkEditApiFactory","repositoryFactory","feature","orderDocumentApiService"],mixins:[f.getByName("notification")],data(){return{isLoading:!1,isLoadedData:!1,bulkEditData:{},isStatusSelected:!1,isStatusMailsSelected:!1,orderStatus:[],transactionStatus:[],deliveryStatus:[],customFieldSets:[],itemsPerRequest:100,processStatus:"",order:{}}},metaInfo(){return{title:this.$createTitle()}},computed:{selectedIds(){return Cicada.State.get("cicadaApps").selectedIds},stateMachineStateRepository(){return this.repositoryFactory.create("state_machine_state")},orderRepository(){return this.repositoryFactory.create("order")},customFieldSetRepository(){return this.repositoryFactory.create("custom_field_set")},customFieldSetCriteria(){const e=new d(1,null);return e.addFilter(d.equals("relations.entityName","order")),e},hasChanges(){var a;const e=(a=this.bulkEditData.customFields)==null?void 0:a.value,t=Object.values(this.bulkEditData).some(s=>s.isChanged),i=!_.isEmpty(e)&&Object.keys(e).length>0;return t||i},restrictedFields(){let e=[];return this.$route.params.excludeDelivery==="1"&&(e=e.concat(["orderDeliveries"])),e},statusFormFields(){var t;return[{name:"orderTransactions",config:{componentName:"sw-single-select",changeLabel:this.$tc("sw-bulk-edit.order.status.payment.label"),entity:"state_machine_state",placeholder:this.$tc("sw-bulk-edit.order.status.payment.placeholder"),options:this.transactionStatus}},{name:"orderDeliveries",config:{componentName:"sw-single-select",changeLabel:this.$tc("sw-bulk-edit.order.status.shipping.label"),entity:"state_machine_state",placeholder:this.$tc("sw-bulk-edit.order.status.shipping.placeholder"),options:this.deliveryStatus}},{name:"orders",config:{componentName:"sw-single-select",changeLabel:this.$tc("sw-bulk-edit.order.status.order.label"),entity:"state_machine_state",placeholder:this.$tc("sw-bulk-edit.order.status.order.placeholder"),options:this.orderStatus}},{name:"statusMails",labelHelpText:this.$tc("sw-bulk-edit.order.status.statusMails.helpText"),config:{hidden:!0,changeLabel:this.$tc("sw-bulk-edit.order.status.statusMails.label")}},{name:"documents",labelHelpText:this.$tc("sw-bulk-edit.order.status.documents.helpText"),config:{componentName:"sw-bulk-edit-order-documents",changeLabel:this.$tc("sw-bulk-edit.order.status.documents.label"),documents:(t=this.bulkEditData)==null?void 0:t.documents}}].filter(i=>!this.restrictedFields.includes(i.name))},documentsFormFields(){return[{name:"invoice",labelHelpText:this.$tc("sw-bulk-edit.order.documents.generateInvoice.helpText"),config:{componentName:"sw-bulk-edit-order-documents-generate-invoice",changeLabel:this.$tc("sw-bulk-edit.order.documents.generateInvoice.label")}},{name:"storno",labelHelpText:this.$tc("sw-bulk-edit.order.documents.generateCancellationInvoice.helpText"),config:{componentName:"sw-bulk-edit-order-documents-generate-cancellation-invoice",changeLabel:this.$tc("sw-bulk-edit.order.documents.generateCancellationInvoice.label"),changeSubLabel:this.$tc("sw-bulk-edit.order.documents.generateCancellationInvoice.changeSubLabel")}},{name:"delivery_note",labelHelpText:this.$tc("sw-bulk-edit.order.documents.generateDeliveryNote.helpText"),config:{componentName:"sw-bulk-edit-order-documents-generate-delivery-note",changeLabel:this.$tc("sw-bulk-edit.order.documents.generateDeliveryNote.label")}},{name:"credit_note",labelHelpText:this.$tc("sw-bulk-edit.order.documents.generateCreditNote.helpText"),config:{componentName:"sw-bulk-edit-order-documents-generate-credit-note",changeLabel:this.$tc("sw-bulk-edit.order.documents.generateCreditNote.label"),changeSubLabel:this.$tc("sw-bulk-edit.order.documents.generateCreditNote.changeSubLabel")}},{name:"download",labelHelpText:this.$tc("sw-bulk-edit.order.documents.downloadDocuments.helpText"),config:{componentName:"sw-bulk-edit-order-documents-download-documents",changeLabel:this.$tc("sw-bulk-edit.order.documents.downloadDocuments.label")}}]},tagsFormFields(){return[{name:"tags",config:{componentName:"sw-entity-tag-select",entityCollection:this.order.tags,allowOverwrite:!0,allowClear:!0,allowAdd:!0,allowRemove:!0,changeLabel:this.$tc("sw-bulk-edit.order.tags.changeLabel"),placeholder:this.$tc("sw-bulk-edit.order.tags.placeholder")}}]}},watch:{bulkEditData:{handler(e){const{orders:t,orderTransactions:i,orderDeliveries:a,statusMails:s}=e;this.isStatusSelected=t.isChanged&&t.value||i.isChanged&&i.value||(a==null?void 0:a.isChanged)&&a.value,this.isStatusMailsSelected=s.isChanged},deep:!0},isStatusSelected(){this.isStatusSelected||(this.bulkEditData.statusMails.isChanged=!1),this.bulkEditData.statusMails.disabled=!this.isStatusSelected},isStatusMailsSelected(){this.isStatusMailsSelected||(this.bulkEditData.documents.isChanged=!1),this.bulkEditData.documents.disabled=!this.isStatusMailsSelected}},beforeCreate(){Cicada.State.registerModule("swBulkEdit",g)},created(){this.createdComponent()},beforeUnmount(){Cicada.State.unregisterModule("swBulkEdit")},methods:{async createdComponent(){this.setRouteMetaModule(),this.isLoading=!0,this.order=this.orderRepository.create(Cicada.Context.api),await Promise.all([this.fetchStatusOptions("orders.id"),this.fetchStatusOptions("orderTransactions.orderId"),this.fetchStatusOptions("orderDeliveries.orderId"),this.loadCustomFieldSets()]),this.isLoading=!1,this.isLoadedData=!0,this.loadBulkEditData()},setRouteMetaModule(){this.isCompatEnabled("INSTANCE_SET")?(this.$set(this.$route.meta.$module,"color","#A092F0"),this.$set(this.$route.meta.$module,"icon","regular-shopping-bag")):(this.$route.meta.$module||(this.$route.meta.$module={}),this.$route.meta.$module.color="#A092F0",this.$route.meta.$module.icon="regular-shopping-bag")},loadBulkEditData(){[this.statusFormFields,this.documentsFormFields,this.tagsFormFields].forEach(t=>{t.forEach(i=>{this.isCompatEnabled("INSTANCE_SET")?this.$set(this.bulkEditData,i.name,{isChanged:!1,type:"overwrite",value:null}):this.bulkEditData[i.name]={isChanged:!1,type:"overwrite",value:null}})}),this.isCompatEnabled("INSTANCE_SET")?(this.$set(this.bulkEditData,"customFields",{type:"overwrite",value:null}),this.$set(this.bulkEditData,"statusMails",{...this.bulkEditData.statusMails,disabled:!0}),this.$set(this.bulkEditData,"documents",{...this.bulkEditData.documents,disabled:!0})):(this.bulkEditData.customFields={type:"overwrite",value:null},this.bulkEditData.statusMails.disabled=!0,this.bulkEditData.documents.disabled=!0),this.order.documents={documentType:{},skipSentDocuments:!0}},fetchStatusOptions(e){return this.fetchStateMachineStates(e).then(t=>this.fetchToStateMachineTransitions(t)).then(t=>{switch(e){case"orderTransactions.orderId":this.transactionStatus=t;break;case"orderDeliveries.orderId":this.deliveryStatus=t;break;default:this.orderStatus=t}}).catch(t=>this.createNotificationError({message:t}))},fetchStateMachineStates(e){const t=k(this.selectedIds,this.itemsPerRequest);let i=null;switch(e){case"orderTransactions.orderId":i="orderTransactions.orderVersionId";break;case"orderDeliveries.orderId":i="orderDeliveries.orderVersionId";break;default:i="orders.versionId"}const a=t.map(s=>{const r=new d(1,null);return r.addFilter(d.multi("AND",[d.equalsAny(e,s),d.equals(i,Cicada.Context.api.liveVersionId)])),this.stateMachineStateRepository.searchIds(r)});return Promise.all(a).then(s=>{let r=[];return s.forEach(o=>{o!=null&&o.data&&(r=[...o.data])}),r}).catch(s=>this.createNotificationError({message:s}))},fetchToStateMachineTransitions(e){return e.length?this.stateMachineStateRepository.search(this.toStateMachineStatesCriteria(e),Cicada.Context.api).then(t=>{if(!t.length)return[];const i=t.map(s=>s!=null&&s.fromStateMachineTransitions?s.fromStateMachineTransitions:null).filter(s=>s!==null);let a=S(...i,"actionName").filter(s=>s==null?void 0:s.toStateMachineState);return a=C(a,s=>s.toStateMachineState.technicalName),a.map(s=>({label:s.toStateMachineState.translated.name,value:s.actionName}))}).catch(t=>this.createNotificationError({message:t})):Promise.resolve([])},toStateMachineStatesCriteria(e){const t=new d(1,25);return t.addFilter(d.equalsAny("id",e)),t.addAssociation("fromStateMachineTransitions.toStateMachineState"),t},onProcessData(){const e={statusData:[],syncData:[]},t=["orderTransactions","orderDeliveries","orders"];return Object.entries(this.bulkEditData).forEach(([i,a])=>{var s,r,o,n,c,u,h;if(a.isChanged||i==="customFields"&&a.value){const l={field:i,type:a.type,value:a.value};if(t.includes(i)){const b=(r=(s=this.order)==null?void 0:s.documents)==null?void 0:r.documentType;if((n=(o=this.bulkEditData)==null?void 0:o.documents)!=null&&n.isChanged){const m=Object.keys(b).filter(p=>b[p]===!0);m.length>0&&(l.documentTypes=m,l.skipSentDocuments=this.order.documents.skipSentDocuments)}l.sendMail=(u=(c=this.bulkEditData)==null?void 0:c.statusMails)==null?void 0:u.isChanged,l.value=(h=this.order)==null?void 0:h[i],e.statusData.push(l)}else i!=="documents"&&i!=="statusMails"&&e.syncData.push(l)}}),e},openModal(){this.$router.push({name:"sw.bulk.edit.order.save"})},closeModal(){this.$router.push({name:"sw.bulk.edit.order"})},onSave(){this.isLoading=!0;const{statusData:e,syncData:t}=this.onProcessData(),i=this.bulkEditApiFactory.getHandler("order"),a=k(this.selectedIds,this.itemsPerRequest),s=[];return a.forEach(r=>{e.length&&s.push(i.bulkEditStatus(r,e)),t.length&&s.push(i.bulkEdit(r,t))}),Promise.all(s).then(()=>{this.processStatus="success"}).catch(()=>{this.processStatus="fail"}).finally(()=>{this.isLoading=!1,this.getLatestOrderStatus().finally(()=>{this.isLoading=!1})})},getLatestOrderStatus(){var t;const e=[];return this.bulkEditData.orderTransactions.isChanged&&e.push(this.fetchStatusOptions("orderTransactions.order.id")),(t=this.bulkEditData.orderDeliveries)!=null&&t.isChanged&&e.push(this.fetchStatusOptions("orderDeliveries.order.id")),this.bulkEditData.orders.isChanged&&e.push(this.fetchStatusOptions("orders.id")),e.length===0?Promise.resolve():(this.isLoading=!0,Promise.all(e))},loadCustomFieldSets(){return this.customFieldSetRepository.search(this.customFieldSetCriteria).then(e=>{this.customFieldSets=e})},onCustomFieldsChange(e){this.bulkEditData.customFields.value=e},onChangeDocument(e,t){Cicada.State.commit("swBulkEdit/setOrderDocumentsIsChanged",{type:e,isChanged:t})}}};export{y as default};
//# sourceMappingURL=index-DEpoxmQp.js.map
