const r=`{% block sw_settings_currency_country_modal %} <sw-modal class="sw-settings-currency-country-modal" :title="$tc('sw-settings-currency.currency-country-modal.titleNewCurrencyCountry')" @modal-close="onCancel" > {% block sw_settings_currency_country_modal_country_select %} <sw-entity-single-select v-model:value="currencyCountryRounding.countryId" required show-clearable-button class="sw-settings-currency-country-modal__select-country" :label="$tc('sw-settings-currency.currency-country-modal.labelCountrySelect')" entity="country" :criteria="countryCriteria" :error="currencyCountryRoundingCountryIdError" > <template #result-item="{ item, index, labelProperty, searchTerm, highlightSearchTerm, isSelected, setValue, getKey }"> <sw-select-result v-tooltip="{ showDelay: 300, showOnDisabledElements: true, message: $tc('sw-settings-currency.currency-country-modal.countryAlreadyAssigned'), disabled: !shouldDisableCountry(item) }" :selected="isSelected(item)" :disabled="shouldDisableCountry(item)" v-bind="{ item, index }" @item-select="setValue" > <slot name="result-label-property" v-bind="{ item, index, labelProperty, searchTerm, highlightSearchTerm, getKey }" > <sw-highlight-text v-if="highlightSearchTerm" :text="getKey(item, labelProperty) || getKey(item, \`translated.\${labelProperty}\`)" :search-term="searchTerm" /> <template v-else> {{ getKey(item, labelProperty) || getKey(item, \`translated.\${labelProperty}\`) }} </template> </slot> </sw-select-result> </template> </sw-entity-single-select> {% endblock %} {% block sw_settings_currency_country_modal_price_rounding %} <sw-settings-price-rounding :item-rounding="currencyCountryRounding.itemRounding" :total-rounding="currencyCountryRounding.totalRounding" /> {% endblock %} {% block sw_settings_currency_country_modal_footer %} <template #modal-footer> {% block sw_settings_currency_country_modal_footer_cancel %} <sw-button size="small" @click="onCancel" > {{ $tc('global.default.cancel') }} </sw-button> {% endblock %} {% block sw_settings_currency_country_modal_footer_save %} <sw-button variant="primary" size="small" class="sw-settings-currency-country-modal__button-save" @click="onSave" > {{ $tc('global.default.save') }} </sw-button> {% endblock %} </template> {% endblock %} </sw-modal> {% endblock %}`,{Mixin:n}=Cicada,{Criteria:t}=Cicada.Data,{mapPropertyErrors:o}=Cicada.Component.getComponentHelper(),c={template:r,compatConfig:Cicada.compatConfig,inject:["repositoryFactory"],emits:["edit-cancel","save"],mixins:[n.getByName("notification")],props:{currencyCountryRounding:{type:Object,required:!0}},data(){return{assignedCountryIds:[]}},computed:{countryCriteria(){const e=new t(1,25);return e.addSorting(t.sort("name","ASC")),e},countryRepository(){return this.repositoryFactory.create("country")},assignedCountriesCriteria(){const e=new t(1,500);return e.addAssociation("currencyCountryRoundings"),e.addFilter(t.equals("currencyCountryRoundings.currencyId",this.currencyCountryRounding.currencyId)),e},...o("currencyCountryRounding",["countryId"])},created(){this.createdComponent()},methods:{createdComponent(){this.countryRepository.searchIds(this.assignedCountriesCriteria,Cicada.Context.api).then(e=>{this.assignedCountryIds=e.data})},onCancel(){this.$emit("edit-cancel")},onSave(){this.$emit("save")},shouldDisableCountry(e){return this.currencyCountryRounding.countryId===e.id?!1:this.assignedCountryIds.includes(e.id)}}};export{c as default};
//# sourceMappingURL=index-DKCUoEpq.js.map
