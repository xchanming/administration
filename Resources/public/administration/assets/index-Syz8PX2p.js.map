{"version":3,"file":"index-Syz8PX2p.js","sources":["../../../app/administration/src/app/asyncComponent/filter/sw-string-filter/sw-string-filter.html.twig","../../../app/administration/src/app/asyncComponent/filter/sw-string-filter/index.ts"],"sourcesContent":["<!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n{% block sw_string_filter %}\n<sw-base-filter\n    :title=\"filter.label\"\n    :show-reset-button=\"!!filter.value\"\n    :active=\"active\"\n    @filter-reset=\"resetFilter\"\n>\n    <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n    {% block sw_string_filter_content %}\n    <mt-text-field\n        :model-value=\"filter.value\"\n        :placeholder=\"filter.placeholder\"\n        @change=\"updateFilter\"\n    />\n    {% endblock %}\n</sw-base-filter>\n{% endblock %}\n","import type { PropType } from 'vue';\nimport template from './sw-string-filter.html.twig';\n\nconst { Criteria } = Cicada.Data;\n\n/**\n * @private\n */\nexport default Cicada.Component.wrapComponentConfig({\n    template,\n\n    compatConfig: Cicada.compatConfig,\n\n    props: {\n        filter: {\n            type: Object,\n            required: true,\n        },\n        active: {\n            type: Boolean,\n            required: true,\n        },\n        criteriaFilterType: {\n            type: String as PropType<'contains' | 'equals' | 'equalsAny' | 'prefix' | 'suffix'>,\n            required: false,\n            default: 'contains',\n            validValues: [\n                'contains',\n                'equals',\n                'equalsAny',\n                'prefix',\n                'suffix',\n            ],\n            validator(value: string): boolean {\n                return [\n                    'contains',\n                    'equals',\n                    'equalsAny',\n                    'prefix',\n                    'suffix',\n                ].includes(value);\n            },\n        },\n    },\n\n    methods: {\n        updateFilter(newValue: string): void {\n            if (!newValue || typeof this.filter.property !== 'string') {\n                this.resetFilter();\n\n                return;\n            }\n\n            let filterValue: string | string[] = newValue;\n            let filterCriteria;\n\n            if (this.criteriaFilterType === 'equalsAny') {\n                filterValue = newValue.split(',').map((e) => e.trim());\n                filterCriteria = Criteria.equalsAny(this.filter.property, filterValue);\n            } else {\n                filterCriteria = Criteria[this.criteriaFilterType](this.filter.property, filterValue);\n            }\n\n            this.$emit('filter-update', this.filter.name, [filterCriteria], filterValue);\n        },\n\n        resetFilter(): void {\n            this.$emit('filter-reset', this.filter.name);\n        },\n    },\n});\n"],"names":["template","Criteria","index","value","newValue","filterValue","filterCriteria","e"],"mappings":"AAAA,MAAeA,EAAA,oVCGT,CAAE,SAAAC,CAAS,EAAI,OAAO,KAK5BC,EAAe,OAAO,UAAU,oBAAoB,CAChD,SAAAF,EAEA,aAAc,OAAO,aAErB,MAAO,CACH,OAAQ,CACJ,KAAM,OACN,SAAU,EACd,EACA,OAAQ,CACJ,KAAM,QACN,SAAU,EACd,EACA,mBAAoB,CAChB,KAAM,OACN,SAAU,GACV,QAAS,WACT,YAAa,CACT,WACA,SACA,YACA,SACA,QACJ,EACA,UAAUG,EAAwB,CACvB,MAAA,CACH,WACA,SACA,YACA,SACA,QAAA,EACF,SAASA,CAAK,CACpB,CACJ,CACJ,EAEA,QAAS,CACL,aAAaC,EAAwB,CACjC,GAAI,CAACA,GAAY,OAAO,KAAK,OAAO,UAAa,SAAU,CACvD,KAAK,YAAY,EAEjB,MACJ,CAEA,IAAIC,EAAiCD,EACjCE,EAEA,KAAK,qBAAuB,aACdD,EAAAD,EAAS,MAAM,GAAG,EAAE,IAAKG,GAAMA,EAAE,KAAA,CAAM,EACrDD,EAAiBL,EAAS,UAAU,KAAK,OAAO,SAAUI,CAAW,GAErEC,EAAiBL,EAAS,KAAK,kBAAkB,EAAE,KAAK,OAAO,SAAUI,CAAW,EAGnF,KAAA,MAAM,gBAAiB,KAAK,OAAO,KAAM,CAACC,CAAc,EAAGD,CAAW,CAC/E,EAEA,aAAoB,CAChB,KAAK,MAAM,eAAgB,KAAK,OAAO,IAAI,CAC/C,CACJ,CACJ,CAAC"}