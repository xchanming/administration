const a=`{% block sw_rule_modal %} <sw-modal class="sw-rule-modal" variant="full" :title="modalTitle" :is-loading="isLoading" @modal-close="$emit('modal-close')" > {% block sw_rule_modal_basic_info %} <sw-container v-if="rule" columns="2fr 1fr" gap="0px 32px" > {% block sw_rule_modal_basic_info_name %} <sw-text-field v-model:value="rule.name" name="sw-field--rule-name" :label="$tc('sw-rule-modal.labelName')" :placeholder="$tc('sw-rule-modal.placeholderName')" :error="ruleNameError" required /> {% endblock %} {% block sw_rule_modal_basic_info_priority %} <sw-number-field v-model:value="rule.priority" name="sw-field--rule-priority" :label="$tc('sw-rule-modal.labelPriority')" :placeholder="$tc('sw-rule-modal.placeholderPriority')" :error="rulePriorityError" required /> {% endblock %} </sw-container> {% block sw_rule_modal_basic_info_description %} <sw-textarea-field v-if="rule" v-model:value="rule.description" name="sw-field--rule-description" :label="$tc('sw-rule-modal.labelDescription')" :placeholder="$tc('sw-rule-modal.placeholderDescription')" /> {% endblock %} {% endblock %} {% block sw_rule_modal_condition_tree %} <sw-condition-tree v-if="rule" :condition-repository="ruleConditionRepository" :condition-data-provider-service="ruleConditionDataProviderService" :root-condition="null" association-field="ruleId" :association-value="rule.id" :association-entity="rule" :initial-conditions="initialConditions" :scopes="allowedRuleScopes" @conditions-changed="conditionsChanged" /> {% endblock %} <template #modal-footer> {% block sw_rule_modal_footer %} {% block sw_rule_modal_footer_button_abort %} <sw-button size="small" @click="$emit('modal-close')" > {{ $tc('global.default.cancel') }} </sw-button> {% endblock %} {% block sw_rule_modal_footer_button_save %} <sw-button :disabled="isLoading" class="sw-rule-modal__save" size="small" variant="primary" @click="saveAndClose" > {{ $tc('global.default.save') }} </sw-button> {% endblock %} {% endblock %} </template> </sw-modal> {% endblock %}`,{Component:s,Mixin:l,Context:r}=Cicada,{EntityCollection:n,Criteria:d}=Cicada.Data,{mapPropertyErrors:c}=s.getComponentHelper();s.register("sw-rule-modal",{template:a,compatConfig:Cicada.compatConfig,inject:["repositoryFactory","ruleConditionDataProviderService","ruleConditionsConfigApiService","feature"],emits:["save","modal-close"],mixins:[l.getByName("notification"),l.getByName("placeholder")],props:{allowedRuleScopes:{type:Array,required:!1,default:null},ruleAwareGroupKey:{type:String,required:!1,default:null}},data(){return{rule:null,initialConditions:null,isLoading:!1}},computed:{ruleRepository(){return this.repositoryFactory.create("rule")},ruleConditionRepository(){return this.rule?this.repositoryFactory.create(this.rule.conditions.entity,this.rule.conditions.source):null},appScriptConditionRepository(){return this.repositoryFactory.create("app_script_condition")},modalTitle(){return!this.rule||this.rule.isNew()?this.$tc("sw-rule-modal.modalTitleNew"):this.placeholder(this.rule,"name",this.$tc("sw-rule-modal.modalTitleModify"))},...c("rule",["name","priority"])},created(){this.createdComponent()},methods:{createdComponent(){this.isLoading=!0,this.loadConditionData().then(e=>{this.ruleConditionDataProviderService.addScriptConditions(e),this.rule=this.ruleRepository.create(r.api),this.initialConditions=n.fromCollection(this.rule.conditions),this.rule[this.ruleAwareGroupKey]&&this.rule[this.ruleAwareGroupKey].push({}),this.isLoading=!1})},loadConditionData(){const e={...r.api,languageId:Cicada.State.get("session").languageId},i=new d(1,500);return i.addAssociation("appScriptCondition"),Promise.all([this.appScriptConditionRepository.search(i,e),this.ruleConditionsConfigApiService.load()]).then(t=>t[0])},conditionsChanged({conditions:e}){this.rule.conditions=e},getChildrenConditions(e){const i=[];return e.children.forEach(t=>{if(i.push(t),t.children){const o=this.getChildrenConditions(t);i.push(...o)}}),i},validateRuleAwareness(){const e=[];this.rule.conditions.forEach(t=>{if(e.push(t),t.children){const o=this.getChildrenConditions(t);e.push(...o)}});const i=this.ruleConditionDataProviderService.getRestrictedRuleTooltipConfig(e,this.ruleAwareGroupKey);return i.disabled?!0:(this.createNotificationError({title:this.$tc("global.default.error"),message:i.message}),!1)},saveAndClose(){if(!this.validateRuleAwareness())return Promise.resolve();this.rule[this.ruleAwareGroupKey]&&(this.rule[this.ruleAwareGroupKey]=[]);const e=this.$tc("global.default.success"),i=this.$tc("sw-rule-modal.messageSaveSuccess",0,{name:this.rule.name}),t=this.$tc("global.default.error"),o=this.$tc("sw-rule-modal.messageSaveError",0,{name:this.rule.name});return this.isLoading=!0,this.ruleRepository.save(this.rule,r.api).then(()=>{this.createNotificationSuccess({title:e,message:i}),this.loading=!1,this.$emit("save",this.rule.id,this.rule),this.$emit("modal-close")}).catch(()=>{this.isLoading=!1,this.createNotificationError({title:t,message:o})})}}});
//# sourceMappingURL=index-BJI1JNlZ.js.map
