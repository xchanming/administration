{"version":3,"file":"index-zfhinVNv.js","sources":["../../../app/administration/src/app/component/rule/sw-condition-operator-select/sw-condition-operator-select.html.twig","../../../app/administration/src/app/component/rule/sw-condition-operator-select/index.js"],"sourcesContent":["<!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n{% block sw_condition_type_select %}\n<sw-single-select\n    class=\"sw-condition-operator-select sw-condition-operator-select__select\"\n    size=\"medium\"\n    label-value=\"label\"\n    value-property=\"identifier\"\n    :options=\"translatedOperators\"\n    :placeholder=\"$tc('global.sw-condition.operator.placeholder')\"\n    :value=\"operator\"\n    :disabled=\"disabled || undefined\"\n    required\n    show-clearable-button\n    @update:value=\"changeOperator\"\n/>\n{% endblock %}\n","import template from './sw-condition-operator-select.html.twig';\nimport './sw-condition-operator-select.scss';\n\nconst { Component } = Cicada;\n\n/**\n * @private\n * @package services-settings\n */\nComponent.register('sw-condition-operator-select', {\n    template: template,\n\n    compatConfig: Cicada.compatConfig,\n\n    props: {\n        operators: {\n            type: Array,\n            required: true,\n        },\n\n        condition: {\n            type: Object,\n            required: true,\n        },\n\n        disabled: {\n            type: Boolean,\n            required: false,\n            default: false,\n        },\n\n        /**\n         * The used condition snippets depend on the pre-operator snippets and should be plural or singular\n         * depending on the pre-operator selection.\n         */\n        plural: {\n            type: Boolean,\n            required: false,\n            default: false,\n        },\n    },\n\n    computed: {\n        operator: {\n            get() {\n                if (!this.condition.value) {\n                    return null;\n                }\n                return this.condition.value.operator;\n            },\n            set(operator) {\n                if (!this.condition.value) {\n                    // eslint-disable-next-line vue/no-mutating-props\n                    this.condition.value = {};\n                }\n                // eslint-disable-next-line vue/no-mutating-props\n                this.condition.value = { ...this.condition.value, operator };\n            },\n        },\n\n        translatedOperators() {\n            return this.operators.map(({ identifier, label }) => {\n                return {\n                    identifier,\n                    label: this.plural ? this.$tc(label, 2) : this.$tc(label),\n                };\n            });\n        },\n    },\n\n    methods: {\n        changeOperator(event) {\n            this.operator = event;\n        },\n    },\n});\n"],"names":["template","Component","operator","identifier","label","event"],"mappings":"AAAA,MAAeA,EAAA,maCGT,CAAE,UAAAC,CAAW,EAAG,OAMtBA,EAAU,SAAS,+BAAgC,CAC/C,SAAUD,EAEV,aAAc,OAAO,aAErB,MAAO,CACH,UAAW,CACP,KAAM,MACN,SAAU,EACb,EAED,UAAW,CACP,KAAM,OACN,SAAU,EACb,EAED,SAAU,CACN,KAAM,QACN,SAAU,GACV,QAAS,EACZ,EAMD,OAAQ,CACJ,KAAM,QACN,SAAU,GACV,QAAS,EACZ,CACJ,EAED,SAAU,CACN,SAAU,CACN,KAAM,CACF,OAAK,KAAK,UAAU,MAGb,KAAK,UAAU,MAAM,SAFjB,IAGd,EACD,IAAIE,EAAU,CACL,KAAK,UAAU,QAEhB,KAAK,UAAU,MAAQ,IAG3B,KAAK,UAAU,MAAQ,CAAE,GAAG,KAAK,UAAU,MAAO,SAAAA,EACrD,CACJ,EAED,qBAAsB,CAClB,OAAO,KAAK,UAAU,IAAI,CAAC,CAAE,WAAAC,EAAY,MAAAC,MAC9B,CACH,WAAAD,EACA,MAAO,KAAK,OAAS,KAAK,IAAIC,EAAO,CAAC,EAAI,KAAK,IAAIA,CAAK,CAC5E,EACa,CACJ,CACJ,EAED,QAAS,CACL,eAAeC,EAAO,CAClB,KAAK,SAAWA,CACnB,CACJ,CACL,CAAC"}