const l=`{% block sw_grid %} <div class="sw-grid" :class="gridClasses" > <slot name="content"> {% block sw_grid_slot_content %} <div class="sw-grid__content" :class="gridContentClasses" > <slot v-if="header" name="header" > {% block sw_grid_slot_header %} <div class="sw-grid__header" :style="[columnFlex, { paddingRight: \`\${scrollbarOffset}px\` }]" > {% block sw_grid_slot_header_cell_selectable %} <div v-if="selectable" class="sw-grid-column" > <div class="sw-grid__cell-content"> <sw-checkbox-field v-model:value="allSelectedChecked" @update:value="selectAll" /> </div> </div> {% endblock %} {% block sw_grid_slot_header_cell %} <div v-for="(column, columnIndex) in columns" :key="columnIndex" :class="[{ 'sw-grid-column': true, 'is--sortable': column.sortable, 'is--sorted': sort === column.dataIndex }, \`sw-grid-column--\${column.align}\`]" role="gridcell" tabindex="0" @click="onGridCellClick($event, column)" @keydown.enter="onGridCellClick($event, column)" > {% block sw_grid_slot_header_cell_content %} <div class="sw-grid__cell-content"> {% block sw_grid_slot_header_cell_icon_label %} <span v-if="column.iconLabel" class="sw-grid__cell-label" > <sw-icon :name="column.iconLabel" :title="column.label" /> </span> {% endblock %} {% block sw_grid_slot_header_cell_label %} <span v-else-if="column.label" class="sw-grid__cell-label" >{{ column.label }}</span> {% endblock %} {% block sw_grid_slot_header_cell_sortable %} <span v-if="column.sortable && sort === column.dataIndex" class="sw-grid_cell-sortable" > <sw-icon v-if="sortDir === 'ASC'" name="regular-chevron-down-xxs" size="16px" /> <sw-icon v-else name="regular-chevron-up-xxs" size="16px" /> </span> {% endblock %} </div> {% endblock %} </div> {% endblock %} </div> {% endblock %} </slot> <slot name="body"> {% block sw_grid_slot_body %} <div ref="swGridBody" class="sw-grid__body" > <slot v-for="(item, index) in items" :key="getKey(item)" name="items" > {% block sw_grid_body_slot_items %} <sw-grid-row :style="columnFlex" :item="item" :index="index" :allow-inline-edit="allowInlineEdit" :class="['sw-grid__row--' + index, { 'is--selected': isSelected(item.id), 'is--deleted': item.isDeleted, 'is--new': item.isLocal }]" @inline-edit-finish="onInlineEditFinish" @inline-edit-start="onInlineEditStart" > {% block sw_grid_body_item_selectable %} <div v-if="selectable" class="sw-grid-column" > <div class="sw-grid__cell-content"> {# @deprecated tag:v6.7.0 - The property :disabled will be removed #} <sw-checkbox-field :id="item.id" :value="isSelected(item.id)" :disabled="isGridDisabled(item.id)" @update:value="selectItem($event, item)" /> </div> </div> {% endblock %} <slot name="columns" :item="item" > {% block sw_grid_slot_columns %}{% endblock %} </slot> </sw-grid-row> {% endblock %} </slot> {% block sw_grid_slot_empty_columns %} <slot v-if="!items.length" name="empty" > {% block sw_grid_slot_empty_columns_content %}{% endblock %} </slot> {% endblock %} </div> {% endblock %} </slot> {% block sw_grid_pagination %} <div v-if="hasPaginationSlot && items.length" class="sw-grid__pagination" > <slot name="pagination"> {% block sw_grid_slot_pagination %}{% endblock %} </slot> </div> {% endblock %} </div> {% endblock %} </slot> </div> {% endblock %}`,{Component:s}=Shopware,{dom:n}=Shopware.Utils;s.register("sw-grid",{template:l,provide(){return{swGridInlineEditStart:this.inlineEditingStart,swGridInlineEditCancel:this.disableActiveInlineEditing,swOnInlineEditStart:this.onInlineEditStart,swRegisterGridDisableInlineEditListener:this.registerGridDisableInlineEditListener,swUnregisterGridDisableInlineEditListener:this.unregisterGridDisableInlineEditListener,swGridSetColumns:this.setColumns,swGridColumns:this.columns}},emits:["inline-edit-finish","inline-edit-start","sw-grid-disable-inline-editing","inline-edit-cancel","sw-grid-select-all","sw-grid-select-item","sort-column"],props:{items:{type:Array,required:!1,default:null},selectable:{type:Boolean,required:!1,default:!0},variant:{type:String,required:!1,default:"normal"},header:{type:Boolean,required:!1,default:!0},sortBy:{type:String,required:!1,default:null},sortDirection:{type:String,required:!1,default:"ASC"},isFullpage:{type:Boolean,required:!1,default:!1},table:{type:Boolean,required:!1,default:!1},allowInlineEdit:{type:Boolean,required:!1,default:!0}},data(){return{columns:[],selection:{},scrollbarOffset:0,editing:null,allSelectedChecked:!1,swGridDisableInlineEditListener:[]}},computed:{sort(){return this.sortBy},sortDir(){return this.sortDirection},sizeClass(){return`sw-grid--${this.variant}`},hasPaginationSlot(){return!!this.$slots.pagination},gridClasses(){return{"sw-grid--fullpage":this.isFullpage,"sw-grid--table":this.table,[this.sizeClass]:!0}},gridContentClasses(){return{"sw-grid__content--header":this.header,"sw-grid__content--pagination":this.hasPaginationSlot}},columnFlex(){let e=this.selectable===!0?"50px ":"";return this.columns.forEach(i=>{`${parseInt(i.flex,10)}`===i.flex?e+=`${i.flex}fr `:e+=`${i.flex} `}),{"grid-template-columns":e.trim()}}},updated(){this.updatedComponent()},created(){this.createdComponent()},methods:{createdComponent(){const e=this;this.registerInlineEditingEvents(),this.$device.onResize({listener(){e.setScrollbarOffset()},component:this})},updatedComponent(){this.setScrollbarOffset()},registerGridDisableInlineEditListener(e){this.swGridDisableInlineEditListener.push(e)},unregisterGridDisableInlineEditListener(e){this.swGridDisableInlineEditListener=this.swGridDisableInlineEditListener.filter(i=>i!==e)},onInlineEditFinish(e){this.editing=null,this.$emit("inline-edit-finish",e)},onInlineEditStart(e){this.$emit("inline-edit-start",e)},registerInlineEditingEvents(){},inlineEditingStart(e){this.editing!=null&&this.$emit("sw-grid-disable-inline-editing",this.editing),this.editing=e},disableActiveInlineEditing(e,i){this.editing=null,this.$emit("inline-edit-cancel",e,i)},selectAll(e){this.selection={},this.items.forEach(i=>{this.isSelected(i.id)!==e&&this.selectItem(e,i)}),this.allSelectedChecked=e,this.$emit("sw-grid-select-all",this.selection)},getSelection(){return this.selection},selectItem(e,i){const t=this.selection;e===!0?t[i.id]=i:!e&&t[i.id]&&delete this.selection[i.id],this.selection={},this.selection=t,this.checkSelection(),this.$emit("sw-grid-select-item",this.selection,i,e)},isSelected(e){return typeof this.selection[e]<"u"},isGridDisabled(e){return this.isSelected(e)&&this.selection[e].gridDisabled},checkSelection(){this.allSelectedChecked=!this.items.some(e=>this.selection[e.id]===void 0)},getScrollBarWidth(){if(!this.$el)return 0;const e=this.$el.getElementsByClassName("sw-grid--body")[0];return e.offsetWidth&&e.clientWidth?e.offsetWidth-e.clientWidth:0},onGridCellClick(e,i){i.sortable&&(this.$emit("sw-grid-disable-inline-editing"),this.$emit("sort-column",i))},setScrollbarOffset(){this.scrollbarOffset=n.getScrollbarWidth(this.$refs.swGridBody)},setColumns(e){this.columns=e},getKey(e){if(e.id===void 0||e.id===null){Shopware.Utils.debug.error("sw-grid item without `id` property",e,"more info here: https://vuejs.org/api/built-in-special-attributes.html#key");return}return e.id}}});
