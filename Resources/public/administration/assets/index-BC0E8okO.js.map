{"version":3,"file":"index-BC0E8okO.js","sources":["../../../app/administration/src/app/component/form/sw-number-field-deprecated/sw-number-field.html.twig","../../../app/administration/src/app/component/form/sw-number-field-deprecated/index.js"],"sourcesContent":["<!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n{% block sw_text_field %}\n<!-- eslint-disable sw-deprecation-rules/no-twigjs-blocks, vue/no-duplicate-attributes, vue/no-parsing-error -->\n{% block sw_number_field %}\n<sw-contextual-field\n    class=\"sw-field--number\"\n    v-bind=\"{\n        ...$attrs,\n        ...inheritanceAttrs\n    }\"\n    :name=\"formFieldName\"\n    @inheritance-restore=\"$emit('inheritance-restore', $event)\"\n    @inheritance-remove=\"$emit('inheritance-remove', $event)\"\n>\n    <template\n        v-if=\"hasPrefix\"\n        #sw-contextual-field-prefix=\"{ disabled, identification }\"\n    >\n        <slot\n            name=\"prefix\"\n            v-bind=\"{ disabled, identification }\"\n        ></slot>\n    </template>\n\n    <template #sw-field-input=\"{ identification, error, disabled, size, setFocusClass, removeFocusClass }\">\n        <!-- eslint-disable-next-line vuejs-accessibility/form-control-has-label -->\n        <input\n            :id=\"identification\"\n            :name=\"identification\"\n            type=\"text\"\n            :value=\"stringRepresentation\"\n            :class=\"numberAlignEnd ? 'sw-field--number__align-end' : ''\"\n            :placeholder=\"placeholder\"\n            :disabled=\"disabled\"\n            autocomplete=\"off\"\n            @input=\"onInput\"\n            @keydown.up=\"increaseNumberByStep\"\n            @keydown.down=\"decreaseNumberByStep\"\n            @change=\"onChange\"\n            @focus=\"setFocusClass\"\n            @blur=\"removeFocusClass\"\n        >\n    </template>\n\n    <template\n        v-if=\"copyable || hasSuffix\"\n        #sw-contextual-field-suffix=\"{ disabled, identification }\"\n    >\n        <slot\n            name=\"suffix\"\n            v-bind=\"{ identification }\"\n        ></slot>\n        <sw-field-copyable\n            v-if=\"copyable\"\n            :display-name=\"identification\"\n            :copyable-text=\"stringRepresentation\"\n            :tooltip=\"copyableTooltip\"\n        />\n    </template>\n\n    <template #label>\n        <slot name=\"label\"></slot>\n    </template>\n\n    <template #hint>\n        <slot name=\"hint\"></slot>\n    </template>\n</sw-contextual-field>\n{% endblock %}\n{% endblock %}\n","import template from './sw-number-field.html.twig';\nimport './sw-number-field.scss';\n\nconst { Component } = Cicada;\nconst { warn } = Cicada.Utils.debug;\n\n/**\n * @package admin\n *\n * @private\n * @description Number field component which supports Int and Float with optional min, max and step.\n * @status ready\n * @example-type dynamic\n * @component-example\n * <sw-number-field type=\"number\" label=\"Name\" v-model=\"model\" numberType=\"int\"\n * :max=\"20\" :min=\"5\" :step=\"5\"></sw-number-field>\n */\nComponent.extend('sw-number-field-deprecated', 'sw-text-field-deprecated', {\n    template,\n    inheritAttrs: false,\n\n    inject: ['feature'],\n\n    emits: [\n        'update:value',\n        'input-change',\n        'inheritance-restore',\n        'inheritance-remove',\n        'ends-with-decimal-separator',\n    ],\n\n    props: {\n        numberType: {\n            type: String,\n            required: false,\n            default: 'float',\n            validValues: [\n                'float',\n                'int',\n            ],\n            validator(value) {\n                return [\n                    'float',\n                    'int',\n                ].includes(value);\n            },\n        },\n\n        step: {\n            type: Number,\n            required: false,\n            default: null,\n        },\n\n        min: {\n            type: Number,\n            required: false,\n            default: null,\n        },\n\n        max: {\n            type: Number,\n            required: false,\n            default: null,\n        },\n\n        value: {\n            type: Number,\n            required: false,\n            default: null,\n        },\n\n        digits: {\n            type: Number,\n            required: false,\n            default: 2,\n            validator(value) {\n                const isInt = value === Math.floor(value);\n                if (!isInt) {\n                    warn('sw-number-field', 'Provided prop digits must be of type integer');\n                }\n                return isInt;\n            },\n        },\n\n        fillDigits: {\n            type: Boolean,\n            required: false,\n            default: false,\n        },\n\n        allowEmpty: {\n            type: Boolean,\n            required: false,\n            default: false,\n        },\n\n        numberAlignEnd: {\n            type: Boolean,\n            required: false,\n            default: false,\n        },\n    },\n\n    data() {\n        return {\n            currentValue: this.value,\n        };\n    },\n\n    computed: {\n        realStep() {\n            if (this.step === null) {\n                return this.numberType === 'int' ? 1 : 0.01;\n            }\n\n            return this.numberType === 'int' ? Math.round(this.step) : this.step;\n        },\n\n        realMinimum() {\n            if (this.min === null) {\n                return null;\n            }\n            return this.numberType === 'int' ? Math.ceil(this.min) : this.min;\n        },\n\n        realMaximum() {\n            if (this.max === null) {\n                return null;\n            }\n\n            return this.numberType === 'int' ? Math.floor(this.max) : this.max;\n        },\n\n        stringRepresentation() {\n            if (this.currentValue === null) {\n                return '';\n            }\n\n            // remove scientific notation\n            if (this.value !== null && /\\d+\\.?\\d*e[+-]*\\d+/i.test(this.value)) {\n                return this.value.toLocaleString('fullwide', {\n                    useGrouping: false,\n                });\n            }\n\n            return this.fillDigits && this.numberType !== 'int'\n                ? this.currentValue.toFixed(this.digits)\n                : this.currentValue.toString();\n        },\n    },\n\n    watch: {\n        value: {\n            handler() {\n                if (this.value === null || this.value === undefined) {\n                    this.currentValue = null;\n                    return;\n                }\n\n                this.computeValue(this.value.toString());\n            },\n            immediate: true,\n        },\n    },\n\n    methods: {\n        onChange(event) {\n            this.computeValue(event.target.value);\n\n            this.$emit('update:value', this.currentValue);\n        },\n\n        onInput(event) {\n            const targetValue = event.target.value;\n            let val = this.getNumberFromString(event.target.value);\n\n            if (!Number.isNaN(val)) {\n                if (this.max && val > this.max) {\n                    val = this.max;\n                }\n                if (this.min && val < this.min) {\n                    val = this.min;\n                }\n\n                this.currentValue = val;\n                this.$emit('input-change', val);\n            } else if (this.allowEmpty === true) {\n                this.currentValue = val;\n                this.$emit('input-change', val);\n            } else {\n                this.currentValue = this.min ?? 0;\n                this.$emit('input-change', this.min ?? 0);\n            }\n\n            // When target value ends with a dot or comma, emit this information to the parent component\n            if (targetValue.endsWith('.') || targetValue.endsWith(',')) {\n                this.$emit('ends-with-decimal-separator', true);\n            } else {\n                this.$emit('ends-with-decimal-separator', false);\n            }\n        },\n\n        increaseNumberByStep() {\n            this.computeValue((this.currentValue + this.realStep).toString());\n            this.$emit('update:value', this.currentValue);\n        },\n\n        decreaseNumberByStep() {\n            this.computeValue((this.currentValue - this.realStep).toString());\n            this.$emit('update:value', this.currentValue);\n        },\n\n        computeValue(stringRepresentation) {\n            const value = this.getNumberFromString(stringRepresentation);\n            this.currentValue = this.parseValue(value);\n        },\n\n        parseValue(value) {\n            if (value === null || Number.isNaN(value) || !Number.isFinite(value)) {\n                if (this.allowEmpty) {\n                    return null;\n                }\n\n                return this.parseValue(0);\n            }\n\n            return this.checkForInteger(this.checkBoundaries(value));\n        },\n\n        checkBoundaries(value) {\n            if (this.realMaximum !== null && value > this.realMaximum) {\n                value = this.realMaximum;\n            }\n\n            if (this.realMinimum !== null && value < this.realMinimum) {\n                value = this.realMinimum;\n            }\n\n            return value;\n        },\n\n        getNumberFromString(value) {\n            let splits = value.split('e').shift();\n            splits = splits.replace(/,/g, '.').split('.');\n\n            if (splits.length === 1) {\n                return parseFloat(splits[0]);\n            }\n\n            if (this.numberType === 'int') {\n                return parseInt(splits.join(''), 10);\n            }\n            const decimals = splits[splits.length - 1].length;\n            const float = parseFloat(splits.join('.')).toFixed(decimals);\n            return decimals > this.digits ? Math.round(float * 10 ** this.digits) / 10 ** this.digits : Number(float);\n        },\n\n        checkForInteger(value) {\n            if (this.numberType !== 'int') {\n                return value;\n            }\n\n            const floor = Math.floor(value);\n            if (floor !== value) {\n                this.$nextTick(() => {\n                    this.$forceUpdate();\n                });\n            }\n            return floor;\n        },\n    },\n});\n"],"names":["template","Component","warn","value","isInt","event","targetValue","val","stringRepresentation","splits","decimals","float","floor"],"mappings":"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"}