import{a as u,f as m}from"./util.service-B_A8c2s1.js";import{A as d}from"./api.service-BUA61cyq.js";import"./channel-DxwX5hMG.js";import"./administration-BlrHhDOI.js";import"./_baseUniq-B2mRmqmX.js";import"./_baseIteratee-vB4JeBI0.js";import"./camelCase-C_yyocYD.js";import"./string.utils-Bdo6o_1y.js";class c{constructor({uploadTag:e,src:t,targetId:r,fileName:s,extension:a="dat",isPrivate:n=!1}){this.running=!1,this.src=t,this.uploadTag=e,this.targetId=r,this.fileName=s,this.extension=a,this.error=null,this.isPrivate=n}}const h={UPLOAD_ADDED:"media-upload-add",UPLOAD_FINISHED:"media-upload-finish",UPLOAD_FAILED:"media-upload-fail",UPLOAD_CANCELED:"media-upload-cancel"},{Criteria:f}=Cicada.Data;class _ extends d{constructor(e,t,r="media"){super(e,t,r),this.name="mediaService",this.uploads=[],this.$listeners={},this.cacheDefaultFolder={}}hasListeners(e){return e?this.$listeners.hasOwnProperty(e):!1}hasDefaultListeners(){return this.hasListeners("default")}addListener(e,t){this.hasListeners(e)||(this.$listeners[e]=[]),this.$listeners[e].push(t)}removeListener(e,t){if(this.hasListeners(e)){if(t===void 0){u.remove(this.$listeners[e],()=>!0);return}u.remove(this.$listeners[e],r=>r===t)}}removeDefaultListener(e){this.removeListener("default",e)}addDefaultListener(e){this.addListener("default",e)}getListenerForTag(e){const t=this.hasListeners(e)?this.$listeners[e]:[],r=this.hasDefaultListeners()?this.$listeners.default:[];return[...t,...r]}_createUploadEvent(e,t,r){return{action:e,uploadTag:t,payload:r}}addUpload(e,t){this.addUploads(e,[t])}addUploads(e,t){const r=t.map(s=>new c({uploadTag:e,...s}));this.uploads.push(...r),this.getListenerForTag(e).forEach(s=>{s(this._createUploadEvent(h.UPLOAD_ADDED,e,{data:r}))})}keepFile(e,t){const r=new c({uploadTag:e,...t});this.getListenerForTag(e).forEach(s=>{s(this._createUploadEvent(h.UPLOAD_FINISHED,e,{targetId:r.targetId,successAmount:0,failureAmount:0,totalAmount:0,customMessage:"global.sw-media-upload.notification.assigned.message"}))})}cancelUpload(e,t){const r=new c({uploadTag:e,...t});this.getListenerForTag(e).forEach(s=>{s(this._createUploadEvent(h.UPLOAD_CANCELED,e,{data:r}))})}removeByTag(e){u.remove(this.uploads,t=>t.uploadTag===e)}runUploads(e){const t=u.remove(this.uploads,i=>i.uploadTag===e),r=this.getListenerForTag(e);if(t.length===0)return Promise.resolve();const s=t.length;let a=0,n=0;return Promise.all(t.map(i=>i.running?Promise.resolve():(i.running=!0,this._startUpload(i).then(()=>{i.running=!1,a+=1,r.forEach(o=>{o(this._createUploadEvent(h.UPLOAD_FINISHED,e,{targetId:i.targetId,successAmount:a,failureAmount:n,totalAmount:s}))})}).catch(o=>{i.error=o,i.running=!1,n+=1,i.successAmount=a,i.failureAmount=n,i.totalAmount=s,r.forEach(l=>{l(this._createUploadEvent(h.UPLOAD_FAILED,e,i))})}))))}_startUpload(e){return e.src instanceof File?m.readAsArrayBuffer(e.src).then(t=>this.uploadMediaById(e.targetId,e.src.type,t,e.extension,e.fileName)):e.src instanceof URL?this.uploadMediaFromUrl(e.targetId,e.src.href,e.extension,e.fileName):Promise.reject(new Error("src of upload must either be an instance of File or URL"))}uploadMediaById(e,t,r,s,a=e){s==="glb"&&t===""&&(t="model/gltf-binary"),t==="application/json"&&(t="text/plain"),t===""&&(t="application/octet-stream");const n=`/_action/${this.getApiBasePath(e)}/upload`,i=this.getBasicHeaders({"Content-Type":t}),o={extension:s,fileName:a};return this.httpClient.post(n,r,{params:o,headers:i}).then(l=>d.handleResponse(l))}uploadMediaFromUrl(e,t,r,s=e){const a=`/_action/${this.getApiBasePath(e)}/upload`,n=this.getBasicHeaders({"Content-Type":"application/json"}),i={extension:r,fileName:s},o=JSON.stringify({url:t});return this.httpClient.post(a,o,{params:i,headers:n}).then(l=>d.handleResponse(l))}renameMedia(e,t){const r=`/_action/${this.getApiBasePath(e)}/rename`;return this.httpClient.post(r,JSON.stringify({fileName:t}),{params:{},headers:this.getBasicHeaders()}).then(s=>d.handleResponse(s))}provideName(e,t,r=null){const s=`/_action/${this.getApiBasePath()}/provide-name`;return this.httpClient.get(s,{params:{fileName:e,extension:t,mediaId:r},headers:this.getBasicHeaders()}).then(a=>d.handleResponse(a))}async getDefaultFolderId(e){var n;if(this.cacheDefaultFolder[e])return this.cacheDefaultFolder[e];const t=Cicada.Service("repositoryFactory").create("media_default_folder"),r=new f(1,1).addFilter(f.equals("entity",e)),s=await t.search(r);if(s.length!==1)return null;const a=s[0];return(n=a.folder)!=null&&n.id?(this.cacheDefaultFolder[e]=a.folder.id,a.folder.id):null}}export{h as UploadEvents,_ as default};
//# sourceMappingURL=media.api.service-DQEvJdmt.js.map
