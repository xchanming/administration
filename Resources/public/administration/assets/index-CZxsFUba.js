const o='{% block sw_multi_select_filter %} <sw-base-filter :title="filter.label" :show-reset-button="!!values.length" :active="active" @filter-reset="resetFilter" > {% block sw_multi_select_filter_content %} {% block sw_multi_select_filter_content_entity_select %} <sw-entity-multi-select v-if="isEntityMultiSelect" :label-property="labelProperty" :placeholder="filter.placeholder" :criteria="filter.criteria" :entity-name="filter.schema.entity" :entity-collection="values" :display-variants="filter.displayVariants" @update:entity-collection="changeValue" > {% block sw_multi_select_filter_content_slot_selection_label_property %} <template #selection-label-property="{ item, index }"> <slot name="selection-label-property" v-bind="{ item, index }" ></slot> </template> {% endblock %} {% block sw_multi_select_filter_content_slot_result_item %} <template #result-item="{ item, index }"> <slot name="result-item" v-bind="{ item, index }" ></slot> </template> {% endblock %} </sw-entity-multi-select> {% endblock %} {% block sw_multi_select_filter_content_option_select %} <sw-multi-select v-if="filter.options" :label-property="filter.labelProperty" :value-property="filter.valueProperty" :placeholder="filter.placeholder" :options="filter.options" :value="values" @update:value="changeValue" /> {% endblock %} {% endblock %} </sw-base-filter> {% endblock %}',{Component:n}=Shopware,{Criteria:l,EntityCollection:a}=Shopware.Data;n.register("sw-multi-select-filter",{template:o,inject:["repositoryFactory"],emits:["filter-update","filter-reset"],props:{filter:{type:Object,required:!0},active:{type:Boolean,required:!0}},computed:{isEntityMultiSelect(){return!this.filter.options},labelProperty(){return this.filter.labelProperty||"name"},values(){if(!this.isEntityMultiSelect)return this.filter.value||[];const e=new a("",this.filter.schema.entity,Shopware.Context.api);return Array.isArray(this.filter.value)&&this.filter.value.forEach(i=>{const r={id:i.id,[this.labelProperty]:i[this.labelProperty]};this.filter.displayVariants&&(r.variation=i.variation),e.push(r)}),e}},methods:{changeValue(e){if(e.length<=0){this.resetFilter();return}let i=[];if(this.filter.existingType){const t=[];e.forEach(s=>{t.push(l.not("and",[l.equals(`${s}.id`,null)]))}),i.push(l.multi("or",t))}else i=[this.filter.schema?l.equalsAny(`${this.filter.property}.${this.filter.schema.referenceField}`,e.map(t=>t[this.filter.schema.referenceField])):l.equalsAny(this.filter.property,e)];const r=this.isEntityMultiSelect?e.map(t=>{var s;return this.filter.displayVariants?{id:t.id,variation:t.variation,[this.labelProperty]:((s=t==null?void 0:t.translated)==null?void 0:s[this.labelProperty])||(t==null?void 0:t[this.labelProperty])}:{id:t.id,[this.labelProperty]:t==null?void 0:t[this.labelProperty]}}):e;this.$emit("filter-update",this.filter.name,i,r)},resetFilter(){this.$emit("filter-reset",this.filter.name)}}});
