{"version":3,"file":"index-B2ljb1NB.js","sources":["../../../app/administration/src/module/sw-cms/component/sw-cms-section/sw-cms-section.html.twig","../../../app/administration/src/module/sw-cms/component/sw-cms-section/index.ts"],"sourcesContent":["<!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n{% block sw_cms_section %}\n<div\n    class=\"sw-cms-section\"\n    :class=\"[sectionClasses, customSectionClass, sectionTypeClass]\"\n>\n\n    <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n    {% block sw_cms_section_actions %}\n    <sw-cms-section-actions\n        :section=\"section\"\n        :disabled=\"disabled || undefined\"\n    />\n    {% endblock %}\n\n    <div\n        class=\"sw-cms-section__wrapper\"\n        :style=\"sectionStyles\"\n    >\n        <sw-cms-visibility-toggle\n            v-if=\"isVisible\"\n            :text=\"toggleButtonText\"\n            :is-collapsed=\"isCollapsed\"\n            :class=\"expandedClass\"\n            @toggle=\"toggleVisibility\"\n        />\n        <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n        {% block sw_cms_section_sidebar %}\n        <div\n            v-if=\"isSideBarType && (!isCollapsed || !isVisible)\"\n            class=\"sw-cms-section__sidebar\"\n            :class=\"sectionSidebarClasses\"\n        >\n\n            <template v-if=\"sideBarEmpty\">\n                <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n                {% block sw_cms_section_sidebar_block_empty %}\n                <div\n                    v-droppable=\"{ dragGroup: 'cms-stage', data: getDropData(blockCount, 'sidebar') }\"\n                    class=\"sw-cms-section__empty-stage\"\n                    role=\"button\"\n                    tabindex=\"0\"\n                    @click=\"openBlockBar\"\n                    @keydown.enter=\"openBlockBar\"\n                >\n\n                    <sw-icon\n                        name=\"regular-plus-circle\"\n                        size=\"24\"\n                    />\n                    <p>{{ $tc('sw-cms.detail.label.addBlocks') }}</p>\n                </div>\n                {% endblock %}\n            </template>\n\n            <template v-else>\n\n                <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n                {% block sw_cms_section_sidebar_add_first_block %}\n                <sw-cms-stage-add-block\n                    v-if=\"isSystemDefaultLanguage && !disabled\"\n                    :key=\"0\"\n                    v-droppable=\"{ dragGroup: 'cms-stage', data: getDropData(0, 'sidebar') }\"\n                    @stage-block-add=\"onAddSectionBlock\"\n                />\n                {% endblock %}\n\n                <template\n                    v-for=\"(block, index) in sideBarBlocks\"\n                    :key=\"block.id\"\n                >\n                    <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n                    {% block sw_cms_section_sidebar_block %}\n                    <sw-cms-block\n                        class=\"sw-cms-stage-block\"\n                        :block=\"block\"\n                        :disabled=\"disabled || undefined\"\n                        :active=\"selectedBlock !== null && selectedBlock.id === block.id\"\n                        :has-errors=\"hasBlockErrors(block)\"\n                        @block-overlay-click=\"onBlockSelection(block)\"\n                    >\n\n                        <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n                        {% block sw_cms_section_sidebar_block_component %}\n                        <component :is=\"`sw-cms-block-${block.type}`\">\n                            <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n                            {% block sw_cms_section_content_block_slot %}\n                            <template\n                                v-for=\"el in block.slots\"\n                                :key=\"el.id\"\n                                #[el.slot]\n                            >\n                                <sw-cms-slot\n                                    :element=\"el\"\n                                    :disabled=\"disabled || undefined\"\n                                    :active=\"selectedBlock !== null && selectedBlock.id === block.id\"\n                                />\n                            </template>\n                            {% endblock %}\n                        </component>\n                        {% endblock %}\n                    </sw-cms-block>\n                    {% endblock %}\n\n                    <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n                    {% block sw_cms_section_add_sidebar_block %}\n                    <sw-cms-stage-add-block\n                        v-if=\"isSystemDefaultLanguage && !disabled\"\n                        :key=\"index + 1\"\n                        v-droppable=\"{ dragGroup: 'cms-stage', data: getDropData(block.position + 1, 'sidebar') }\"\n                        @stage-block-add=\"onAddSectionBlock\"\n                    />\n                    {% endblock %}\n                </template>\n            </template>\n        </div>\n        {% endblock %}\n\n        <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n        {% block sw_cms_section_content %}\n        <div\n            v-if=\"!isCollapsed || !isVisible\"\n            class=\"sw-cms-section__content\"\n            :class=\"sectionContentClasses\"\n        >\n            <template v-if=\"mainContentEmpty\">\n                <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n                {% block sw_cms_section_content_block_empty %}\n                <div\n                    v-droppable=\"{ dragGroup: 'cms-stage', data: getDropData(blockCount, 'main') }\"\n                    class=\"sw-cms-section__empty-stage\"\n                    role=\"button\"\n                    tabindex=\"0\"\n                    @click=\"openBlockBar\"\n                    @keydown.enter=\"openBlockBar\"\n                >\n\n                    <sw-icon\n                        name=\"regular-plus-circle\"\n                        size=\"24\"\n                    />\n                    <p>{{ $tc('sw-cms.detail.label.addBlocks') }}</p>\n                </div>\n                {% endblock %}\n            </template>\n\n            <template v-else>\n\n                <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n                {% block sw_cms_section_content_add_first_block %}\n                <sw-cms-stage-add-block\n                    v-if=\"isSystemDefaultLanguage && !disabled\"\n                    :key=\"0\"\n                    v-droppable=\"{ dragGroup: 'cms-stage', data: getDropData(0) }\"\n                    @stage-block-add=\"onAddSectionBlock\"\n                />\n                {% endblock %}\n\n                <template\n                    v-for=\"(block, index) in mainContentBlocks\"\n                    :key=\"block.id\"\n                >\n                    <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n                    {% block sw_cms_section_content_block %}\n                    <sw-cms-block\n                        class=\"sw-cms-stage-block\"\n                        :block=\"block\"\n                        :disabled=\"disabled || undefined\"\n                        :active=\"selectedBlock !== null && selectedBlock.id === block.id\"\n                        :has-errors=\"hasBlockErrors(block)\"\n                        @block-overlay-click=\"onBlockSelection(block)\"\n                    >\n\n                        <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n                        {% block sw_cms_section_content_block_component %}\n                        <component\n                            :is=\"`sw-cms-block-${block.type}`\"\n                            :block=\"block\"\n                        >\n                            <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n                            {% block sw_cms_section_content_block_component_slot %}\n                            <template\n                                v-for=\"el in block.slots\"\n                                :key=\"el.id\"\n                                #[el.slot]\n                            >\n                                <sw-cms-slot\n                                    :element=\"el\"\n                                    :disabled=\"disabled || undefined\"\n                                    :active=\"selectedBlock !== null && selectedBlock.id === block.id\"\n                                />\n                            </template>\n                            {% endblock %}\n                        </component>\n                        {% endblock %}\n                    </sw-cms-block>\n                    {% endblock %}\n\n                    <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n                    {% block sw_cms_section_add_content_block %}\n                    <sw-cms-stage-add-block\n                        v-if=\"isSystemDefaultLanguage && !disabled\"\n                        :key=\"index + 1\"\n                        v-droppable=\"{ dragGroup: 'cms-stage', data: getDropData(block.position + 1) }\"\n                        @stage-block-add=\"onAddSectionBlock\"\n                    />\n                    {% endblock %}\n                </template>\n            </template>\n        </div>\n        {% endblock %}\n    </div>\n</div>\n{% endblock %}\n","import { type PropType } from 'vue';\nimport template from './sw-cms-section.html.twig';\nimport './sw-cms-section.scss';\nimport type CmsVisibility from '../../shared/CmsVisibility';\n\nconst { Component, Mixin, Filter } = Cicada;\nconst { mapPropertyErrors } = Component.getComponentHelper();\n\ntype SlotsErrorObject = {\n    parameters?: {\n        elements: Array<{\n            blockIds: string[];\n        }>;\n    };\n};\n\ntype SlotConfigErrorObject = {\n    parameters?: {\n        elements: Array<{\n            blockId: string;\n        }>;\n    };\n};\n\n/**\n * @private\n * @package discovery\n */\nexport default Cicada.Component.wrapComponentConfig({\n    template,\n\n    compatConfig: Cicada.compatConfig,\n\n    inject: [\n        'cmsService',\n        'repositoryFactory',\n    ],\n\n    provide() {\n        return {\n            swCmsSectionEmitPageConfigOpen: this.emitPageConfigOpen.bind(this),\n        };\n    },\n\n    emits: [\n        'page-config-open',\n        'block-duplicate',\n    ],\n\n    mixins: [\n        Mixin.getByName('cms-state'),\n    ],\n\n    props: {\n        page: {\n            type: Object as PropType<EntitySchema.Entity<'cms_page'>>,\n            required: true,\n        },\n\n        section: {\n            type: Object as PropType<EntitySchema.Entity<'cms_section'>>,\n            required: true,\n        },\n\n        active: {\n            type: Boolean,\n            required: false,\n            default: false,\n        },\n\n        disabled: {\n            type: Boolean,\n            required: false,\n            default: false,\n        },\n    },\n\n    data() {\n        return {\n            isCollapsed: true,\n            pageSlotconfigError: null as SlotConfigErrorObject | null,\n        };\n    },\n\n    computed: {\n        blockRepository() {\n            return this.repositoryFactory.create('cms_block');\n        },\n\n        slotRepository() {\n            return this.repositoryFactory.create('cms_slot');\n        },\n\n        sectionClasses() {\n            return {\n                'is--active': this.active,\n                'is--boxed': this.section.sizingMode === 'boxed',\n            };\n        },\n\n        sectionTypeClass() {\n            return `is--${this.section.type}`;\n        },\n\n        customSectionClass() {\n            return this.section.cssClass;\n        },\n\n        sectionStyles() {\n            let backgroundMedia = null;\n\n            if (this.section.backgroundMedia) {\n                const url = this.section.backgroundMedia.url as string;\n\n                if (this.section.backgroundMedia.id) {\n                    backgroundMedia = `url(\"${url}\")`;\n                } else {\n                    backgroundMedia = `url('${this.assetFilter(url)}')`;\n                }\n            }\n\n            return {\n                'background-color': this.section.backgroundColor || 'transparent',\n                'background-image': backgroundMedia,\n                'background-size': this.section.backgroundMediaMode,\n            };\n        },\n\n        sectionSidebarClasses() {\n            return {\n                'is--empty': this.sideBarEmpty,\n                'is--hidden': this.sectionMobileAndHidden,\n                'is--expanded': this.expandedClass,\n            };\n        },\n\n        sectionMobileAndHidden() {\n            const view = Cicada.Store.get('cmsPage').currentCmsDeviceView;\n            return view === 'mobile' && this.section.mobileBehavior === 'hidden';\n        },\n\n        isSideBarType() {\n            return this.section.type === 'sidebar';\n        },\n\n        sideBarEmpty() {\n            return this.sideBarBlocks.length === 0;\n        },\n\n        blockCount() {\n            return this.section.blocks!.length;\n        },\n\n        mainContentEmpty() {\n            return this.mainContentBlocks.length === 0;\n        },\n\n        sideBarBlocks() {\n            const sideBarBlocks = this.section.blocks!.filter(\n                (block) => this.blockTypeExists(block.type) && block.sectionPosition === 'sidebar',\n            );\n            return sideBarBlocks.sort((a, b) => a.position - b.position);\n        },\n\n        mainContentBlocks() {\n            const mainContentBlocks = this.section.blocks!.filter(\n                (block) => this.blockTypeExists(block.type) && block.sectionPosition !== 'sidebar',\n            );\n            return mainContentBlocks.sort((a, b) => a.position - b.position);\n        },\n\n        assetFilter() {\n            return Filter.getByName('asset');\n        },\n\n        blockTypes() {\n            return Object.keys(this.cmsService.getCmsBlockRegistry());\n        },\n\n        isVisible() {\n            const view = Cicada.Store.get('cmsPage').currentCmsDeviceView;\n\n            const visibility = this.section.visibility as CmsVisibility;\n\n            return (\n                (view === 'desktop' && !visibility.desktop) ||\n                (view === 'tablet-landscape' && !visibility.tablet) ||\n                (view === 'mobile' && !visibility.mobile)\n            );\n        },\n\n        toggleButtonText() {\n            return this.$tc('sw-cms.sidebar.contentMenu.visibilitySectionTextButton', this.isCollapsed ? 0 : 1);\n        },\n\n        expandedClass() {\n            return {\n                'is--expanded': this.isVisible && !this.isCollapsed,\n            };\n        },\n\n        sectionContentClasses() {\n            return {\n                'is--empty': this.mainContentEmpty,\n                'is--expanded': this.isVisible && !this.isCollapsed,\n            };\n        },\n\n        ...mapPropertyErrors('page', [\n            'slots',\n            'slotConfig',\n        ]),\n    },\n\n    created() {\n        this.createdComponent();\n    },\n\n    methods: {\n        createdComponent() {\n            if (!this.section.backgroundMediaMode) {\n                this.section.backgroundMediaMode = 'cover';\n            }\n        },\n\n        openBlockBar() {\n            if (this.disabled) {\n                return;\n            }\n\n            this.$emit('page-config-open', 'blocks');\n        },\n\n        emitPageConfigOpen(arg: string) {\n            this.$emit('page-config-open', arg);\n        },\n\n        onAddSectionBlock() {\n            this.openBlockBar();\n        },\n\n        onBlockSelection(block: EntitySchema.Entity<'cms_block'>) {\n            Cicada.Store.get('cmsPage').setBlock(block);\n            this.$emit('page-config-open', 'itemConfig');\n        },\n\n        onBlockDuplicate(block: EntitySchema.Entity<'cms_block'>, section: EntitySchema.Entity<'cms_section'>) {\n            this.$emit('block-duplicate', block, section);\n        },\n\n        onBlockDelete(blockId: string) {\n            this.section.blocks!.remove(blockId);\n\n            if (this.selectedBlock && this.selectedBlock.id === blockId) {\n                Cicada.Store.get('cmsPage').removeSelectedBlock();\n            }\n\n            this.updateBlockPositions();\n        },\n\n        updateBlockPositions() {\n            this.section.blocks!.forEach((block, index) => {\n                block.position = index;\n            });\n        },\n\n        getDropData(index: number, sectionPosition = 'main') {\n            return { dropIndex: index, section: this.section, sectionPosition };\n        },\n\n        blockTypeExists(type: string) {\n            return this.blockTypes.includes(type);\n        },\n\n        hasBlockErrors(block: EntitySchema.Entity<'cms_block'>) {\n            return [\n                this.hasUniqueBlockErrors(block),\n                this.hasSlotConfigErrors(block),\n            ].some((error) => error);\n        },\n\n        hasUniqueBlockErrors(block: EntitySchema.Entity<'cms_block'>) {\n            const errorElements = (this.pageSlotsError as SlotsErrorObject)?.parameters?.elements;\n\n            if (!errorElements) {\n                return false;\n            }\n\n            return errorElements.some((errorType) => errorType.blockIds.includes(block.id));\n        },\n\n        hasSlotConfigErrors(block: EntitySchema.Entity<'cms_block'>) {\n            const errorElements = (this.pageSlotconfigError as SlotConfigErrorObject)?.parameters?.elements;\n\n            if (!errorElements) {\n                return false;\n            }\n\n            return errorElements.some((missingConfig) => missingConfig.blockId === block.id);\n        },\n\n        toggleVisibility() {\n            this.isCollapsed = !this.isCollapsed;\n        },\n    },\n});\n"],"names":["template","Component","Mixin","Filter","mapPropertyErrors","index","backgroundMedia","url","block","a","b","view","visibility","arg","section","blockId","sectionPosition","type","error","_a","_b","errorElements","errorType","missingConfig"],"mappings":"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"}