import{F as a}from"./feature-grid-translation.service-CE1xu4QK.js";const r=`{% block sw_product_feature_set_card %} <sw-card :title="$tc('sw-settings-product-feature-sets.valuesCard.cardTitle')" class="sw-settings-product-feature-sets-values-card" position-identifier="sw-settings-product-feature-sets-values-card" :class="valuesCardClasses" :is-loading="isLoading || valuesLoading || cardLoading" > <template #grid> <div v-if="!valuesEmpty && !disabled"> {% block sw_product_feature_set_toolbar %} <div class="sw-product-feature-set__toolbar"> {% block sw_product_feature_set_toolbar_container %} <sw-container columns="1fr 32px minmax(100px, 200px)" gap="0 10px" > {% block sw_product_feature_set_toolbar_search %} <sw-simple-search-field v-model:value="term" size="small" variant="form" :disabled="!allowEdit || undefined" @search-term-change="onSearch" /> {% endblock %} {% block sw_product_feature_set_toolbar_delete %} <sw-button :disabled="deleteButtonDisabled || !allowEdit || undefined" square size="small" class="sw-product-feature-set__delete-button" @click="onDeleteFields" > <sw-icon name="regular-trash" small /> </sw-button> {% endblock %} {% block sw_product_feature_set_toolbar_add %} <sw-container> <sw-button :disabled="isLoading || !allowEdit || undefined" variant="ghost" size="small" class="sw-product-feature-set__add-button" @click="onAddField" > {{ $tc('sw-settings-product-feature-sets.valuesCard.labelCreateNew') }} </sw-button> </sw-container> {% endblock %} </sw-container> {% endblock %} </div> {% endblock %} {% block sw_product_feature_set_card_grid %} <sw-data-grid :data-source="values" :columns="getColumns()" :show-selection="allowEdit" :show-actions="false" :is-loading="isLoading" identifier="sw-product-feature-set-grid" @selection-change="onGridSelectionChanged" > {% block sw_settings_product_feature_set_card_grid_column_name %} <template #column-name="{ item }"> {{ featureGridTranslationService.getNameTranslation(item) }} </template> {% endblock %} {% block sw_settings_product_feature_set_card_grid_column_type %} <template #column-type="{ item }"> {{ featureGridTranslationService.getTypeTranslation(item) }} </template> {% endblock %} {% block sw_settings_product_feature_set_card_grid_column_position %} <template #column-position="{ item }"> <sw-data-grid-column-position ref="columnPosition" v-model:value="values" :show-value="false" :item="item" :disabled="!allowEdit || undefined" @position-changed="onPositionChange" /> </template> {% endblock %} </sw-data-grid> {% endblock %} </div> </template> {% block sw_product_feature_set_card_empty_state %} <template v-if="valuesEmpty || disabled"> <div class="sw-settings-product-feature-set-card__empty-state"> {% block sw_product_feature_set_card_empty_state_image %} <img :src="assetFilter('administration/static/img/empty-states/settings-empty-state.svg')" alt="" > {% endblock %} {% block sw_product_feature_set_card_empty_state_label %} <div class="sw-settings-product-feature-set-card__empty-state--label"> <p v-if="disabled"> {{ $tc('sw-settings-product-feature-sets.valuesCard.createStateDescription') }} </p> <p v-else> {{ $tc('sw-settings-product-feature-sets.valuesCard.emptyStateDescription') }} </p> </div> {% endblock %} {% block sw_product_feature_set_card_empty_state_button %} <sw-button variant="ghost" size="small" :disabled="disabled || undefined" @click="showModal = true" > {{ $tc('sw-settings-product-feature-sets.valuesCard.labelCreateNew') }} </sw-button> {% endblock %} </div> </template> {% endblock %} {% block sw_product_feature_set_card_grid_column_modal %} <sw-settings-product-feature-sets-modal v-if="showModal" :product-feature-set="productFeatureSet" @modal-close="onModalClose" /> {% endblock %} </sw-card> {% endblock %}`,{Criteria:s}=Shopware.Data,i={template:r,inject:["repositoryFactory"],props:{productFeatureSet:{type:Object,required:!0},isLoading:{type:Boolean,required:!0},disabled:{type:Boolean,required:!1,default:!1},allowEdit:{type:Boolean,required:!1,default:!0}},data(){return{valuesLoading:!1,cardLoading:!1,values:[],selection:null,deleteButtonDisabled:!0,term:"",showModal:!1,currentValue:null,translationService:null}},computed:{productFeatureSetRepository(){return this.repositoryFactory.create("product_feature_set")},propertyGroupRepository(){return this.repositoryFactory.create("property_group")},customFieldRepository(){return this.repositoryFactory.create("custom_field")},valuesEmpty(){return this.values.length===0},valuesCardClasses(){return{"is--empty":this.valuesEmpty}},productFeatureSetCriteria(){const e=new s(1,25);return e.addFilter(s.equals("product_feature_set.id",this.productFeatureSet.id)),e},featureGridTranslationService(){return this.translationService===null&&(this.translationService=new a(this,this.propertyGroupRepository,this.customFieldRepository)),this.translationService},assetFilter(){return Shopware.Filter.getByName("asset")}},created(){this.createdComponent()},methods:{createdComponent(){this.getList()},onAddField(){this.onShowFeatureModal()},onGridSelectionChanged(e,t){this.selection=e,this.deleteButtonDisabled=t<=0},onSearch(){this.doSearch()},doSearch(){this.term||this.getList(),this.values=this.productFeatureSet.features.filter(e=>e.name.match(this.term)||e.type.match(this.term))},getList(){this.valuesLoading=!0,this.values=[],this.productFeatureSet.features&&(this.values=this.productFeatureSet.features,this.term&&this.doSearch()),this.values.sort((e,t)=>e.position-t.position),Promise.all([this.featureGridTranslationService.fetchPropertyGroupEntities(this.values),this.featureGridTranslationService.fetchCustomFieldEntities(this.values)]).then(()=>{this.valuesLoading=!1})},onModalClose(){this.showModal=!1,this.currentValue=null,this.$nextTick(()=>this.getList())},onShowFeatureModal(){this.showModal=!0},onDeleteFields(){if(this.selection){const e=Object.keys(this.selection);this.productFeatureSet.features=this.productFeatureSet.features.filter(t=>!e.includes(t.id)),this.resetPositions(),this.getList()}},onPositionChange(e){this.productFeatureSet.features=e},resetPositions(){this.productFeatureSet.features.forEach((e,t)=>{e.position=t+1})},getColumns(){return[{property:"name",label:"sw-settings-product-feature-sets.valuesCard.labelValue",primary:!0},{property:"type",label:"sw-settings-product-feature-sets.valuesCard.labelType"},{property:"position",label:"sw-settings-product-feature-sets.valuesCard.labelPosition"}]}}};export{i as default};
