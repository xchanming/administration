const r=`{% block sw_product_download_form %} <div class="sw-product-download-form" :class="{ 'is--disabled': disabled }" > <sw-upload-listener v-if="!isLoading" :upload-tag="\`downloads-\${product.id}\`" auto-upload @media-upload-finish="successfulUpload" @media-upload-fail="onUploadFailed" /> <sw-media-upload-v2 v-if="!isLoading && acl.can('product.editor')" :class="swFieldClasses" variant="regular" :upload-tag="\`downloads-\${product.id}\`" :scroll-target="$parent.$el" :private-filesystem="true" :extension-accept="fileAccept" default-folder="product_download" v-bind="$attrs" /> <sw-field-error :error="error" /> <div v-if="!isLoading" class="sw-product-download-form__previews sw-product-download-form__grid" > <div v-for="download in productDownloads" :key="download.id" class="sw-product-download-form__row" > <span v-tooltip="{ message: getFileName(download), disabled: false, width: 'auto' }" class="sw-product-download-form-row__name" > {{ getFileName(download) }} </span> <div class="sw-product-download-form-row__info"> <span class="sw-product-download-form-row__mime"> {{ download.media.mimeType }} </span> <span class="sw-product-download-form-row__size"> {{ getFileSize(download) }} </span> <span class="sw-product-download-form-row__changed-date"> {{ createdAt(download) }} </span> </div> <sw-context-button class="sw-product-download-form-row__context"> <sw-context-menu-item class="sw-product-download-form-row__context-remove" variant="danger" :disabled="isLoading || !acl.can('product.editor')" @click="onRemoveDownload(download)" > {{ $tc('global.default.remove') }} </sw-context-menu-item> </sw-context-button> </div> </div> <sw-loader v-else /> </div> {% endblock %}`,{Mixin:i}=Shopware,{format:d}=Shopware.Utils,a={template:r,inject:["repositoryFactory","acl","configService"],emits:["media-open"],mixins:[i.getByName("notification")],props:{disabled:{type:Boolean,required:!1,default:!1},isInherited:{type:Boolean,required:!1,default:!1}},data(){return{isMediaLoading:!1,fileAcceptedExtensions:[]}},computed:{product(){const o=Shopware.Store.get("swProductDetail");return this.isInherited?o.parentProduct:o.product},isStoreLoading(){return Shopware.Store.get("swProductDetail").isLoading},isLoading(){return this.isMediaLoading||this.isStoreLoading},productDownloadRepository(){return this.repositoryFactory.create("product_download")},productDownloads(){return this.product?this.product.downloads:[]},mediaRepository(){return this.repositoryFactory.create("media")},error(){return Shopware.Store.get("error").getApiError(this.product,"downloads")},hasError(){return!!this.error},swFieldClasses(){return{"has--error":this.hasError}},fileAccept(){return this.fileAcceptedExtensions.join(", ")}},created(){this.createdComponent()},methods:{async createdComponent(){this.configService.getConfig().then(o=>{this.fileAcceptedExtensions=o.settings.private_allowed_extensions})},onOpenMedia(){this.$emit("media-open")},getFileSize(o){return d.fileSize(o.media.fileSize)},getFileName(o){return o.media.fileExtension?`${o.media.fileName}.${o.media.fileExtension}`:o.media.fileName},createdAt(o){const e=o.media.uploadedAt||o.media.createdAt;return d.date(e,{month:"numeric"})},onRemoveDownload(o){this.product.downloads.remove(o.id)},async successfulUpload({targetId:o}){if(this.product.downloads.find(t=>t.mediaId===o))return;const e=this.createDownloadAssociation(o);e.media=await this.mediaRepository.get(o),this.product.downloads.add(e),this.error&&Shopware.Store.get("error").removeApiError(this.error.selfLink)},createDownloadAssociation(o){const e=this.productDownloadRepository.create();return e.productId=this.product.id,e.mediaId=o,e.position=this.product.downloads.length,e},onUploadFailed(o){const e=this.product.media.find(t=>t.mediaId===o.targetId);e&&(this.product.coverId===e.id&&(this.product.coverId=null),this.product.media.remove(e.id)),this.product.isLoading=!1},removeFile(o){this.product.coverId===o.id&&(this.product.cover=null,this.product.coverId=null),this.product.coverId===null&&this.product.media.length>0&&(this.product.coverId=this.product.media.first().id),this.product.media.remove(o.id)},updateMediaItemPositions(){this.productMedia.forEach((o,e)=>{o.position=e})}}};export{a as default};
