{"version":3,"file":"index-DwAgngLD.js","sources":["../../../app/administration/src/module/sw-settings-rule/component/sw-settings-rule-add-assignment-modal/sw-settings-rule-add-assignment-modal.html.twig","../../../app/administration/src/module/sw-settings-rule/component/sw-settings-rule-add-assignment-modal/index.js"],"sourcesContent":["<!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n{% block sw_settings_rule_add_assignment_modal %}\n<sw-modal\n    class=\"sw-settings-rule-add-assignment-modal\"\n    :title=\"$tc(entityContext.label)\"\n    :variant=\"modalSize\"\n    @modal-close=\"onCloseAddModal\"\n>\n\n    <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n    {% block sw_settings_rule_add_assignment_modal_category_tree %}\n    <sw-settings-rule-category-tree\n        v-if=\"entityContext.entityName === 'category'\"\n        :rule=\"rule\"\n        :association=\"entityContext.addContext.association\"\n        :categories-collection=\"entities\"\n        :hide-headline=\"true\"\n        :hide-search=\"true\"\n        placeholder=\"Add categories\"\n        @on-selection=\"onSelect\"\n    />\n    {% endblock %}\n\n    <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n    {% block sw_settings_rule_add_assignment_modal_listing %}\n    <sw-settings-rule-add-assignment-listing\n        v-else\n        class=\"sw-settings-rule-detail-assignments__entity-listing\"\n        :entity-context=\"entityContext\"\n        :rule-id=\"rule.id\"\n        @select-item=\"onSelect\"\n    />\n    {% endblock %}\n\n    <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n    {% block sw_settings_rule_add_assignment_modal_footer %}\n    <template #modal-footer>\n\n        <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n        {% block sw_settings_rule_add_assignment_modal_cancel %}\n        <sw-button\n            class=\"sw-settings-rule-add-assignment-modal__cancel-button\"\n            size=\"small\"\n            @click=\"onCloseAddModal\"\n        >\n            {{ $tc('global.default.cancel') }}\n        </sw-button>\n        {% endblock %}\n\n        <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n        {% block sw_settings_rule_add_assignment_modal_confirm %}\n        <sw-button\n            class=\"sw-settings-rule-add-assignment-modal__confirm-button\"\n            size=\"small\"\n            variant=\"primary\"\n            @click=\"onAdd\"\n        >\n            {{ $tc('global.default.add') }}\n        </sw-button>\n        {% endblock %}\n    </template>\n    {% endblock %}\n</sw-modal>\n{% endblock %}\n","import EntityCollection from 'src/core/data/entity-collection.data';\nimport template from './sw-settings-rule-add-assignment-modal.html.twig';\nimport './sw-settings-rule-assignment-modal.scss';\n\nconst { Context } = Cicada;\nconst { Criteria } = Cicada.Data;\n\n/**\n * @private\n * @package services-settings\n */\nexport default {\n    template,\n\n    compatConfig: Cicada.compatConfig,\n\n    inject: [\n        'repositoryFactory',\n    ],\n\n    emits: [\n        'close-add-modal',\n        'entities-saved',\n    ],\n\n    props: {\n        rule: {\n            type: Object,\n            required: true,\n        },\n        entityContext: {\n            type: Object,\n            required: true,\n        },\n    },\n\n    data() {\n        return {\n            repository: null,\n            entities: null,\n            isLoading: true,\n            selection: {},\n            criteriaLimit: 10,\n            currentLanguageId: Cicada.Context.api.languageId,\n        };\n    },\n\n    computed: {\n        modalSize() {\n            return this.entityContext.entityName === 'category' ? 'default' : 'large';\n        },\n    },\n\n    created() {\n        this.createdComponent();\n    },\n\n    methods: {\n        createdComponent() {\n            if (this.entityContext.entityName === 'category') {\n                this.entities = new EntityCollection('/category', 'category', Context.api);\n            } else {\n                this.repository = this.entityContext.repository;\n                this.loadEntities();\n            }\n        },\n\n        loadEntities() {\n            const api = this.entityContext.api ? this.entityContext.api() : Context.api;\n            const criteria = new Criteria(1, this.criteriaLimit);\n\n            this.repository.search(criteria, api).then((result) => {\n                this.entities = result;\n                this.isLoading = false;\n            });\n        },\n\n        onCloseAddModal() {\n            this.$emit('close-add-modal');\n        },\n\n        onAdd() {\n            if (this.entityContext.addContext.type === 'one-to-many') {\n                this.updateEntities();\n                return;\n            }\n\n            this.insertEntities();\n        },\n\n        updateEntities() {\n            const api = this.entityContext.api ? this.entityContext.api() : Context.api;\n            const repository = this.repositoryFactory.create(this.entityContext.addContext.entity);\n\n            Object.values(this.selection).forEach((item) => {\n                item[this.entityContext.addContext.column] = this.rule.id;\n            });\n\n            return repository.sync(Object.values(this.selection), api).then(() => this.$emit('entities-saved'));\n        },\n\n        insertEntities() {\n            const api = this.entityContext.api ? this.entityContext.api() : Context.api;\n            const repository = this.repositoryFactory.create(this.entityContext.addContext.entity);\n\n            const inserts = [];\n            Object.values(this.selection).forEach((item) => {\n                const entity = repository.create(api);\n                entity.ruleId = this.rule.id;\n                entity[this.entityContext.addContext.column] = item.id;\n                inserts.push(entity);\n            });\n\n            return repository.sync(inserts, api).then(() => this.$emit('entities-saved'));\n        },\n\n        onSelect(selection) {\n            this.selection = selection;\n        },\n    },\n};\n"],"names":["template","Context","Criteria","index","EntityCollection","api","criteria","result","repository","item","inserts","entity","selection"],"mappings":"+EAAA,MAAeA,EAAA,04CCIT,CAAE,QAAAC,CAAS,EAAG,OACd,CAAE,SAAAC,CAAQ,EAAK,OAAO,KAMbC,EAAA,CACX,SAAAH,EAEA,aAAc,OAAO,aAErB,OAAQ,CACJ,mBACH,EAED,MAAO,CACH,kBACA,gBACH,EAED,MAAO,CACH,KAAM,CACF,KAAM,OACN,SAAU,EACb,EACD,cAAe,CACX,KAAM,OACN,SAAU,EACb,CACJ,EAED,MAAO,CACH,MAAO,CACH,WAAY,KACZ,SAAU,KACV,UAAW,GACX,UAAW,CAAE,EACb,cAAe,GACf,kBAAmB,OAAO,QAAQ,IAAI,UAClD,CACK,EAED,SAAU,CACN,WAAY,CACR,OAAO,KAAK,cAAc,aAAe,WAAa,UAAY,OACrE,CACJ,EAED,SAAU,CACN,KAAK,iBAAgB,CACxB,EAED,QAAS,CACL,kBAAmB,CACX,KAAK,cAAc,aAAe,WAClC,KAAK,SAAW,IAAII,EAAiB,YAAa,WAAYH,EAAQ,GAAG,GAEzE,KAAK,WAAa,KAAK,cAAc,WACrC,KAAK,aAAY,EAExB,EAED,cAAe,CACX,MAAMI,EAAM,KAAK,cAAc,IAAM,KAAK,cAAc,IAAG,EAAKJ,EAAQ,IAClEK,EAAW,IAAIJ,EAAS,EAAG,KAAK,aAAa,EAEnD,KAAK,WAAW,OAAOI,EAAUD,CAAG,EAAE,KAAME,GAAW,CACnD,KAAK,SAAWA,EAChB,KAAK,UAAY,EACjC,CAAa,CACJ,EAED,iBAAkB,CACd,KAAK,MAAM,iBAAiB,CAC/B,EAED,OAAQ,CACJ,GAAI,KAAK,cAAc,WAAW,OAAS,cAAe,CACtD,KAAK,eAAc,EACnB,MACH,CAED,KAAK,eAAc,CACtB,EAED,gBAAiB,CACb,MAAMF,EAAM,KAAK,cAAc,IAAM,KAAK,cAAc,IAAG,EAAKJ,EAAQ,IAClEO,EAAa,KAAK,kBAAkB,OAAO,KAAK,cAAc,WAAW,MAAM,EAErF,cAAO,OAAO,KAAK,SAAS,EAAE,QAASC,GAAS,CAC5CA,EAAK,KAAK,cAAc,WAAW,MAAM,EAAI,KAAK,KAAK,EACvE,CAAa,EAEMD,EAAW,KAAK,OAAO,OAAO,KAAK,SAAS,EAAGH,CAAG,EAAE,KAAK,IAAM,KAAK,MAAM,gBAAgB,CAAC,CACrG,EAED,gBAAiB,CACb,MAAMA,EAAM,KAAK,cAAc,IAAM,KAAK,cAAc,IAAG,EAAKJ,EAAQ,IAClEO,EAAa,KAAK,kBAAkB,OAAO,KAAK,cAAc,WAAW,MAAM,EAE/EE,EAAU,CAAA,EAChB,cAAO,OAAO,KAAK,SAAS,EAAE,QAASD,GAAS,CAC5C,MAAME,EAASH,EAAW,OAAOH,CAAG,EACpCM,EAAO,OAAS,KAAK,KAAK,GAC1BA,EAAO,KAAK,cAAc,WAAW,MAAM,EAAIF,EAAK,GACpDC,EAAQ,KAAKC,CAAM,CACnC,CAAa,EAEMH,EAAW,KAAKE,EAASL,CAAG,EAAE,KAAK,IAAM,KAAK,MAAM,gBAAgB,CAAC,CAC/E,EAED,SAASO,EAAW,CAChB,KAAK,UAAYA,CACpB,CACJ,CACL"}