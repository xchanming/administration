const s=`{% block sw_media_modal_move %} <sw-modal variant="default" class="sw-media-modal-move" :title="$tc('global.sw-media-modal-move.titleModal', itemsToMove.length, { mediaName: mediaNameFilter(itemsToMove[0]), count: itemsToMove.length }) " @modal-close="closeMoveModal" > {% block sw_media_modal_body %} {% block sw_media_modal_move_breadcrumbs %} <div class="sw-media-modal-move-folder-breadcrumbs"> <img :src="assetFilter('/administration/static/img/media/multicolor-folder-thumbnail.svg')" class="sw-media-modal-move__folder-icon" alt="Folder thumbnail" > <button v-if="parentFolder && parentFolder.id !== targetFolder.id" class="sw-media-modal-move__breadcrumb-btn --parent" @click="onSelection(parentFolder)" > <sw-icon class="sw-media-folder-content__switch-button" name="regular-chevron-right-xs" size="10px" /> {{ parentFolder.name }} </button> <button v-if="displayFolder && displayFolder.id !== targetFolder.id" class="sw-media-modal-move__breadcrumb-btn" @click="onSelection(displayFolder)" > <sw-icon class="sw-media-folder-content__switch-button" name="regular-chevron-right-xs" size="10px" /> {{ displayFolder.name }} </button> <button v-if="targetFolder" class="sw-media-modal-move__breadcrumb-btn --target" @click="onSelection(targetFolder)" > <sw-icon class="sw-media-folder-content__switch-button" name="regular-chevron-right-xs" size="10px" /> {{ targetFolder.name }} </button> </div> {% endblock %} <sw-media-folder-content :start-folder-id="displayFolderId" :selected-id="targetFolderId" @selected="onSelection" /> {% endblock %} {% block sw_media_modal_footer %} <template #modal-footer> {% block sw_media_modal_move_cancel_button %} <sw-button size="small" @click="closeMoveModal" > {{ $tc('global.default.cancel') }} </sw-button> {% endblock %} {% block sw_media_modal_move_confirm_button %} <sw-button class="sw-media-modal-move__confirm" size="small" variant="primary" :disabled="isMoveDisabled" @click="moveSelection" > {{ $tc('global.sw-media-modal-move.buttonMove') }} </sw-button> {% endblock %} </template> {% endblock %} </sw-modal> {% endblock %}`,{Mixin:d,Context:a,Data:{Criteria:r}}=Cicada,n={template:s,compatConfig:Cicada.compatConfig,inject:["repositoryFactory"],provide(){return{filterItems:this.isNotPartOfItemsToMove}},emits:["media-move-modal-close","media-move-modal-items-move"],mixins:[d.getByName("notification")],props:{itemsToMove:{required:!0,type:Array,validator(e){return e.length>0}}},data(){return{targetFolder:null,parentFolder:null,displayFolder:null,displayFolderId:null}},computed:{mediaRepository(){return this.repositoryFactory.create("media")},mediaFolderRepository(){return this.repositoryFactory.create("media_folder")},mediaNameFilter(){return e=>e.getEntityName()==="media"?`${e.fileName}.${e.fileExtension}`:e.name},targetFolderId(){return this.targetFolder?this.targetFolder.id:null},rootFolderName(){return this.$tc("sw-media.index.rootFolderName")},isMoveDisabled(){return this.startFolderId===this.targetFolderId},startFolderId(){const e=this.itemsToMove[0];return e.getEntityName()==="media"?e.mediaFolderId:e.parentId},assetFilter(){return Cicada.Filter.getByName("asset")}},watch:{displayFolder(e){this.displayFolderId=e.id,this.updateParentFolder(e)}},mounted(){this.mountedComponent()},methods:{async mountedComponent(){if(this.displayFolder={id:null,name:this.rootFolderName},this.targetFolder={id:null,name:this.rootFolderName},this.startFolderId){const e=await this.mediaFolderRepository.get(this.startFolderId,a.api);this.displayFolder=e,this.targetFolder=e}},closeMoveModal(){this.$emit("media-move-modal-close")},isNotPartOfItemsToMove(e){return!this.itemsToMove.some(t=>t.id===e.id)},async updateParentFolder(e){e.id===null?this.parentFolder=null:e.parentId===null?this.parentFolder={id:null,name:this.rootFolderName}:this.parentFolder=await this.fetchParentFolder(e.parentId)},async fetchParentFolder(e){let t=null;const i=new r(1,1).addFilter(r.equals("id",e)).addAssociation("children");try{t=await this.mediaFolderRepository.search(i,a.api)}catch{this.createNotificationError({message:this.$tc("global.sw-media-modal-move.notification.errorFetchNavigation.message")})}return t!=null&&t.length?t[0]:null},onSelection(e){this.targetFolder=e,(e.id===null||e.childCount>0)&&(this.displayFolder=e)},async _moveSelection(e){e.isLoading=!0,e.parentId=this.targetFolder.id||null;try{return await this.mediaFolderRepository.save(e,a.api),this.createNotificationSuccess({title:this.$root.$tc("global.default.success"),message:this.$root.$tc("global.sw-media-modal-move.notification.successSingle.message",1,{mediaName:this.mediaNameFilter(e)})}),e.id}catch{return this.createNotificationError({title:this.$root.$tc("global.default.error"),message:this.$root.$tc("global.sw-media-modal-move.notification.errorSingle.message",1,{mediaName:this.mediaNameFilter(e)})}),null}finally{e.isLoading=!1}},async moveSelection(){const e=[];try{const t=this.itemsToMove.filter(o=>o.getEntityName()==="media_folder"),i=this.itemsToMove.filter(o=>o.getEntityName()==="media");await Promise.all(t.map(async o=>{await this._moveSelection(o)})),await Promise.all(i.map(async o=>{const l=o;l.mediaFolderId=this.targetFolder.id||null,e.push(await this.mediaRepository.save(l,a.api))})),this.createNotificationSuccess({title:this.$root.$tc("global.default.success"),message:this.$root.$tc("global.sw-media-modal-move.notification.successOverall.message")}),this.$emit("media-move-modal-items-move",e)}catch{this.createNotificationError({title:this.$root.$tc("global.default.error"),message:this.$root.$tc("global.sw-media-modal-move.notification.errorOverall.message")})}}}};export{n as default};
//# sourceMappingURL=index-CQ1PYzy5.js.map
