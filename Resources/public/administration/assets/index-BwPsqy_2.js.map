{"version":3,"file":"index-BwPsqy_2.js","sources":["../../../app/administration/src/module/sw-order/component/sw-order-customer-address-select/sw-order-customer-address-select.html.twig","../../../app/administration/src/module/sw-order/component/sw-order-customer-address-select/index.ts"],"sourcesContent":["<sw-single-select\n    v-model:value=\"addressId\"\n    v-bind=\"$attrs\"\n    class=\"sw-order-customer-address-select\"\n    value-property=\"id\"\n    required\n    :is-loading=\"isLoading\"\n    :options=\"customerAddresses\"\n    :disabled=\"disabled\"\n    :search-function=\"searchAddressResults\"\n    @search=\"searchAddress\"\n>\n    <template #selection-label-property=\"{ item }\">\n        {{ getSelectionLabel(item) }}\n    </template>\n\n    <template #result-item=\"{ item, index, searchTerm, highlightSearchTerm, isSelected, setValue, getKey }\">\n        <sw-select-result\n            :selected=\"isSelected(item)\"\n            v-bind=\"{ item, index }\"\n            @item-select=\"setValue\"\n        >\n            <sw-highlight-text\n                v-if=\"highlightSearchTerm && !isSelected(item)\"\n                :text=\"getCustomerAddress(item)\"\n                :search-term=\"searchTerm\"\n            />\n\n            <template v-else>\n                {{ getCustomerAddress(item) }}\n            </template>\n        </sw-select-result>\n    </template>\n</sw-single-select>\n","import type { Entity } from '@cicada-ag/meteor-admin-sdk/es/_internals/data/Entity';\nimport type { PropType } from 'vue';\nimport type EntityCollection from '@cicada-ag/meteor-admin-sdk/es/_internals/data/EntityCollection';\nimport template from './sw-order-customer-address-select.html.twig';\nimport './sw-order-customer-address-select.scss';\nimport type CriteriaType from '../../../../core/data/criteria.data';\nimport type Repository from '../../../../core/data/repository.data';\n\n/**\n * @package checkout\n */\n\nconst { Component } = Cicada;\nconst { Criteria } = Cicada.Data;\n\n// eslint-disable-next-line sw-deprecation-rules/private-feature-declarations\nexport default Component.wrapComponentConfig({\n    template,\n\n    compatConfig: Cicada.compatConfig,\n\n    inject: [\n        'repositoryFactory',\n        'feature',\n    ],\n\n    props: {\n        customer: {\n            type: Object as PropType<Entity<'customer'>>,\n            required: true,\n        },\n\n        value: {\n            type: String as PropType<string>,\n            required: true,\n        },\n\n        sameAddressLabel: {\n            type: String as PropType<string>,\n            required: false,\n            default: '',\n        },\n\n        sameAddressValue: {\n            type: String as PropType<string>,\n            required: true,\n        },\n\n        disabled: {\n            type: Boolean,\n            required: false,\n            default: false,\n        },\n    },\n\n    data(): {\n        customerAddresses: EntityCollection<'customer_address'> | [];\n        isLoading: boolean;\n        addressSearchTerm: string;\n    } {\n        return {\n            customerAddresses: [],\n            isLoading: false,\n            addressSearchTerm: '',\n        };\n    },\n\n    computed: {\n        addressId: {\n            get(): string {\n                return this.value;\n            },\n            set(newValue: string | null): void {\n                if (newValue === null) {\n                    return;\n                }\n\n                this.$emit('update:value', newValue);\n                return;\n\n                this.$emit('change', newValue);\n            },\n        },\n\n        isSameAddress(): boolean {\n            return this.value === this.sameAddressValue;\n        },\n\n        addressRepository(): Repository<'customer_address'> {\n            return this.repositoryFactory.create(\n                this.customer.addresses?.entity ?? 'customer_address',\n                this.customer.addresses?.source,\n            );\n        },\n\n        addressCriteria(): CriteriaType {\n            const criteria = new Criteria(1, 25);\n            criteria.addAssociation('salutation');\n            criteria.addAssociation('country');\n            criteria.addAssociation('countryState');\n\n            if (this.addressSearchTerm) {\n                criteria.setTerm(this.addressSearchTerm);\n            }\n\n            return criteria;\n        },\n    },\n\n    created() {\n        this.createdComponent();\n    },\n\n    methods: {\n        createdComponent(): void {\n            void this.getCustomerAddresses();\n        },\n\n        getSelectionLabel(item: Entity<'customer_address'>): string {\n            if (this.isSameAddress && this.sameAddressLabel) {\n                return this.sameAddressLabel;\n            }\n\n            return this.getCustomerAddress(item);\n        },\n\n        getCustomerAddress(address: Entity<'customer_address'>): string {\n            if (!address) return '';\n\n            const result: Array<string> = [];\n\n            const properties = [\n                'street',\n                'zipcode',\n                'city',\n                'countryState',\n                'country',\n            ] as const;\n\n            properties.forEach((property) => {\n                const adressProperty = address[property];\n\n                if (!adressProperty) {\n                    return;\n                }\n\n                if (property === 'countryState' || property === 'country') {\n                    const name = address[property]?.translated?.name;\n\n                    if (name) {\n                        result.push(name);\n                    }\n\n                    return;\n                }\n\n                result.push(<string>address[property]);\n            });\n\n            return result.join(', ');\n        },\n\n        getCustomerAddresses(): Promise<void> {\n            this.isLoading = true;\n\n            // Get the latest addresses from customer's db\n            return this.addressRepository\n                .search(this.addressCriteria)\n                .then((addresses: EntityCollection<'customer_address'>): void => {\n                    this.customerAddresses = addresses;\n                })\n                .finally(() => {\n                    this.isLoading = false;\n                });\n        },\n\n        searchAddress(searchTerm: string): Promise<void> {\n            this.isLoading = true;\n\n            this.addressSearchTerm = searchTerm;\n\n            return this.addressRepository\n                .search(this.addressCriteria)\n                .then((addresses) => {\n                    this.customerAddresses.forEach((address) => {\n                        // @ts-expect-error - hidden does not exist on address entity\n                        address.hidden = !addresses.has(address.id);\n                    });\n                })\n                .finally(() => {\n                    this.isLoading = false;\n                });\n        },\n\n        searchAddressResults() {\n            return this.customerAddresses;\n        },\n    },\n});\n"],"names":["template","Component","Criteria","index","newValue","_a","_b","criteria","item","address","result","property","name","addresses","searchTerm"],"mappings":"AAAA,MAAeA,EAAA,uyBCYT,CAAE,UAAAC,CAAc,EAAA,OAChB,CAAE,SAAAC,CAAS,EAAI,OAAO,KAGbC,EAAAF,EAAU,oBAAoB,CACzC,SAAAD,EAEA,aAAc,OAAO,aAErB,OAAQ,CACJ,oBACA,SACJ,EAEA,MAAO,CACH,SAAU,CACN,KAAM,OACN,SAAU,EACd,EAEA,MAAO,CACH,KAAM,OACN,SAAU,EACd,EAEA,iBAAkB,CACd,KAAM,OACN,SAAU,GACV,QAAS,EACb,EAEA,iBAAkB,CACd,KAAM,OACN,SAAU,EACd,EAEA,SAAU,CACN,KAAM,QACN,SAAU,GACV,QAAS,EACb,CACJ,EAEA,MAIE,CACS,MAAA,CACH,kBAAmB,CAAC,EACpB,UAAW,GACX,kBAAmB,EAAA,CAE3B,EAEA,SAAU,CACN,UAAW,CACP,KAAc,CACV,OAAO,KAAK,KAChB,EACA,IAAII,EAA+B,CAC3BA,IAAa,MAIZ,KAAA,MAAM,eAAgBA,CAAQ,CAIvC,CACJ,EAEA,eAAyB,CACd,OAAA,KAAK,QAAU,KAAK,gBAC/B,EAEA,mBAAoD,CDxF5D,IAAAC,EAAAC,ECyFY,OAAO,KAAK,kBAAkB,SAC1BD,EAAA,KAAK,SAAS,YAAd,YAAAA,EAAyB,SAAU,oBACnCC,EAAA,KAAK,SAAS,YAAd,YAAAA,EAAyB,MAAA,CAEjC,EAEA,iBAAgC,CAC5B,MAAMC,EAAW,IAAIL,EAAS,EAAG,EAAE,EACnC,OAAAK,EAAS,eAAe,YAAY,EACpCA,EAAS,eAAe,SAAS,EACjCA,EAAS,eAAe,cAAc,EAElC,KAAK,mBACIA,EAAA,QAAQ,KAAK,iBAAiB,EAGpCA,CACX,CACJ,EAEA,SAAU,CACN,KAAK,iBAAiB,CAC1B,EAEA,QAAS,CACL,kBAAyB,CAChB,KAAK,sBACd,EAEA,kBAAkBC,EAA0C,CACpD,OAAA,KAAK,eAAiB,KAAK,iBACpB,KAAK,iBAGT,KAAK,mBAAmBA,CAAI,CACvC,EAEA,mBAAmBC,EAA6C,CACxD,GAAA,CAACA,EAAgB,MAAA,GAErB,MAAMC,EAAwB,CAAA,EAUnB,MARQ,CACf,SACA,UACA,OACA,eACA,SAAA,EAGO,QAASC,GAAa,CD3I7C,IAAAN,EAAAC,EC8IgB,GAFuBG,EAAQE,CAAQ,EAMnC,IAAAA,IAAa,gBAAkBA,IAAa,UAAW,CACvD,MAAMC,GAAON,GAAAD,EAAAI,EAAQE,CAAQ,IAAhB,YAAAN,EAAmB,aAAnB,YAAAC,EAA+B,KAExCM,GACAF,EAAO,KAAKE,CAAI,EAGpB,MACJ,CAEOF,EAAA,KAAaD,EAAQE,CAAQ,CAAC,EAAA,CACxC,EAEMD,EAAO,KAAK,IAAI,CAC3B,EAEA,sBAAsC,CAClC,YAAK,UAAY,GAGV,KAAK,kBACP,OAAO,KAAK,eAAe,EAC3B,KAAMG,GAA0D,CAC7D,KAAK,kBAAoBA,CAAA,CAC5B,EACA,QAAQ,IAAM,CACX,KAAK,UAAY,EAAA,CACpB,CACT,EAEA,cAAcC,EAAmC,CAC7C,YAAK,UAAY,GAEjB,KAAK,kBAAoBA,EAElB,KAAK,kBACP,OAAO,KAAK,eAAe,EAC3B,KAAMD,GAAc,CACZ,KAAA,kBAAkB,QAASJ,GAAY,CAExCA,EAAQ,OAAS,CAACI,EAAU,IAAIJ,EAAQ,EAAE,CAAA,CAC7C,CAAA,CACJ,EACA,QAAQ,IAAM,CACX,KAAK,UAAY,EAAA,CACpB,CACT,EAEA,sBAAuB,CACnB,OAAO,KAAK,iBAChB,CACJ,CACJ,CAAC"}