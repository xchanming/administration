{"version":3,"file":"index-DvyiqjLK.js","sources":["../../../app/administration/src/module/sw-order/component/sw-order-address-selection/sw-order-address-selection.html.twig","../../../app/administration/src/module/sw-order/component/sw-order-address-selection/index.js"],"sourcesContent":["<!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n{% block sw_order_address_selection %}\n<div class=\"sw-order-address\">\n    <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n    {% block sw_order_address_selection_modal %}\n    <sw-modal\n        v-if=\"currentAddress\"\n        :title=\"modalTitle\"\n        @modal-close=\"currentAddress = null\"\n    >\n        <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n        {% block sw_order_address_modal_content %}\n        <sw-customer-address-form\n            :address=\"currentAddress\"\n            :customer=\"customer\"\n        >\n            <sw-customer-address-form-options\n                :address=\"currentAddress\"\n                :customer=\"customer\"\n                :custom-field-sets=\"customerAddressCustomFieldSets\"\n                @default-address-change=\"onChangeDefaultAddress\"\n            />\n        </sw-customer-address-form>\n        {% endblock %}\n\n        <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n        {% block sw_order_address_modal_actions %}\n        <template #modal-footer>\n            <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n            {% block sw_order_address_modal_action_close %}\n            <sw-button\n                size=\"small\"\n                @click=\"currentAddress = null\"\n            >\n                {{ $tc('global.default.cancel') }}\n            </sw-button>\n            {% endblock %}\n\n            <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n            {% block sw_order_address_modal_actions_apply %}\n            <sw-button\n                variant=\"primary\"\n                size=\"small\"\n                @click=\"onSaveAddress\"\n            >\n                {{ $tc('global.default.apply') }}\n            </sw-button>\n            {% endblock %}\n        </template>\n        {% endblock %}\n    </sw-modal>\n    {% endblock %}\n\n    <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n    {% block sw_order_address_selection_entity_single_select %}\n    <sw-single-select\n        :value=\"addressId\"\n        class=\"sw-order-address-selection\"\n        :options=\"addressOptions\"\n        value-property=\"id\"\n        :label=\"label\"\n        :placeholder=\"$tc('sw-order.createBase.detailsBody.placeholderAddress')\"\n        :popover-classes=\"['sw-order-address-selection__popover']\"\n        :disabled=\"disabled\"\n        @update:value=\"onAddressChange\"\n    >\n        <template #before-item-list>\n            <ul class=\"sw-select-result__item-list\">\n                <li\n                    class=\"sw-select-result sw-select-result__add-new-address\"\n                    role=\"button\"\n                    tabindex=\"0\"\n                    @click=\"onCreateNewAddress\"\n                    @keydown.enter=\"onCreateNewAddress\"\n                >\n                    {{ $tc('sw-order.createBase.detailsBody.buttonAddNewAddress') }}\n                </li>\n            </ul>\n        </template>\n\n        <template #result-item=\"{ item, index, labelProperty, isSelected }\">\n            <sw-select-result\n                :selected=\"isSelected(item)\"\n                v-bind=\"{ item, index }\"\n                :class=\"{'sw-order-address-selection__order-address': isSelected(item)}\"\n            >\n                <div class=\"sw-order-address-selection__information\">\n                    <p>{{ item.name }}</p>\n                    <p\n                        v-if=\"item.company\"\n                        class=\"text-gray\"\n                    >\n                        {{ item.company }}<span v-if=\"item.department\"> - {{ item.department }}</span>\n                    </p>\n                    <p class=\"text-gray\">\n                        {{ item.street }}\n                    </p>\n                    <p class=\"text-gray\">\n                        {{ item.zipcode }} {{ item.city }}\n                    </p>\n                    <p class=\"text-gray\">\n                        {{ item.country.translated.name }}\n                    </p>\n                </div>\n\n                <div class=\"sw-order-address-selection__edit-action\">\n                    <sw-context-menu-item @click=\"onEditAddress(item.id)\">\n                        {{ $tc('global.default.edit') }}\n                    </sw-context-menu-item>\n                </div>\n            </sw-select-result>\n        </template>\n    </sw-single-select>\n    {% endblock %}\n</div>\n{% endblock %}\n","import { required } from 'src/core/service/validation.service';\nimport template from './sw-order-address-selection.html.twig';\nimport './sw-order-address-selection.scss';\n\n/**\n * @package checkout\n */\n\nconst { EntityDefinition, Mixin } = Cicada;\nconst { Criteria } = Cicada.Data;\nconst { mapState } = Cicada.Component.getComponentHelper();\nconst { cloneDeep } = Cicada.Utils.object;\n\n// eslint-disable-next-line sw-deprecation-rules/private-feature-declarations\nexport default {\n    template,\n\n    compatConfig: Cicada.compatConfig,\n\n    inject: ['repositoryFactory'],\n\n    emits: ['change-address'],\n\n    mixins: [\n        Mixin.getByName('notification'),\n    ],\n\n    props: {\n        address: {\n            type: Object,\n            required: false,\n            default: () => {},\n        },\n\n        label: {\n            type: String,\n            required: false,\n            default: '',\n        },\n\n        addressId: {\n            type: String,\n            required: false,\n            default: null,\n        },\n\n        disabled: {\n            type: Boolean,\n            required: false,\n            default: false,\n        },\n\n        type: {\n            type: String,\n            required: false,\n            default: '',\n        },\n    },\n\n    data() {\n        return {\n            customer: {},\n            currentAddress: null,\n            customerAddressCustomFieldSets: null,\n            orderAddressId: cloneDeep(this.address?.id),\n        };\n    },\n\n    computed: {\n        ...mapState('swOrderDetail', [\n            'order',\n            'versionContext',\n        ]),\n\n        orderCustomer() {\n            return this.order.orderCustomer;\n        },\n\n        orderRepository() {\n            return this.repositoryFactory.create('order');\n        },\n\n        addressRepository() {\n            return this.repositoryFactory.create(this.customer.addresses.entity, this.customer.addresses.source);\n        },\n\n        customerRepository() {\n            return this.repositoryFactory.create('customer');\n        },\n\n        customerCriteria() {\n            const criteria = new Criteria(1, 25);\n            criteria.addAssociation('addresses.country');\n\n            return criteria;\n        },\n\n        customFieldSetRepository() {\n            return this.repositoryFactory.create('custom_field_set');\n        },\n\n        customFieldSetCriteria() {\n            const criteria = new Criteria(1, 25);\n            criteria.addFilter(Criteria.equals('relations.entityName', 'customer_address')).addAssociation('customFields');\n\n            return criteria;\n        },\n\n        addressOptions() {\n            const addresses = (this.customer?.addresses || []).map((item) => {\n                const option = {\n                    label: this.addressLabel(item),\n                    ...item,\n                };\n                option.id = item.id;\n                return option;\n            });\n\n            // eslint-disable-next-line no-unused-expressions\n            this.address &&\n                addresses.unshift({\n                    label: this.addressLabel(this.address),\n                    ...this.address,\n                });\n\n            return addresses;\n        },\n\n        modalTitle() {\n            return this.$tc(\n                `sw-order.addressSelection.${\n                    this.currentAddress?._isNew ? 'modalTitleEditAddress' : 'modalTitleSelectAddress'\n                }`,\n            );\n        },\n\n        selectedAddressId() {\n            return this.address?.customerAddressId ?? this.addressId;\n        },\n    },\n\n    created() {\n        this.createdComponent();\n    },\n\n    methods: {\n        createdComponent() {\n            this.getCustomer();\n            this.getCustomFieldSet();\n        },\n\n        onEditAddress(id) {\n            if (id === this.address.id) {\n                this.currentAddress = this.address;\n                return;\n            }\n\n            const currentAddress = this.addressRepository.create(Cicada.Context.api, id);\n\n            this.currentAddress = Object.assign(currentAddress, this.customer.addresses.get(id));\n        },\n\n        onCreateNewAddress() {\n            this.createNewCustomerAddress();\n        },\n\n        createNewCustomerAddress() {\n            const newAddress = this.addressRepository.create();\n            newAddress.customerId = this.customer.id;\n\n            this.currentAddress = newAddress;\n        },\n\n        onSaveAddress() {\n            if (this.currentAddress === null) {\n                return Promise.resolve();\n            }\n\n            // edit order address\n            if (this.currentAddress.id === this.address.id) {\n                return this.orderRepository\n                    .save(this.order, this.versionContext)\n                    .then(() => {\n                        this.currentAddress = null;\n\n                        this.onAddressChange(this.address.id, true);\n                    })\n                    .catch(() => {\n                        this.createNotificationError({\n                            message: this.$tc('sw-order.detail.messageSaveError'),\n                        });\n                    });\n            }\n\n            if (!this.isValidAddress(this.currentAddress)) {\n                this.createNotificationError({\n                    message: this.$tc('sw-customer.notification.requiredFields'),\n                });\n\n                return Promise.reject();\n            }\n\n            const address =\n                this.customer.addresses.get(this.currentAddress.id) ??\n                this.addressRepository.create(Cicada.Context.api, this.currentAddress.id);\n\n            Object.assign(address, this.currentAddress);\n\n            if (this.customer.addresses.has(address.id)) {\n                this.customer.addresses.remove(address.id);\n            }\n\n            this.customer.addresses.push(address);\n\n            return this.customerRepository.save(this.customer).then(() => {\n                this.currentAddress = null;\n            });\n        },\n\n        isValidAddress(address) {\n            const ignoreFields = ['createdAt'];\n            const requiredAddressFields = Object.keys(EntityDefinition.getRequiredFields('customer_address'));\n\n            return requiredAddressFields.every((field) => ignoreFields.indexOf(field) !== -1 || required(address[field]));\n        },\n\n        onChangeDefaultAddress(data) {\n            if (!data.value) {\n                if (this.hasOwnProperty('defaultShippingAddressId')) {\n                    this.customer.defaultShippingAddressId = this.defaultShippingAddressId;\n                }\n\n                if (this.hasOwnProperty('defaultBillingAddressId')) {\n                    this.customer.defaultBillingAddressId = this.defaultBillingAddressId;\n                }\n                return;\n            }\n\n            const preFix = this.createPrefix(data.name, '-address');\n            const name = `default${preFix}AddressId`;\n\n            this[name] = this.customer[name];\n            this.customer[name] = data.id;\n        },\n\n        createPrefix(string, replace) {\n            const preFix = string.replace(replace, '');\n\n            return `${preFix.charAt(0).toUpperCase()}${preFix.slice(1)}`;\n        },\n\n        onAddressChange(customerAddressId, edited = false) {\n            this.$emit('change-address', {\n                orderAddressId: this.orderAddressId,\n                customerAddressId: customerAddressId,\n                type: this.type,\n                edited,\n            });\n        },\n\n        getCustomer() {\n            if (!this.orderCustomer.customerId) {\n                return Promise.reject();\n            }\n\n            return this.customerRepository\n                .get(this.orderCustomer.customerId, Cicada.Context.api, this.customerCriteria)\n                .then((customer) => {\n                    this.customer = customer;\n                });\n        },\n\n        getCustomFieldSet() {\n            return this.customFieldSetRepository.search(this.customFieldSetCriteria).then((customFieldSets) => {\n                this.customerAddressCustomFieldSets = customFieldSets;\n            });\n        },\n\n        addressLabel(address) {\n            const label = [\n                [\n                    address.company,\n                    address.department,\n                ]\n                    .filter((v) => v)\n                    .join(' - '),\n                address.street,\n                `${address.zipcode ?? ''} ${address.city}`.trim(),\n                address?.countryState?.translated?.name,\n                address?.country?.translated?.name,\n            ];\n\n            return label.filter((v) => v).join(', ');\n        },\n    },\n};\n"],"names":["template","EntityDefinition","Mixin","Criteria","mapState","cloneDeep","index","_a","criteria","addresses","item","option","id","currentAddress","newAddress","address","ignoreFields","field","required","data","name","string","replace","preFix","customerAddressId","edited","customer","customFieldSets","v","_b","_d","_c"],"mappings":"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"}