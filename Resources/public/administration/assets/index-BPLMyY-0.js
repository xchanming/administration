const i='{% block sw_container %} <div class="sw-container" :style="currentCssGrid" > <slot> {% block sw_container_slot_default %}{% endblock %} </slot> </div> {% endblock %}',{Component:n}=Cicada,{warn:a}=Cicada.Utils.debug;n.register("sw-container",{template:i,compatConfig:Cicada.compatConfig,props:{columns:{type:String,default:"",required:!1},rows:{type:String,default:"",required:!1},gap:{type:String,default:"",required:!1},justify:{type:String,required:!1,default:"stretch",validValues:["start","end","center","stretch","left","right"],validator(t){return["start","end","center","stretch","left","right"].includes(t)}},align:{type:String,required:!1,default:"stretch",validValues:["start","end","center","stretch"],validator(t){return["start","end","center","stretch"].includes(t)}},breakpoints:{type:Object,default(){return{}},required:!1}},data(){return{currentCssGrid:this.buildCssGrid()}},created(){this.createdComponent()},methods:{createdComponent(){this.registerResizeListener()},registerResizeListener(){const t=this;this.$device.onResize({listener(){t.updateCssGrid()},component:this})},updateCssGrid(){this.currentCssGrid=this.buildCssGrid()},buildCssGrid(){let t=this.buildCssGridProps();return Object.keys(this.breakpoints).length===0||Object.keys(this.breakpoints).find(e=>{const s=Number.parseInt(e,10),r=this.breakpoints[e];return Number.isNaN(s)&&a(this.$options.name,`Unable to register breakpoint "${e}".
                        The breakpoint key has to be a number equal to your desired pixel value.`,r),s>this.$device.getViewportWidth()?(t=this.buildCssGridProps(r),t):null}),t},cssGridDefaults(){return{columns:this.columns,rows:this.rows,gap:this.gap,justify:this.justify,align:this.align}},buildCssGridProps(t={}){const e=Object.assign(this.cssGridDefaults(),t);return{"grid-template-columns":e.columns,"grid-template-rows":e.rows,"grid-gap":e.gap,"justify-items":e.justify,"align-items":e.align}}}});
//# sourceMappingURL=index-BPLMyY-0.js.map
