const r=`{% block sw_pagination %} <div v-if="shouldBeVisible" class="sw-pagination" > {% block sw_pagination_page_prev %} <button :disabled="currentPage === 1" :aria-label="$tc('global.sw-pagination.previousPage')" class="sw-pagination__page-button sw-pagination__page-button-prev" @click="prevPage" > <sw-icon name="regular-chevron-left-xs" /> </button> {% endblock %} {% block sw_pagination_page_list %} <ul class="sw-pagination__list"> {% block sw_pagination_page_list_item %} <li v-for="(pageNum, index) in displayedPages" :key="index" class="sw-pagination__list-item" > {% block sw_pagination_page_list_item_button %} <button v-if="typeof(pageNum) === 'number'" :aria-label="$tc('global.sw-pagination.page', { page: pageNum })" class="sw-pagination__list-button" :class="{ 'is-active': currentPage === pageNum }" @click="changePageByPageNumber(pageNum)" > {{ pageNum }} </button> {% endblock %} {% block sw_pagination_page_list_item_separator %} <span v-else class="sw-pagination__list-separator" > {{ pageNum }} </span> {% endblock %} </li> {% endblock %} </ul> {% endblock %} {% block sw_pagination_page_next %} <button :disabled="currentPage === maxPage" :aria-label="$tc('global.sw-pagination.nextPage')" class="sw-pagination__page-button sw-pagination__page-button-next" @click="nextPage" > <sw-icon name="regular-chevron-right-xs" small /> </button> {% endblock %} {% block sw_pagination_per_page_selection %} <div v-if="steps.length > 1" class="sw-pagination__per-page" > <sw-select-field size="small" name="perPage" :label="$tc('global.sw-pagination.labelItemsPerPage')" :value="String(perPage)" aside @update:value="onPageSizeChange" > <option v-for="step in possibleSteps" :key="step" :value="step" > {{ step }} </option> </sw-select-field> </div> {% endblock %} </div> {% endblock %}`,{Component:l}=Cicada;l.register("sw-pagination",{template:r,compatConfig:Cicada.compatConfig,emits:["page-change"],props:{total:{type:Number,required:!0},limit:{type:Number,required:!0},page:{type:Number,required:!0},totalVisible:{type:Number,required:!1,default:7},steps:{type:Array,required:!1,default(){return[10,25,50,75,100]}},autoHide:{type:Boolean,required:!1,default:!0}},data(){return{currentPage:this.page,perPage:this.limit}},computed:{maxPage(){return Math.ceil(this.total/this.perPage)},displayedPages(){const a=this.totalVisible,t=this.currentPage;if(this.maxPage<=a)return this.range(1,this.maxPage);const s=a%2===0?1:0,e=Math.floor(a/2),i=this.maxPage-e+1+s;if(t===e||e===1&&t===e+1)return[...this.range(1,e+1),"...",...this.range(i,this.maxPage)];if(t===i||i===this.maxPage&&t===this.maxPage-1)return[...this.range(1,e),"...",...this.range(i-1,this.maxPage)];if(t>e&&t<i){const n=t-e+2,g=t+e-2-s;return[1,"...",...n>g?[t]:this.range(n,g),"...",this.maxPage]}return[...this.range(1,e),"...",...this.range(i,this.maxPage)]},shouldBeVisible(){return this.autoHide?this.total>Math.min(...this.steps):!0},possibleSteps(){const a=this.total,t=[...this.steps].sort((i,n)=>i-n);let s;return t.filter(i=>s>a?!1:(s=i,!0))}},watch:{page(){this.currentPage=this.page},limit(){this.perPage=this.limit},maxPage(){if(this.maxPage===0){this.currentPage=1;return}this.currentPage>this.maxPage&&this.changePageByPageNumber(this.maxPage)}},methods:{range(a,t){const s=[];a=a>0?a:1;for(let e=a;e<=t;e+=1)s.push(e);return s},pageChange(){this.$emit("page-change",{page:this.currentPage,limit:this.perPage})},onPageSizeChange(a){this.perPage=Number(a),this.firstPage()},firstPage(){this.currentPage=1,this.pageChange()},prevPage(){this.currentPage-=1,this.pageChange()},nextPage(){this.currentPage+=1,this.pageChange()},lastPage(){this.currentPage=this.maxPage,this.pageChange()},changePageByPageNumber(a){this.currentPage=a,this.pageChange()},refresh(){this.pageChange()}}});
//# sourceMappingURL=index-kBWLkc7r.js.map
