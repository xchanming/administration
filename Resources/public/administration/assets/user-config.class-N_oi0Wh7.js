const{Context:t,Data:n,Service:s}=Shopware,{Criteria:i}=n;class o{constructor(){this.userConfigRepository=s("repositoryFactory").create("user_config"),this.currentUserId=this.getCurrentUserId(),this.userConfig=this.createUserConfigEntity(this.getConfigurationKey()),this.aclService=s("acl"),this.readUserConfig()}refresh(){this.userConfig=this.createUserConfigEntity(this.getConfigurationKey()),this.readUserConfig()}async getUserConfig(){if(!this.aclService.can("user_config:read"))return this.userConfig;const r=(await this.userConfigRepository.search(this.getCriteria(this.getConfigurationKey()),t.api)).first()||this.userConfig;return this.handleEmptyUserConfig(r)}async saveUserConfig(){!this.aclService.can("user_config:create")||!this.aclService.can("user_config:update")||(this.setUserConfig(),await this.userConfigRepository.save(this.userConfig,t.api),await this.readUserConfig())}createUserConfigEntity(e){const r=this.userConfigRepository.create(t.api);if(!r)throw new Error("Could not create user config entity");return Object.assign(r,{userId:this.currentUserId,key:e,value:[]}),r}handleEmptyUserConfig(e){return Array.isArray(e==null?void 0:e.value)||(e.value=[]),e}getCriteria(e){const r=new i(1,25);return r.addFilter(i.equals("key",e)),r.addFilter(i.equals("userId",this.currentUserId)),r}getCurrentUserId(){var e;return((e=Shopware.Store.get("session").currentUser)==null?void 0:e.id)??""}}export{o as U};
