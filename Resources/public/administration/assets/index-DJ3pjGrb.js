const s=`{% block sw_category_detail_products %} <div class="sw-category-detail-products"> {% block sw_category_detail_product_assignment %} <sw-many-to-many-assignment-card v-if="category.type !== 'folder'" :title="$tc('sw-category.base.products.productAssignmentHeadline')" :entity-collection="category.products" :columns="productColumns" :is-loading="isLoading" :disabled="!acl.can('category.editor')" :local-mode="category.isNew()" :criteria="productCriteria" :select-label="$tc('sw-category.base.products.productAssignmentLabel')" :placeholder="$tc('sw-category.base.products.productAssignmentPlaceholder')" @paginate="onPaginateManualProductAssignment" > {% block sw_category_detail_product_assignment_type_select %} <template #prepend-select> {% block sw_category_detail_product_assignment_type_select_field %} <sw-single-select v-model:value="category.productAssignmentType" class="sw-category-detail-products__product-assignment-type-select" :label="$tc('sw-category.base.products.productAssignmentTypeLabel')" :error="categoryProductAssignmentTypeError" :options="productAssignmentTypes" :disabled="!acl.can('category.editor')" required show-clearable-button /> {% endblock %} {% block sw_category_detail_product_assignment_manual_alert %} <mt-banner v-if="category.productAssignmentType === 'product_stream' && manualAssignedProductsCount > 0" variant="info" > {{ $tc('sw-category.base.products.alertManualAssignedProductsOnAssignmentTypeStream') }} </mt-banner> {% endblock %} </template> {% endblock %} {% block sw_category_detail_product_assignment_stream_select %} <template v-if="category.productAssignmentType === 'product_stream'" #select > {% block sw_category_detail_product_assignment_stream_select_field %} <sw-entity-single-select v-model:value="category.productStreamId" class="sw-category-detail-products__product-stream-select" entity="product_stream" show-clearable-button :disabled="!acl.can('category.editor')" :label="$tc('sw-category.base.products.productAssignmentTypeStreamLabel')" :help-text="dynamicProductGroupHelpText" :placeholder="$tc('sw-category.base.products.productAssignmentTypeStreamPlaceholder')" :error="productStreamInvalidError || categoryProductStreamIdError" /> {% endblock %} {% block sw_category_detail_product_assignment_stream_preview_link %} <div class="sw-category-detail-products__product-stream-preview-link"> <router-link v-if="category.productStreamId" :to="{ name: 'sw.product.stream.detail', params: { id: category.productStreamId } }" > {{ $tc('sw-category.base.products.dynamicProductGroupDetailLinkText') }} <sw-icon name="regular-long-arrow-right" small /> </router-link> </div> {% endblock %} </template> {% endblock %} {% block sw_category_detail_product_assignment_stream_preview_grid %} <template v-if="category.productAssignmentType === 'product_stream'" #data-grid > <sw-product-stream-grid-preview :filters="productStreamFilter" :columns="productColumns" /> </template> {% endblock %} {% block sw_category_detail_product_assignment_column_name %} <template #[nameColumn]="{ item, column }"> <router-link :to="{ name: column.routerLink, params: { id: item.id } }" > <sw-product-variant-info :variations="item.variation"> {{ item.name || item.translated.name }} </sw-product-variant-info> </router-link> </template> {% endblock %} {% block sw_category_detail_product_assignment_column_manufacturer %} <template #[manufacturerColumn]="{ item, column }"> <router-link v-if="getManufacturer(item)" :to="{ name: column.routerLink, params: { id: item.manufacturerId } }" > {{ getManufacturer(item).name || getManufacturer(item).translated.name }} </router-link> <span v-else></span> </template> {% endblock %} {% block sw_category_detail_product_assignment_empty_state %} <template #empty-state> <sw-empty-state :title="$tc('sw-category.base.products.productAssignmentEmptyStateDescription')" :subline="''" auto-height > <template #icon> <img :src="assetFilter('/administration/static/img/empty-states/products-empty-state.svg')" :alt="$tc('sw-category.base.products.productAssignmentEmptyStateDescription')" > </template> </sw-empty-state> </template> {% endblock %} </sw-many-to-many-assignment-card> {% endblock %} </div> {% endblock %}`,{Criteria:r}=Shopware.Data,{mapPropertyErrors:c}=Shopware.Component.getComponentHelper(),n=Shopware.Classes.ShopwareError,i={template:s,inject:["repositoryFactory","acl"],mixins:["placeholder"],props:{isLoading:{type:Boolean,required:!0}},data(){return{productStreamFilter:null,productStreamInvalid:!1,manualAssignedProductsCount:0,parentProducts:[]}},computed:{category(){return Shopware.Store.get("swCategoryDetail").category},productStreamRepository(){return this.repositoryFactory.create("product_stream")},productRepository(){return this.repositoryFactory.create("product")},productColumns(){return[{property:"name",label:this.$tc("sw-category.base.products.columnNameLabel"),dataIndex:"name",routerLink:"sw.product.detail",sortable:!1},{property:"manufacturer.name",label:this.$tc("sw-category.base.products.columnManufacturerLabel"),routerLink:"sw.manufacturer.detail",sortable:!1}]},manufacturerColumn(){return"column-manufacturer.name"},nameColumn(){return"column-name"},productCriteria(){return new r(1,10).addAssociation("options.group").addAssociation("manufacturer").addFilter(r.multi("OR",[r.equals("parentId",null),r.multi("AND",[r.not("AND",[r.equals("parentId",null)]),r.equals("categories.id",this.category.id)])]))},productStreamInvalidError(){return this.productStreamInvalid?new n({code:"PRODUCT_STREAM_INVALID",detail:this.$tc("sw-category.base.products.dynamicProductGroupInvalidMessage")}):null},...c("category",["productStreamId","productAssignmentType"]),productAssignmentTypes(){return[{value:"product",label:this.$tc("sw-category.base.products.productAssignmentTypeManualLabel")},{value:"product_stream",label:this.$tc("sw-category.base.products.productAssignmentTypeStreamLabel")}]},dynamicProductGroupHelpText(){const t={name:"sw.product.stream.index"},e=this.$tc("sw-category.base.products.dynamicProductGroupHelpText.label",{link:`<sw-internal-link
                           :router-link=${JSON.stringify(t)}
                           :inline="true">
                           ${this.$tc("sw-category.base.products.dynamicProductGroupHelpText.linkText")}
                       </sw-internal-link>`},0);try{new URL(this.$tc("sw-category.base.products.dynamicProductGroupHelpText.videoUrl"))}catch{return e}return`${e}
                    <br>
                    <sw-external-link
                        href="${this.$tc("sw-category.base.products.dynamicProductGroupHelpText.videoUrl")}">
                        ${this.$tc("sw-category.base.products.dynamicProductGroupHelpText.videoLink")}
                    </sw-external-link>`},assetFilter(){return Shopware.Filter.getByName("asset")}},watch:{"category.productStreamId"(t){if(!t){this.productStreamFilter=null;return}this.loadProductStreamPreview()}},created(){this.createdComponent()},methods:{createdComponent(){this.category.productStreamId&&this.loadProductStreamPreview()},loadProductStreamPreview(){this.productStreamRepository.get(this.category.productStreamId).then(t=>{this.productStreamFilter=t.apiFilter,this.productStreamInvalid=t.invalid}).catch(()=>{this.productStreamFilter=null,this.productStreamInvalid=!0})},onPaginateManualProductAssignment(t){this.getParentProducts(t),this.manualAssignedProductsCount=t.total},getParentProducts(t){const e=t.map(a=>a.parentId).filter(a=>a!==null);if(e.length>0){const a=new r(1,e.length).addAssociation("manufacturer").addFilter(r.equalsAny("id",e));this.productRepository.search(a).then(o=>{this.parentProducts=o})}},getManufacturer(t){if(t.manufacturerId)return t.manufacturer;const e=this.parentProducts.find(a=>a.id===t.parentId);return e&&e.manufacturerId?e.manufacturer:null}}};export{i as default};
