const n=`{% block sw_users_permissions_permissions_grid %} <sw-card class="sw-users-permissions-permissions-grid" position-identifier="sw-users-permissions-permissions-grid" :title="$tc('sw-users-permissions.roles.grid.title')" > <div class="sw-users-permissions-permissions-grid__grid"> {% block sw_users_permissions_permissions_grid_header %} <div class="sw-users-permissions-permissions-grid__entry sw-users-permissions-permissions-grid__entry-header"> {% block sw_users_permissions_permissions_grid_header_title %} <div class="sw-users-permissions-permissions-grid__title"> {% block sw_users_permissions_permissions_grid_header_title_content %} {% endblock %} </div> {% endblock %} {% block sw_users_permissions_permissions_grid_header_roles %} <div v-for="role in roles" :key="role" class="sw-users-permissions-permissions-grid__checkbox-wrapper" > {% block sw_users_permissions_permissions_grid_header_roles_name %} {{ $tc('sw-privileges.roles.' + role) }} {% endblock %} </div> {% endblock %} {% block sw_users_permissions_permissions_grid_header_all_roles %} <div class="sw-users-permissions-permissions-grid__all"> {% block sw_users_permissions_permissions_grid_header_all_roles_name %} {{ $tc('sw-privileges.roles.all') }} {% endblock %} </div> {% endblock %} </div> {% endblock %} {% block sw_users_permissions_permissions_grid_permissions %} <template v-for="permission in permissionsWithParents" :key="permission.value" > <div v-if="permission.type === 'parent'" :class="'sw-users-permissions-permissions-grid__parent_' + permission.value" class="sw-users-permissions-permissions-grid__entry sw-users-permissions-permissions-grid__parent" > {% block sw_users_permissions_permissions_grid_parent_title %} <div class="sw-users-permissions-permissions-grid__title"> {% block sw_users_permissions_permissions_grid_parent_title_content %} {{ $tc('sw-privileges.permissions.parents.' + (permission.value || 'other')) }} {% endblock %} </div> {% endblock %} {% block sw_users_permissions_permissions_grid_parent_roles %} <div v-for="role in roles" :key="\`\${permission.value}-\${role}\`" :class="'sw-users-permissions-permissions-grid__role_' + role" class="sw-users-permissions-permissions-grid__checkbox-wrapper" > {% block sw_users_permissions_permissions_grid_parent_roles_field %} <sw-checkbox-field v-if="parentRoleHasChildRoles(permission.value, role)" :value="areAllChildrenRolesSelected(permission.value, role)" :ghost-value="areSomeChildrenRolesSelected(permission.value, role)" :disabled="isParentRoleDisabled(permission.value, role) || disabled" @update:value="toggleAllChildrenWithRole(permission.value, role)" /> {% endblock %} </div> {% endblock %} {% block sw_users_permissions_permissions_grid_parent_all_roles %} <div class="sw-users-permissions-permissions-grid__all sw-users-permissions-permissions-grid__role_all"> {% block sw_users_permissions_permissions_grid_parent_all_roles_field %} <sw-checkbox-field :value="areAllChildrenWithAllRolesSelected(permission.value)" :ghost-value="areSomeChildrenWithAllRolesSelected(permission.value)" :disabled="disabled" @update:value="toggleAllChildrenWithAllRoles(permission.value)" /> {% endblock %} </div> {% endblock %} </div> <div v-else :key="\`else-\${permission.key}\`" :class="'sw-users-permissions-permissions-grid__entry_' + permission.key" class="sw-users-permissions-permissions-grid__entry" > {% block sw_users_permissions_permissions_grid_permissions_title %} <div class="sw-users-permissions-permissions-grid__title"> {% block sw_users_permissions_permissions_grid_permissions_title_content %} {{ $tc('sw-privileges.permissions.' + permission.key + '.label') }} {% endblock %} </div> {% endblock %} {% block sw_users_permissions_permissions_grid_permissions_roles %} <div v-for="role in roles" :key="\`else-\${permission.key}\${role}\`" :class="'sw-users-permissions-permissions-grid__role_' + role" class="sw-users-permissions-permissions-grid__checkbox-wrapper" > {% block sw_users_permissions_permissions_grid_permissions_roles_field %} <sw-checkbox-field v-if="permission.roles[role]" v-tooltip="{ message: $tc('sw-users-permissions.roles.grid.disabledCheckboxMessage'), disabled: !isPermissionDisabled(permission.key, role) || disabled, showOnDisabledElements: false }" :value="isPermissionSelected(permission.key, role)" :disabled="isPermissionDisabled(permission.key, role) || disabled" @update:value="changePermission(permission.key, role)" /> {% endblock %} </div> {% endblock %} {% block sw_users_permissions_permissions_grid_permissions_all_roles %} <div class="sw-users-permissions-permissions-grid__all sw-users-permissions-permissions-grid__role_all"> {% block sw_users_permissions_permissions_grid_permissions_all_roles_field %} <sw-checkbox-field v-if="Object.keys(permission.roles).length > 0" :value="allPermissionsForKeySelected(permission.key)" :disabled="disabled" @update:value="changeAllPermissionsForKey(permission.key)" /> {% endblock %} </div> {% endblock %} </div> </template> {% endblock %} </div> </sw-card> {% endblock %}`,t={template:n,compatConfig:Cicada.compatConfig,inject:["privileges"],props:{role:{type:Object,required:!0},disabled:{type:Boolean,required:!1,default:!1}},computed:{permissionsWithParents(){const s=[];return this.parents.forEach(e=>{s.push({type:"parent",value:e}),this.getPermissionsForParent(e).forEach(r=>{s.push(r)})}),s},permissions(){return this.privileges.getPrivilegesMappings().filter(e=>e.category==="permissions").sort((e,i)=>{const r=this.$tc(`sw-privileges.permissions.${e.key}.label`),o=this.$tc(`sw-privileges.permissions.${i.key}.label`);return r.localeCompare(o)})},parents(){return this.permissions.reduce((s,e)=>s.includes(e.parent)?s:[...s,e.parent],[]).sort((s,e)=>{const i=this.$tc(`sw-privileges.permissions.parents.${s||"other"}`),r=this.$tc(`sw-privileges.permissions.parents.${e||"other"}`);return i.localeCompare(r)})},usedDependencies(){const s=new Set;return this.role.privileges.forEach(e=>{const i=this.privileges.getPrivilegeRole(e);i&&i.dependencies.forEach(r=>{s.add(r)})}),[...s]},roles(){return["viewer","editor","creator","deleter"]}},methods:{changePermission(s,e){const i=`${s}.${e}`;this.role.privileges.includes(i)?this.removePermission(i):this.addPermission(i)},addPermission(s){this.role.privileges.includes(s)||(this.role.privileges.push(s),this.addDependenciesForRole(s))},addDependenciesForRole(s){const e=this.privileges.getPrivilegeRole(s);e&&e.dependencies.forEach(i=>{this.addPermission(i)})},removePermission(s){this.role.privileges=this.role.privileges.filter(e=>e!==s)},isPermissionSelected(s,e){return this.role.privileges.some(i=>i===`${s}.${e}`)},isPermissionDisabled(s,e){return this.usedDependencies.includes(`${s}.${e}`)},changeAllPermissionsForKey(s){const e=this.allPermissionsForKeySelected(s);this.roles.forEach(i=>{const r=`${s}.${i}`;this.privileges.existsPrivilege(r)&&(e?this.removePermission(r):this.addPermission(r))})},allPermissionsForKeySelected(s){return!this.roles.some(i=>this.privileges.existsPrivilege(`${s}.${i}`)?!this.isPermissionSelected(s,i):!1)},getPermissionsForParent(s){return this.permissions.filter(e=>e.parent===s)},areAllChildrenRolesSelected(s,e){return!this.getPermissionsForParent(s).some(o=>o.roles[e]===void 0?!1:!this.isPermissionSelected(o.key,e))},areAllChildrenWithAllRolesSelected(s){return this.roles.every(e=>this.areAllChildrenRolesSelected(s,e))},areSomeChildrenRolesSelected(s,e,i=!0){return this.getPermissionsForParent(s).some(o=>!i&&!this.privileges.existsPrivilege(`${o.key}.${e}`)?!0:this.isPermissionSelected(o.key,e))},areSomeChildrenWithAllRolesSelected(s){return this.roles.every(e=>this.areSomeChildrenRolesSelected(s,e,!1))},isParentRoleDisabled(s,e){return this.getPermissionsForParent(s).every(r=>this.isPermissionDisabled(r.key,e))},toggleAllChildrenWithRole(s,e){const i=this.getPermissionsForParent(s),r=this.areAllChildrenRolesSelected(s,e);i.forEach(o=>{if(!o.roles[e])return;const l=`${o.key}.${e}`;this.isPermissionDisabled(o.key,e)||(r?this.removePermission(l):this.addPermission(l))})},toggleAllChildrenWithAllRoles(s){const e=this.getPermissionsForParent(s),i=this.areAllChildrenWithAllRolesSelected(s);return this.roles.forEach(r=>{e.forEach(o=>{const l=`${o.key}.${r}`;i?this.removePermission(l):this.addPermission(l)})})},parentRoleHasChildRoles(s,e){return this.getPermissionsForParent(s).some(i=>i.roles[e]!==void 0)}}};export{t as default};
//# sourceMappingURL=index-8VRQI1JY.js.map
