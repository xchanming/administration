const c=`{% block sw_order_detail %} <sw-page v-if="orderId" class="sw-order-detail" > {% block sw_order_detail_header %} <template #smart-bar-header> {% block sw_order_detail_header_title %} <h2 v-if="orderIdentifier"> {{ $tc('sw-order.detail.textHeadline') }} {{ orderIdentifier }} {% block sw_order_detail_header_label_manual_order %} <sw-label v-if="createdById" appearance="pill" size="small" class="sw-order-detail__manual-order-label" > {{ $tc('sw-order.detail.labelManualOrder') }} </sw-label> {% endblock %} </h2> {% endblock %} {% block sw_order_detail_header_title_new %} <h2 v-else> {{ $tc('sw-order.detail.textHeadlineNew') }} </h2> {% endblock %} </template> {% endblock %} {% block sw_order_detail_language_switch %} <template #language-switch> <sw-language-switch @on-change="onChangeLanguage" /> </template> {% endblock %} {% block sw_order_detail_actions %} <template #smart-bar-actions> {% block sw_order_detail_actions_slot_smart_bar_actions %} {% block sw_order_detail_actions_abort %} <sw-button v-tooltip="{ message: $tc('sw-privileges.tooltip.warning'), disabled: acl.can('order.editor'), showOnDisabledElements: true }" class="sw-order-detail__smart-bar-cancel-button" :disabled="isLoading || !acl.can('order.editor')" @click="onCancelEditing" > {{ $tc('global.default.cancel') }} </sw-button> {% endblock %} {% block sw_order_detail_actions_save %} <sw-button-process v-tooltip="{ message: $tc('sw-privileges.tooltip.warning'), disabled: acl.can('order.editor'), showOnDisabledElements: true }" class="sw-order-detail__smart-bar-save-button" variant="primary" :disabled="isLoading || !acl.can('order.editor')" :is-loading="isLoading" :process-success="isSaveSuccessful" @update:process-success="saveEditsFinish" @click.prevent="onSaveEdits" > {{ $tc('global.default.save') }} </sw-button-process> {% endblock %} {% endblock %} </template> {% endblock %} {% block sw_order_detail_content %} <template #content> {% block sw_order_detail_content_leave_page_modal %} <sw-order-leave-page-modal v-if="isDisplayingLeavePageWarning" @page-leave-cancel="onLeaveModalClose" @page-leave-confirm="onLeaveModalConfirm" /> {% endblock %} <sw-card-view> <sw-alert v-if="isOrderEditing" class="sw-order-detail__alert" variant="warning" > {{ $tc('sw-order.detail.textUnsavedOrderWarning') }} </sw-alert> <sw-alert v-if="missingProductLineItems.length > 0" class="sw-order-detail__alert" variant="warning" > {{ $tc('sw-order.detailBase.textMissingProductLineItems') }} <ul class="sw_order_detail_base__missing_products_alert-list"> <li v-for="lineItem in missingProductLineItems" :key="lineItem.id" > {{ lineItem.label }} </li> </ul> {{ $tc('sw-order.detailBase.textMissingProductLineItemsDescription') }} </sw-alert> <sw-alert v-if="convertedProductLineItems.length > 0" class="sw-order-detail__alert" variant="info" > {{ $tc('sw-order.detailBase.textConvertedProductLineItems') }} <ul class="sw_order_detail_base__converted_products_alert-list"> <li v-for="lineItem in convertedProductLineItems" :key="lineItem.id" > {{ lineItem.label }} </li> </ul> {{ $tc('sw-order.detailBase.textConvertedProductLineItemsDescription') }} </sw-alert> {% block sw_order_detail_content_tabs %} <sw-tabs v-if="showTabs" class="sw-order-detail__tabs" :class="{ 'has-warning': showWarningTabStyle }" position-identifier="sw-order-detail" > {% block sw_order_detail_content_tabs_general %} <sw-tabs-item class="sw-order-detail__tabs-tab-general" :route="{ name: 'sw.order.detail.general', params: { id: $route.params.id } }" :title="$tc('sw-order.detail.tabGeneral')" > {{ $tc('sw-order.detail.tabGeneral') }} </sw-tabs-item> {% endblock %} {% block sw_order_detail_content_tabs_details %} <sw-tabs-item class="sw-order-detail__tabs-tab-details" :route="{ name: 'sw.order.detail.details', params: { id: $route.params.id } }" :title="$tc('sw-order.detail.tabDetails')" > {{ $tc('sw-order.detail.tabDetails') }} </sw-tabs-item> {% endblock %} {% block sw_order_detail_content_tabs_extension %}{% endblock %} </sw-tabs> {% endblock %} <sw-extension-component-section position-identifier="sw-order-detail__before-content" /> {% block sw_order_detail_content_view %} <template v-if="isLoading"> <sw-skeleton /> <sw-skeleton /> </template> {# v-show is used here as underlying components influence the loading state and v-if would destroy this behaviour #} <router-view v-if="order" v-show="!isLoading" ref="baseComponent" :order-id="orderId" :is-editing="isEditing" :is-loading="isLoading" :is-save-successful="isSaveSuccessful" @identifier-change="updateIdentifier" @created-by-id-change="updateCreatedById" @loading-change="onUpdateLoading" @editing-change="onUpdateEditing" @save-and-recalculate="onSaveAndRecalculate" @recalculate-and-reload="onRecalculateAndReload" @reload-entity-data="reloadEntityData" @save-and-reload="onSaveAndReload" @save-edits="onSaveEdits" @error="onError" /> {% endblock %} </sw-card-view> </template> {% endblock %} </sw-page> {% endblock %}`,h={namespaced:!0,state(){return{order:null,loading:{order:!1,states:!1},editing:!1,savedSuccessful:!1,versionContext:null,orderAddressIds:[]}},getters:{isLoading:e=>Object.values(e.loading).some(t=>t),isEditing:e=>e.editing},mutations:{setOrder(e,t){e.order=t},setLoading(e,t){const r=t[0],s=t[1];typeof s=="boolean"&&e.loading[r]!==void 0&&(e.loading[r]=s)},setEditing(e,t){e.editing=t},setSavedSuccessful(e,t){e.savedSuccessful=t},setVersionContext(e,t){e.versionContext=t},setOrderAddressIds(e,t){if(!t){e.orderAddressIds=[];return}const{orderAddressId:r,customerAddressId:s,type:a,edited:l}=t;if(r===s&&!l){e.orderAddressIds=e.orderAddressIds.filter(d=>!(d.orderAddressId===r&&d.type===a));return}const n=e.orderAddressIds.findIndex(d=>d.orderAddressId===r&&d.type===a);if(n!==-1){e.orderAddressIds[n].customerAddressId=s;return}e.orderAddressIds.push(t)}}},{State:i,Mixin:u,Utils:m}=Cicada,{Criteria:o}=Cicada.Data,{array:g}=m,{mapState:w}=Cicada.Component.getComponentHelper(),p=Cicada.Classes.ApiService,v={template:c,compatConfig:Cicada.compatConfig,inject:["repositoryFactory","acl","orderService","feature"],provide(){return{swOrderDetailOnIdentifierChange:this.updateIdentifier,swOrderDetailOnCreatedByIdChange:this.updateCreatedById,swOrderDetailOnLoadingChange:this.onUpdateLoading,swOrderDetailOnEditingChange:this.onUpdateEditing,swOrderDetailOnSaveAndRecalculate:this.onSaveAndRecalculate,swOrderDetailOnRecalculateAndReload:this.onRecalculateAndReload,swOrderDetailOnReloadEntityData:this.reloadEntityData,swOrderDetailOnSaveAndReload:this.onSaveAndReload,swOrderDetailOnSaveEdits:this.onSaveEdits,swOrderDetailOnError:this.onError}},mixins:[u.getByName("notification")],props:{orderId:{type:String,required:!1,default:null}},data(){return{identifier:"",isEditing:!1,isLoading:!0,isSaveSuccessful:!1,createdById:"",isDisplayingLeavePageWarning:!1,nextRoute:null,hasNewVersionId:!1,hasOrderDeepEdit:!1,missingProductLineItems:[],promotionsToDelete:[],deliveryDiscountsToDelete:[]}},metaInfo(){return{title:this.$createTitle(this.orderIdentifier)}},computed:{...w("swOrderDetail",["order","versionContext","orderAddressIds","editing","loading"]),orderIdentifier(){return this.order!==null?this.order.orderNumber:""},orderChanges(){return this.order?this.orderRepository.hasChanges(this.order):!1},showTabs(){return this.$route.meta.$module.routes.detail.children.length>1},showWarningTabStyle(){return this.isOrderEditing},isOrderEditing(){var e;return this.orderChanges||this.hasOrderDeepEdit||((e=this.orderAddressIds)==null?void 0:e.length)>0},orderRepository(){return this.repositoryFactory.create("order")},automaticPromotions(){return this.order.lineItems.filter(e=>e.type==="promotion"&&e.referencedId===null)},deliveryDiscounts(){return g.slice(this.order.deliveries,1)||[]},orderCriteria(){const e=new o(1,25);return e.addAssociation("currency").addAssociation("orderCustomer.salutation").addAssociation("language"),e.getAssociation("lineItems").addFilter(o.equals("parentId",null)).addSorting(o.sort("position","ASC")),e.getAssociation("lineItems.children").addSorting(o.sort("position","ASC")),e.addAssociation("salesChannel"),e.addAssociation("addresses.country").addAssociation("addresses.countryState").addAssociation("deliveries.shippingMethod").addAssociation("deliveries.shippingOrderAddress").addAssociation("transactions.paymentMethod").addAssociation("tags"),e.addAssociation("stateMachineState"),e.getAssociation("deliveries").addAssociation("stateMachineState").addSorting(o.sort("shippingCosts.unitPrice","DESC")),e.getAssociation("transactions").addAssociation("stateMachineState").addSorting(o.sort("createdAt")),e.addAssociation("billingAddress"),e},convertedProductLineItems(){var e,t;return((t=(e=this.order)==null?void 0:e.lineItems)==null?void 0:t.filter(r=>{var s;return((s=r.payload)==null?void 0:s.isConvertedProductLineItem)&&r.type==="custom"&&!this.missingProductLineItems.includes(r)}))||[]}},watch:{orderId(){this.createdComponent()},isOrderEditing(e){this.updateEditing(e)}},beforeCreate(){i.registerModule("swOrderDetail",h)},beforeUnmount(){this.beforeDestroyComponent(),i.unregisterModule("swOrderDetail")},beforeRouteLeave(e,t,r){this.isOrderEditing?(this.nextRoute=r,this.isDisplayingLeavePageWarning=!0):r()},created(){this.createdComponent()},methods:{createdComponent(){Cicada.ExtensionAPI.publishData({id:"sw-order-detail-base__order",path:"order",scope:this}),window.addEventListener("beforeunload",this.beforeDestroyComponent),Cicada.State.commit("cicadaApps/setSelectedIds",this.orderId?[this.orderId]:[]),this.createNewVersionId()},async beforeDestroyComponent(){if(this.hasNewVersionId){const e=this.versionContext;i.commit("swOrderDetail/setVersionContext",Cicada.Context.api),this.hasNewVersionId=!1,await this.orderRepository.deleteVersion(this.orderId,e.versionId,e)}},updateIdentifier(e){this.identifier=e},updateCreatedById(e){this.createdById=e},onChangeLanguage(){this.$root.$emit("language-change")},saveEditsFinish(){this.isSaveSuccessful=!1,this.isEditing=!1},onStartEditing(){this.$root.$emit("order-edit-start")},async onSaveEdits(){if(this.isLoading=!0,await this.handleOrderAddressUpdate(this.orderAddressIds),this.promotionsToDelete.length>0&&(this.order.lineItems=this.order.lineItems.filter(e=>!this.promotionsToDelete.includes(e.id))),this.order.lineItems.length===0){this.createNotificationError({message:this.$tc("sw-order.detail.messageEmptyLineItems")}),this.createNewVersionId().then(()=>{i.commit("swOrderDetail/setLoading",["order",!1])});return}this.deliveryDiscountsToDelete.length>0&&(this.order.deliveries=this.order.deliveries.filter(e=>!this.deliveryDiscountsToDelete.includes(e.id))),await this.orderRepository.save(this.order,this.versionContext).then(()=>(this.hasOrderDeepEdit=!1,this.promotionsToDelete=[],this.deliveryDiscountsToDelete=[],this.orderRepository.mergeVersion(this.versionContext.versionId,this.versionContext))).then(()=>this.createNewVersionId()).then(()=>{i.commit("swOrderDetail/setSavedSuccessful",!0)}).catch(e=>{this.onError("error",e),this.isLoading=!1}),this.$root.$emit("order-edit-save")},async handleOrderAddressUpdate(e){const t=[];if(e.forEach(r=>{if(r.customerAddressId===r.orderAddressId)return;const s={customerAddressId:r.customerAddressId,type:r.type};r.type==="shipping"&&(s.deliveryId=this.order.deliveries[0].id),t.push(s)}),t.length===0){i.commit("swOrderDetail/setOrderAddressIds",!1);return}await this.updateOrderAddresses(t).then(()=>{i.commit("swOrderDetail/setOrderAddressIds",!1)}).catch(r=>{this.createNotificationError({message:r})})},onCancelEditing(){this.isLoading=!0,i.commit("swOrderDetail/setLoading",["order",!0]);const e=this.versionContext;return i.commit("swOrderDetail/setVersionContext",Cicada.Context.api),this.hasNewVersionId=!1,this.orderRepository.deleteVersion(this.orderId,e.versionId,e).then(()=>{this.hasOrderDeepEdit=!1,i.commit("swOrderDetail/setOrderAddressIds",!1)}).catch(t=>{this.onError("error",t)}).finally(()=>(this.missingProductLineItems=[],this.createNewVersionId().then(()=>{i.commit("swOrderDetail/setLoading",["order",!1])})))},async onSaveAndRecalculate(){i.commit("swOrderDetail/setLoading",["order",!0]),this.isLoading=!0,this.order.lineItems=this.order.lineItems.filter(e=>!this.automaticPromotions.includes(e)),this.order.deliveries=this.order.deliveries.filter(e=>!this.deliveryDiscounts.includes(e));try{await this.orderRepository.save(this.order,this.versionContext),await this.orderService.recalculateOrder(this.orderId,this.versionContext.versionId,{},{}),await this.orderService.toggleAutomaticPromotions(this.orderId,this.versionContext.versionId,!1),await this.reloadEntityData()}catch(e){this.onError("error",e)}finally{this.isLoading=!1,Cicada.State.commit("swOrderDetail/setLoading",["order",!1])}},async onRecalculateAndReload(){i.commit("swOrderDetail/setLoading",["order",!0]);try{this.promotionsToDelete=this.automaticPromotions.map(e=>e.id),this.deliveryDiscountsToDelete=this.deliveryDiscounts.map(e=>e.id),await this.orderService.recalculateOrder(this.orderId,this.versionContext.versionId,{},{}),await this.orderService.toggleAutomaticPromotions(this.orderId,this.versionContext.versionId,!1),await this.reloadEntityData(),this.order.lineItems=this.order.lineItems.filter(e=>!this.promotionsToDelete.includes(e.id)),this.order.deliveries=this.order.deliveries.filter(e=>!this.deliveryDiscountsToDelete.includes(e.id))}catch(e){this.onError("error",e),this.promotionsToDelete=[],this.deliveryDiscountsToDelete=[]}finally{Cicada.State.commit("swOrderDetail/setLoading",["order",!1])}},onSaveAndReload(){return i.commit("swOrderDetail/setLoading",["order",!0]),this.orderRepository.save(this.order,this.versionContext).then(()=>this.reloadEntityData()).catch(e=>{this.onError("error",e)}).finally(()=>{Cicada.State.commit("swOrderDetail/setLoading",["order",!1])})},onUpdateLoading(e){this.isLoading=e},onUpdateEditing(e){this.isEditing=e},onError(e){let t=null;try{t=e.response.data.errors[0].detail}catch{t=""}this.createNotificationError({message:this.$tc("sw-order.detail.messageRecalculationError")+t})},onLeaveModalClose(){this.nextRoute(!1),this.nextRoute=null,this.isDisplayingLeavePageWarning=!1},onLeaveModalConfirm(){this.isDisplayingLeavePageWarning=!1,this.$nextTick(()=>{this.nextRoute()})},reloadEntityData(e=!0){return i.commit("swOrderDetail/setLoading",["order",!0]),this.orderRepository.get(this.orderId,this.versionContext,this.orderCriteria).then(t=>{e&&(this.hasOrderDeepEdit=!0),i.commit("swOrderDetail/setOrder",t)}).finally(()=>{Cicada.State.commit("swOrderDetail/setLoading",["order",!1]),this.isLoading=!1})},createNewVersionId(){return i.commit("swOrderDetail/setVersionContext",Cicada.Context.api),this.hasNewVersionId=!1,this.orderRepository.createVersion(this.orderId,this.versionContext).then(e=>(this.hasNewVersionId=!0,i.commit("swOrderDetail/setVersionContext",e),this.reloadEntityData(!1))).then(()=>this.convertMissingProductLineItems())},updateOrderAddresses(e){return this.orderService.updateOrderAddresses(this.orderId,e,{},p.getVersionHeader(this.order.versionId))},updateEditing(e){i.commit("swOrderDetail/setEditing",e)},convertMissingProductLineItems(){var e,t;return this.missingProductLineItems=((t=(e=this.order)==null?void 0:e.lineItems)==null?void 0:t.filter(r=>r.productId===null&&r.type==="product"))||[],this.missingProductLineItems.length===0?Promise.resolve():(this.missingProductLineItems.forEach(r=>{r.type="custom",r.productId=null,r.referencedId=null,r.payload.isConvertedProductLineItem=!0}),this.orderRepository.save(this.order,this.versionContext))}}};export{v as default};
//# sourceMappingURL=index-5guqX5v2.js.map
