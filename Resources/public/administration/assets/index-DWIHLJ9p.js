const r=`{% block sw_entity_multi_select %} <sw-select-base ref="selectBase" class="sw-entity-multi-select" :is-loading="isLoading" v-bind="$attrs" :label="label" @select-expanded="onSelectExpanded" @select-collapsed="onSelectCollapsed" @clear="clearSelection" > {% block sw_entity_multi_select_base %} {% block sw_entity_multi_select_base_selection %} <template #sw-select-selection="{ identification, error, disabled, size, expand, collapse}"> {% block sw_entity_multi_select_advanced_selection_modal %} <component :is="advancedSelectionComponent" v-if="isAdvancedSelectionActive && isAdvancedSelectionModalVisible" :initial-search-term="searchTerm" :initial-selection="currentCollection" v-bind="advancedSelectionParameters" @modal-close="closeAdvancedSelectionModal" @selection-submit="onAdvancedSelectionSubmit" /> {% endblock %} {% block sw_entity_multi_select_base_selection_slot %} <sw-select-selection-list ref="selectionList" :selections="visibleValues" :invisible-count="invisibleValueCount" value-property="id" v-bind="{ size, labelProperty, placeholder, alwaysShowPlaceholder, searchTerm, disabled }" :input-label="label" :hide-labels="hideLabels" :selection-disabling-method="selectionDisablingMethod" @total-count-click="expandValueLimit" @item-remove="remove" @last-item-delete="removeLastItem" @search-term-change="onSearchTermChange" > {% block sw_entity_multi_select_base_selection_list %} {% block sw_entity_multi_select_base_selection_list_label %} <template #label-property="{ item, index, labelProperty, valueProperty, getKey }"> {% block sw_entity_multi_select_base_selection_list_label_inner %} <slot name="selection-label-property" v-bind="{ item, index, labelProperty, valueProperty, getKey }" > <sw-product-variant-info v-if="displayVariants" :variations="item.variation" > {{ displayLabelProperty(item) }} </sw-product-variant-info> <template v-else> {{ displayLabelProperty(item) }} </template> </slot> {% endblock %} </template> {% endblock %} {% endblock %} </sw-select-selection-list> {% endblock %} </template> {% endblock %} {% block sw_entity_multi_select_base_results %} <template #results-list> {% block sw_entity_multi_select_base_results_slot %} <sw-select-result-list ref="swSelectResultList" :options="resultCollection" :is-loading="isLoading" :empty-message="$tc('global.sw-entity-multi-select.messageNoResults', { term: searchTerm }, 0)" :focus-el="$refs.selectionList.getFocusEl()" @paginate="paginate" @item-select="addItem" > {% block sw_entity_multi_select_base_results_list %} {% block sw_entity_multi_select_base_results_list_before %} <template #before-item-list> {% block sw_entity_multi_select_base_results_list_before_advanced_selection %} <div v-if="isAdvancedSelectionActive" class="sw-multi-select-filtering__advanced-selection sw-select-result" @click="openAdvancedSelectionModal" > {{ $tc('global.sw-entity-advanced-selection-modal.link') }} </div> {% endblock %} {% block sw_entity_multi_select_base_results_list_before_slot %} <slot name="before-item-list"></slot> {% endblock %} </template> {% endblock %} {% block sw_entity_multi_select_base_results_list_result %} <template #result-item="{ item, index }"> <slot name="result-item" v-bind="{ item, index, labelProperty, valueProperty: 'id', searchTerm, highlightSearchTerm, isSelected, addItem, getKey, displayLabelProperty, isSelectionDisabled, descriptionPosition }" > <sw-select-result :selected="isSelected(item)" v-bind="{ item, index }" :disabled="isSelectionDisabled(item)" :description-position="descriptionPosition" @item-select="addItem" > {% block sw_entity_multi_select_base_results_list_result_preview %} <template #preview> <slot name="result-label-preview" v-bind="{ item, index, labelProperty, valueProperty: 'id', searchTerm, highlightSearchTerm, getKey }" ></slot> </template> {% endblock %} {% block sw_entity_multi_select_base_results_list_result_label %} <slot name="result-label-property" v-bind="{ item, index, labelProperty, valueProperty: 'id', searchTerm, highlightSearchTerm, getKey }" > <sw-product-variant-info v-if="displayVariants" :variations="item.variation" :highlighted="true" :search-term="searchTerm" > {{ displayLabelProperty(item) }} </sw-product-variant-info> <template v-else> <sw-highlight-text v-if="highlightSearchTerm" :text="displayLabelProperty(item)" :search-term="searchTerm" /> <template v-else> {{ displayLabelProperty(item) }} </template> </template> </slot> {% endblock %} {% block sw_entity_multi_select_base_results_list_result_description %} <template #description> <slot name="result-description-property" v-bind="{ item, searchTerm, highlightSearchTerm }" ></slot> </template> {% endblock %} </sw-select-result> </slot> </template> {% endblock %} {% block sw_entity_multi_select_base_results_list_after %} <template #after-item-list> <slot name="after-item-list"></slot> </template> {% endblock %} {% endblock %} </sw-select-result-list> {% endblock %} </template> {% endblock %} {% endblock %} <template #label> <slot name="label"></slot> </template> <template #hint> <slot name="hint"></slot> </template> </sw-select-base> {% endblock %}`,{Component:s,Mixin:a}=Shopware,{debounce:o,get:n}=Shopware.Utils,{Criteria:c,EntityCollection:l}=Shopware.Data;s.register("sw-entity-multi-select",{template:r,inheritAttrs:!1,inject:["repositoryFactory","feature"],emits:["search","update:entityCollection","item-add","item-remove","display-values-expand","search-term-change"],mixins:[a.getByName("remove-api-error")],props:{labelProperty:{type:[String,Array],required:!1,default:"name"},resultLimit:{type:Number,required:!1,default:25},valueLimit:{type:Number,required:!1,default:5},placeholder:{type:String,required:!1,default:""},alwaysShowPlaceholder:{type:Boolean,required:!1,default:!1},criteria:{type:Object,required:!1,default(e){return new c(1,e.resultLimit)}},disabled:{type:Boolean,required:!1,default:void 0},highlightSearchTerm:{type:Boolean,required:!1,default:!0},entityCollection:{type:Array,required:!0},entityName:{type:String,required:!1,default:null},context:{type:Object,required:!1,default(){return Shopware.Context.api}},hideLabels:{type:Boolean,required:!1,default:!1},selectionDisablingMethod:{type:Function,required:!1,default:()=>!1},descriptionPosition:{type:String,required:!1,default:"right",validValues:["bottom","right"],validator(e){return["bottom","right"].includes(e)}},advancedSelectionComponent:{type:String,required:!1,default(){return""}},advancedSelectionParameters:{type:Object,required:!1,default(){return{}}},displayVariants:{type:Boolean,required:!1,default:!1},label:{type:String,required:!1,default:void 0}},data(){return{searchTerm:"",limit:this.valueLimit,searchCriteria:null,isLoading:!1,currentCollection:null,resultCollection:null,isAdvancedSelectionModalVisible:!1}},computed:{repository(){return this.repositoryFactory.create(this.entityName||this.entityCollection.entity)},visibleValues(){return!this.currentCollection||this.currentCollection.length<=0?[]:this.currentCollection.slice(0,this.limit)},totalValuesCount(){return this.currentCollection.length?this.currentCollection.length:0},invisibleValueCount(){return this.currentCollection?Math.max(0,this.totalValuesCount-this.limit):0},isAdvancedSelectionActive(){return this.advancedSelectionComponent&&s.getComponentRegistry().has(this.advancedSelectionComponent)}},watch:{entityCollection(){this.refreshCurrentCollection()}},created(){this.createdComponent()},methods:{createdComponent(){this.refreshCurrentCollection()},refreshCurrentCollection(){this.entityCollection&&(this.currentCollection=l.fromCollection(this.entityCollection))},createEmptyCollection(){return new l(this.entityCollection.source,this.entityCollection.entity,this.entityCollection.context,this.entityCollection.criteria)},isSelected(e){return this.currentCollection.has(e.id)},loadData(){return this.isLoading=!0,this.repository.search(this.criteria,{...this.context,inheritance:!0}).then(e=>(this.displaySearch(e),this.isLoading=!1,e))},search(){if(this.criteria.term===this.searchTerm)return Promise.resolve();this.resetCriteria(),this.resultCollection=null;const e=this.loadData().then(t=>(this.resetActiveItem(),t));return this.$emit("search",e),e},displaySearch(e){this.resultCollection?e.forEach(t=>{this.resultCollection.has(t.id)||this.resultCollection.push(t)}):this.resultCollection=e},displayLabelProperty(e){const t=[];return Array.isArray(this.labelProperty)?t.push(...this.labelProperty):t.push(this.labelProperty),t.map(i=>this.getKey(e,i)||this.getKey(e,`translated.${i}`)).join(" ")},resetActiveItem(){this.$refs.swSelectResultList&&this.$refs.swSelectResultList.setActiveItemIndex(0)},resetCriteria(){this.criteria.setPage(1),this.criteria.setLimit(this.resultLimit),this.criteria.setTerm(this.searchTerm)},paginate(){!this.resultCollection||this.resultCollection.total<this.criteria.page*this.criteria.limit||(this.criteria.setPage(this.criteria.page+1),this.loadData())},emitChanges(e){this.$emit("update:entityCollection",e)},addItem(e){if(this.isSelected(e)){this.remove(e);return}this.$emit("item-add",e);const t=l.fromCollection(this.currentCollection);t.add(e),this.emitChanges(t),this.$refs.selectionList.focus(),this.$refs.selectionList.select()},remove(e){this.$emit("item-remove",e);const t=l.fromCollection(this.currentCollection);t.remove(e.id),this.emitChanges(t)},removeLastItem(){if(!this.currentCollection.length)return;if(this.invisibleValueCount>0){this.expandValueLimit();return}const e=this.currentCollection[this.currentCollection.length-1];this.remove(e)},onSelectExpanded(){this.resetCriteria(),this.resultCollection=null,this.loadData(),this.$refs.selectionList.focus()},onSelectCollapsed(){this.searchTerm="",this.$refs.selectionList.blur()},expandValueLimit(){this.$emit("display-values-expand"),this.limit+=this.limit},onSearchTermChange(e){this.searchTerm=e,this.$emit("search-term-change",e),this.debouncedSearch()},debouncedSearch:o(function(){this.search()},400),resetResultCollection(){this.resultCollection=null,this.$refs.selectBase.expanded&&this.loadData()},getKey(e,t,i){return n(e,t,i)},isSelectionDisabled(e){return this.disabled?!0:this.selectionDisablingMethod(e)},openAdvancedSelectionModal(){this.isAdvancedSelectionModalVisible=!0},closeAdvancedSelectionModal(){this.isAdvancedSelectionModalVisible=!1},onAdvancedSelectionSubmit(e){const t=this.createEmptyCollection();e.forEach(i=>{t.add(i)}),this.emitChanges(t),this.$refs.selectionList.focus(),this.$refs.selectionList.select()},clearSelection(){this.emitChanges(this.createEmptyCollection()),this.searchTerm="",this.$refs.selectionList.blur()}}});
