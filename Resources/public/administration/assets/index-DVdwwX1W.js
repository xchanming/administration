const n=`{% block sw_import_export_edit_profile_modal_identifiers %} <div class="sw-import-export-edit-profile-modal-identifiers"> {% block sw_import_export_edit_profile_modal_identifiers_grid %} <sw-data-grid v-if="identifiers && identifiers.length" :data-source="identifiers" :compact-mode="false" :show-selection="false" :show-actions="false" :columns="identifierColumns" plain-appearance class="sw-import-export-edit-profile-modal-identifiers__grid" > {% block sw_import_export_edit_profile_modal_identifiers_grid_entity_name_column %} <template #column-identifierName="{ item }"> {{ item.propertyNames.join(', ') }} </template> {% endblock %} {% block sw_import_export_edit_profile_modal_identifiers_grid_mapped_column %} <template #column-mapped="{ item }"> <sw-single-select v-if="item.relation !== 'many_to_many'" required :value="item.selected" :options="item.options" :disabled="profile.systemDefault" :show-clearable-button="item.selected !== 'id'" @update:value="onChangeIdentifier($event, item.entityName)" /> <sw-import-export-entity-path-select v-else :value="item.selected" :languages="languages" :currencies="currencies" :entity-type="item.entityName" :disabled="profile.systemDefault" :custom-field-sets="customFieldSets" @update:value="onChangeIdentifier($event, item.entityName)" > <template #before-item-list> <span></span> </template> </sw-import-export-entity-path-select> </template> {% endblock %} </sw-data-grid> {% endblock %} {% block sw_import_export_edit_profile_modal_identifiers_empty_state %} <sw-empty-state v-else class="sw-import-export-edit-profile-modal-identifiers__empty-state" :title="$tc('sw-import-export.profile.mappingEmptyState')" :absolute="false" /> {% endblock %} </div> {% endblock %}`,r=Cicada.Data.Criteria,l={template:n,compatConfig:Cicada.compatConfig,inject:["repositoryFactory","importExportUpdateByMapping"],props:{profile:{type:Object,required:!1,default:null}},data(){return{currencies:[],languages:[],customFieldSets:[]}},computed:{languageRepository(){return this.repositoryFactory.create("language")},currencyRepository(){return this.repositoryFactory.create("currency")},customFieldSetRepository(){return this.repositoryFactory.create("custom_field_set")},languageCriteria(){const e=new r(1,500);return e.addAssociation("locale"),e},currencyCriteria(){return new r(1,500)},customFieldSetCriteria(){const e=new r(1,500);return e.addAssociation("relations"),e.addAssociation("customFields"),e},identifierColumns(){return[{property:"identifierName",label:"sw-import-export.profile.identifiers.identifierNameLabel",allowResize:!1,primary:!0},{property:"mapped",label:"sw-import-export.profile.identifiers.mappedKeyLabel",allowResize:!1,width:"100%"}]},identifiers(){const e={};return this.profile.mapping?(this.profile.mapping.forEach(i=>{const{entity:t,path:o,relation:s,name:a}=this.importExportUpdateByMapping.getEntity(this.profile.sourceEntity,i.key);if(!t||s==="one_to_many")return;e[t]=e[t]??{entityName:t,options:[],selected:this.importExportUpdateByMapping.getSelected(t,this.profile.updateBy),relation:s,propertyNames:[]};const p=o!==""?i.key.replace(new RegExp(`^(${o}.)`),""):i.key;e[t].options.push({label:p,value:p}),e[t].propertyNames.includes(a)||e[t].propertyNames.push(a)}),Object.values(e)):[]}},created(){this.createdComponent()},methods:{createdComponent(){this.languageRepository.search(this.languageCriteria).then(e=>{this.languages=e,this.languages.push({locale:{code:"DEFAULT"}})}),this.currencyRepository.search(this.currencyCriteria).then(e=>{this.currencies=e,this.currencies.push({isoCode:"DEFAULT"})}),this.customFieldSetRepository.search(this.customFieldSetCriteria).then(e=>{this.customFieldSets=e})},onChangeIdentifier(e,i){this.importExportUpdateByMapping.updateMapping(this.profile,e,i)}}};export{l as default};
//# sourceMappingURL=index-DVdwwX1W.js.map
