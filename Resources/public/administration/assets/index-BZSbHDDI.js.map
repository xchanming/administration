{"version":3,"file":"index-BZSbHDDI.js","sources":["../../../app/administration/src/module/sw-order/view/sw-order-create-initial/sw-order-create-initial.html.twig","../../../app/administration/src/module/sw-order/view/sw-order-create-initial/index.js"],"sourcesContent":["<!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n{% block sw_order_create_create_initial %}\n<div class=\"sw-order-create-initial\">\n    <sw-order-create-initial-modal\n        @modal-close=\"onCloseCreateModal\"\n        @order-preview=\"onPreviewOrder\"\n    />\n</div>\n{% endblock %}\n","import template from './sw-order-create-initial.html.twig';\n\n/**\n * @package checkout\n */\n\nconst { State, Data, Service } = Cicada;\nconst { Criteria } = Data;\n\n// eslint-disable-next-line sw-deprecation-rules/private-feature-declarations\nexport default {\n    template,\n\n    compatConfig: Cicada.compatConfig,\n\n    inject: ['feature'],\n\n    computed: {\n        customerRepository() {\n            return Service('repositoryFactory').create('customer');\n        },\n\n        customerCriteria() {\n            const criteria = new Criteria(1, 25);\n            criteria\n                .addAssociation('addresses')\n                .addAssociation('group')\n                .addAssociation('salutation')\n                .addAssociation('salesChannel')\n                .addAssociation('lastPaymentMethod')\n                .addAssociation('defaultBillingAddress.country')\n                .addAssociation('defaultBillingAddress.countryState')\n                .addAssociation('defaultBillingAddress.salutation')\n                .addAssociation('defaultShippingAddress.country')\n                .addAssociation('defaultShippingAddress.countryState')\n                .addAssociation('defaultShippingAddress.salutation')\n                .addAssociation('tags');\n            return criteria;\n        },\n    },\n\n    created() {\n        this.createdComponent();\n    },\n\n    methods: {\n        async createdComponent() {\n            const customerId = this.$route.query?.customerId;\n\n            if (!customerId) {\n                return;\n            }\n\n            const customer = await this.customerRepository.get(customerId, Cicada.Context.api, this.customerCriteria);\n            if (customer) {\n                State.commit('swOrder/setCustomer', customer);\n            }\n        },\n\n        onCloseCreateModal() {\n            this.$nextTick(() => {\n                this.$router.push({ name: 'sw.order.index' });\n            });\n        },\n\n        onPreviewOrder() {\n            this.$nextTick(() => {\n                this.$router.push({ name: 'sw.order.create.general' });\n            });\n        },\n    },\n};\n"],"names":["template","State","Data","Service","Criteria","index","criteria","_a","customerId","customer"],"mappings":"AAAA,MAAeA,EAAA,6MCMT,CAAE,MAAAC,EAAO,KAAAC,EAAM,QAAAC,CAAO,EAAK,OAC3B,CAAE,SAAAC,CAAU,EAAGF,EAGNG,EAAA,CACX,SAAAL,EAEA,aAAc,OAAO,aAErB,OAAQ,CAAC,SAAS,EAElB,SAAU,CACN,oBAAqB,CACjB,OAAOG,EAAQ,mBAAmB,EAAE,OAAO,UAAU,CACxD,EAED,kBAAmB,CACf,MAAMG,EAAW,IAAIF,EAAS,EAAG,EAAE,EACnC,OAAAE,EACK,eAAe,WAAW,EAC1B,eAAe,OAAO,EACtB,eAAe,YAAY,EAC3B,eAAe,cAAc,EAC7B,eAAe,mBAAmB,EAClC,eAAe,+BAA+B,EAC9C,eAAe,oCAAoC,EACnD,eAAe,kCAAkC,EACjD,eAAe,gCAAgC,EAC/C,eAAe,qCAAqC,EACpD,eAAe,mCAAmC,EAClD,eAAe,MAAM,EACnBA,CACV,CACJ,EAED,SAAU,CACN,KAAK,iBAAgB,CACxB,EAED,QAAS,CACL,MAAM,kBAAmB,CD9CjC,IAAAC,EC+CY,MAAMC,GAAaD,EAAA,KAAK,OAAO,QAAZ,YAAAA,EAAmB,WAEtC,GAAI,CAACC,EACD,OAGJ,MAAMC,EAAW,MAAM,KAAK,mBAAmB,IAAID,EAAY,OAAO,QAAQ,IAAK,KAAK,gBAAgB,EACpGC,GACAR,EAAM,OAAO,sBAAuBQ,CAAQ,CAEnD,EAED,oBAAqB,CACjB,KAAK,UAAU,IAAM,CACjB,KAAK,QAAQ,KAAK,CAAE,KAAM,gBAAkB,CAAA,CAC5D,CAAa,CACJ,EAED,gBAAiB,CACb,KAAK,UAAU,IAAM,CACjB,KAAK,QAAQ,KAAK,CAAE,KAAM,yBAA2B,CAAA,CACrE,CAAa,CACJ,CACJ,CACL"}