{"version":3,"file":"index-DIgzwgH4.js","sources":["../../../app/administration/src/module/sw-settings-country/component/sw-settings-country-state/sw-settings-country-state.html.twig","../../../app/administration/src/module/sw-settings-country/component/sw-settings-country-state/index.js"],"sourcesContent":["<!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n{% block sw_settings_country_state_list_card %}\n<sw-card\n    v-if=\"!isLoading\"\n    position-identifier=\"sw-settings-country-state\"\n>\n    <template #toolbar>\n        <sw-container\n            columns=\"1fr 32px minmax(100px, 200px)\"\n            gap=\"0 10px\"\n        >\n\n            <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n            {% block sw_attribute_list_toolbar_searchfield %}\n            <sw-simple-search-field\n                v-model:value=\"term\"\n                size=\"small\"\n                variant=\"form\"\n                @search-term-change=\"onSearchCountryState\"\n            />\n            {% endblock %}\n\n            <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n            {% block sw_settings_country_state_list_toolbar_delete %}\n            <sw-button\n                v-tooltip.bottom=\"{\n                    message: $tc('sw-privileges.tooltip.warning'),\n                    disabled: acl.can('country.editor'),\n                    showOnDisabledElements: true\n                }\"\n                square\n                size=\"small\"\n                class=\"sw-settings-country-state-list__delete-button\"\n                :disabled=\"deleteButtonDisabled || !acl.can('country.editor')\"\n                @click=\"onDeleteCountryStates\"\n            >\n                <sw-icon\n                    name=\"regular-trash\"\n                    small\n                />\n            </sw-button>\n            {% endblock %}\n\n            <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n            {% block sw_settings_country_state_list_toolbar_add %}\n            <sw-button\n                v-tooltip.bottom=\"{\n                    message: $tc('sw-privileges.tooltip.warning'),\n                    disabled: acl.can('country.editor'),\n                    showOnDisabledElements: true\n                }\"\n                class=\"sw-settings-country-state__add-country-state-button\"\n                size=\"x-small\"\n                variant=\"primary\"\n                :disabled=\"!acl.can('country.editor') || undefined\"\n                @click=\"onAddCountryState\"\n            >\n                {{ $tc('sw-settings-country.detail.buttonAddCountryState') }}\n            </sw-button>\n            {% endblock %}\n\n        </sw-container>\n    </template>\n\n    <template #grid>\n\n        <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n        {% block sw_settings_country_state_list_listing %}\n        <sw-one-to-many-grid\n            ref=\"countryStateGrid\"\n            class=\"sw-settings-country-state-list__content\"\n            :is-loading=\"countryStateLoading\"\n            :collection=\"country.states\"\n            :full-page=\"undefined\"\n            :local-mode=\"country.isNew()\"\n            :columns=\"stateColumns\"\n            :allow-delete=\"acl.can('country.editor')\"\n            :tooltip-delete=\"{\n                message: $tc('sw-privileges.tooltip.warning'),\n                disabled: acl.can('country.editor'),\n                showOnDisabledElements: true\n            }\"\n            @selection-change=\"countryStateSelectionChanged\"\n            @load-finish=\"checkEmptyState\"\n        >\n\n            <template #column-name=\"{ item }\">\n\n                <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n                {% block sw_settings_country_state_list_listing_column_name %}\n                <a\n                    class=\"sw-settings-country-state__link\"\n                    role=\"button\"\n                    tabindex=\"0\"\n                    @click=\"onClickCountryState(item)\"\n                    @keydown.enter=\"onClickCountryState(item)\"\n                >\n                    {{ getCountryStateName(item) }}\n                </a>\n                {% endblock %}\n\n            </template>\n\n            <template #more-actions=\"{ item }\">\n                <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n                {% block sw_settings_country_state_list_listing_action_edit %}\n                <sw-context-menu-item\n                    v-tooltip.top=\"{\n                        message: $tc('sw-privileges.tooltip.warning'),\n                        disabled: acl.can('country.editor'),\n                        showOnDisabledElements: true\n                    }\"\n                    class=\"sw-settings-country-state__edit-country-state-action\"\n                    :disabled=\"!acl.can('country.editor') || undefined\"\n                    @click=\"onClickCountryState(item)\"\n                >\n                    {{ $tc('sw-settings-country.detail.editAction') }}\n                </sw-context-menu-item>\n                {% endblock %}\n            </template>\n        </sw-one-to-many-grid>\n        {% endblock %}\n        <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n        {% block sw_settings_country_state_list_empty %}\n        <sw-empty-state\n            v-if=\"showEmptyState\"\n            :absolute=\"false\"\n            :title=\"$tc('sw-country-state-detail.emptyTitle')\"\n            :subline=\"$tc('sw-country-state-detail.emptySubline')\"\n            auto-height\n        />\n        {% endblock %}\n    </template>\n    <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n    {% block sw_settings_country_state_detail %}\n    <sw-country-state-detail\n        v-if=\"currentCountryState\"\n        :country-state=\"currentCountryState\"\n        @attribute-edit-save=\"onSaveCountryState\"\n        @attribute-edit-cancel=\"onCancelCountryState\"\n    />\n    {% endblock %}\n</sw-card>\n{% endblock %}\n\n","/**\n * @package buyers-experience\n */\nimport template from './sw-settings-country-state.html.twig';\nimport './sw-settings-country-state.scss';\n\nconst { Mixin } = Cicada;\n\n// eslint-disable-next-line sw-deprecation-rules/private-feature-declarations\nexport default {\n    template,\n\n    compatConfig: Cicada.compatConfig,\n\n    inject: [\n        'repositoryFactory',\n        'acl',\n    ],\n\n    mixins: [\n        Mixin.getByName('notification'),\n    ],\n\n    props: {\n        country: {\n            type: Object,\n            required: true,\n        },\n        isLoading: {\n            type: Boolean,\n            required: false,\n            default: false,\n        },\n        countryStateRepository: {\n            type: Object,\n            required: false,\n            default: null,\n        },\n    },\n\n    data() {\n        return {\n            deleteButtonDisabled: true,\n            term: null,\n            currentCountryState: null,\n            countryStateLoading: false,\n            showEmptyState: false,\n        };\n    },\n\n    computed: {\n        stateColumns() {\n            return this.getStateColumns();\n        },\n\n        countryStates() {\n            return this.country.states;\n        },\n    },\n\n    watch: {\n        countryStates() {\n            this.checkEmptyState();\n        },\n    },\n\n    mounted() {\n        this.mountedComponent();\n    },\n\n    methods: {\n        mountedComponent() {\n            this.checkEmptyState();\n        },\n\n        getStateColumns() {\n            return [\n                {\n                    property: 'name',\n                    label: this.$tc('sw-settings-country.detail.columnStateNameLabel'),\n                    inlineEdit: 'string',\n                    primary: true,\n                },\n                {\n                    property: 'shortCode',\n                    label: this.$tc('sw-settings-country.detail.columnStateShortCodeLabel'),\n                    inlineEdit: 'string',\n                },\n            ];\n        },\n\n        countryStateSelectionChanged(selection, selectionCount) {\n            this.deleteButtonDisabled = selectionCount <= 0;\n        },\n\n        onSearchCountryState() {\n            this.country.states.criteria.setTerm(this.term);\n            this.refreshCountryStateList();\n        },\n\n        onDeleteCountryStates() {\n            const selection = this.$refs.countryStateGrid.selection;\n            const countryStateIds = Object.keys(selection);\n\n            if (!countryStateIds.length) {\n                return Promise.resolve();\n            }\n\n            if (this.country.isNew()) {\n                countryStateIds.forEach((countryStateId) => {\n                    this.country.states.remove(countryStateId);\n                });\n\n                this.$refs.countryStateGrid.resetSelection();\n                return Promise.resolve();\n            }\n\n            this.countryStateLoading = true;\n\n            return this.countryStateRepository\n                .syncDeleted(countryStateIds, Cicada.Context.api)\n                .then(() => {\n                    this.$refs.countryStateGrid.resetSelection();\n                    this.refreshCountryStateList();\n                })\n                .finally(() => {\n                    this.countryStateLoading = false;\n                });\n        },\n\n        onAddCountryState() {\n            this.currentCountryState = this.countryStateRepository.create(Cicada.Context.api);\n        },\n\n        onSaveCountryState(countryState) {\n            // do not send requests if we are on local mode(creating a new country)\n            if (this.country.isNew()) {\n                this.country.states.add(countryState);\n\n                return Promise.resolve().then(() => {\n                    this.currentCountryState = null;\n                });\n            }\n\n            return this.countryStateRepository\n                .save(this.currentCountryState)\n                .then(() => {\n                    this.refreshCountryStateList();\n                })\n                .catch((errors) => {\n                    if (errors.response.data.errors[0].code === 'MISSING-SYSTEM-TRANSLATION') {\n                        this.createNotificationError({\n                            message: this.$tc('sw-country-state-detail.createNewStateError'),\n                        });\n                    }\n                });\n        },\n\n        onCancelCountryState() {\n            this.currentCountryState = null;\n        },\n\n        onClickCountryState(item) {\n            // Create a copy with the same id which will be edited\n            const copy = this.countryStateRepository.create(Cicada.Context.api, item.id);\n            copy._isNew = false;\n\n            this.currentCountryState = Object.assign(copy, item);\n        },\n\n        refreshCountryStateList() {\n            this.countryStateLoading = true;\n\n            this.$refs.countryStateGrid.load().then(() => {\n                this.countryStateLoading = false;\n                this.currentCountryState = null;\n            });\n        },\n\n        getCountryStateName(item) {\n            return item?.translated?.name || item?.name;\n        },\n\n        checkEmptyState() {\n            if (this.country?.isNew()) {\n                this.showEmptyState = this.country?.states?.length === 0;\n                return;\n            }\n\n            this.showEmptyState = this.$refs.countryStateGrid?.total === 0;\n        },\n    },\n};\n"],"names":["template","Mixin","index","selection","selectionCount","countryStateIds","countryStateId","countryState","errors","item","copy","_a","_b","_c","_d"],"mappings":"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"}