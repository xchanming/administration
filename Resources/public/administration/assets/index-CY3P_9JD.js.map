{"version":3,"file":"index-CY3P_9JD.js","sources":["../../../app/administration/src/app/component/app/sw-app-actions/sw-app-actions.html.twig","../../../app/administration/src/app/component/app/sw-app-actions/index.js"],"sourcesContent":["<!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n{% block sw_app_actions %}\n<div\n    class=\"sw-app-actions\"\n    :class=\"{'sw-app-actions__empty': !areActionsAvailable}\"\n>\n    <template v-if=\"areActionsAvailable\">\n        <sw-context-button class=\"sw-app-actions__action-button\">\n            <template #button>\n                <sw-button>\n                    <sw-icon\n                        name=\"solid-ellipsis-h-s\"\n                        size=\"16\"\n                    />\n                </sw-button>\n            </template>\n\n            <sw-app-action-button\n                v-for=\"action in actions\"\n                :key=\"action.id\"\n                :action=\"action\"\n                @run-app-action=\"runAction\"\n            />\n        </sw-context-button>\n\n        <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n        {% block sw_app_action_modal %}\n        <sw-modal\n            v-if=\"isOpenModal\"\n            class=\"sw-modal-app-action-button\"\n            :class=\"{ 'is-expanded' : isExpanded}\"\n            :variant=\"size\"\n            @modal-close=\"onCloseModal\"\n        >\n            <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n            {% block sw_app_action_modal_header %}\n            <template #modal-header>\n                <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n                {% block sw_app_action_modal_slot_header %}\n                <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n                {% block sw_app_action_modal_close %}\n                <div\n                    id=\"modal-app-action-button\"\n                    class=\"sw-modal__title\"\n                >\n                    <img\n                        v-if=\"action.icon\"\n                        class=\"sw-app-action-button__icon\"\n                        :src=\"`data:image/png;base64, ${action.icon}`\"\n                        alt=\"\"\n                    >\n                    <span>{{ action.app }}</span>\n                </div>\n                {% endblock %}\n\n                <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n                {% block sw_app_action_modal_close_button %}\n                <button\n                    class=\"sw-modal__close\"\n                    :title=\"$tc('global.sw-modal.labelClose')\"\n                    :aria-label=\"$tc('global.sw-modal.labelClose')\"\n                    @click.prevent=\"onCloseModal\"\n                >\n                    <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n                    {% block sw_app_action_modal_close_icon %}\n                    <sw-icon\n                        name=\"regular-times-s\"\n                        small\n                    />\n                    {% endblock %}\n                </button>\n                {% endblock %}\n                {% endblock %}\n            </template>\n            {% endblock %}\n\n            <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n            {% block sw_app_action_modal_iframe %}\n            <!-- eslint-disable-next-line vuejs-accessibility/iframe-has-title -->\n            <iframe\n                id=\"app-action-button-iframe\"\n                ref=\"innerFrame\"\n                class=\"sw-app-action-button-iframe\"\n                referrerpolicy=\"origin-when-cross-origin\"\n                :src=\"iframeUrl\"\n            ></iframe>\n            {% endblock %}\n        </sw-modal>\n        {% endblock %}\n\n        <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n        {% block sw_app_action_modal_confirm %}\n        <sw-modal\n            v-if=\"isOpenConfirmModal\"\n            class=\"sw-app-action-button-modal-confirm\"\n            :title=\"$tc('sw-app.component.sw-app-actions.closeWindow')\"\n            variant=\"small\"\n            @modal-close=\"onCloseModalConfirm\"\n        >\n            <p>{{ $tc('sw-app.component.sw-app-actions.iframeModalConfirmMessage',0, { title: action.app }) }}</p>\n            <p>{{ $tc('sw-app.component.sw-app-actions.iframeModalConfirmMessageDescription') }}</p>\n\n            <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n            {% block sw_app_action_modal_confirm_footer %}\n            <template #modal-footer>\n                <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n                {% block sw_app_action_modal_confirm_checkbox %}\n                <sw-checkbox-field\n                    :value=\"!isShowModalConfirm\"\n                    @update:value=\"onChangeCheckboxShow()\"\n                >\n                    <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n                    {% block sw_app_action_modal_confirm_checkbox_label %}\n                    <template #label>\n                        {{ $tc('sw-app.component.sw-app-actions.dontAskMeAgain') }}\n                    </template>\n                    {% endblock %}\n                </sw-checkbox-field>\n                {% endblock %}\n\n                <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n                {% block sw_app_action_modal_confirm_footer_buttons %}\n                <div class=\"footer-buttons\">\n                    <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n                    {% block sw_app_action_modal_confirm_footer_cancel %}\n                    <sw-button\n                        size=\"small\"\n                        @click=\"onCloseModalConfirm\"\n                    >\n                        {{ $tc('global.default.cancel') }}\n                    </sw-button>\n                    {% endblock %}\n\n                    <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n                    {% block sw_app_action_modal_confirm_footer_continue %}\n                    <sw-button\n                        variant=\"primary\"\n                        size=\"small\"\n                        @click=\"onConfirmClose\"\n                    >\n                        {{ $tc('global.default.close') }}\n                    </sw-button>\n                    {% endblock %}\n                </div>\n                {% endblock %}\n            </template>\n            {% endblock %}\n        </sw-modal>\n        {% endblock %}\n    </template>\n</div>\n{% endblock %}\n","/**\n * @package admin\n */\n\nimport template from './sw-app-actions.html.twig';\nimport './sw-app-actions.scss';\n\nconst { Component, Mixin } = Cicada;\nconst { Criteria } = Cicada.Data;\nconst { hasOwnProperty } = Cicada.Utils.object;\n\nconst actionTypeConstants = Object.freeze({\n    ACTION_SHOW_NOTIFICATION: 'notification',\n    ACTION_RELOAD_DATA: 'reload',\n    ACTION_OPEN_NEW_TAB: 'openNewTab',\n    ACTION_OPEN_MODAL: 'openModal',\n});\n\nconst modalSizeMapping = {\n    small: 'small',\n    medium: 'default',\n    large: 'large',\n    fullscreen: 'full',\n};\n\nconst IFRAME_KEY = 'app.action_button.iframe';\n\n/**\n * @private\n */\nComponent.register('sw-app-actions', {\n    template,\n\n    compatConfig: Cicada.compatConfig,\n\n    extensionApiDevtoolInformation: {\n        property: 'ui.actionButton',\n        entity: (currentComponent) => `${currentComponent.entity}`,\n        view: (currentComponent) => `${currentComponent.view}`,\n    },\n\n    inject: [\n        'feature',\n        'appActionButtonService',\n        'repositoryFactory',\n        'extensionSdkService',\n    ],\n\n    mixins: [Mixin.getByName('notification')],\n\n    data() {\n        return {\n            actions: [],\n            matchedRoutes: [],\n            isOpenModal: false,\n            isOpenConfirmModal: false,\n            title: '',\n            action: null,\n            size: 'default',\n            isExpanded: false,\n            iframeUrl: '',\n            isShowModalConfirm: true,\n            iframeUserConfig: null,\n        };\n    },\n\n    computed: {\n        entity() {\n            return this.$route?.meta?.$module?.entity;\n        },\n\n        view() {\n            const matchedRoute = this.matchedRoutes\n                .filter((match) => {\n                    return !!match?.meta?.appSystem?.view;\n                })\n                .pop();\n\n            return matchedRoute?.meta?.appSystem?.view;\n        },\n\n        areActionsAvailable() {\n            return !!this.actions && this.actions.length > 0 && this.params.length > 0;\n        },\n\n        params() {\n            return Cicada.State.get('cicadaApps').selectedIds;\n        },\n\n        userConfigRepository() {\n            return this.repositoryFactory.create('user_config');\n        },\n\n        currentUser() {\n            return Cicada.State.get('session').currentUser;\n        },\n\n        userConfigCriteria() {\n            const criteria = new Criteria(1, 25);\n\n            criteria.addFilter(Criteria.equals('key', IFRAME_KEY));\n            criteria.addFilter(Criteria.equals('userId', this.currentUser?.id));\n\n            return criteria;\n        },\n\n        extensionSdkButtons() {\n            return Cicada.State.get('actionButtons').buttons.filter((button) => {\n                return button.entity === this.entity && button.view === this.view;\n            });\n        },\n    },\n\n    watch: {\n        $route: {\n            immediate: true,\n            handler() {\n                this.matchedRoutes = this.$router.currentRoute.value.matched;\n                this.loadActions();\n            },\n        },\n\n        extensionSdkButtons() {\n            // If the matching entity and view is already open and the iframe call comes in late reload\n            this.loadActions();\n        },\n    },\n\n    methods: {\n        async runAction(action) {\n            const entityIdList = { ids: this.params };\n\n            if (hasOwnProperty(action, 'callback') && typeof action.callback === 'function') {\n                action.callback(action.entity, entityIdList.ids);\n\n                return;\n            }\n\n            const { data } = await this.appActionButtonService.runAction(action.id, entityIdList);\n            const { actionType, redirectUrl, status, message } = data;\n\n            this.action = this.actions.find((actionsAction) => {\n                return actionsAction.id === action.id;\n            });\n\n            switch (actionType) {\n                case actionTypeConstants.ACTION_OPEN_NEW_TAB:\n                    window.open(redirectUrl, '_blank');\n                    break;\n                case actionTypeConstants.ACTION_SHOW_NOTIFICATION:\n                    this.createNotification({\n                        variant: status,\n                        message: message,\n                    });\n                    break;\n                case actionTypeConstants.ACTION_RELOAD_DATA:\n                    window.location.reload();\n                    break;\n                case actionTypeConstants.ACTION_OPEN_MODAL:\n                    await this.getUserConfig();\n                    this.size = modalSizeMapping[data.size] || 'default';\n                    this.iframeUrl = data.iframeUrl;\n                    this.isExpanded = data.expand === true;\n                    this.isOpenModal = true;\n\n                    break;\n                default:\n                    break;\n            }\n        },\n\n        async loadActions() {\n            try {\n                this.actions = await this.appActionButtonService.getActionButtonsPerView(this.entity, this.view);\n                this.actions.push(...this.extensionSdkButtons);\n            } catch (e) {\n                this.actions = [];\n\n                // ignore missing parameter exception for pages without correct view\n                if (!!e.name && e.name === 'InvalidActionButtonParameterError') {\n                    return;\n                }\n\n                this.createNotificationError({\n                    message: this.$tc('sw-app.component.sw-app-actions.messageErrorFetchButtons'),\n                });\n            }\n        },\n\n        onCloseModal() {\n            if (this.size === modalSizeMapping.small && !this.isExpanded) {\n                this.isOpenModal = false;\n            } else {\n                this.onOpenModalConfirm();\n            }\n        },\n\n        onOpenModalConfirm() {\n            if (this.iframeUserConfig.value.isShowModalConfirm) {\n                this.isOpenConfirmModal = true;\n                return;\n            }\n\n            this.isOpenModal = false;\n        },\n\n        onCloseModalConfirm() {\n            this.isOpenConfirmModal = false;\n        },\n\n        async onConfirmClose() {\n            this.saveConfig(this.isShowModalConfirm);\n\n            await this.onCloseModalConfirm();\n            this.isOpenModal = false;\n        },\n\n        onChangeCheckboxShow() {\n            this.isShowModalConfirm = !this.isShowModalConfirm;\n        },\n\n        getUserConfig() {\n            this.userConfigRepository.search(this.userConfigCriteria, Cicada.Context.api).then((response) => {\n                if (response.length) {\n                    this.iframeUserConfig = response.first();\n                } else {\n                    this.iframeUserConfig = this.userConfigRepository.create(Cicada.Context.api);\n                    this.iframeUserConfig.key = IFRAME_KEY;\n                    this.iframeUserConfig.userId = this.currentUser?.id;\n                    this.iframeUserConfig.value = {\n                        isShowModalConfirm: true,\n                    };\n                }\n            });\n        },\n\n        saveConfig(value) {\n            this.iframeUserConfig.value = {\n                isShowModalConfirm: value,\n            };\n\n            this.userConfigRepository.save(this.iframeUserConfig, Cicada.Context.api).then(() => {\n                this.getUserConfig();\n            });\n        },\n    },\n});\n"],"names":["template","Component","Mixin","Criteria","hasOwnProperty","actionTypeConstants","modalSizeMapping","IFRAME_KEY","currentComponent","_a","_b","_c","matchedRoute","match","criteria","button","action","entityIdList","data","actionType","redirectUrl","status","message","actionsAction","e","response","value"],"mappings":"AAAA,MAAeA,EAAA,q7FCOT,CAAE,UAAAC,EAAW,MAAAC,CAAO,EAAG,OACvB,CAAE,SAAAC,CAAQ,EAAK,OAAO,KACtB,CAAE,eAAAC,CAAgB,EAAG,OAAO,MAAM,OAElCC,EAAsB,OAAO,OAAO,CACtC,yBAA0B,eAC1B,mBAAoB,SACpB,oBAAqB,aACrB,kBAAmB,WACvB,CAAC,EAEKC,EAAmB,CACrB,MAAO,QACP,OAAQ,UACR,MAAO,QACP,WAAY,MAChB,EAEMC,EAAa,2BAKnBN,EAAU,SAAS,iBAAkB,CACjC,SAAAD,EAEA,aAAc,OAAO,aAErB,+BAAgC,CAC5B,SAAU,kBACV,OAASQ,GAAqB,GAAGA,EAAiB,MAAM,GACxD,KAAOA,GAAqB,GAAGA,EAAiB,IAAI,EACvD,EAED,OAAQ,CACJ,UACA,yBACA,oBACA,qBACH,EAED,OAAQ,CAACN,EAAM,UAAU,cAAc,CAAC,EAExC,MAAO,CACH,MAAO,CACH,QAAS,CAAE,EACX,cAAe,CAAE,EACjB,YAAa,GACb,mBAAoB,GACpB,MAAO,GACP,OAAQ,KACR,KAAM,UACN,WAAY,GACZ,UAAW,GACX,mBAAoB,GACpB,iBAAkB,IAC9B,CACK,EAED,SAAU,CACN,QAAS,CDnEjB,IAAAO,EAAAC,EAAAC,ECoEY,OAAOA,GAAAD,GAAAD,EAAA,KAAK,SAAL,YAAAA,EAAa,OAAb,YAAAC,EAAmB,UAAnB,YAAAC,EAA4B,MACtC,EAED,MAAO,CDvEf,IAAAF,EAAAC,ECwEY,MAAME,EAAe,KAAK,cACrB,OAAQC,GAAU,CDzEnC,IAAAJ,EAAAC,EC0EoB,MAAO,CAAC,GAACA,GAAAD,EAAAI,GAAA,YAAAA,EAAO,OAAP,YAAAJ,EAAa,YAAb,MAAAC,EAAwB,KACrD,CAAiB,EACA,MAEL,OAAOA,GAAAD,EAAAG,GAAA,YAAAA,EAAc,OAAd,YAAAH,EAAoB,YAApB,YAAAC,EAA+B,IACzC,EAED,qBAAsB,CAClB,MAAO,CAAC,CAAC,KAAK,SAAW,KAAK,QAAQ,OAAS,GAAK,KAAK,OAAO,OAAS,CAC5E,EAED,QAAS,CACL,OAAO,OAAO,MAAM,IAAI,YAAY,EAAE,WACzC,EAED,sBAAuB,CACnB,OAAO,KAAK,kBAAkB,OAAO,aAAa,CACrD,EAED,aAAc,CACV,OAAO,OAAO,MAAM,IAAI,SAAS,EAAE,WACtC,EAED,oBAAqB,CDjG7B,IAAAD,ECkGY,MAAMK,EAAW,IAAIX,EAAS,EAAG,EAAE,EAEnC,OAAAW,EAAS,UAAUX,EAAS,OAAO,MAAOI,CAAU,CAAC,EACrDO,EAAS,UAAUX,EAAS,OAAO,UAAUM,EAAA,KAAK,cAAL,YAAAA,EAAkB,EAAE,CAAC,EAE3DK,CACV,EAED,qBAAsB,CAClB,OAAO,OAAO,MAAM,IAAI,eAAe,EAAE,QAAQ,OAAQC,GAC9CA,EAAO,SAAW,KAAK,QAAUA,EAAO,OAAS,KAAK,IAChE,CACJ,CACJ,EAED,MAAO,CACH,OAAQ,CACJ,UAAW,GACX,SAAU,CACN,KAAK,cAAgB,KAAK,QAAQ,aAAa,MAAM,QACrD,KAAK,YAAW,CACnB,CACJ,EAED,qBAAsB,CAElB,KAAK,YAAW,CACnB,CACJ,EAED,QAAS,CACL,MAAM,UAAUC,EAAQ,CACpB,MAAMC,EAAe,CAAE,IAAK,KAAK,MAAM,EAEvC,GAAIb,EAAeY,EAAQ,UAAU,GAAK,OAAOA,EAAO,UAAa,WAAY,CAC7EA,EAAO,SAASA,EAAO,OAAQC,EAAa,GAAG,EAE/C,MACH,CAED,KAAM,CAAE,KAAAC,GAAS,MAAM,KAAK,uBAAuB,UAAUF,EAAO,GAAIC,CAAY,EAC9E,CAAE,WAAAE,EAAY,YAAAC,EAAa,OAAAC,EAAQ,QAAAC,CAAO,EAAKJ,EAMrD,OAJA,KAAK,OAAS,KAAK,QAAQ,KAAMK,GACtBA,EAAc,KAAOP,EAAO,EACtC,EAEOG,EAAU,CACd,KAAKd,EAAoB,oBACrB,OAAO,KAAKe,EAAa,QAAQ,EACjC,MACJ,KAAKf,EAAoB,yBACrB,KAAK,mBAAmB,CACpB,QAASgB,EACT,QAASC,CACjC,CAAqB,EACD,MACJ,KAAKjB,EAAoB,mBACrB,OAAO,SAAS,SAChB,MACJ,KAAKA,EAAoB,kBACrB,MAAM,KAAK,gBACX,KAAK,KAAOC,EAAiBY,EAAK,IAAI,GAAK,UAC3C,KAAK,UAAYA,EAAK,UACtB,KAAK,WAAaA,EAAK,SAAW,GAClC,KAAK,YAAc,GAEnB,KAGP,CACJ,EAED,MAAM,aAAc,CAChB,GAAI,CACA,KAAK,QAAU,MAAM,KAAK,uBAAuB,wBAAwB,KAAK,OAAQ,KAAK,IAAI,EAC/F,KAAK,QAAQ,KAAK,GAAG,KAAK,mBAAmB,CAChD,OAAQM,EAAG,CAIR,GAHA,KAAK,QAAU,GAGTA,EAAE,MAAQA,EAAE,OAAS,oCACvB,OAGJ,KAAK,wBAAwB,CACzB,QAAS,KAAK,IAAI,0DAA0D,CAChG,CAAiB,CACJ,CACJ,EAED,cAAe,CACP,KAAK,OAASlB,EAAiB,OAAS,CAAC,KAAK,WAC9C,KAAK,YAAc,GAEnB,KAAK,mBAAkB,CAE9B,EAED,oBAAqB,CACjB,GAAI,KAAK,iBAAiB,MAAM,mBAAoB,CAChD,KAAK,mBAAqB,GAC1B,MACH,CAED,KAAK,YAAc,EACtB,EAED,qBAAsB,CAClB,KAAK,mBAAqB,EAC7B,EAED,MAAM,gBAAiB,CACnB,KAAK,WAAW,KAAK,kBAAkB,EAEvC,MAAM,KAAK,sBACX,KAAK,YAAc,EACtB,EAED,sBAAuB,CACnB,KAAK,mBAAqB,CAAC,KAAK,kBACnC,EAED,eAAgB,CACZ,KAAK,qBAAqB,OAAO,KAAK,mBAAoB,OAAO,QAAQ,GAAG,EAAE,KAAMmB,GAAa,CD9N7G,IAAAhB,EC+NoBgB,EAAS,OACT,KAAK,iBAAmBA,EAAS,SAEjC,KAAK,iBAAmB,KAAK,qBAAqB,OAAO,OAAO,QAAQ,GAAG,EAC3E,KAAK,iBAAiB,IAAMlB,EAC5B,KAAK,iBAAiB,QAASE,EAAA,KAAK,cAAL,YAAAA,EAAkB,GACjD,KAAK,iBAAiB,MAAQ,CAC1B,mBAAoB,EAC5C,EAEA,CAAa,CACJ,EAED,WAAWiB,EAAO,CACd,KAAK,iBAAiB,MAAQ,CAC1B,mBAAoBA,CACpC,EAEY,KAAK,qBAAqB,KAAK,KAAK,iBAAkB,OAAO,QAAQ,GAAG,EAAE,KAAK,IAAM,CACjF,KAAK,cAAa,CAClC,CAAa,CACJ,CACJ,CACL,CAAC"}