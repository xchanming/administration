{"version":3,"file":"index-Dt7atcJ3.js","sources":["../../../app/administration/src/app/component/rule/sw-condition-tree/sw-condition-tree.html.twig","../../../app/administration/src/app/component/rule/sw-condition-tree/index.js"],"sourcesContent":["<!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n{% block sw_condition_tree %}\n<div class=\"sw-condition-tree\">\n    <sw-condition-tree-node\n        v-if=\"conditionTree\"\n        :disabled=\"disabled\"\n        :parent-condition=\"rootCondition\"\n        :condition=\"conditionTree\"\n        :level=\"0\"\n    />\n    <sw-loader v-else />\n</div>\n{% endblock %}\n","import template from './sw-condition-tree.html.twig';\nimport './sw-condition-tree.scss';\n\nconst { Component } = Cicada;\nconst { EntityCollection } = Cicada.Data;\n\n/**\n * @private\n * @package services-settings\n */\nComponent.register('sw-condition-tree', {\n    template,\n\n    compatConfig: Cicada.compatConfig,\n\n    inject: [\n        'feature',\n    ],\n\n    provide() {\n        return {\n            availableTypes: this.availableTypes,\n            availableGroups: this.availableGroups,\n            createCondition: this.createCondition,\n            insertNodeIntoTree: this.insertNodeIntoTree,\n            removeNodeFromTree: this.removeNodeFromTree,\n            childAssociationField: this.childAssociationField,\n            conditionDataProviderService: this.conditionDataProviderService,\n            conditionScopes: this.scopes,\n            restrictedConditions: this.restrictedConditions,\n        };\n    },\n\n    emits: [\n        'conditions-changed',\n        'initial-loading-done',\n    ],\n\n    props: {\n        conditionDataProviderService: {\n            type: Object,\n            required: true,\n        },\n\n        conditionRepository: {\n            type: Object,\n            required: false,\n            default: null,\n        },\n\n        initialConditions: {\n            type: Array,\n            required: false,\n            default: null,\n        },\n\n        rootCondition: {\n            type: Object,\n            required: false,\n            default: null,\n        },\n\n        allowedTypes: {\n            type: Array,\n            required: false,\n            default: null,\n        },\n\n        scopes: {\n            type: Array,\n            required: false,\n            default: null,\n        },\n\n        associationField: {\n            type: String,\n            required: true,\n        },\n\n        associationValue: {\n            type: String,\n            required: true,\n        },\n\n        associationEntity: {\n            type: Object,\n            required: false,\n            default: null,\n        },\n\n        childAssociationField: {\n            type: String,\n            required: false,\n            default: 'children',\n        },\n\n        disabled: {\n            type: Boolean,\n            required: false,\n            default: false,\n        },\n    },\n\n    data() {\n        return {\n            conditionTree: null,\n            initialLoadingDone: false,\n        };\n    },\n\n    computed: {\n        availableTypes() {\n            let conditions;\n            if (this.allowedTypes) {\n                conditions = this.allowedTypes.map((type) => {\n                    return this.conditionDataProviderService.getByType(type);\n                });\n            } else {\n                conditions = this.conditionDataProviderService.getConditions(this.scopes);\n            }\n\n            conditions.forEach((condition) => {\n                condition.translatedLabel = this.$tc(condition.label);\n            });\n\n            conditions.sort((a, b) => a.translatedLabel.localeCompare(b.translatedLabel));\n\n            const groupedConditions = [];\n            this.availableGroups.forEach((group) => {\n                conditions.forEach((condition) => {\n                    if (condition.group === group.id) {\n                        groupedConditions.push(condition);\n                    }\n\n                    if (!condition.group && group.id === 'misc') {\n                        groupedConditions.push(condition);\n                        condition.group = 'misc';\n                    }\n                });\n            });\n\n            return groupedConditions;\n        },\n\n        rootId() {\n            return this.rootCondition?.id ?? null;\n        },\n\n        availableGroups() {\n            if (typeof this.conditionDataProviderService.getGroups !== 'function') {\n                return [];\n            }\n\n            const groups = Object.values(this.conditionDataProviderService.getGroups());\n\n            groups.forEach((group) => {\n                group.label = this.$tc(group.name);\n            });\n\n            groups.sort((a, b) => {\n                if (a.id === 'general') {\n                    return -1;\n                }\n                if (b.id === 'general') {\n                    return 1;\n                }\n\n                if (a.id === 'misc') {\n                    return 1;\n                }\n                if (b.id === 'misc') {\n                    return -1;\n                }\n\n                return a.label.localeCompare(b.label);\n            });\n\n            return groups;\n        },\n\n        restrictedConditions() {\n            if (typeof this.conditionDataProviderService.getRestrictedConditions !== 'function') {\n                return [];\n            }\n\n            return this.conditionDataProviderService.getRestrictedConditions(this.associationEntity);\n        },\n    },\n\n    watch: {\n        initialConditions: {\n            immediate: true,\n            deep: false,\n            handler(newVal, oldVal) {\n                // ignore deep changes\n                if (newVal === oldVal) {\n                    return;\n                }\n\n                if (newVal === null || newVal === undefined) {\n                    this.conditionTree = null;\n                    return;\n                }\n\n                this.buildTree();\n            },\n        },\n    },\n\n    methods: {\n        buildTree() {\n            let rootConditions = this.getRootNodes(this.initialConditions, this.rootId);\n\n            if (this.needsRootOrContainer(rootConditions)) {\n                const newRoot = this.applyRoot(rootConditions);\n\n                // eslint-disable-next-line vue/no-mutating-props\n                this.initialConditions.push(newRoot);\n                rootConditions = [newRoot];\n            }\n\n            // At this point we know that rootConditions has only one element. We can use it to build the tree.\n            this.conditionTree = this.createTreeRecursive(rootConditions[0], this.initialConditions);\n            this.emitChange([]);\n\n            if (!this.initialLoadingDone) {\n                this.$emit('initial-loading-done');\n                this.initialLoadingDone = true;\n            }\n        },\n\n        createTreeRecursive(condition, conditions) {\n            const children = conditions\n                .filter((c) => c.parentId === condition.id)\n                .sort((a, b) => a.position - b.position)\n                .map((c) => this.createTreeRecursive(c, conditions))\n                .filter((c) => !condition[this.childAssociationField].has(c.id));\n\n            condition[this.childAssociationField] = new EntityCollection(\n                condition[this.childAssociationField].source,\n                condition[this.childAssociationField].entity,\n                condition[this.childAssociationField].context,\n                null,\n                [\n                    ...children,\n                    ...condition[this.childAssociationField],\n                ],\n            );\n            return condition;\n        },\n\n        getRootNodes(conditions, rootId) {\n            return conditions.filter((condition) => {\n                return condition.parentId === rootId;\n            });\n        },\n\n        needsRootOrContainer(rootNodes) {\n            return rootNodes.length !== 1 || !this.conditionDataProviderService.isOrContainer(rootNodes[0]);\n        },\n\n        applyRoot(rootNodes) {\n            const rootContainer = this.createCondition(\n                this.conditionDataProviderService.getOrContainerData(),\n                this.rootId,\n                0,\n            );\n\n            rootNodes.forEach((root) => {\n                root.parentId = rootContainer.id;\n            });\n\n            return rootContainer;\n        },\n\n        createCondition(conditionData, parentId, position) {\n            let condition = this.conditionRepository.create(this.initialConditions.context);\n            condition = Object.assign(condition, conditionData, {\n                parentId,\n                position,\n                [this.associationField]: this.associationValue,\n            });\n            return condition;\n        },\n\n        insertNodeIntoTree(parentCondition, childToInsert) {\n            if (!parentCondition) {\n                throw new Error('[sw-condition-tree] Can not insert into non existing tree');\n            }\n\n            this.validatePosition(parentCondition, childToInsert);\n            parentCondition[this.childAssociationField].forEach((child) => {\n                if (child.position >= childToInsert.position) {\n                    child.position += 1;\n                }\n            });\n\n            parentCondition[this.childAssociationField].addAt(childToInsert, childToInsert.position);\n            this.emitChange([]);\n        },\n\n        removeNodeFromTree(parentCondition, childToRemove) {\n            if (!parentCondition) {\n                throw new Error('[sw-condition-tree] Can not remove from non existing tree');\n            }\n\n            const deletedIds = this.getDeletedIds(childToRemove);\n\n            parentCondition[this.childAssociationField].forEach((child) => {\n                if (child.position > childToRemove.position) {\n                    child.position -= 1;\n                }\n            });\n\n            parentCondition[this.childAssociationField].remove(childToRemove.id);\n            this.emitChange(deletedIds);\n        },\n\n        validatePosition(parentCondition, condition) {\n            if (typeof condition.position !== 'number' || condition.position < 0) {\n                condition.position = 0;\n            }\n            if (condition.position > parentCondition[this.childAssociationField].length) {\n                condition.position = parentCondition[this.childAssociationField].length;\n            }\n        },\n\n        getDeletedIds(condition) {\n            const deletedIds = [];\n            this.getDeletedIdsRecursive(condition, deletedIds);\n            return deletedIds;\n        },\n\n        getDeletedIdsRecursive(condition, deletedIs) {\n            if (!condition.isNew()) {\n                deletedIs.push(condition.id);\n                return;\n            }\n\n            condition[this.childAssociationField].forEach((child) => {\n                this.getDeletedIdsRecursive(child, deletedIs);\n            });\n        },\n\n        emitChange(deletedIds) {\n            const conditions = new EntityCollection(\n                this.initialConditions.source,\n                this.initialConditions.entity,\n                this.initialConditions.context,\n                this.initialConditions.criteria,\n                [this.conditionTree],\n            );\n\n            this.$emit('conditions-changed', {\n                conditions,\n                deletedIds,\n            });\n        },\n    },\n});\n"],"names":["template","Component","EntityCollection","conditions","type","condition","a","b","groupedConditions","group","_a","groups","newVal","oldVal","rootConditions","newRoot","children","c","rootId","rootNodes","rootContainer","root","conditionData","parentId","position","parentCondition","childToInsert","child","childToRemove","deletedIds","deletedIs"],"mappings":"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"}