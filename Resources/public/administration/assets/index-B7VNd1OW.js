import"./sw-bulk-edit.store-6UtElGbe.js";const c=`{% block sw_bulk_edit_customer %} <sw-page class="sw-bulk-edit-customer"> {% block sw_bulk_edit_customer_search_bar %} <template #search-bar> <sw-search-bar /> </template> {% endblock %} {% block sw_bulk_edit_customer_smart_bar_header %} <template #smart-bar-header> <h2>{{ $tc('sw-bulk-edit.customer.textTitle', { customerTotal: selectedIds.length }), selectedIds.length }}</h2> </template> {% endblock %} {% block sw_bulk_edit_customer_content_language_switch %} <template #language-switch> <sw-language-switch @on-change="onChangeLanguage" /> </template> {% endblock %} {% block sw_bulk_edit_customer_content_smart_bar_actions %} <template #smart-bar-actions> {% block sw_bulk_edit_customer_actions_save %} <sw-button-process class="sw-bulk-edit-customer__save-action" variant="primary" :is-loading="isLoading" :process-success="false" :disabled="isLoading || !hasChanges" @click="openModal" > {{ $tc('sw-bulk-edit.applyChanges') }} </sw-button-process> {% endblock %} </template> {% endblock %} {% block sw_bulk_edit_customer_content %} <template #content> <sw-card-view v-if="selectedIds.length > 0 && isLoadedData" > {% block sw_bulk_edit_customer_content_account_card %} <sw-card class="sw-bulk-edit-customer-base__account" position-identifier="sw-bulk-edit-customer-account" :title="$tc('sw-bulk-edit.customer.account.cardTitle')" :is-loading="isLoading" > {% block sw_bulk_edit_customer_content_account_section %} <sw-bulk-edit-change-type-field-renderer :form-fields="accountFormFields" :bulk-edit-data="bulkEditData" :entity="customer" /> {% endblock %} </sw-card> {% endblock %} {% block sw_bulk_edit_customer_tags_card %} <sw-card class="sw-bulk-edit-customer-base__tags" position-identifier="sw-bulk-edit-customer-tags" :title="$tc('sw-bulk-edit.customer.tags.cardTitle')" :is-loading="isLoading" > {% block sw_bulk_edit_customer_tags %} <sw-bulk-edit-change-type-field-renderer :form-fields="tagsFormFields" :bulk-edit-data="bulkEditData" :entity="customer" /> {% endblock %} </sw-card> {% endblock %} {% block sw_bulk_edit_customer_custom_field_card %} <sw-card class="sw-bulk-edit-customer-base__custom_fields" position-identifier="sw-bulk-edit-customer-custom-field" :title="$tc('sw-bulk-edit.customer.customFields.cardTitle')" :is-loading="isLoading" > <sw-bulk-edit-custom-fields class="sw-bulk-edit__custom-fields" :sets="customFieldSets" @change="onCustomFieldsChange" /> </sw-card> {% endblock %} </sw-card-view> {% block sw_bulk_edit_customer_empty_state %} <sw-empty-state v-if="selectedIds.length <= 0 && !isLoading" :title="$tc('sw-bulk-edit.customer.messageEmptyTitle')" :subline="$tc('sw-bulk-edit.customer.messageEmptySubline')" /> {% endblock %} {% block sw_bulk_edit_customer_save_modal %} <router-view v-slot="{ Component }" > <component :is="Component" :item-total="selectedIds.length" :is-loading="isLoading" :process-status="processStatus" :bulk-edit-data="bulkEditData" @modal-close="closeModal" @bulk-save="onSave" /> </router-view> {% endblock %} </template> {% endblock %} </sw-page> {% endblock %}`,{Mixin:u}=Shopware,{Criteria:l}=Shopware.Data,{types:r}=Shopware.Utils,{chunk:d}=Shopware.Utils.array,{cloneDeep:n}=Shopware.Utils.object,h={template:c,inject:["bulkEditApiFactory","repositoryFactory"],mixins:[u.getByName("notification")],data(){return{isLoading:!1,isLoadedData:!1,isSaveSuccessful:!1,bulkEditData:{},customFieldSets:[],processStatus:"",customer:{}}},metaInfo(){return{title:this.$createTitle()}},computed:{selectedIds(){return Shopware.Store.get("shopwareApps").selectedIds},customFieldSetRepository(){return this.repositoryFactory.create("custom_field_set")},customerRepository(){return this.repositoryFactory.create("customer")},customFieldSetCriteria(){const e=new l(1,null);return e.addFilter(l.equals("relations.entityName","customer")),e},hasChanges(){var a;const e=(a=this.bulkEditData.customFields)==null?void 0:a.value,t=Object.values(this.bulkEditData).some(o=>o.isChanged),s=!r.isEmpty(e)&&Object.keys(e).length>0;return t||s},actionsRequestGroup(){return[{value:"accept",label:this.$tc("sw-bulk-edit.customer.account.customerGroupRequest.options.accept")},{value:"decline",label:this.$tc("sw-bulk-edit.customer.account.customerGroupRequest.options.decline")}]},accountFormFields(){return[{name:"groupId",config:{componentName:"sw-entity-single-select",entity:"customer_group",changeLabel:this.$tc("sw-bulk-edit.customer.account.customerGroup.label"),placeholder:this.$tc("sw-bulk-edit.customer.account.customerGroup.placeholder")}},{name:"active",type:"bool",config:{type:"switch",changeLabel:this.$tc("sw-bulk-edit.customer.account.status.label")}},{name:"languageId",config:{componentName:"sw-entity-single-select",entity:"language",changeLabel:this.$tc("sw-bulk-edit.customer.account.language.label"),placeholder:this.$tc("sw-bulk-edit.customer.account.language.placeholder")}},{name:"requestedCustomerGroupId",labelHelpText:this.$tc("sw-bulk-edit.customer.account.customerGroupRequest.helpText"),config:{componentName:"sw-single-select",entity:"customer_group",changeLabel:this.$tc("sw-bulk-edit.customer.account.customerGroupRequest.label"),placeholder:this.$tc("sw-bulk-edit.customer.account.customerGroupRequest.placeholder"),options:this.actionsRequestGroup}}]},tagsFormFields(){return[{name:"tags",config:{componentName:"sw-entity-tag-select",entityCollection:this.customer.tags,allowOverwrite:!0,allowClear:!0,allowAdd:!0,allowRemove:!0,changeLabel:this.$tc("sw-bulk-edit.order.tags.changeLabel"),placeholder:this.$tc("sw-bulk-edit.order.tags.placeholder")}}]}},created(){this.createdComponent()},methods:{createdComponent(){this.setRouteMetaModule(),Shopware.Store.get("context").isSystemDefaultLanguage||Shopware.Store.get("context").resetLanguageToDefault(),this.isLoading=!0,this.customer=this.customerRepository.create(Shopware.Context.api),this.loadCustomFieldSets().then(()=>{this.loadBulkEditData(),this.isLoadedData=!0}).catch(e=>{this.createNotificationError({title:this.$tc("global.default.error"),message:e})}).finally(()=>{this.isLoading=!1})},setRouteMetaModule(){this.$route.meta.$module||(this.$route.meta.$module={}),this.$route.meta.$module.color="#F88962",this.$route.meta.$module.icon="regular-users"},defineBulkEditData(e,t=null,s="overwrite",a=!1){this.bulkEditData[e]||(this.bulkEditData[e]={isChanged:a,type:s,value:t})},loadBulkEditData(){[this.accountFormFields,this.tagsFormFields].forEach(t=>{t.forEach(s=>{this.defineBulkEditData(s.name)})}),this.bulkEditData.customFields={type:"overwrite",value:null}},loadCustomFieldSets(){return this.customFieldSetRepository.search(this.customFieldSetCriteria).then(e=>{this.customFieldSets=e})},onCustomFieldsChange(e){if(Object.keys(e).length<=0){this.bulkEditData=this.bulkEditData.filter(t=>t.field!=="customFields");return}this.bulkEditData.customFields.value=e},onProcessData(){const e={requestData:[],syncData:[]};return Object.keys(this.bulkEditData).forEach(t=>{const s=n(this.bulkEditData[t]);let a=this.customer[t];t==="active"&&!a&&(a=!1),t==="customFields"&&(a=s.value);const o={field:t,type:s.type,value:a};(s.isChanged||t==="customFields"&&s.value)&&(t==="requestedCustomerGroupId"?e.requestData.push(o):e.syncData.push(o))}),e},openModal(){this.$router.push({name:"sw.bulk.edit.customer.save"})},async onSave(){this.isLoading=!0;const{requestData:e,syncData:t}=this.onProcessData(),s=this.bulkEditApiFactory.getHandler("customer"),a=d(this.selectedIds,50),o=[];return e.length&&o.push(s.bulkEditRequestedGroup(this.selectedIds,e)),a.forEach(i=>{t.length&&o.push(this.bulkEditApiFactory.getHandler("customer").bulkEdit(i,t))}),Promise.all(o).then(()=>{this.processStatus="success"}).catch(i=>{console.error(i),this.processStatus="fail"}).finally(()=>{this.isLoading=!1})},closeModal(){this.$router.push({name:"sw.bulk.edit.customer"})},onChangeLanguage(e){Shopware.Store.get("context").setApiLanguageId(e)}}};export{h as default};
