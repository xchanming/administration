const i=`{% block sw_checkbox_field %} <div :class="swCheckboxFieldClasses" class="sw-field--checkbox" > <div class="sw-field--checkbox__content" :class="swCheckboxFieldContentClasses" > <div class="sw-field__checkbox"> <input :id="formFieldName || identification" type="checkbox" :name="formFieldName || identification" :checked="inputState" :disabled="disabled" :indeterminate.prop="partlyChecked" v-bind="attrsWithoutClass" :aria-label="ariaLabel || label" @change="onChange" > <div class="sw-field__checkbox-state"> <sw-icon :name="iconName" /> </div> </div> <sw-base-field v-bind="{ ...attrsWithoutClass, ...inheritanceAttrs }" :is-inheritance-field="inheritanceAttrs.isInheritanceField" :is-inherited="inheritanceAttrs.isInherited" :disabled="disabled" :name="formFieldName || identification" :label="label" @inheritance-restore="$emit('inheritance-restore', $event)" @inheritance-remove="$emit('inheritance-remove', $event)" > <template #label> <slot name="label"></slot> </template> <template #hint> <slot name="hint"></slot> </template> </sw-base-field> </div> <sw-field-error :error="error" /> </div> {% endblock %}`,{Component:a,Mixin:t}=Cicada,r=Cicada.Utils;a.register("sw-checkbox-field-deprecated",{template:i,inheritAttrs:!1,compatConfig:Cicada.compatConfig,inject:["feature"],emits:["update:value","inheritance-restore","inheritance-remove"],mixins:[t.getByName("sw-form-field"),t.getByName("remove-api-error")],props:{id:{type:String,required:!1,default:()=>r.createId()},disabled:{type:Boolean,required:!1,default:!1},label:{type:String,required:!1,default:void 0},value:{type:Boolean,required:!1,default:null},inheritedValue:{type:Boolean,required:!1,default:null},ghostValue:{type:Boolean,required:!1,default:null},error:{type:Object,required:!1,default:null},bordered:{type:Boolean,required:!1,default:!1},padded:{type:Boolean,required:!1,default:!1},partlyChecked:{type:Boolean,required:!1,default:!1},ariaLabel:{type:String,required:!1,default:null}},data(){return{currentValue:this.value}},computed:{swCheckboxFieldClasses(){const e={"has--error":this.hasError,"is--disabled":this.disabled,"is--inherited":this.isInherited,"is--partly-checked":this.isPartlyChecked,"sw-field__checkbox--ghost":this.ghostValue};return this.$attrs.class&&(e[this.$attrs.class]=!0),e},swCheckboxFieldContentClasses(){return{"is--bordered":this.bordered,"is--padded":this.padded}},identification(){return`sw-field--${this.id}`},hasError(){return this.error&&this.error.code!==0},inputState(){return this.currentValue||!1},isInheritanceField(){return this.$attrs.isInheritanceField?!0:this.inheritedValue!==null},isInherited(){return this.$attrs.isInherited?!0:this.isInheritanceField&&this.currentValue===null},isPartlyChecked(){return this.partlyChecked&&!this.inputState},iconName(){return this.isPartlyChecked?"regular-minus-xxs":"regular-checkmark-xxs"},attrsWithoutClass(){return{...this.$attrs,class:void 0}}},watch:{value(){this.currentValue=this.value}},methods:{onChange(e){this.$emit("update:value",e.target.checked)}}});
//# sourceMappingURL=index-CKU_ytWt.js.map
