{"version":3,"file":"index-CpSM_YLk.js","sources":["../../../app/administration/src/module/sw-order/component/sw-order-create-address-modal/sw-order-create-address-modal.html.twig","../../../app/administration/src/module/sw-order/component/sw-order-create-address-modal/index.js"],"sourcesContent":["<!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n{% block sw_order_create_address_modal %}\n<sw-modal\n    :title=\"editAddressModalTitle\"\n    class=\"sw-order-create-address-modal\"\n    @modal-close=\"onCancel\"\n>\n    <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n    {% block sw_order_create_address_modal_content %}\n    <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n    {% block sw_order_create_address_form_modal %}\n    <sw-modal\n        v-if=\"showAddressFormModal\"\n        :title=\"getAddressFormModalTitle()\"\n        @modal-close=\"onCloseAddressModal\"\n    >\n        <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n        {% block sw_order_create_address_form_modal_content %}\n        <sw-customer-address-form\n            :address=\"currentAddress\"\n            :customer=\"activeCustomer\"\n            :disabled=\"isLoading\"\n        >\n            <sw-customer-address-form-options\n                :address=\"currentAddress\"\n                :customer=\"activeCustomer\"\n                :custom-field-sets=\"[]\"\n                @default-address-change=\"onChangeDefaultAddress\"\n            />\n        </sw-customer-address-form>\n        {% endblock %}\n\n        <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n        {% block sw_order_create_address_form_modal_footer %}\n        <template #modal-footer>\n            <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n            {% block sw_order_create_address_form_modal_cancel_button %}\n            <sw-button\n                size=\"small\"\n                @click=\"onCloseAddressModal\"\n            >\n                {{ $tc('global.default.cancel') }}\n            </sw-button>\n            {% endblock %}\n\n            <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n            {% block sw_order_create_address_form_modal_apply_button %}\n            <sw-button\n                :is-loading=\"isLoading\"\n                variant=\"primary\"\n                size=\"small\"\n                @click=\"onSubmitAddressForm\"\n            >\n                {{ $tc('sw-customer.detailAddresses.buttonSaveAndSelect') }}\n            </sw-button>\n            {% endblock %}\n        </template>\n        {% endblock %}\n    </sw-modal>\n    {% endblock %}\n    <sw-card\n        :is-loading=\"isLoading\"\n        :large=\"true\"\n        position-identifier=\"sw-order-create-address-modal\"\n        class=\"sw-order-create-address-modal__card-filter\"\n    >\n        <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n        {% block sw_order_create_address_modal_toolbar %}\n        <template #toolbar>\n            <sw-card-filter\n                :placeholder=\"$tc('sw-order.addressSelection.searchAddressToolbarPlaceholder')\"\n                @sw-card-filter-term-change=\"onSearchAddress\"\n            >\n                <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n                {% block sw_order_create_address_modal_add_button %}\n                <template #filter>\n                    <sw-button\n                        class=\"sw-order-create-address-modal__add-btn\"\n                        size=\"small\"\n                        @click=\"onAddNewAddress\"\n                    >\n                        <sw-icon\n                            name=\"regular-plus-circle-s\"\n                            small\n                        />\n                        {{ $tc('sw-customer.detailAddresses.buttonAddAddress') }}\n                    </sw-button>\n                </template>\n                {% endblock %}\n            </sw-card-filter>\n        </template>\n        {% endblock %}\n        <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n        {% block sw_order_create_address_modal_empty_state %}\n        <template #grid>\n            <div\n                v-if=\"!isLoading && !addresses.length\"\n                class=\"sw-order-create-address-modal__card is--empty\"\n            >\n                <sw-empty-state\n                    :title=\"$tc('sw-order.addressSelection.emptySearchResults')\"\n                    :icon=\"'regular-book-user'\"\n                >\n                    <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n                    {% block sw_order_create_address_modal_empty_state_content %}\n                    <span></span>\n                    {% endblock %}\n                </sw-empty-state>\n            </div>\n            <div\n                v-for=\"(address, index) in addresses\"\n                :key=\"address.id\"\n                :class=\"{ 'is--selected': isCurrentSelected(address.id)}\"\n                class=\"sw-order-create-address-modal__card\"\n            >\n                <div class=\"sw-order-create-address-modal__card-body\">\n                    <span\n                        v-if=\"isCurrentSelected(address.id)\"\n                        class=\"sw-order-create-address-modal__card-label\"\n                    >\n                        {{ $tc('sw-order.addressSelection.currentlySelected') }}<br><br>\n                    </span>\n                    <sw-address :address=\"address\" />\n                    <a\n                        class=\"sw-order-create-address-modal__edit-btn\"\n                        role=\"button\"\n                        tabindex=\"0\"\n                        @click=\"onEditAddress(address)\"\n                        @keydown.enter=\"onEditAddress(address)\"\n                    >\n                        {{ $tc('sw-customer.detailBase.buttonTitleEditAddress') }}\n                    </a>\n                </div>\n                <div class=\"sw-order-create-address-modal__select-btn\">\n                    <sw-button\n                        v-if=\"!isCurrentSelected(address.id)\"\n                        @click=\"onSelectExistingAddress(address)\"\n                    >\n                        {{ $tc('sw-customer.detailAddresses.buttonSelect') }}\n                    </sw-button>\n                </div>\n            </div>\n        </template>\n        {% endblock %}\n    </sw-card>\n    {% endblock %}\n\n    <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n    {% block sw_order_create_address_modal_actions %}\n    <template #modal-footer>\n        <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n        {% block sw_order_create_address_modal_cancel_button %}\n        <sw-button\n            size=\"small\"\n            @click=\"onCancel\"\n        >\n            {{ $tc('sw-customer.detailAddresses.buttonClose') }}\n        </sw-button>\n        {% endblock %}\n    </template>\n    {% endblock %}\n</sw-modal>\n{% endblock %}\n","import template from './sw-order-create-address-modal.html.twig';\nimport './sw-order-create-address-modal.scss';\n\n/**\n * @package checkout\n */\n\nconst { Mixin, State, Service } = Cicada;\nconst { Criteria } = Cicada.Data;\n\n// eslint-disable-next-line sw-deprecation-rules/private-feature-declarations\nexport default {\n    template,\n\n    compatConfig: Cicada.compatConfig,\n\n    emits: [\n        'set-customer-address',\n        'close-modal',\n    ],\n\n    mixins: [\n        Mixin.getByName('notification'),\n        Mixin.getByName('placeholder'),\n    ],\n\n    props: {\n        customer: {\n            type: Object,\n            required: true,\n        },\n        address: {\n            type: Object,\n            required: true,\n        },\n        addAddressModalTitle: {\n            type: String,\n            required: true,\n        },\n        editAddressModalTitle: {\n            type: String,\n            required: true,\n        },\n        cart: {\n            type: Object,\n            required: true,\n        },\n    },\n\n    data() {\n        return {\n            addresses: [],\n            selectedAddressId: null,\n            activeCustomer: this.customer,\n            isLoading: false,\n            term: null,\n            showAddressFormModal: false,\n            defaultAddressIdMapping: {\n                'billing-address': 'defaultBillingAddressId',\n                'shipping-address': 'defaultShippingAddressId',\n            },\n            currentAddress: null,\n        };\n    },\n\n    computed: {\n        addressCriteria() {\n            const criteria = new Criteria(1, 25);\n            criteria.addAssociation('salutation');\n            criteria.addAssociation('country');\n            criteria.addAssociation('countryState');\n\n            if (this.term) {\n                criteria.setTerm(this.term);\n            }\n\n            return criteria;\n        },\n\n        customerRepository() {\n            return Service('repositoryFactory').create('customer');\n        },\n\n        addressRepository() {\n            return Service('repositoryFactory').create(\n                this.activeCustomer.addresses.entity,\n                this.activeCustomer.addresses.source,\n            );\n        },\n\n        isValidCompanyField() {\n            return this.customer.company !== null && !!this.currentAddress.company?.trim().length;\n        },\n    },\n\n    created() {\n        this.createdComponent();\n    },\n\n    methods: {\n        async createdComponent() {\n            await this.getCustomerAddresses();\n        },\n\n        async getCustomerAddresses() {\n            this.isLoading = true;\n\n            // Get the latest addresses from customer's db\n            try {\n                this.addresses = await this.addressRepository.search(this.addressCriteria);\n\n                this.selectedAddressId =\n                    this.activeCustomer[this.address.contextId] || this.activeCustomer[this.address.contextDataDefaultId];\n\n                await Cicada.State.dispatch('error/resetApiErrors');\n            } catch {\n                this.createNotificationError({\n                    message: this.$tc('sw-order.create.messageFetchCustomerAddressesError'),\n                });\n            } finally {\n                this.isLoading = false;\n            }\n        },\n\n        onNewActiveItem() {\n            this.selectedAddressId = null;\n        },\n\n        isCurrentSelected(addressId) {\n            return this.selectedAddressId === addressId;\n        },\n\n        async onSearchAddress(term) {\n            this.term = term;\n            await this.getCustomerAddresses();\n        },\n\n        async onSelectExistingAddress(address) {\n            this.selectedAddressId = address.id;\n            await this.onSave();\n        },\n\n        findSelectedAddress() {\n            return this.addresses.find((address) => address.id === this.selectedAddressId);\n        },\n\n        async updateOrderContext() {\n            const address = this.findSelectedAddress();\n\n            const context = {\n                [this.address.contextId]: address.id,\n                [this.address.contextDataKey]: address,\n                [this.address.contextDataDefaultId]: address[this.address.contextDataDefaultId],\n            };\n\n            await State.dispatch('swOrder/updateOrderContext', {\n                context,\n                salesChannelId: this.activeCustomer.salesChannelId,\n                contextToken: this.cart.token,\n            });\n\n            this.$emit('set-customer-address', {\n                contextId: this.address.contextId,\n                contextDataKey: this.address.contextDataKey,\n                data: address,\n            });\n        },\n\n        async saveCurrentCustomer() {\n            if (this.hasOwnProperty('defaultShippingAddressId')) {\n                this.activeCustomer.defaultShippingAddressId = this.defaultShippingAddressId;\n            }\n\n            if (this.hasOwnProperty('defaultBillingAddressId')) {\n                this.activeCustomer.defaultBillingAddressId = this.defaultBillingAddressId;\n            }\n\n            return this.customerRepository.save(this.activeCustomer);\n        },\n\n        async saveCurrentAddress() {\n            this.selectedAddressId = this.currentAddress.id;\n\n            if (this.currentAddress.isNew()) {\n                this.addresses.push(this.currentAddress);\n            }\n\n            if (!this.isValidCompanyField) {\n                const companyError = new Cicada.Classes.CicadaError({\n                    code: 'c1051bb4-d103-4f74-8988-acbcafc7fdc3',\n                });\n\n                await Cicada.State.dispatch('error/addApiError', {\n                    expression: `customer_address.${this.currentAddress.id}.company`,\n                    error: companyError,\n                });\n\n                return Promise.reject(companyError);\n            }\n\n            return this.addressRepository.save(this.currentAddress);\n        },\n\n        closeModal() {\n            this.$emit('close-modal');\n        },\n\n        onCancel() {\n            this.closeModal();\n        },\n\n        async onSave() {\n            this.isLoading = true;\n\n            try {\n                await this.updateOrderContext();\n                this.closeModal();\n            } catch {\n                this.createNotificationError({\n                    message: this.$tc('sw-order.detail.messageSaveError'),\n                });\n            } finally {\n                this.isLoading = false;\n            }\n        },\n\n        onCloseAddressModal() {\n            this.showAddressFormModal = false;\n        },\n\n        onAddNewAddress() {\n            this.createNewCustomerAddress();\n            this.showAddressFormModal = true;\n        },\n\n        onEditAddress(address) {\n            this.currentAddress = address;\n            this.showAddressFormModal = true;\n        },\n\n        onChangeDefaultAddress(data) {\n            if (!data.value) {\n                return;\n            }\n\n            const name = this.defaultAddressIdMapping[data.name];\n\n            this[name] = data.id;\n        },\n\n        async onSubmitAddressForm() {\n            try {\n                this.isLoading = true;\n\n                if (this.currentAddress === null) {\n                    return;\n                }\n\n                await this.saveCurrentAddress();\n                await this.saveCurrentCustomer();\n                await this.updateOrderContext();\n                await this.getCustomerAddresses();\n\n                this.currentAddress = null;\n                this.showAddressFormModal = false;\n            } catch {\n                this.createNotificationError({\n                    message: this.$tc('sw-order.detail.messageSaveError'),\n                });\n            } finally {\n                this.isLoading = false;\n            }\n        },\n\n        getAddressFormModalTitle() {\n            return !this.currentAddress || this.currentAddress.isNew()\n                ? this.addAddressModalTitle\n                : this.editAddressModalTitle;\n        },\n\n        createNewCustomerAddress() {\n            const newAddress = this.addressRepository.create();\n            newAddress.customerId = this.activeCustomer.id;\n\n            this.currentAddress = newAddress;\n        },\n    },\n};\n"],"names":["template","Mixin","State","Service","Criteria","index","criteria","_a","addressId","term","address","context","companyError","data","name","newAddress"],"mappings":"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"}