const r=`{% block sw_first_run_wizard_data_import %} <div class="sw-first-run-wizard-data-import"> <sw-container v-if="!isInstallingPlugin" columns="1fr 1fr" gap="24px 0" > <div class="sw-first-run-wizard-data-import__card"> <img class="sw-first-run-wizard-data-import__icon-demodata" :src="assetFilter('/administration/static/img/first-run-wizard/plugin-demodata-set.svg')" alt="" > <h5 class="sw-first-run-wizard-data-import__headline"> {{ $tc('sw-first-run-wizard.dataImport.headlineDemoData') }} </h5> <p class="sw-first-run-wizard-data-import__message" v-html="$tc('sw-first-run-wizard.dataImport.messageDemoData')" ></p> <sw-button-process v-if="notInstalled('demodata')" variant="primary" size="small" :is-loading="isInstallingPlugin" :disabled="isInstallingPlugin" :process-success="pluginInstalledSuccessfully.demodata" class="button-plugin-install" @click="onInstall('demodata')" > {{ $tc('sw-first-run-wizard.dataImport.buttonInstallDemoData') }} </sw-button-process> <div v-else class="plugin-status" > <span class="plugin-installed"> <sw-icon name="regular-check-circle-s" size="16" /> {{ $tc('sw-first-run-wizard.general.pluginInstalled') }} </span> </div> </div> <div class="sw-first-run-wizard-data-import__card"> <img class="sw-first-run-wizard-data-import__icon-migration" :src="assetFilter('/administration/static/img/first-run-wizard/plugin-migration-assistant.svg')" alt="" > <h5 class="sw-first-run-wizard-import-data__headline"> {{ $tc('sw-first-run-wizard.dataImport.headlineMigration') }} </h5> <p class="sw-first-run-wizard-data-import__message" v-html="$tc('sw-first-run-wizard.dataImport.messageMigration')" ></p> <sw-button-process v-if="notInstalled('migration')" variant="primary" size="small" :is-loading="isInstallingPlugin" :disabled="isInstallingPlugin" :process-success="pluginInstalledSuccessfully.migration" class="button-plugin-install" @click="onInstall('migration')" > {{ $tc('sw-first-run-wizard.dataImport.buttonInstallMigration') }} </sw-button-process> <div v-else class="plugin-status" > <span class="plugin-installed"> <sw-icon name="regular-check-circle-s" size="16" /> {{ $tc('sw-first-run-wizard.general.pluginInstalled') }} </span> </div> </div> </sw-container> <div v-else class="installing-plugin" > <sw-loader size="48px" /> <p class="sw-loader-info-text" v-html="$tc('sw-first-run-wizard.dataImport.loadingMessage')" ></p> </div> <div v-if="installationError" class="sw-first-run-wizard-plugin-installation__error" > <sw-alert :title="pluginError.title" variant="error" appearance="notification" > {{ pluginError.detail }} </sw-alert> </div> </div> {% endblock %}`,{Criteria:e}=Cicada.Data,l={template:r,compatConfig:Cicada.compatConfig,inject:["extensionStoreActionService","repositoryFactory"],emits:["buttons-update","frw-set-title","extension-activated"],data(){return{plugins:{demodata:{name:"SwagPlatformDemoData",isInstalled:!1},migration:{name:"SwagMigrationAssistant",isInstalled:!1}},demoDataPluginName:"SwagPlatformDemoData",migrationPluginName:"SwagMigrationAssistant",isPluginAlreadyInstalled:!1,isInstallingPlugin:!1,installationError:!1,pluginError:null,pluginInstalledSuccessfully:{demodata:!1,migration:!1}}},computed:{pluginRepository(){return this.repositoryFactory.create("plugin")},buttonConfig(){return[{key:"skip",label:this.$tc("sw-first-run-wizard.general.buttonNext"),position:"right",variant:"primary",action:"sw.first.run.wizard.index.defaults",disabled:this.isInstallingPlugin}]},assetFilter(){return Cicada.Filter.getByName("asset")}},watch:{isInstallingPlugin(){this.updateButtons()}},created(){this.createdComponent()},methods:{createdComponent(){this.updateButtons(),this.setTitle(),this.getInstalledPlugins()},updateButtons(){this.$emit("buttons-update",this.buttonConfig)},setTitle(){this.$emit("frw-set-title",this.$tc("sw-first-run-wizard.dataImport.modalTitle"))},notInstalled(i){return!this.plugins[i].isInstalled},onInstall(i){const s=this.plugins[i];return this.isInstallingPlugin=!0,this.installationError=!1,this.extensionStoreActionService.downloadExtension(s.name).then(()=>this.extensionStoreActionService.installExtension(s.name,"plugin")).then(()=>this.extensionStoreActionService.activateExtension(s.name,"plugin")).then(()=>(this.$emit("extension-activated"),this.isInstallingPlugin=!1,this.plugins[i].isInstalled=!0,!1)).catch(t=>{var a,n;return this.isInstallingPlugin=!1,this.installationError=!0,(n=(a=t.response)==null?void 0:a.data)!=null&&n.errors&&(this.pluginError=t.response.data.errors.pop()),!0})},getInstalledPlugins(){const i=Object.values(this.plugins).map(t=>t.name),s=new e(1,5);s.addFilter(e.equalsAny("plugin.name",i)),this.pluginRepository.search(s).then(t=>{t.total<1||t.forEach(a=>{if(!a.active||a.installedAt===null)return;const n=this.findPluginKeyByName(a.name);this.plugins[n].isInstalled=!0})})},findPluginKeyByName(i){const[s]=Object.entries(this.plugins).find(([t,a])=>a.name===i?t:"");return s}}};export{l as default};
//# sourceMappingURL=index-D5FmRqQQ.js.map
