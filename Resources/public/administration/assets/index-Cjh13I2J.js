const o=`{% block sw_notifications %} <transition name="sw-notifications-slide-fade"> {% block sw_notifications_element %} <div v-if="notifications.length" class="sw-notifications" :style="notificationsStyle" > {% block sw_notifications_transition_group %} <transition-group name="sw-notifications-slide-fade"> {% block sw_notifications_item %} <mt-banner v-for="(notification, index) in notifications" :key="notification.uuid" :class="['sw-notifications__notification--' + index, 'sw-notification__alert']" :title="notification.title" :variant="getNotificationVariant(notification)" :data-theme="notification.system ? 'dark' : undefined" :notification-index="notification.uuid" :closable="true" @close="onClose(notification)" > {% block sw_notifications_item_content %} <div class="sw-notifications__message" v-html="$sanitize(notification.message, { ALLOWED_TAGS: ['a', 'b', 'i', 'u', 'br'], ALLOWED_ATTR: ['href', 'target'] })" ></div> {% endblock %} {# TODO: Implement buttons and add tests for action buttons #} <div v-if="notification.actions.length" class="sw-notifications__actions" > {% block sw_notifications_item_actions %} <template v-for="action in notification.actions" :key="action.label" > {% block sw_notifications_item_action_item %} <mt-button :disabled="action.disabled" variant="secondary" @click="handleAction(action, notification)" > {{ action.label }} </mt-button> {% endblock %} </template> {% endblock %} </div> </mt-banner> {% endblock %} </transition-group> {% endblock %} </div> {% endblock %} </transition> {% endblock %}`,{Component:n}=Shopware;n.register("sw-notifications",{template:o,inject:["feature"],props:{position:{type:String,required:!1,default:"topRight",validator(t){return t.length?["topRight","bottomRight"].includes(t):!0}},notificationsGap:{type:String,default:"20px"},notificationsTopGap:{type:String,default:"165px"}},computed:{notifications(){return Object.values(Shopware.Store.get("notification").growlNotifications)},notificationsStyle(){let t=this.notificationsGap;return`${parseInt(t,10)}`===t&&(t=`${t}px`),this.position==="bottomRight"?{top:"auto",right:t,bottom:t,left:"auto"}:{top:this.notificationsTopGap,right:t,bottom:"auto",left:"auto"}}},methods:{onClose(t){Shopware.Store.get("notification").removeGrowlNotification(t)},handleAction(t,i){if(Shopware.Utils.string.isUrl(t.route)){window.open(t.route);return}t.route&&this.$router.push(t.route),t.method&&typeof t.method=="function"&&t.method.call(),this.onClose(i)},getNotificationVariant(t){return["info","critical","positive","attention","neutral"].includes(t.variant)?t.variant:t.variant==="info"?"info":t.variant==="error"?"critical":t.variant==="success"?"positive":t.variant==="warning"?"attention":"neutral"}}});
