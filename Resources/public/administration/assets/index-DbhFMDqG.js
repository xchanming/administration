const s=`{% block sw_first_run_wizard_welcome %} <div class="sw-first-run-wizard-welcome"> <div class="center"> <img class="sw-first-run-wizard__welcome-image" :src="assetFilter('/administration/static/img/first-run-wizard/welcome.svg')" alt="" > <h4 class="headline-welcome"> {{ $tc('sw-first-run-wizard.welcome.headlineWelcome') }} </h4> <p class="text-welcome" v-html="$tc('sw-first-run-wizard.welcome.messageWelcome')" ></p> </div> <h5 v-if="languagePlugins.length" class="text-change-language" > {{ $tc('sw-first-run-wizard.welcome.headlineChangeLanguage') }} </h5> <sw-loader v-if="isLoading" /> <sw-container columns="1fr 1fr" gap="24px 0" > <sw-plugin-card v-for="languagePlugin in languagePlugins" :key="languagePlugin.name" :plugin="languagePlugin" @on-plugin-installed="onPluginInstalled" @extension-activated="$emit('extension-activated', $event)" /> </sw-container> {% block sw_first_run_wizard_welcome_confirm_language_switch_modal %} <sw-modal v-if="showConfirmLanguageSwitchModal" variant="small" :title="$tc('sw-first-run-wizard.welcome.switchLanguageModalTitle')" class="sw-first-run-wizard-confirmLanguageSwitch-modal" @modal-close="onCancelSwitch" > {% block sw_first_run_wizard_welcome_confirm_language_switch_modal_text %} <p class="sw-first-run-wizard-welcome__modal-text"> {{ $tc('sw-first-run-wizard.welcome.switchLanguageMessage', {}, { pluginName: latestTouchedPlugin.name }) }} </p> <sw-select-field v-model:value="user.localeId" class="sw-profile__language" :label="$tc('sw-users-permissions.users.user-detail.labelLanguage')" > <option v-for="language in languages" :key="language.locale.id" :value="language.locale.id" :selected="user.localeId === language.locale.id" > {{ language.customLabel }} </option> </sw-select-field> <sw-password-field v-model:value="user.pw" type="password" :label="$tc('sw-first-run-wizard.cicadaAccount.passwordPlaceholder')" @keypress.enter="onConfirmLanguageSwitch" /> {% endblock %} {% block sw_first_run_wizard_welcome_confirm_language_switch_modal_footer %} <template #modal-footer> {% block sw_first_run_wizard_welcome_confirm_language_switch_modal_action_cancel %} <sw-button size="small" @click="onCancelSwitch" > {{ $tc('global.default.cancel') }} </sw-button> {% endblock %} {% block sw_first_run_wizard_welcome_confirm_language_switch_modal_action_switch %} <sw-button size="small" variant="primary" @click="onConfirmLanguageSwitch" > {{ $tc('sw-first-run-wizard.welcome.confirmLanguageSwitch') }} </sw-button> {% endblock %} </template> {% endblock %} </sw-modal> {% endblock %} </div> {% endblock %}`,{Criteria:i}=Cicada.Data,n={template:s,compatConfig:Cicada.compatConfig,inject:["languagePluginService","userService","loginService","repositoryFactory"],emits:["extension-activated","frw-set-title","buttons-update"],mixins:["notification"],data(){return{languages:[],languagePlugins:[],latestTouchedPlugin:null,showConfirmLanguageSwitchModal:!1,newLocaleId:null,user:{localeId:"",pw:""},userProfile:{},userPromise:null,isLoading:!1}},computed:{languageRepository(){return this.repositoryFactory.create("language")},userRepository(){return this.repositoryFactory.create("user")},languageId(){return Cicada.State.get("session").languageId},languageCriteria(){return this.getLanguageCriteria()},assetFilter(){return Cicada.Filter.getByName("asset")}},watch:{languageId(){this.createdComponent()}},beforeMount(){this.beforeMountComponent()},created(){this.createdComponent()},methods:{beforeMountComponent(){this.userPromise.then(e=>{this.user=e})},createdComponent(){this.updateButtons(),this.setTitle(),this.getLanguagePlugins();const e=new Promise(a=>{a(this.languageId)});this.userPromise=this.userService.getUser().then(a=>this.setUserData(a.data));const t=[e,this.userPromise];Promise.all(t).then(()=>{this.loadLanguages()})},setTitle(){this.$emit("frw-set-title",this.$tc("sw-first-run-wizard.welcome.modalTitle"))},updateButtons(){const t=Cicada.State.get("context").app.config.settings.disableExtensionManagement?"defaults":"data-import",a=[{key:"next",label:this.$tc("sw-first-run-wizard.general.buttonNext"),position:"right",variant:"primary",action:`sw.first.run.wizard.index.${t}`,disabled:!1}];this.$emit("buttons-update",a)},setUserData(e){return this.userProfile=e,new Promise(t=>{t(this.userRepository.get(this.userProfile.id))})},getLanguagePlugins(){if(Cicada.State.get("context").app.config.settings.disableExtensionManagement){this.languagePlugins=[];return}this.languagePluginService.getPlugins().then(e=>{this.languagePlugins=e.items})},onPluginInstalled(e){this.latestTouchedPlugin=this.getPluginByName(e),this.getLanguagePlugins(),this.isLoading=!0,this.loadLanguages().then(()=>{this.showConfirmLanguageSwitchModal=!0,this.isLoading=!1})},onPluginRemoved(e){this.latestTouchedPlugin=this.getPluginByName(e),this.getLanguagePlugins()},onConfirmLanguageSwitch(){this.loginService.verifyUserToken(this.user.pw).then(e=>{const t={...Cicada.Context.api};t.authToken.access=e,this.userRepository.save(this.user,t).then(async()=>{await Cicada.Service("localeHelper").setLocaleWithId(this.user.localeId)}).finally(()=>{this.showConfirmLanguageSwitchModal=!1})}).catch(()=>{this.createNotificationError({title:this.$tc("sw-users-permissions.users.user-detail.passwordConfirmation.notificationPasswordErrorTitle"),message:this.$tc("sw-users-permissions.users.user-detail.passwordConfirmation.notificationPasswordErrorMessage")})}).finally(()=>{this.confirmPassword=""})},onCancelSwitch(){this.showConfirmLanguageSwitchModal=!1},getPluginByName(e){return this.languagePlugins.length<1?null:this.languagePlugins.find(t=>t.name===e)},getLanguageCriteria(){const e=new i(1,null);return e.addAssociation("locale"),e.addSorting(i.sort("locale.name","ASC")),e.addSorting(i.sort("locale.territory","ASC")),e},showPluginErrorNotification(e,t){const a=this.$tc("sw-first-run-wizard.welcome.tryAgainLater");this.createNotificationError({message:`${e}
${t}
${a}`})},loadLanguages(){return this.languageRepository.search(this.languageCriteria).then(e=>(this.languages=[],e.forEach(t=>{t.customLabel=`${t.locale.translated.name} (${t.locale.translated.territory})`,this.languages.push(t)}),this.languages))}}};export{n as default};
//# sourceMappingURL=index-DbhFMDqG.js.map
