const u=`{% block sw_settings_custom_field_set_detail %} <sw-page class="sw-settings-set-detail"> {% block sw_settings_customField_set_detail_header %} <template #smart-bar-header> <h2 v-if="set && set.config && getInlineSnippet(set.config.label)"> {{ getInlineSnippet(set.config.label) }} </h2> <h2 v-else> {{ $tc('sw-settings-custom-field.set.detail.textHeadline') }} </h2> </template> {% endblock %} {% block sw_settings_custom_field_set_detail_actions %} <template #smart-bar-actions> {% block sw_settings_custom_field_set_detail_actions_abort %} <sw-button v-tooltip.bottom="tooltipCancel" :disabled="set.isLoading" @click="onCancel" > {{ $tc('global.default.cancel') }} </sw-button> {% endblock %} {% block sw_settings_custom_field_set_detail_actions_save %} <sw-button-process v-tooltip.bottom="tooltipSave" class="sw-settings-set-detail__save-action" :is-loading="isLoading" :process-success="isSaveSuccessful" :disabled="set.isLoading || !acl.can('custom_field.editor')" variant="primary" @update:process-success="saveFinish" @click.prevent="onSave" > {{ $tc('sw-settings-custom-field.set.detail.buttonSave') }} </sw-button-process> {% endblock %} </template> {% endblock %} {% block sw_settings_custom_field_set_detail_content %} <template #content> <sw-card-view> <template v-if="isLoading"> <sw-skeleton /> <sw-skeleton /> </template> {# v-show is used here as underlying components influence the loading state and v-if would destroy this behaviour #} <div v-show="!isLoading"> {% block sw_settings_custom_field_set_detail_content_detail_base %} <sw-custom-field-set-detail-base :set="set" :technical-name-error="technicalNameError" @reset-errors="onResetErrors" /> {% endblock %} {% block sw_settings_custom_field_set_detail_content_detail_custom_field_list %} <sw-custom-field-list v-if="set.id" ref="customFieldList" :set="set" @loading-changed="onLoadingChanged" /> {% endblock %} </div> </sw-card-view> </template> {% endblock %} </sw-page> {% endblock %}`,{Mixin:s}=Shopware,{Criteria:i}=Shopware.Data,h={template:u,inject:["repositoryFactory","acl"],mixins:[s.getByName("notification"),s.getByName("sw-inline-snippet"),s.getByName("discard-detail-page-changes")("set")],shortcuts:{"SYSTEMKEY+S":{active(){return this.acl.can("custom_field.editor")},method:"onSave"},ESCAPE:"onCancel"},data(){return{set:{},setId:"",isLoading:!0,isSaveSuccessful:!1,technicalNameError:null}},metaInfo(){return{title:this.$createTitle(this.identifier)}},computed:{identifier(){return this.set.config&&this.getInlineSnippet(this.set.config.label)?this.getInlineSnippet(this.set.config.label):this.set.name},customFieldSetRepository(){return this.repositoryFactory.create("custom_field_set")},customFieldRepository(){return this.repositoryFactory.create("custom_field")},customFieldCriteria(){const e=new i(1,25);return e.addFilter(i.equals("customFieldSetId",this.setId)),e},customFieldSetCriteria(){const e=new i(1,25);return e.addAssociation("relations"),e},tooltipSave(){return this.acl.can("custom_field.editor")?{message:`${this.$device.getSystemKey()} + S`,appearance:"light"}:{message:this.$tc("sw-privileges.tooltip.warning"),disabled:this.acl.can("custom_field.editor"),showOnDisabledElements:!0}},tooltipCancel(){return{message:"ESC",appearance:"light"}}},created(){this.createdComponent()},methods:{createdComponent(){this.$route.params.id&&(this.setId=this.$route.params.id,this.loadEntityData())},async loadEntityData(){this.set=await this.customFieldSetRepository.get(this.setId,Shopware.Context.api,this.customFieldSetCriteria)},saveFinish(){this.isSaveSuccessful=!1},onSave(){const e=this.identifier,c=this.$tc("global.default.success"),r=this.$tc("sw-settings-custom-field.set.detail.messageSaveSuccess",{name:e},0);if(this.isSaveSuccessful=!1,this.isLoading=!0,!this.set.config.translated||this.set.config.translated===!1){const t=this.swInlineSnippetFallbackLocale;this.set.config.label={[t]:this.set.config.label[t]}}this.set.relations||(this.set.relations=[]),this.customFieldSetRepository.save(this.set).then(()=>(this.isSaveSuccessful=!0,this.createNotificationSuccess({title:c,message:r}),this.loadEntityData())).catch(t=>{var a,o,n,l;const d=((l=(n=(o=(a=t==null?void 0:t.response)==null?void 0:a.data)==null?void 0:o.errors)==null?void 0:n[0])==null?void 0:l.detail)??"Error";this.createNotificationError({message:d})}).finally(()=>{this.isLoading=!1})},onCancel(){this.$router.push({name:"sw.settings.custom.field.index"})},abortOnLanguageChange(){return this.customFieldSetRepository.hasChanges(this.set)},saveOnLanguageChange(){return this.onSave()},onChangeLanguage(){this.loadEntityData()},onLoadingChanged(e){this.isLoading=e},onResetErrors(){this.technicalNameError=null}}};export{h as default};
