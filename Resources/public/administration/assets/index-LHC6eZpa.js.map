{"version":3,"file":"index-LHC6eZpa.js","sources":["../../../app/administration/src/app/component/rule/condition-type/sw-condition-line-item-property/sw-condition-line-item-property.html.twig","../../../app/administration/src/app/component/rule/condition-type/sw-condition-line-item-property/index.js"],"sourcesContent":["<!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n{% block sw_condition_value_content %}\n<div class=\"sw-condition-line-item-property sw-condition__condition-value\">\n    <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n    {% block sw_condition_line_item_properties_field_operator %}\n    <sw-condition-operator-select\n        v-bind=\"{ operators, condition }\"\n        :plural=\"matchesAll\"\n        :disabled=\"disabled || undefined\"\n    />\n    {% endblock %}\n\n    <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n    {% block sw_condition_line_item_properties_field_identifiers %}\n    <sw-entity-multi-select\n        size=\"medium\"\n        entity=\"property_group_option\"\n        :disabled=\"disabled || undefined\"\n        :entity-collection=\"options\"\n        :criteria=\"optionCriteria\"\n        @select-collapsed=\"onSelectCollapsed\"\n        @search-term-change=\"setSearchTerm\"\n        @update:entity-collection=\"setOptions\"\n    >\n\n        <template #selection-label-property=\"{ item }\">\n            <slot\n                name=\"selection-label-property\"\n                v-bind=\"{ item }\"\n            >\n                {{ item.group.translated.name || item.group.name }}: {{ item.translated.name || item.name }}\n            </slot>\n        </template>\n\n        <template #result-label-property=\"{ item, searchTerm, highlightSearchTerm }\">\n            <slot\n                name=\"result-label-property\"\n                v-bind=\"{ item, searchTerm, highlightSearchTerm }\"\n            >\n                <sw-highlight-text\n                    v-if=\"highlightSearchTerm\"\n                    :text=\"item.translated.name || item.name\"\n                    :search-term=\"searchTerm\"\n                />\n                <template v-else>\n                    {{ item.translated.name || item.name }}\n                </template>\n            </slot>\n        </template>\n\n        <template #result-description-property=\"{ item, searchTerm, highlightSearchTerm }\">\n            <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n            {% block sw_condition_line_item_properties_field_description %}\n            <slot\n                name=\"result-description-property\"\n                v-bind=\"{ item, searchTerm, highlightSearchTerm }\"\n            >\n                <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n                {% block sw_condition_line_item_properties_field_description_default %}\n                <sw-highlight-text\n                    v-if=\"highlightSearchTerm\"\n                    :text=\"item.group.translated.name || item.group.name\"\n                    :search-term=\"searchTerm\"\n                />\n                <template v-else>\n                    {{ item.group.translated.name || item.group.name }}\n                </template>\n                {% endblock %}\n            </slot>\n            {% endblock %}\n        </template>\n    </sw-entity-multi-select>\n    {% endblock %}\n</div>\n{% endblock %}\n","import template from './sw-condition-line-item-property.html.twig';\n\nconst { Component, Context } = Cicada;\nconst { mapPropertyErrors } = Component.getComponentHelper();\nconst { EntityCollection, Criteria } = Cicada.Data;\n\n/**\n * @public\n * @package services-settings\n * @description Condition for the LineItemPropertyRule. This component must a be child of sw-condition-tree.\n * @status prototype\n * @example-type code-only\n * @component-example\n * <sw-condition-line-item-property :condition=\"condition\" :level=\"0\"></sw-condition-line-item-property>\n */\nComponent.extend('sw-condition-line-item-property', 'sw-condition-base-line-item', {\n    template,\n\n    inject: [\n        'repositoryFactory',\n        'feature',\n    ],\n\n    data() {\n        return {\n            options: null,\n            searchTerm: '',\n        };\n    },\n\n    computed: {\n        operators() {\n            return this.conditionDataProviderService.getOperatorSet('multiStore');\n        },\n\n        optionRepository() {\n            return this.repositoryFactory.create('property_group_option');\n        },\n\n        identifiers: {\n            get() {\n                this.ensureValueExist();\n                return this.condition.value.identifiers || [];\n            },\n            set(identifiers) {\n                this.ensureValueExist();\n                this.condition.value = {\n                    ...this.condition.value,\n                    identifiers,\n                };\n            },\n        },\n\n        ...mapPropertyErrors('condition', [\n            'value.operator',\n            'value.identifiers',\n        ]),\n\n        currentError() {\n            return this.conditionValueOperatorError || this.conditionValueIdentifiersError;\n        },\n\n        optionCriteria() {\n            const criteria = new Criteria(1, 25);\n            criteria.setIds(this.identifiers);\n            criteria.addAssociation('group');\n\n            if (typeof this.searchTerm === 'string' && this.searchTerm.length > 0) {\n                criteria.addQuery(Criteria.contains('group.name', this.searchTerm), 500);\n            }\n\n            return criteria;\n        },\n    },\n\n    created() {\n        this.createdComponent();\n    },\n\n    methods: {\n        createdComponent() {\n            this.options = new EntityCollection(\n                this.optionRepository.route,\n                this.optionRepository.entityName,\n                Context.api,\n                this.optionCriteria,\n            );\n\n            if (this.identifiers.length <= 0) {\n                return Promise.resolve();\n            }\n\n            return this.optionRepository.search(this.optionCriteria, Context.api).then((options) => {\n                this.options = options;\n            });\n        },\n\n        setOptions(options) {\n            this.identifiers = options.getIds();\n            this.options = options;\n        },\n\n        setSearchTerm(value) {\n            this.searchTerm = value;\n        },\n\n        onSelectCollapsed() {\n            this.searchTerm = '';\n        },\n    },\n});\n"],"names":["template","Component","Context","mapPropertyErrors","EntityCollection","Criteria","identifiers","criteria","options","value"],"mappings":"AAAA,MAAeA,EAAA,21DCET,CAAE,UAAAC,EAAW,QAAAC,CAAS,EAAG,OACzB,CAAE,kBAAAC,CAAmB,EAAGF,EAAU,qBAClC,CAAE,iBAAAG,EAAkB,SAAAC,GAAa,OAAO,KAW9CJ,EAAU,OAAO,kCAAmC,8BAA+B,CAC/E,SAAAD,EAEA,OAAQ,CACJ,oBACA,SACH,EAED,MAAO,CACH,MAAO,CACH,QAAS,KACT,WAAY,EACxB,CACK,EAED,SAAU,CACN,WAAY,CACR,OAAO,KAAK,6BAA6B,eAAe,YAAY,CACvE,EAED,kBAAmB,CACf,OAAO,KAAK,kBAAkB,OAAO,uBAAuB,CAC/D,EAED,YAAa,CACT,KAAM,CACF,YAAK,iBAAgB,EACd,KAAK,UAAU,MAAM,aAAe,CAAA,CAC9C,EACD,IAAIM,EAAa,CACb,KAAK,iBAAgB,EACrB,KAAK,UAAU,MAAQ,CACnB,GAAG,KAAK,UAAU,MAClB,YAAAA,CACpB,CACa,CACJ,EAED,GAAGH,EAAkB,YAAa,CAC9B,iBACA,mBACZ,CAAS,EAED,cAAe,CACX,OAAO,KAAK,6BAA+B,KAAK,8BACnD,EAED,gBAAiB,CACb,MAAMI,EAAW,IAAIF,EAAS,EAAG,EAAE,EACnC,OAAAE,EAAS,OAAO,KAAK,WAAW,EAChCA,EAAS,eAAe,OAAO,EAE3B,OAAO,KAAK,YAAe,UAAY,KAAK,WAAW,OAAS,GAChEA,EAAS,SAASF,EAAS,SAAS,aAAc,KAAK,UAAU,EAAG,GAAG,EAGpEE,CACV,CACJ,EAED,SAAU,CACN,KAAK,iBAAgB,CACxB,EAED,QAAS,CACL,kBAAmB,CAQf,OAPA,KAAK,QAAU,IAAIH,EACf,KAAK,iBAAiB,MACtB,KAAK,iBAAiB,WACtBF,EAAQ,IACR,KAAK,cACrB,EAEgB,KAAK,YAAY,QAAU,EACpB,QAAQ,UAGZ,KAAK,iBAAiB,OAAO,KAAK,eAAgBA,EAAQ,GAAG,EAAE,KAAMM,GAAY,CACpF,KAAK,QAAUA,CAC/B,CAAa,CACJ,EAED,WAAWA,EAAS,CAChB,KAAK,YAAcA,EAAQ,SAC3B,KAAK,QAAUA,CAClB,EAED,cAAcC,EAAO,CACjB,KAAK,WAAaA,CACrB,EAED,mBAAoB,CAChB,KAAK,WAAa,EACrB,CACJ,CACL,CAAC"}