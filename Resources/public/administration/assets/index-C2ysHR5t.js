const o=`{% block sw_profile_index_search_preferences %} <div class="sw-profile-index-search-preferences"> <sw-card v-if="adminEsEnable" class="sw-card-elasticsearch-enabled" position-identifier="sw-card-elasticsearch-enabled" > <sw-alert class="sw-card-elasticsearch-enabled__alert" variant="info" :title="$tc('sw-profile.tabSearchPreferences.alert_elasticsearch.title')" > {{ $tc('sw-profile.tabSearchPreferences.alert_elasticsearch.text') }} </sw-alert> </sw-card> {% block sw_profile_index_search_preferences_searchable_elements %} <sw-card class="sw-profile-index-search-preferences-searchable-elements" position-identifier="sw-profile-index-search-preferences" :title="$tc('sw-profile.tabSearchPreferences.cardSearchableElements.title')" :is-loading="isLoading" > {% block sw_profile_index_search_preferences_searchable_elements_content %} <sw-container v-if="searchPreferences.length > 0" rows="auto auto auto" gap="24px" > {% block sw_profile_index_search_preferences_searchable_elements_header %} <p>{{ $tc('sw-profile.tabSearchPreferences.cardSearchableElements.description') }}</p> <sw-container columns="auto auto auto 1fr" gap="8px" > {% block sw_profile_index_search_preferences_searchable_elements_button_select %} <sw-button class="sw-profile-index-search-preferences-searchable-elements__button-select-all" @click="onSelect(true)" > {{ $tc('sw-profile.tabSearchPreferences.cardSearchableElements.buttonSelect') }} </sw-button> {% endblock %} {% block sw_profile_index_search_preferences_searchable_elements_button_deselect %} <sw-button class="sw-profile-index-search-preferences-searchable-elements__button-deselect-all" @click="onSelect(false)" > {{ $tc('sw-profile.tabSearchPreferences.cardSearchableElements.buttonDeselect') }} </sw-button> {% endblock %} {% block sw_profile_index_search_preferences_searchable_elements_button_reset %} <sw-button class="sw-profile-index-search-preferences-searchable-elements__button-reset-to-default" @click="onReset" > {{ $tc('sw-profile.tabSearchPreferences.cardSearchableElements.buttonReset') }} </sw-button> {% endblock %} </sw-container> {% endblock %} {% block sw_profile_index_search_preferences_searchable_elements_body %} <div class="sw-profile-index-search-preferences-searchable-elements__entity-container"> <ul v-for="searchPreference in searchPreferences" :key="searchPreference.entityName" class="sw-profile-index-search-preferences-searchable-elements__entity" > <li class="sw-profile-index-search-preferences-searchable-elements__entity-field"> <sw-checkbox-field v-model:value="searchPreference._searchable" :label="getModuleTitle(searchPreference.entityName)" @update:value="onChangeSearchPreference(searchPreference)" name="sw-field--searchPreference-_searchable" /> <ul class="sw-profile-index-search-preferences-searchable-elements__entity"> <li v-for="field in searchPreference.fields" :key="field.fieldName" class="sw-profile-index-search-preferences-searchable-elements__entity-field" > <sw-checkbox-field v-model:value="field._searchable" name="sw-field--field-_searchable" :label="$tc(\`sw-profile.tabSearchPreferences.modules.\${searchPreference.entityName}.\${field.fieldName}\`)" :disabled="adminEsEnable || !searchPreference._searchable" /> </li> </ul> </li> </ul> </div> {% endblock %} </sw-container> {% endblock %} </sw-card> {% endblock %} </div> {% endblock %}`,{Module:f,State:l,Mixin:h}=Cicada,d={template:o,compatConfig:Cicada.compatConfig,inject:["searchPreferencesService"],mixins:[h.getByName("notification")],data(){return{isLoading:!1}},computed:{searchPreferences:{get(){return l.get("swProfile").searchPreferences},set(e){l.commit("swProfile/setSearchPreferences",e)}},userSearchPreferences:{get(){return l.get("swProfile").userSearchPreferences},set(e){l.commit("swProfile/setUserSearchPreferences",e)}},defaultSearchPreferences(){const e=this.searchPreferencesService.getDefaultSearchPreferences();if(this.userSearchPreferences===null)return e;const r=[];return e.forEach(s=>{const a=Object.keys(s)[0],t=this.userSearchPreferences.find(c=>Object.keys(c)[0]===a);if(!t){r.push(s);return}const n=t[a],i=s[a];Object.keys(i).forEach(c=>{n.hasOwnProperty(c)||(n[c]=i[c])}),Object.keys(n).forEach(c=>{i.hasOwnProperty(c)||delete n[c]}),r.push({[a]:n})}),r},adminEsEnable(){return Cicada.Context.app.adminEsEnable??!1}},created(){this.createdComponent()},beforeUnmount(){this.beforeDestroyComponent()},methods:{async createdComponent(){await this.getDataSource(),this.updateDataSource(),this.addEventListeners()},beforeDestroyComponent(){this.removeEventListeners()},async getDataSource(){this.isLoading=!0;try{this.userSearchPreferences=await this.searchPreferencesService.getUserSearchPreferences(),this.searchPreferences=this.searchPreferencesService.processSearchPreferences(this.defaultSearchPreferences)}catch(e){this.createNotificationError({message:e.message}),this.searchPreferences=[],this.userSearchPreferences=null}finally{this.isLoading=!1}},addEventListeners(){this.isCompatEnabled("INSTANCE_EVENT_EMITTER")?this.$root.$on("sw-search-preferences-modal-close",this.getDataSource):Cicada.Utils.EventBus.on("sw-search-preferences-modal-close",this.getDataSource)},removeEventListeners(){this.isCompatEnabled("INSTANCE_EVENT_EMITTER")?this.$root.$off("sw-search-preferences-modal-close",this.getDataSource):Cicada.Utils.EventBus.off("sw-search-preferences-modal-close",this.getDataSource)},updateDataSource(){this.adminEsEnable&&this.searchPreferences.forEach(e=>{e.fields.forEach(r=>{r._searchable=!0})})},getModuleTitle(e){const r=f.getModuleByEntityName(e);return this.$tc(r==null?void 0:r.manifest.title)},onChangeSearchPreference(e){e._searchable&&e.fields.every(r=>!r._searchable)&&e.fields.forEach(r=>{r._searchable=!0})},onSelect(e){this.searchPreferences.forEach(r=>{r._searchable=e,this.adminEsEnable||r.fields.forEach(s=>{s._searchable=e})})},onReset(){const e=this.searchPreferencesService.getDefaultSearchPreferences(),r=this.searchPreferencesService.processSearchPreferences(e);this.searchPreferences.forEach((s,a)=>{r.forEach(t=>{t.entityName===s.entityName&&this.resetSearchPreference(t,this.searchPreferences[a])})})},resetSearchPreference(e,r){r._searchable=e._searchable,this.adminEsEnable||(r.fields=r.fields.map(s=>e.fields.find(a=>a.fieldName===s.fieldName)||s))}}};export{d as default};
//# sourceMappingURL=index-C2ysHR5t.js.map
