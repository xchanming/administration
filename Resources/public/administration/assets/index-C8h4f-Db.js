const l=`{% block sw_price_field %} <div class="sw-price-field" :class="{ 'sw-price-field--label': label, 'sw-price-field--compact': compact, 'sw-price-field--disabled': isDisabled }" > <div class="price-field-grid"> {% block sw_price_field_gross %} {# TODO: check selectors #} <sw-number-field v-model:value="priceForCurrency.gross" class="sw-price-field__gross" :allow-empty="allowEmpty" :placeholder="$tc('sw-product.priceForm.placeholderPriceGross')" :label="labelGross" :help-text="grossHelpText" :validation="validation" :size="compact ? 'small' : 'default'" :min="0" :digits="20" :error="grossError" :disabled="isDisabled" :name="grossFieldName" v-bind="attributesWithoutListeners" @update:value="onPriceGrossChange" @keyup="keymonitor" @input-change="onPriceGrossInputChange" @ends-with-decimal-separator="onEndsWithDecimalSeparator" > <template v-if="!disableSuffix" #suffix > {{ currency.symbol }} </template> </sw-number-field> {% endblock %} {% block sw_price_field_lock_button %} <button class="sw-price-field__lock" :class="{ 'is--locked': priceForCurrency.linked, 'is--disabled': isDisabled }" :aria-label="$t('global.sw-price-field.toggleLinkedCurrency')" :aria-pressed="priceForCurrency.linked" @click="onLockSwitch" > <sw-icon v-if="priceForCurrency.linked" name="regular-lock" size="16" /> <sw-icon v-else name="regular-lock-open" size="16" /> </button> {% endblock %} {% block sw_price_field_net %} <sw-number-field v-model:value="priceForCurrency.net" class="sw-price-field__net" :allow-empty="allowEmpty" :placeholder="$tc('sw-product.priceForm.placeholderPriceNet')" :label="labelNet" :help-text="netHelpText" :validation="validation" :size="compact ? 'small' : 'default'" :min="0" :digits="20" :error="netError" :disabled="isInherited || disabled" :name="netFieldName" v-bind="attributesWithoutListeners" @update:value="onPriceNetChange" @keyup="keymonitor" @input-change="onPriceNetInputChange" @ends-with-decimal-separator="onEndsWithDecimalSeparator" > <template v-if="!disableSuffix" #suffix > {{ currency.symbol }} </template> </sw-number-field> {% endblock %} </div> <sw-container v-if="allowModal" justify="end" class="sw-price-form__links" > <a class="sw-card__quick-link" role="link" tabindex="0" @click.prevent="showModal = true" @keydown.enter.prevent="showModal = true" > {{ $tc('sw-product.detailBase.linkMaintainCurrencyPrices') }} <sw-icon name="regular-long-arrow-right" small /> </a> </sw-container> <sw-maintain-currencies-modal v-if="showModal" :prices="value" :default-price="priceForCurrency" :tax-rate="taxRate" :disabled="false" :hide-list-prices="hideListPrices" @modal-close="onCloseModal" /> </div> {% endblock %}`,{Component:a,Application:o}=Shopware,{debounce:s}=Shopware.Utils;a.register("sw-price-field",{template:l,inheritAttrs:!1,inject:["feature"],emits:["change","price-lock-change","price-calculate","price-gross-change","price-net-change","calculating"],props:{value:{type:Array,required:!0},allowModal:{type:Boolean,default:!1},defaultPrice:{type:Object,required:!1,default(){return{}}},hideListPrices:{type:Boolean,default:!1},taxRate:{type:Object,required:!1,default(){return{}}},currency:{type:Object,required:!0,default(){return{}}},validation:{required:!1,default:null},label:{required:!1,default:!0},compact:{required:!1,default:!1},error:{type:Object,required:!1,default:null},disabled:{required:!1,default:!1},disableSuffix:{type:Boolean,required:!1,default:!1},grossLabel:{type:String,required:!1,default:null},netLabel:{type:String,required:!1,default:null},name:{type:String,required:!1,default:null},allowEmpty:{type:Boolean,required:!1,default:!1},inherited:{type:Boolean,required:!1,default:void 0},grossHelpText:{type:String,required:!1,default:null},netHelpText:{type:String,required:!1,default:null}},data(){return{showModal:!1}},computed:{calculatePriceApiService(){return o.getContainer("factory").apiService.getByName("calculate-price")},priceForCurrency:{get(){const e=Object.values(this.value).find(r=>{var i;return r.currencyId===((i=this.currency)==null?void 0:i.id)});return e||(this.isInherited?{currencyId:this.currency.id,gross:Number.isNaN(this.defaultPrice.gross)?null:this.convertPrice(this.defaultPrice.gross),linked:this.defaultPrice.linked,net:Number.isNaN(this.defaultPrice.net)?null:this.convertPrice(this.defaultPrice.net)}:{currencyId:this.currency.id,gross:null,linked:this.defaultPrice.linked,net:null})},set(e){this.priceForCurrency.gross=e.gross,this.priceForCurrency.linked=e.linked,this.priceForCurrency.net=e.net}},attributesWithoutListeners(){const e={};return Object.keys(this.$attrs).forEach(r=>{r.startsWith("on")||(e[r]=this.$attrs[r])}),e},isInherited(){return this.inherited!==void 0?this.inherited:!Object.values(this.value).find(r=>r.currencyId===this.currency.id)},isDisabled(){return this.isInherited||this.disabled},labelGross(){const e=this.grossLabel?this.grossLabel:this.$tc("global.sw-price-field.labelPriceGross");return this.label?e:""},labelNet(){const e=this.netLabel?this.netLabel:this.$tc("global.sw-price-field.labelPriceNet");return this.label?e:""},grossError(){return this.error?this.error.gross:null},netError(){return this.error?this.error.net:null},grossFieldName(){return this.name?`${this.name}-gross`:"sw-price-field-gross"},netFieldName(){return this.name?`${this.name}-net`:"sw-price-field-net"}},watch:{"priceForCurrency.linked":function(r){r===!0&&this.priceForCurrency.gross!==null&&this.convertGrossToNet(this.priceForCurrency.gross)},"taxRate.id":function(){this.priceForCurrency.linked===!0&&this.priceForCurrency.gross!==null&&this.convertGrossToNet(this.priceForCurrency.gross)}},methods:{onLockSwitch(){this.isDisabled||(this.priceForCurrency.linked=!this.priceForCurrency.linked,this.$emit("price-lock-change",this.priceForCurrency.linked),this.$emit("change",this.priceForCurrency))},onEndsWithDecimalSeparator(e){e&&(this.onPriceGrossChangeDebounce.cancel&&this.onPriceGrossChangeDebounce.cancel(),this.onPriceNetChangeDebounce.cancel&&this.onPriceNetChangeDebounce.cancel())},onPriceGrossInputChange(e){this.priceForCurrency.linked&&(this.priceForCurrency.gross=e,this.onPriceGrossChangeDebounce())},onPriceNetInputChange(e){this.priceForCurrency.linked&&(this.priceForCurrency.net=e,this.onPriceNetChangeDebounce())},onPriceGrossChange(e){this.priceForCurrency.linked&&(this.$emit("price-calculate",!0),this.$emit("price-gross-change",e),this.$emit("change",this.priceForCurrency),this.convertGrossToNet(e))},onPriceNetChange(e){this.priceForCurrency.linked&&(this.$emit("price-calculate",!0),this.$emit("price-net-change",e),this.$emit("change",this.priceForCurrency),this.convertNetToGross(e))},convertNetToGross(e){return Number.isNaN(e)||e===null?(this.priceForCurrency.gross=this.allowEmpty?null:0,!1):e?(this.$emit("price-calculate",!0),this.requestTaxValue(e,"net").then(r=>{const i=this.priceForCurrency.net+r;this.priceForCurrency.gross=parseFloat(i.toPrecision(14))}),!0):(this.priceForCurrency.gross=0,!1)},convertGrossToNet(e){return Number.isNaN(e)||e===null?(this.priceForCurrency.net=this.allowEmpty?null:0,this.$emit("calculating",!1),!1):e?(this.$emit("price-calculate",!0),this.requestTaxValue(e,"gross").then(r=>{const i=this.priceForCurrency.gross-r;this.priceForCurrency.net=parseFloat(i.toPrecision(14))}),!0):(this.priceForCurrency.net=0,this.$emit("calculating",!1),!1)},requestTaxValue(e,r){return this.$emit("price-calculate",!0),new Promise(i=>{if(!(!e||typeof e!="number"||!this.priceForCurrency[r]||!r)){if(!this.taxRate.id){i(0),this.$emit("price-calculate",!1);return}this.calculatePriceApiService.calculatePrice({taxId:this.taxRate.id,currencyId:this.currency.id,price:this.priceForCurrency[r],output:r}).then(({data:c})=>{let t=0;c.calculatedTaxes.forEach(n=>{t+=n.tax}),i(t),this.$emit("price-calculate",!1)})}})},convertPrice(e){return e*this.currency.factor},keymonitor(e){if(e.key===","){const r=e.target.value;e.target.value=r.replace(/,/,".")}},onCloseModal(){this.showModal=!1},onPriceGrossChangeDebounce:s(function(){this.onPriceGrossChange(this.priceForCurrency.gross)},300),onPriceNetChangeDebounce:s(function(){this.onPriceNetChange(this.priceForCurrency.net)},300)}});
