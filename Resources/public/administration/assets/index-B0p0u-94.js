const i=`{% block sw_media_base_item %} <div class="sw-media-base-item" :class="mediaItemClasses" role="button" tabindex="0" @click="handleItemClick" @keydown.enter.self="handleItemClick" > {% block sw_media_base_item_selected_indicator %} <mt-checkbox v-if="!isList && allowEdit" v-model:checked="listSelected" class="sw-media-base-item__selected-indicator" :class="selectionIndicatorClasses" @update:checked="onClickedItem" /> {# @deprecated tag:v6.7.0 - Remove the block #} {% block sw_media_base_item_selection_indicator_icon %} {% endblock %} {% endblock %} {% block sw_media_base_item_preview %} <div class="sw-media-base-item__preview-container"> <slot name="preview" v-bind="{ item }" > {% block sw_media_base_item_slot_media_preview %}{% endblock %} </slot> {# @experimental stableVersion:v6.8.0 feature:SPATIAL_BASES #} {% block sw_media_base_spatial_label_indicator %} <div v-if="isSpatial" class="sw-media-base-item__labels" > <sw-label variant="neutral-reversed" appearance="pill" size="medium" > <sw-icon v-if="item.config?.spatial?.arReady ?? defaultArReady" name="regular-AR" small /> <sw-icon v-else name="regular-3d" small /> <span class="sw-media-base-item__labels-text">{{ (item.config?.spatial?.arReady ?? defaultArReady) ? $tc('sw-product.mediaForm.arSubline') : $tc('sw-product.mediaForm.spatialSubline') }}</span> </sw-label> </div> {% endblock %} </div> {% endblock %} {% block sw_media_base_item_name_container %} <div class="sw-media-base-item__name-container" :class="mediaNameContainerClasses" > <slot name="name" v-bind="{ item, isInlineEdit, startInlineEdit, endInlineEdit }" ></slot> </div> {% endblock %} {% block sw_media_base_item_metadata_container %} <div v-if="isList && showContextMenuButton" class="sw-media-base-item__metadata-container" > {% block sw_media_base_item_metadata %} <slot name="metadata" v-bind="{ item }" > {% block sw_media_base_item_slot_media_item_metadata %}{% endblock %} </slot> {% endblock %} </div> {% endblock %} {% block sw_media_base_item_context_menu %} <sw-context-button v-if="showContextMenuButton && !isLoading" ref="swContextButton" > {% block sw_media_base_item_context_items %} <slot name="context-menu" v-bind="{ item, startInlineEdit, allowEdit, allowDelete }" > {% block sw_media_base_item_slot_media_item_context_menu %}{% endblock %} </slot> {% endblock %} </sw-context-button> {% endblock %} {% block sw_media_base_item_list_selected_indicator %} <mt-checkbox v-if="isList && showSelectionIndicator && allowMultiSelect" v-model:checked="listSelected" class="sw-media-base-item__selected-indicator" :class="selectionIndicatorClasses" @update:checked="onClickedItem" /> {# @deprecated tag:v6.7.0 - Remove the block #} {% block sw_media_base_item_list_selection_indicator_icon %} {% endblock %} {% endblock %} {% block sw_media_base_item_loading_indicator %} <sw-icon v-if="isLoading" class="sw-media-base-item__loader" name="regular-spinner-star" size="16px" /> {% endblock %} <slot name="modal-windows" v-bind="{ item, allowEdit, allowDelete }" ></slot> </div> {% endblock %}`,s={template:i,inject:["systemConfigApiService"],emits:["media-item-click","media-item-selection-add","media-item-selection-remove"],props:{item:{type:Object,required:!0},isList:{type:Boolean,required:!1,default:!1},showSelectionIndicator:{required:!1,type:Boolean,default:!1},showContextMenuButton:{type:Boolean,required:!1,default:!0},selected:{type:Boolean,required:!1,default:!1},editable:{type:Boolean,required:!1,default:!0},allowMultiSelect:{type:Boolean,required:!1,default:!0},truncateRight:{type:Boolean,required:!1,default:!1},allowEdit:{type:Boolean,required:!1,default:!0},allowDelete:{type:Boolean,required:!1,default:!0}},data(){return{isInlineEdit:!1,defaultArReady:!1}},created(){this.createdComponent()},computed:{mediaItemClasses(){return{"is--list":this.isList,"is--selected":this.selected||this.isInlineEdit}},mediaNameContainerClasses(){return{"is--truncate-right":this.truncateRight}},listSelected(){return this.selected&&this.showSelectionIndicator},selectionIndicatorClasses(){return{"selected-indicator--visible":this.showSelectionIndicator,"selected-indicator--list":this.isList,"selected-indicator--checked":this.listSelected,"selected-indicator--is-allowed":this.allowMultiSelect}},isLoading(){return this.item.isLoading},isSpatial(){var e,t;return this.item.fileExtension==="glb"||!!((t=(e=this.item)==null?void 0:e.url)!=null&&t.endsWith(".glb"))}},methods:{createdComponent(){this.systemConfigApiService.getValues("core.media").then(e=>{this.defaultArReady=e["core.media.defaultEnableAugmentedReality"]})},handleItemClick(e){this.isSelectionIndicatorClicked(e.composedPath())||this.$emit("media-item-click",{originalDomEvent:e,item:this.item})},isSelectionIndicatorClicked(e){return e.some(t=>t.classList&&(t.classList.contains("sw-media-base-item__selected-indicator")||t.classList.contains("sw-context-button")))},onClickedItem(e){if(!this.listSelected||!this.allowMultiSelect){this.selectItem(e);return}this.removeFromSelection(e)},selectItem(e){this.$emit("media-item-selection-add",{originalDomEvent:e,item:this.item})},removeFromSelection(e){this.$emit("media-item-selection-remove",{originalDomEvent:e,item:this.item})},startInlineEdit(){this.editable&&this.allowEdit&&(this.isInlineEdit=!0)},endInlineEdit(){this.isInlineEdit=!1}}};export{s as default};
