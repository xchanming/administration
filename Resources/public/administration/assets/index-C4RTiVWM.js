const i=`{% block sw_cms_section_config %} <div class="sw-cms-section-config"> {% block sw_cms_section_config__quickactions %} <ul class="sw-cms-section-config__quickactions-list" :class="quickactionClasses" > {% block sw_cms_section_config__quickaction_duplicate %} <li class="sw-cms-section-config__quickaction" role="button" tabindex="0" @click="onSectionDuplicate(section)" @keydown.enter="onSectionDuplicate(section)" > <sw-icon name="regular-duplicate" size="16" /> {{ $tc('global.default.duplicate') }} </li> {% endblock %} {% block sw_cms_section_config__quickaction_delete %} <li class="sw-cms-section-config__quickaction is--danger" role="button" tabindex="0" @click="onSectionDelete(section.id)" @keydown.enter="onSectionDelete(section.id)" > <sw-icon name="regular-trash" size="16" /> {{ $tc('sw-cms.general.buttonDelete') }} </li> {% endblock %} </ul> {% endblock %} {% block sw_cms_section_config__settings %} <div class="sw-cms-section-config__settings"> {% block sw_cms_section_config_name_field %} <sw-text-field v-model:value="section.name" :label="$tc('sw-cms.detail.label.sectionNameField')" :help-text="$tc('sw-cms.detail.tooltip.sectionNameField')" /> {% endblock %} {% block sw_cms_sidebar_section_config_css_classes_field %} <sw-text-field v-model:value="section.cssClass" :label="$tc('sw-cms.detail.label.cssClassField')" :help-text="$tc('sw-cms.detail.helpText.cssClassField')" /> {% endblock %} {% block sw_cms_sidebar_section_config_sizing_field %} <sw-select-field v-model:value="section.sizingMode" :label="$tc('sw-cms.detail.label.sizingField')" > <option value="boxed"> {{ $tc('sw-cms.detail.label.sizingOptionBoxed') }} </option> <option value="full_width"> {{ $tc('sw-cms.detail.label.sizingOptionFull') }} </option> </sw-select-field> {% endblock %} {% block sw_cms_sidebar_section_config_sidebar_mobile %} <sw-select-field v-if="section.type === 'sidebar'" v-model:value="section.mobileBehavior" :label="$tc('sw-cms.detail.sidebar.mobile')" > <option value="hidden"> {{ $tc('sw-cms.detail.sidebar.mobileOptionHidden') }} </option> <option value="wrap"> {{ $tc('sw-cms.detail.sidebar.mobileOptionWrap') }} </option> </sw-select-field> {% endblock %} {% block sw_cms_section_config_background_color_field %} <sw-colorpicker v-model:value="section.backgroundColor" :label="$tc('sw-cms.detail.label.backgroundColorLabel')" :placeholder="$tc('sw-cms.detail.label.backgroundColorField')" /> {% endblock %} {% block sw_cms_section_config_background_image_field %} <sw-media-compact-upload-v2 :source="section && section.backgroundMedia && section.backgroundMedia.id ? section.backgroundMedia : null" :upload-tag="uploadTag" :label="$tc('sw-cms.detail.label.backgroundMediaLabel')" :default-folder="cmsPageState.pageEntityName" :allow-multi-select="false" @media-upload-remove-image="removeMedia" @selection-change="onSetBackgroundMedia" /> <sw-upload-listener :upload-tag="uploadTag" auto-upload @media-upload-finish="successfulUpload" /> {% block sw_cms_section_config_background_image_position_field %} <sw-select-field v-model:value="section.backgroundMediaMode" :label="$tc('sw-cms.detail.label.backgroundMediaMode')" :disabled="!section.backgroundMediaId" > <option value="auto"> {{ $tc('sw-cms.detail.label.backgroundMediaModeAuto') }} </option> <option value="contain"> {{ $tc('sw-cms.detail.label.backgroundMediaModeContain') }} </option> <option value="cover"> {{ $tc('sw-cms.detail.label.backgroundMediaModeCover') }} </option> </sw-select-field> {% endblock %} {% endblock %} </div> {% endblock %} </div> {% endblock %}`,{Mixin:o}=Shopware,c=Shopware.Component.wrapComponentConfig({template:i,inject:["repositoryFactory"],emits:["section-delete","section-duplicate"],mixins:[o.getByName("cms-state")],props:{section:{type:Object,required:!0}},computed:{uploadTag(){return`cms-section-media-config-${this.section.id}`},mediaRepository(){return this.repositoryFactory.create("media")},cmsPageState(){return Shopware.Store.get("cmsPage")},quickactionsDisabled(){return!this.isSystemDefaultLanguage},quickactionClasses(){return{"is--disabled":this.quickactionsDisabled}}},methods:{onSetBackgroundMedia([e]){this.section.backgroundMediaId=e.id,this.section.backgroundMedia=e},async successfulUpload(e){this.section.backgroundMediaId=e.targetId,this.section.backgroundMedia=await this.mediaRepository.get(e.targetId)??void 0},removeMedia(){this.section.backgroundMediaId=void 0,this.section.backgroundMedia=void 0},onSectionDelete(e){this.quickactionsDisabled||this.$emit("section-delete",e)},onSectionDuplicate(e){this.quickactionsDisabled||this.$emit("section-duplicate",e)}}});export{c as default};
