{"version":3,"file":"index-CqNYtewz.js","sources":["../../../app/administration/src/module/sw-settings-tag/page/sw-settings-tag-list/sw-settings-tag-list.html.twig","../../../app/administration/src/module/sw-settings-tag/page/sw-settings-tag-list/index.js"],"sourcesContent":["<!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n{% block sw_settings_list %}\n<!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n{% block sw_settings_tag_index %}\n<sw-page class=\"sw-settings-tag-list\">\n    <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n    {% block sw_settings_tag_list_search_bar %}\n    <template #search-bar>\n        <sw-search-bar\n            initial-search-type=\"tag\"\n            :placeholder=\"$tc('sw-settings-tag.general.placeholderSearchBar')\"\n            :initial-search=\"term\"\n            @search=\"onSearch\"\n        />\n    </template>\n    {% endblock %}\n\n    <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n    {% block sw_settings_tag_list_smart_bar_header %}\n    <template #smart-bar-header>\n        <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n        {% block sw_settings_tag_list_smart_bar_header_title %}\n        <h2>\n            <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n            {% block sw_settings_tag_list_smart_bar_header_title_text %}\n            {{ $tc('sw-settings.index.title') }} <sw-icon\n                name=\"regular-chevron-right-xs\"\n                small\n            /> {{ $tc('sw-settings-tag.list.textHeadline') }}\n            {% endblock %}\n\n            <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n            {% block sw_settings_tag_list_smart_bar_header_amount %}\n            <span\n                v-if=\"!isLoading\"\n                class=\"sw-page__smart-bar-amount\"\n            >\n                ({{ total }})\n            </span>\n            {% endblock %}\n        </h2>\n        {% endblock %}\n    </template>\n    {% endblock %}\n\n    <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n    {% block sw_settings_tag_list_smart_bar_actions %}\n    <template #smart-bar-actions>\n        <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n        {% block sw_settings_tag_list_smart_bar_actions_add %}\n        <sw-button\n            v-tooltip.bottom=\"{\n                message: $tc('sw-privileges.tooltip.warning'),\n                disabled: acl.can('tag.creator'),\n                showOnDisabledElements: true\n            }\"\n            class=\"sw-settings-tag-list__button-create\"\n            variant=\"primary\"\n            :disabled=\"!acl.can('tag.creator') || undefined\"\n            @click=\"onDetail(null)\"\n        >\n            {{ $tc('sw-settings-tag.list.buttonAddTag') }}\n        </sw-button>\n        {% endblock %}\n    </template>\n    {% endblock %}\n\n    <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n    {% block sw_settings_tag_list_content %}\n    <template #content>\n        <sw-card-view>\n            <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n            {% block sw_settings_tag_list_content_card %}\n            <sw-card\n                class=\"sw-settings-tag-list__content\"\n                position-identifier=\"sw-settings-tag-list-content\"\n            >\n                <template #toolbar>\n                    <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n                    {% block sw_settings_tag_list_grid_toolbar_search %}\n                    <sw-card-filter\n                        ref=\"swCardFilter\"\n                        :placeholder=\"$tc('sw-settings-tag.list.searchPlaceholder')\"\n                        @sw-card-filter-term-change=\"onSearch\"\n                    />\n                    {% endblock %}\n                    <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n                    {% block sw_settings_tag_list_grid_toolbar_filter %}\n                    <sw-context-button\n                        :menu-width=\"300\"\n                        :auto-close=\"false\"\n                        :auto-close-outside-click=\"true\"\n                        :z-index=\"1000\"\n                        :additional-context-menu-classes=\"{ 'sw-settings-tag-list__filter': true }\"\n                    >\n                        <template #button>\n                            <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n                            {% block sw_settings_tag_list_grid_toolbar_filter_menu_trigger %}\n                            <sw-button\n                                class=\"sw-settings-tag-list__filter-menu-trigger\"\n                                size=\"small\"\n                            >\n                                <sw-icon\n                                    name=\"regular-filter-s\"\n                                    size=\"16\"\n                                />\n                                {{ $tc('sw-settings-tag.list.filter') }}\n                            </sw-button>\n                            <i\n                                v-if=\"filterCount > 0\"\n                                class=\"filter-badge\"\n                            >\n                                {{ filterCount }}\n                            </i>\n                            {% endblock %}\n                        </template>\n\n                        <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n                        {% block sw_settings_tag_list_grid_toolbar_filter_header %}\n                        <h3>{{ $tc('sw-settings-tag.list.filter') }}</h3>\n                        {% endblock %}\n\n                        <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n                        {% block sw_settings_tag_list_grid_toolbar_filter_divider %}\n                        <sw-context-menu-divider />\n                        {% endblock %}\n\n                        <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n                        {% block sw_settings_tag_list_grid_toolbar_filter_duplicate %}\n                        <sw-switch-field\n                            v-model:value=\"duplicateFilter\"\n                            :label=\"$tc('sw-settings-tag.list.filterDuplicate')\"\n                            @update:value=\"onFilter\"\n                        />\n                        {% endblock %}\n\n                        <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n                        {% block sw_settings_tag_list_grid_toolbar_filter_empty %}\n                        <sw-switch-field\n                            v-model:value=\"emptyFilter\"\n                            :label=\"$tc('sw-settings-tag.list.filterEmpty')\"\n                            @update:value=\"onFilter\"\n                        />\n                        {% endblock %}\n\n                        <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n                        {% block sw_settings_tag_list_grid_toolbar_filter_assignment %}\n                        <sw-multi-select\n                            v-model:value=\"assignmentFilter\"\n                            class=\"sw-settings-tag-list__filter-assignment-select\"\n                            :label=\"$tc('sw-settings-tag.list.filterAssignemnt')\"\n                            :placeholder=\"$tc('sw-settings-tag.list.placeholderFilterAssignemnt')\"\n                            :options=\"assignmentFilterOptions\"\n                            :disabled=\"emptyFilter || undefined\"\n                            @update:value=\"onFilter\"\n                        />\n                        {% endblock %}\n\n                        <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n                        {% block sw_settings_tag_list_grid_toolbar_filter_footer %}\n                        <div class=\"sw-settings-tag-list__filter-footer\">\n                            <a\n                                href=\"#\"\n                                @click.prevent=\"resetFilters\"\n                            >\n                                {{ $tc('sw-settings-tag.list.resetFilters') }}\n                            </a>\n                        </div>\n                        {% endblock %}\n                    </sw-context-button>\n                    {% endblock %}\n                </template>\n\n                <template #grid>\n                    <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n                    {% block sw_settings_tag_list_grid %}\n                    <sw-entity-listing\n                        v-if=\"isLoading || total > 0\"\n                        ref=\"swSettingsTagGrid\"\n                        class=\"sw-settings-tag-list__grid\"\n                        identifier=\"sw-settings-tag-list\"\n                        :items=\"tags\"\n                        :columns=\"tagColumns\"\n                        :repository=\"tagRepository\"\n                        :full-page=\"total > 0\"\n                        :plain-appearance=\"true\"\n                        :compact-mode=\"true\"\n                        :show-selection=\"true\"\n                        :is-loading=\"isLoading\"\n                        :allow-view=\"acl.can('tag.viewer')\"\n                        :allow-edit=\"acl.can('tag.editor')\"\n                        :allow-delete=\"acl.can('tag.deleter')\"\n                        :disable-data-fetching=\"true\"\n                        :sort-by=\"sortBy\"\n                        :sort-direction=\"sortDirection\"\n                        @column-sort=\"onSortColumn\"\n                        @page-change=\"onPageChange\"\n                    >\n                        <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n                        {% block sw_settings_tag_list_grid_bulk %}\n                        <template #bulk-additional=\"{ selectionCount }\">\n                            <!-- eslint-disable-next-line vuejs-accessibility/click-events-have-key-events -->\n                            <a\n                                v-if=\"selectionCount > 1 && acl.can('tag.creator') && acl.can('tag.deleter')\"\n                                class=\"link\"\n                                role=\"button\"\n                                tabindex=\"0\"\n                                @click=\"showBulkMergeModal = true\"\n                            >\n                                {{ $tc('sw-settings-tag.list.bulkMerge') }}\n                            </a>\n                        </template>\n                        {% endblock %}\n\n                        <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n                        {% block sw_settings_tag_list_grid_bulk_merge_modal %}\n                        <template #bulk-modals-additional=\"{ selection, ids }\">\n                            <sw-modal\n                                v-if=\"showBulkMergeModal\"\n                                variant=\"large\"\n                                :title=\"$tc('sw-settings-tag.list.bulkMergeTitle')\"\n                                @modal-close=\"onCloseBulkMergeModal\"\n                            >\n                                <slot\n                                    name=\"bulk-modal-merge-confirm-text\"\n                                    v-bind=\"{ selection, ids }\"\n                                >\n                                    <sw-alert variant=\"info\">\n                                        {{ $tc('sw-settings-tag.list.bulkMergeNotice') }}\n                                    </sw-alert>\n                                    <p class=\"sw-settings-tag-list__confirm-bulk-merge-text\">\n                                        <span v-if=\"!bulkMergeProgress.isRunning\">\n                                            {{ $tc('sw-settings-tag.list.bulkMergeMessage') }}\n                                        </span>\n                                        <span v-else>\n                                            {{ $tc('sw-settings-tag.list.bulkMerging') }}\n                                        </span>\n                                        <span\n                                            v-for=\"(id, index) in ids\"\n                                            :key=\"index\"\n                                            class=\"confirm-bulk-merge-text__label\"\n                                        >\n                                            <sw-label v-tooltip=\"{ message: selection[id].name }\">\n                                                {{ selection[id].name }}\n                                            </sw-label>&nbsp;{{ getBulkMergeMessageGlue(ids, id) }}\n                                        </span>\n                                        <span\n                                            v-if=\"bulkMergeProgress.isRunning\"\n                                            class=\"confirm-bulk-merge-text__label-into\"\n                                        >\n                                            <sw-label v-tooltip=\"{ message: duplicateName }\">{{ duplicateName }}</sw-label>&nbsp;.\n                                        </span>\n                                    </p>\n                                    <p v-if=\"bulkMergeProgress.isRunning\">\n                                        {{ $tc('sw-settings-tag.list.bulkMergeTimeNotice') }}\n                                    </p>\n                                    <p v-else>\n                                        {{ $tc('sw-settings-tag.list.bulkMergeNoUndoNotice') }}\n                                    </p>\n                                </slot>\n\n                                <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n                                {% block sw_settings_tag_list_merge_modal_confirm_name_input %}\n                                <slot name=\"bulk-modal-merge-confirm-name-input\">\n                                    <p\n                                        v-if=\"!bulkMergeProgress.isRunning\"\n                                        class=\"sw-settings-tag-list__confirm-bulk-merge-name-input\"\n                                    >\n                                        <sw-text-field\n                                            v-model:value=\"duplicateName\"\n                                            :label=\"$tc('sw-settings-tag.list.bulkMergeName')\"\n                                            :placeholder=\"$tc('sw-settings-tag.list.placeholderTagName')\"\n                                            maxlength=\"255\"\n                                            required\n                                        />\n                                    </p>\n                                </slot>\n                                {% endblock %}\n\n                                <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n                                {% block sw_settings_tag_list_merge_modal_progress %}\n                                <slot name=\"bulk-modal-merge-progress\">\n                                    <div\n                                        v-if=\"bulkMergeProgress.isRunning\"\n                                        class=\"sw-settings-tag-list__bulk-merge-progress\"\n                                    >\n                                        <sw-loader\n                                            class=\"sw-settings-tag-list__bulk-merge-progress-icon\"\n                                            size=\"44px\"\n                                        />\n                                    </div>\n                                </slot>\n                                {% endblock %}\n\n                                <template #modal-footer>\n                                    <slot\n                                        name=\"bulk-modal-merge-footer\"\n                                        v-bind=\"{ selection }\"\n                                    >\n                                        <sw-button\n                                            size=\"small\"\n                                            @click=\"onCloseBulkMergeModal\"\n                                        >\n                                            {{ $tc('global.default.cancel') }}\n                                        </sw-button>\n\n                                        <sw-button\n                                            variant=\"primary\"\n                                            size=\"small\"\n                                            :is-loading=\"isLoading\"\n                                            :disabled=\"!duplicateName || bulkMergeProgress.isRunning || undefined\"\n                                            @click=\"onMergeTags(selection)\"\n                                        >\n                                            {{ $tc('sw-settings-tag.list.bulkMerge') }}\n                                        </sw-button>\n                                    </slot>\n                                </template>\n                            </sw-modal>\n                        </template>\n                        {% endblock %}\n\n                        <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n                        {% block sw_settings_tag_list_grid_column_default_name %}\n                        <template #column-name=\"{ item, column }\">\n                            <sw-label v-tooltip=\"{ message: item.name }\">\n                                {{ item.name }}\n                            </sw-label>\n                        </template>\n                        {% endblock %}\n\n                        <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n                        {% block sw_settings_tag_list_grid_column_assignments %}\n                        <template\n                            v-for=\"(propertyName, index) in assignmentProperties\"\n                            :key=\"index\"\n                            #[`column-${propertyName}`]=\"{ item }\"\n                        >\n                            <span\n                                class=\"sw-data-grid__cell-value\"\n                            >\n                                {{ getPropertyCounting(propertyName, item.id) }}\n                                {{ $tc(`sw-settings-tag.list.assignments.content.${propertyName}`, getPropertyCounting(propertyName, item.id)) }}\n                            </span>\n                        </template>\n                        {% endblock %}\n\n                        <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n                        {% block sw_settings_tag_list_grid_columns_actions %}\n                        <template #actions=\"{ item }\">\n                            <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n                            {% block sw_settings_tag_list_grid_columns_actions_edit %}\n                            <sw-context-menu-item\n                                class=\"sw-settings-tag-list__edit-action\"\n                                :disabled=\"!acl.can('tag.editor') || undefined\"\n                                @click=\"onDetail(item.id)\"\n                            >\n                                {{ $tc('sw-settings-tag.list.contextMenuEdit') }}\n                            </sw-context-menu-item>\n                            {% endblock %}\n\n                            <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n                            {% block sw_settings_tag_list_grid_columns_actions_duplicate %}\n                            <sw-context-menu-item\n                                :disabled=\"!acl.can('tag.creator') || undefined\"\n                                class=\"sw-settings-tag-list__duplicate-action\"\n                                @click=\"onDuplicate(item)\"\n                            >\n                                {{ $tc('sw-settings-tag.list.contextMenuDuplicate') }}\n                            </sw-context-menu-item>\n                            {% endblock %}\n\n                            <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n                            {% block sw_settings_tag_list_grid_columns_actions_delete %}\n                            <sw-context-menu-item\n                                class=\"sw-settings-tag-list__delete-action\"\n                                variant=\"danger\"\n                                :disabled=\"!acl.can('tag.deleter') || undefined\"\n                                @click=\"onDelete(item.id)\"\n                            >\n                                {{ $tc('sw-settings-tag.list.contextMenuDelete') }}\n                            </sw-context-menu-item>\n                            {% endblock %}\n                        </template>\n                        {% endblock %}\n\n                        <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n                        {% block sw_settings_tag_list_grid_action_modals %}\n                        <template #action-modals=\"{ item }\">\n                            <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n                            {% block sw_settings_tag_list_delete_modal %}\n                            <sw-modal\n                                v-if=\"showDeleteModal === item.id\"\n                                :title=\"$tc('global.default.warning')\"\n                                variant=\"small\"\n                                @modal-close=\"onCloseDeleteModal\"\n                            >\n                                <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n                                {% block sw_settings_tag_list_delete_modal_confirm_delete_text %}\n                                <p class=\"sw-settings-tag-list__confirm-delete-text\">\n                                    {{ $tc('sw-settings-tag.list.textDeleteConfirm', 0, { name: item.name }) }}\n                                </p>\n                                {% endblock %}\n\n                                <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n                                {% block sw_settings_tag_list_delete_modal_footer %}\n                                <template #modal-footer>\n                                    <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n                                    {% block sw_settings_tag_list_delete_modal_cancel %}\n                                    <sw-button\n                                        size=\"small\"\n                                        @click=\"onCloseDeleteModal\"\n                                    >\n                                        {{ $tc('global.default.cancel') }}\n                                    </sw-button>\n                                    {% endblock %}\n\n                                    <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n                                    {% block sw_settings_tag_list_delete_modal_confirm %}\n                                    <sw-button\n                                        variant=\"danger\"\n                                        size=\"small\"\n                                        @click=\"onConfirmDelete(item.id)\"\n                                    >\n                                        {{ $tc('sw-settings-tag.list.buttonDelete') }}\n                                    </sw-button>\n                                    {% endblock %}\n                                </template>\n                                {% endblock %}\n                            </sw-modal>\n                            {% endblock %}\n\n                            <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n                            {% block sw_settings_tag_list_duplicate_modal %}\n                            <sw-modal\n                                v-if=\"showDuplicateModal === item.id\"\n                                :title=\"$tc('sw-settings-tag.list.contextMenuDuplicate')\"\n                                variant=\"small\"\n                                @modal-close=\"onCloseDuplicateModal\"\n                            >\n                                <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n                                {% block sw_settings_tag_list_delete_modal_confirm_duplicate_input %}\n                                <p class=\"sw-settings-tag-list__confirm-duplicate-input\">\n                                    <sw-text-field\n                                        v-model:value=\"duplicateName\"\n                                        :label=\"$tc('sw-settings-tag.list.columnName')\"\n                                        :placeholder=\"$tc('sw-settings-tag.list.placeholderTagName')\"\n                                        maxlength=\"255\"\n                                        required\n                                    />\n                                </p>\n                                {% endblock %}\n\n                                <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n                                {% block sw_settings_tag_list_duplicate_modal_footer %}\n                                <template #modal-footer>\n                                    <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n                                    {% block sw_settings_tag_list_duplicate_modal_cancel %}\n                                    <sw-button\n                                        size=\"small\"\n                                        @click=\"onCloseDuplicateModal\"\n                                    >\n                                        {{ $tc('global.default.cancel') }}\n                                    </sw-button>\n                                    {% endblock %}\n\n                                    <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n                                    {% block sw_settings_tag_list_duplicate_modal_confirm %}\n                                    <sw-button\n                                        variant=\"primary\"\n                                        size=\"small\"\n                                        :disabled=\"!duplicateName\"\n                                        @click=\"onConfirmDuplicate(item.id)\"\n                                    >\n                                        {{ $tc('sw-settings-tag.list.buttonAddTag') }}\n                                    </sw-button>\n                                    {% endblock %}\n                                </template>\n                                {% endblock %}\n                            </sw-modal>\n                            {% endblock %}\n\n                            <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n                            {% block sw_settings_tag_list_detail_edit_modal %}\n                            <sw-settings-tag-detail-modal\n                                v-if=\"showDetailModal === item.id\"\n                                :edited-tag=\"item\"\n                                :counts=\"getCounts(item.id)\"\n                                :property=\"detailProperty\"\n                                :entity=\"detailEntity\"\n                                @finish=\"onSaveFinish\"\n                                @close=\"onCloseDetailModal\"\n                            />\n                            {% endblock %}\n                        </template>\n                        {% endblock %}\n                    </sw-entity-listing>\n                    {% endblock %}\n\n                    <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n                    {% block sw_settings_tag_list_empty_state %}\n                    <sw-empty-state\n                        v-else\n                        :absolute=\"false\"\n                        :show-description=\"false\"\n                        :title=\"$tc('sw-settings-tag.list.titleEmptyStateList')\"\n                    />\n                    {% endblock %}\n\n                    <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n                    {% block sw_settings_tag_list_detail_add_modal %}\n                    <sw-settings-tag-detail-modal\n                        v-if=\"showDetailModal === true\"\n                        @finish=\"onSaveFinish\"\n                        @close=\"onCloseDetailModal\"\n                    />\n                    {% endblock %}\n                </template>\n            </sw-card>\n            {% endblock %}\n        </sw-card-view>\n    </template>\n    {% endblock %}\n</sw-page>\n{% endblock %}\n{% endblock %}\n","/**\n * @package inventory\n */\nimport template from './sw-settings-tag-list.html.twig';\nimport './sw-settings-tag-list.scss';\n\nconst { Mixin } = Cicada;\nconst { Criteria } = Cicada.Data;\n\n// eslint-disable-next-line sw-deprecation-rules/private-feature-declarations\nexport default {\n    template,\n\n    compatConfig: Cicada.compatConfig,\n\n    inject: [\n        'repositoryFactory',\n        'acl',\n        'tagApiService',\n    ],\n\n    mixins: [\n        Mixin.getByName('listing'),\n        Mixin.getByName('notification'),\n    ],\n\n    data() {\n        return {\n            tags: null,\n            sortBy: 'name',\n            isLoading: false,\n            sortDirection: 'ASC',\n            showDeleteModal: false,\n            showDuplicateModal: false,\n            showBulkMergeModal: false,\n            duplicateName: null,\n            showDetailModal: false,\n            detailProperty: null,\n            detailEntity: null,\n            assignmentFilter: null,\n            emptyFilter: false,\n            duplicateFilter: false,\n            bulkMergeProgress: {\n                isRunning: false,\n                currentAssignment: null,\n                progress: 0,\n                total: 0,\n            },\n        };\n    },\n\n    metaInfo() {\n        return {\n            title: this.$createTitle(),\n        };\n    },\n\n    computed: {\n        tagRepository() {\n            return this.repositoryFactory.create('tag');\n        },\n\n        tagDefinition() {\n            return Cicada.EntityDefinition.get('tag');\n        },\n\n        assignmentProperties() {\n            const properties = [];\n\n            Object.entries(this.tagDefinition.properties).forEach(\n                ([\n                    propertyName,\n                    property,\n                ]) => {\n                    if (property.relation !== 'many_to_many') {\n                        return;\n                    }\n\n                    properties.push(propertyName);\n                },\n            );\n\n            return properties;\n        },\n\n        tagCriteria() {\n            const criteria = new Criteria(this.page, this.limit);\n\n            criteria.setTerm(this.term);\n\n            this.setAggregations(criteria);\n\n            const naturalSort = this.sortBy === 'createdAt';\n            const sorting = Criteria.sort(this.sortBy, this.sortDirection, naturalSort);\n\n            if (this.assignmentProperties.includes(this.sortBy)) {\n                sorting.field += '.id';\n                sorting.type = 'count';\n            }\n            criteria.addSorting(sorting);\n\n            return criteria;\n        },\n\n        tagColumns() {\n            const columns = [\n                {\n                    property: 'name',\n                    dataIndex: 'name',\n                    label: 'sw-settings-tag.list.columnName',\n                    routerLink: 'sw.settings.tag.detail',\n                    width: '200px',\n                    primary: true,\n                    allowResize: true,\n                },\n            ];\n\n            this.assignmentProperties.forEach((propertyName) => {\n                columns.push({\n                    property: `${propertyName}`,\n                    label: this.$tc(`sw-settings-tag.list.assignments.header.${propertyName}`),\n                    width: '250px',\n                    allowResize: true,\n                    sortable: true,\n                });\n            });\n\n            return columns;\n        },\n\n        assignmentFilterOptions() {\n            const options = [];\n\n            Object.entries(this.tagDefinition.properties).forEach(\n                ([\n                    propertyName,\n                    property,\n                ]) => {\n                    if (property.relation !== 'many_to_many') {\n                        return;\n                    }\n\n                    options.push({\n                        value: propertyName,\n                        label: this.$tc(`sw-settings-tag.list.assignments.filter.${propertyName}`),\n                    });\n                },\n            );\n            options.sort((a, b) => {\n                if (a.label > b.label) {\n                    return 1;\n                }\n                if (b.label > a.label) {\n                    return -1;\n                }\n                return 0;\n            });\n\n            return options;\n        },\n\n        hasAssignmentFilter() {\n            return this.assignmentFilter && this.assignmentFilter.length > 0;\n        },\n\n        filterCount() {\n            let count = 0;\n\n            if (this.hasAssignmentFilter || this.emptyFilter) {\n                count += 1;\n            }\n\n            if (this.duplicateFilter) {\n                count += 1;\n            }\n\n            return count;\n        },\n    },\n\n    methods: {\n        setAggregations(criteria) {\n            Object.entries(this.tagDefinition.properties).forEach(\n                ([\n                    propertyName,\n                    property,\n                ]) => {\n                    if (property.relation !== 'many_to_many') {\n                        return;\n                    }\n\n                    criteria.addAggregation(\n                        Criteria.terms(\n                            propertyName,\n                            'id',\n                            null,\n                            null,\n                            Criteria.count(propertyName, `tag.${propertyName}.id`),\n                        ),\n                    );\n                },\n            );\n        },\n\n        getList() {\n            this.isLoading = true;\n\n            if (this.$refs.swCardFilter && this.$refs.swCardFilter.term !== this.term) {\n                this.$refs.swCardFilter.term = this.term ?? '';\n            }\n\n            if (this.duplicateFilter || this.emptyFilter || this.hasAssignmentFilter) {\n                this.tagApiService\n                    .filterIds(this.tagCriteria.parse(), {\n                        duplicateFilter: this.duplicateFilter,\n                        emptyFilter: this.emptyFilter,\n                        assignmentFilter: this.assignmentFilter,\n                    })\n                    .then(({ total, ids }) => {\n                        this.total = total;\n\n                        if (total === 0) {\n                            this.tags = null;\n                            this.isLoading = false;\n\n                            return;\n                        }\n\n                        const criteria = new Criteria(1, this.limit);\n                        criteria.setIds(ids);\n                        criteria.setTotalCountMode(0);\n                        criteria.aggregations = this.tagCriteria.aggregations;\n                        criteria.associations = this.tagCriteria.associations;\n\n                        this.tagRepository\n                            .search(criteria)\n                            .then((items) => {\n                                items.total = total;\n                                this.tags = this.sortByIdsOrder(items, ids);\n                                this.isLoading = false;\n\n                                return items;\n                            })\n                            .catch(() => {\n                                this.isLoading = false;\n                            });\n                    })\n                    .catch(() => {\n                        this.isLoading = false;\n                    });\n\n                return;\n            }\n\n            this.tagRepository\n                .search(this.tagCriteria)\n                .then((items) => {\n                    this.total = items.total;\n                    this.tags = items;\n                    this.isLoading = false;\n\n                    return items;\n                })\n                .catch(() => {\n                    this.isLoading = false;\n                });\n        },\n\n        sortByIdsOrder(items, ids) {\n            items.sort((a, b) => {\n                if (ids.indexOf(a.id) > ids.indexOf(b.id)) {\n                    return 1;\n                }\n\n                return -1;\n            });\n\n            return items;\n        },\n\n        getCounts(id) {\n            const counts = {};\n\n            Object.entries(this.tagDefinition.properties).forEach(\n                ([\n                    propertyName,\n                    property,\n                ]) => {\n                    if (property.relation === 'many_to_many') {\n                        const countBucket = this.tags.aggregations[propertyName].buckets.filter((bucket) => {\n                            return bucket.key === id;\n                        })[0];\n\n                        if (!countBucket[propertyName] || !countBucket[propertyName].count) {\n                            return;\n                        }\n\n                        counts[propertyName] = countBucket[propertyName].count;\n                    }\n                },\n            );\n\n            return counts;\n        },\n\n        getPropertyCounting(propertyName, id) {\n            if (!this.tags.aggregations[propertyName]) {\n                return 0;\n            }\n\n            const countBucket = this.tags.aggregations[propertyName].buckets.filter((bucket) => {\n                return bucket.key === id;\n            })[0];\n\n            if (!countBucket || !countBucket[propertyName] || !countBucket[propertyName].count) {\n                return 0;\n            }\n\n            return countBucket[propertyName].count;\n        },\n\n        onDelete(id) {\n            this.showDeleteModal = id;\n        },\n\n        onCloseDeleteModal() {\n            this.showDeleteModal = false;\n        },\n\n        onConfirmDelete(id) {\n            this.showDeleteModal = false;\n            this.$nextTick().then(() => {\n                this.isLoading = true;\n            });\n\n            return this.tagRepository.delete(id).then(() => {\n                this.getList();\n            });\n        },\n\n        onDuplicate(item) {\n            this.showDuplicateModal = item.id;\n            this.duplicateName = `${item.name} ${this.$tc('global.default.copy')}`;\n        },\n\n        onCloseDuplicateModal() {\n            this.showDuplicateModal = false;\n            this.duplicateName = null;\n        },\n\n        onConfirmDuplicate(id) {\n            this.showDuplicateModal = false;\n            this.$nextTick().then(() => {\n                this.isLoading = true;\n            });\n\n            const behavior = {\n                cloneChildren: false,\n                overwrites: {\n                    name: this.duplicateName,\n                },\n            };\n\n            return this.tagRepository\n                .clone(id, behavior, Cicada.Context.api)\n                .then(() => {\n                    this.duplicateName = null;\n                    this.getList();\n                })\n                .catch(() => {\n                    this.isLoading = false;\n                    this.duplicateName = null;\n\n                    this.createNotificationError({\n                        message: this.$tc('global.notification.unspecifiedSaveErrorMessage'),\n                    });\n                });\n        },\n\n        onDetail(id, property, entity) {\n            this.showDetailModal = id ?? true;\n\n            if (property && entity) {\n                this.detailProperty = property;\n                this.detailEntity = entity;\n            }\n        },\n\n        onCloseDetailModal() {\n            this.showDetailModal = false;\n            this.detailProperty = null;\n            this.detailEntity = null;\n        },\n\n        onCloseBulkMergeModal() {\n            this.bulkMergeProgress.isRunning = false;\n            this.showBulkMergeModal = false;\n            this.duplicateName = null;\n        },\n\n        onMergeTags(selection) {\n            return this.tagApiService\n                .merge(Object.keys(selection), this.duplicateName, this.tagDefinition.properties, this.bulkMergeProgress)\n                .then(() => {\n                    this.duplicateName = null;\n                    this.$refs.swSettingsTagGrid.resetSelection();\n\n                    this.bulkMergeProgress.isRunning = false;\n                    this.showBulkMergeModal = false;\n                    this.$nextTick().then(() => {\n                        this.isLoading = true;\n                    });\n\n                    this.onFilter();\n                })\n                .catch(() => {\n                    this.bulkMergeProgress.isRunning = false;\n                    this.createNotificationError({\n                        message: this.$tc('global.notification.unspecifiedSaveErrorMessage'),\n                    });\n                });\n        },\n\n        getBulkMergeMessageGlue(ids, id) {\n            if (ids.length - 1 === ids.indexOf(id)) {\n                return this.bulkMergeProgress.isRunning\n                    ? this.$tc('sw-settings-tag.list.bulkMergeInto')\n                    : this.$tc('sw-settings-tag.list.bulkMergeMessageFinal');\n            }\n\n            if (ids.length - 2 === ids.indexOf(id)) {\n                return this.$tc('sw-settings-tag.list.bulkMergeMessageAnd');\n            }\n\n            return ',';\n        },\n\n        onSaveFinish() {\n            this.onCloseDetailModal();\n\n            this.$nextTick().then(() => {\n                this.getList();\n            });\n        },\n\n        onFilter() {\n            if (this.assignmentFilter && this.emptyFilter) {\n                this.assignmentFilter = null;\n            }\n\n            this.page = 1;\n            this.getList();\n        },\n\n        resetFilters() {\n            this.assignmentFilter = null;\n            this.emptyFilter = false;\n            this.duplicateFilter = false;\n\n            this.onFilter();\n        },\n    },\n};\n"],"names":["template","Mixin","Criteria","index","properties","propertyName","property","criteria","naturalSort","sorting","columns","options","a","b","count","total","ids","items","id","counts","countBucket","bucket","item","behavior","entity","selection"],"mappings":"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"}