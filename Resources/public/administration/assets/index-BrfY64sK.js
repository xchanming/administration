const e=`{% block sw_condition_modal %} <sw-modal class="sw-condition-modal" variant="large" :title="$tc('sw-settings-rule.conditionModal.modalTitle')" @modal-close="closeModal" > {% block sw_condition_modal_tree %} <sw-condition-tree v-bind="{ initialConditions, scopes, allowedTypes, conditionRepository, conditionDataProviderService }" :root-condition="condition" association-field="ruleId" :association-value="condition.ruleId" :child-association-field="childAssociationField" @conditions-changed="onConditionsChanged" /> {% endblock %} {% block sw_condition_modal_footer %} <template #modal-footer> {% block sw_condition_modal_footer_cancel %} <sw-button size="small" @click="$emit('modal-close')" > {{ $tc('global.default.cancel') }} </sw-button> {% endblock %} {% block sw_condition_modal_footer_save %} <sw-button variant="primary" size="small" @click="saveAndCloseModal" > {{ $tc('global.default.save') }} </sw-button> {% endblock %} </template> {% endblock %} </sw-modal> {% endblock %}`,{Component:n}=Cicada,{EntityCollection:d}=Cicada.Data;n.register("sw-condition-modal",{template:e,compatConfig:Cicada.compatConfig,inject:["repositoryFactory"],emits:["modal-close"],props:{conditionDataProviderService:{type:Object,required:!0},condition:{type:Object,required:!1,default:null},scopes:{type:Array,required:!1,default(){return["lineItem"]}},allowedTypes:{type:Array,required:!1,default:null},childAssociationField:{type:String,required:!1,default:"children"}},data(){return{childConditions:null,deletedIds:[]}},computed:{conditionRepository(){return this.repositoryFactory.create(this.condition[this.childAssociationField].entity,this.condition[this.childAssociationField].source)},initialConditions(){return this.condition[this.childAssociationField]}},methods:{onConditionsChanged({conditions:i,deletedIds:o}){this.childConditions=i,this.deletedIds=[...this.deletedIds,...o]},deleteAndClose(){const i=this.condition[this.childAssociationField].filter(o=>!o.isNew()).getIds();this.deleteChildren(i,this.condition[this.childAssociationField].context).then(()=>{this.condition[this.childAssociationField]=new d(this.condition[this.childAssociationField].source,this.condition[this.childAssociationField].entity,this.condition[this.childAssociationField].context),this.closeModal()})},saveAndCloseModal(){this.deleteChildren(this.deletedIds,this.condition[this.childAssociationField].context).then(()=>{this.condition[this.childAssociationField]=this.childConditions,this.closeModal()})},deleteChildren(i,o){return i.length<=0?Promise.resolve():Promise.all(i.map(t=>this.conditionRepository.delete(t,o)))},closeModal(){this.$emit("modal-close")}}});
//# sourceMappingURL=index-BrfY64sK.js.map
