const l=`{% block sw_newsletter_recipient_list %} <sw-page class="sw-newsletter-recipient-list"> {% block sw_newsletter_recipient_list_search_bar %} <template #search-bar> <sw-search-bar initial-search-type="newsletter_recipient" :placeholder="$tc('sw-newsletter-recipient.general.placeholderSearchBarSnippets')" :initial-search="term" @search="onSearch" /> </template> {% endblock %} {% block sw_newsletter_recipient_list_smart_bar_header %} <template #smart-bar-header> {% block sw_newsletter_recipient_list_smart_bar_header_title %} <h2> {% block sw_newsletter_recipientlist_list_smart_bar_header_title_text %} {{ $tc('global.sw-admin-menu.navigation.mainMenuItemMarketing') }} <sw-icon name="regular-chevron-right-xs" /> {{ $tc('sw-newsletter-recipient.list.textHeadline') }} {% endblock %} {% block sw_newsletter_recipient_list_smart_bar_header_amount %} <span v-if="!isLoading" class="sw-page__smart-bar-amount" > ({{ total }}) </span> {% endblock %} </h2> {% endblock %} </template> {% endblock %} {% block sw_newsletter_recipientlist_list_content %} <template #content> {% block sw_newsletter_recipientlist_list_content_card %} {% block sw_newsletter_recipientlist_list_grid %} <sw-entity-listing v-if="items && entitySearchable" ref="swNewsletterRecipientGrid" class="sw-newsletter-recipient-list__grid" :is-loading="isLoading" identifier="sw-newsletter-recipient" :show-selection="false" :items="items" :columns="columns" :repository="repository" detail-route="sw.newsletter.recipient.detail" :sort-by="currentSortBy" :sort-direction="sortDirection" :disable-data-fetching="true" :allow-view="acl.can('newsletter_recipient.viewer')" :allow-edit="acl.can('newsletter_recipient.editor')" :allow-inline-edit="acl.can('newsletter_recipient.editor')" :allow-delete="acl.can('newsletter_recipient.deleter')" @page-change="onPageChange" @column-sort="onSortColumn" > {% block sw_newsletter_recipientlist_list_grid_email %} <template #column-email="{ item }"> <p>{{ emailIdnFilter(item.email) }}</p> </template> {% endblock %} {% block sw_newsletter_recipientlist_list_grid_name %} <template #column-name="{ item, compact, isInlineEdit }" > {% block sw_newsletter_recipientlist_list_grid_inline_edit_name %} <template v-if="isInlineEdit"> {% block sw_newsletter_recipientlist_list_grid_inline_edit_name %} <sw-text-field v-model:value="item.name" class="sw-newsletter-recipient-list__inline-edit-name" :size="compact ? 'small' : 'default'" /> {% endblock %} </template> {% endblock %} {% block sw_newsletter_recipientlist_list_grid_name_link %} <template v-else> {{ item.name }} </template> {% endblock %} </template> {% endblock %} {% block sw_newsletter_recipientlist_list_grid_status %} <template #column-status="{ item, compact, isInlineEdit }" > {% block sw_newsletter_recipientlist_list_grid_status_notSet %} <template v-if="item.status === 'notSet'"> <sw-label size="medium" appearance="pill" > {{ $tc('sw-newsletter-recipient.list.notSet') }} </sw-label> </template> {% endblock %} {% block sw_newsletter_recipientlist_list_grid_status_optIn %} <template v-else-if="item.status === 'optIn'"> <sw-label size="medium" appearance="pill" > {{ $tc('sw-newsletter-recipient.list.optIn') }} </sw-label> </template> {% endblock %} {% block sw_newsletter_recipientlist_list_grid_status_optOut %} <template v-else-if="item.status === 'optOut'"> <sw-label size="medium" appearance="pill" > {{ $tc('sw-newsletter-recipient.list.optOut') }} </sw-label> </template> {% endblock %} {% block sw_newsletter_recipientlist_list_grid_status_direct %} <template v-else-if="item.status === 'direct'"> <sw-label size="medium" appearance="pill" > {{ $tc('sw-newsletter-recipient.list.direct') }} </sw-label> </template> {% endblock %} </template> {% endblock %} {% block sw_newsletter_recipientlist_list_grid_updated_at %} <template #column-updatedAt="{ item }" > {{ dateFilter(item.updatedAt) }} </template> {% endblock %} {% block sw_newsletter_recipientlist_list_grid_created_at %} <template #column-createdAt="{ item }" > {{ dateFilter(item.createdAt) }} </template> {% endblock %} </sw-entity-listing> {% block sw_newsletter_recipient_list_empty_state %} <template v-if="!isLoading && !total"> <sw-empty-state v-if="isValidTerm(term)" :title="$tc('sw-empty-state.messageNoResultTitle')" > <template #default> {{ $tc('sw-empty-state.messageNoResultSublineBefore') }} <router-link class="sw-empty-state__description-link" :to="{ name: 'sw.profile.index.searchPreferences' }" > {{ $tc('sw-empty-state.messageNoResultSublineLink') }} </router-link> {{ $tc('sw-empty-state.messageNoResultSublineAfter') }} </template> </sw-empty-state> <sw-empty-state v-else :title="$tc('sw-newsletter-recipient.list.messageEmpty')" /> </template> {% endblock %} {% endblock %} {% endblock %} </template> {% endblock %} {% block sw_newsletter_recipient_list_sidebar %} <template #sidebar> <sw-sidebar> {% block sw_newsletter_recipient_list_sidebar_refresh %} <sw-sidebar-item icon="regular-undo" :title="$tc('sw-newsletter-recipient.list.titleSidebarItemRefresh')" @click="onRefresh" /> {% endblock %} {% block sw_newsletter_recipient_list_sidebar_filter %} <sw-sidebar-item ref="filterSideBar" icon="regular-filter" :title="$tc('sw-newsletter-recipient.list.titleSidebarItemFilter')" @sw-sidebar-item-close-content="closeContent" @click="closeContent" > {% block sw_newsletter_recipient_list_sidebar_filter_status %} <sw-sidebar-collapse> <template #header> {{ $tc('sw-newsletter-recipient.list.status') }} </template> <template #content> {% block sw_newsletter_recipient_list_sidebar_filter_status_not_set %} <sw-newsletter-recipient-filter-switch id="notSet" group="status" :label="$tc('sw-newsletter-recipient.list.notSet')" @update:value="onChange" /> {% endblock %} {% block sw_newsletter_recipient_list_sidebar_filter_status_direct %} <sw-newsletter-recipient-filter-switch id="direct" group="status" :label="$tc('sw-newsletter-recipient.list.direct')" @update:value="onChange" /> {% endblock %} {% block sw_newsletter_recipient_list_sidebar_filter_status_opt_in %} <sw-newsletter-recipient-filter-switch id="optIn" group="status" :label="$tc('sw-newsletter-recipient.list.optIn')" @update:value="onChange" /> {% endblock %} {% block sw_newsletter_recipient_list_sidebar_filter_status_opt_out %} <sw-newsletter-recipient-filter-switch id="optOut" group="status" :label="$tc('sw-newsletter-recipient.list.optOut')" @update:value="onChange" /> {% endblock %} </template> </sw-sidebar-collapse> {% endblock %} {% block sw_newsletter_recipient_list_sidebar_filter_language %} <sw-sidebar-collapse> <template #header> {{ $tc('sw-newsletter-recipient.general.language') }} </template> <template #content> {% block sw_newsletter_recipient_list_sidebar_filter_language_items %} <div v-for="(item, index) in languageFilters" :key="index" > <sw-newsletter-recipient-filter-switch :id="item.id" group="languageId" :label="item.name" @update:value="onChange" /> </div> {% endblock %} </template> </sw-sidebar-collapse> {% endblock %} {% block sw_newsletter_recipient_list_sidebar_filter_sales_channel %} <sw-sidebar-collapse> <template #header> {{ $tc('sw-newsletter-recipient.general.salesChannel') }} </template> <template #content> {% block sw_newsletter_recipient_list_sidebar_filter_sales_channel_items %} <div v-for="(item, index) in salesChannelFilters" :key="index" > <sw-newsletter-recipient-filter-switch :id="item.id" group="salesChannelId" :label="item.translated.name" @update:value="onChange" /> </div> {% endblock %} </template> </sw-sidebar-collapse> {% endblock %} {% block sw_newsletter_recipient_list_sidebar_filter_sales_tags %} <sw-sidebar-collapse> <template #header> {{ $tc('sw-newsletter-recipient.general.tags') }} </template> <template #content> {% block sw_newsletter_recipient_list_sidebar_filter_sales_tags_select %} <sw-entity-multi-select v-model:entityCollection="tagCollection" @update:entity-collection="onChange" /> {% endblock %} </template> </sw-sidebar-collapse> {% endblock %} </sw-sidebar-item> {% endblock %} </sw-sidebar> </template> {% endblock %} </sw-page> {% endblock %}`,{Mixin:r,Data:{Criteria:i,EntityCollection:n}}=Cicada,a={template:l,compatConfig:Cicada.compatConfig,inject:["repositoryFactory","acl"],mixins:[r.getByName("listing")],data(){return{isLoading:!1,items:null,total:0,repository:null,sortBy:"createdAt",sortDirection:"DESC",filterSidebarIsOpen:!1,languageFilters:[],salesChannelFilters:[],tagFilters:[],internalFilters:{},tagCollection:null,searchConfigEntity:"newsletter_recipient"}},metaInfo(){return{title:this.$createTitle()}},computed:{columns(){return this.getColumns()},salesChannelRepository(){return this.repositoryFactory.create("sales_channel")},tagRepository(){return this.repositoryFactory.create("tag")},dateFilter(){return Cicada.Filter.getByName("date")},emailIdnFilter(){return Cicada.Filter.getByName("decode-idn-email")}},created(){this.createdComponent()},methods:{createdComponent(){this.tagCollection=new n("/tag","tag",Cicada.Context.api,new i(1,25));const e=new i(1,100);this.repositoryFactory.create("language").search(e,Cicada.Context.api).then(t=>{this.languageFilters=t}),this.salesChannelRepository.search(new i(1,100)).then(t=>{this.salesChannelFilters=t}),this.getList()},async getList(){this.isLoading=!0;let e=new i(this.page,this.limit);if(e.setTerm(this.term),e.addSorting(i.sort(this.sortBy,this.sortDirection)),e.addAssociation("salesChannel"),Object.values(this.internalFilters).forEach(t=>{e.addFilter(t)}),e=await this.addQueryScores(this.term,e),!this.entitySearchable){this.isLoading=!1,this.total=0;return}this.freshSearchTerm&&e.resetSorting(),this.repository=this.repositoryFactory.create("newsletter_recipient"),this.repository.search(e).then(t=>{this.items=t,this.total=t.total,this.isLoading=!1}).catch(()=>{this.isLoading=!1})},handleTagFilter(e){if(e.length===0){delete this.internalFilters.tags;return}const t=e.map(s=>s.id);this.internalFilters.tags=i.equalsAny("tags.id",t)},handleBooleanFilter(e){if(Array.isArray(this[e.group])||(this[e.group]=[]),!e.value){this[e.group]=this[e.group].filter(t=>t!==e.id),this[e.group].length>0?this.internalFilters[e.group]=i.equalsAny(e.group,this[e.group]):delete this.internalFilters[e.group];return}this[e.group].push(e.id),this.internalFilters[e.group]=i.equalsAny(e.group,this[e.group])},onChange(e){if(e===null&&(e=[]),Array.isArray(e)){this.handleTagFilter(e),this.getList();return}this.handleBooleanFilter(e),this.getList()},closeContent(){if(this.filterSidebarIsOpen){this.$refs.filterSideBar.closeContent(),this.filterSidebarIsOpen=!1;return}this.$refs.filterSideBar.openContent(),this.filterSidebarIsOpen=!0},getColumns(){return[{property:"email",label:"sw-newsletter-recipient.list.email",routerLink:"sw.newsletter.recipient.detail",allowResize:!0,inlineEdit:"string"},{property:"name",inlineEdit:"string",label:"sw-newsletter-recipient.list.name",allowResize:!0,primary:!0},{property:"salesChannel.name",label:"sw-newsletter-recipient.list.salesChannel",allowResize:!0,primary:!1,visible:!0},{property:"status",label:"sw-newsletter-recipient.list.status",allowResize:!0},{property:"zipCode",label:"sw-newsletter-recipient.list.zipCode",allowResize:!0,align:"right",visible:!1},{property:"city",label:"sw-newsletter-recipient.list.city",allowResize:!0,visible:!1},{property:"street",label:"sw-newsletter-recipient.list.street",allowResize:!0,visible:!1},{property:"updatedAt",label:"sw-newsletter-recipient.list.updatedAt",allowResize:!0,visible:!0},{property:"createdAt",label:"sw-newsletter-recipient.list.createdAt",allowResize:!0,visible:!0}]}}};export{a as default};
//# sourceMappingURL=index-Dlg2l93J.js.map
