{"version":3,"file":"index-D1GmSs71.js","sources":["../../../app/administration/src/module/sw-settings-snippet/page/sw-settings-snippet-set-list/sw-settings-snippet-set-list.html.twig","../../../app/administration/src/module/sw-settings-snippet/page/sw-settings-snippet-set-list/index.js"],"sourcesContent":["<!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n{% block sw_settings_snippet_set_list %}\n<sw-page class=\"sw-settings-snippet-set-list\">\n    <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n    {% block sw_settings_snippet_set_list_search_bar %}\n    <template #search-bar>\n        <sw-search-bar\n            :initial-search-type=\"$tc('sw-settings-snippet.general.searchBarTitleSets')\"\n            :placeholder=\"$tc('sw-settings-snippet.general.placeholderSearchBarSets')\"\n            :initial-search=\"term\"\n            @search=\"onSearch\"\n        />\n    </template>\n    {% endblock %}\n\n    <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n    {% block sw_settings_snippet_set_list_smart_bar_header %}\n    <template #smart-bar-header>\n        <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n        {% block sw_settings_snippet_set_list_smart_bar_header_title %}\n        <h2>\n            <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n            {% block sw_settings_snippet_set_list_smart_bar_header_title_text %}\n            {{ $tc('sw-settings.index.title') }}\n            <sw-icon\n                name=\"regular-chevron-right-xs\"\n                small\n            />\n            {{ $tc('sw-settings-snippet.general.mainMenuItemGeneral') }}\n            {% endblock %}\n        </h2>\n        {% endblock %}\n    </template>\n    {% endblock %}\n\n    <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n    {% block sw_settings_snippet_set_list_card %}\n    <template #content>\n        <sw-card-view>\n            <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n            {% block sw_settings_snippet_set_list_card_title %}\n            <sw-card position-identifier=\"sw-settings-snippet-set-list-title\">\n                <h3>{{ $tc('sw-settings-snippet.setList.title') }}</h3>\n                <p>{{ $tc('sw-settings-snippet.setList.description') }}</p>\n            </sw-card>\n            {% endblock %}\n\n            <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n            {% block sw_settings_snippet_set_list_card_list %}\n            <sw-card\n                position-identifier=\"sw-settings-snippet-set-list-card-list\"\n                :is-loading=\"isLoading\"\n                :title=\"$tc('sw-settings-snippet.setList.cardTitle')\"\n            >\n                <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n                {% block sw_settings_snippet_set_list_card_list_container %}\n                <sw-container columns=\"1fr\">\n                    <sw-card-section divider=\"bottom\">\n                        <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n                        {% block sw_settings_snippet_set_list_card_list_container_header %}\n                        <div class=\"sw-settings-snippet-set-list__actions\">\n                            <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n                            {% block sw_settings_snippet_set_list_card_list_container_header_btn_export %}\n                            <sw-button\n                                v-if=\"false\"\n                                size=\"small\"\n                                variant=\"ghost\"\n                                disabled\n                            >\n                                {{ $tc('sw-settings-snippet.setList.buttonExport') }}\n                            </sw-button>\n                            {% endblock %}\n\n                            <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n                            {% block sw_settings_snippet_set_list_card_list_container_header_btn_edit_set %}\n                            <sw-button\n                                v-tooltip=\"getNoPermissionsTooltip('snippet.editor')\"\n                                class=\"sw-settings-snippet-set-list__edit-set-action\"\n                                size=\"small\"\n                                variant=\"primary\"\n                                :disabled=\"!acl.can('snippet.editor') || !snippetsEditable || undefined\"\n                                @click=\"onEditSnippetSets\"\n                            >\n                                {{ $tc('sw-settings-snippet.setList.buttonEditSet') }}\n                            </sw-button>\n                            {% endblock %}\n\n                            <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n                            {% block sw_settings_snippet_set_list_card_list_container_header_btn_split %}\n                            <sw-button-group\n                                v-tooltip=\"getNoPermissionsTooltip('snippet.creator', false)\"\n                                class=\"sw-settings-snippet-set-list__action-split\"\n                                split-button\n                            >\n                                <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n                                {% block sw_settings_snippet_set_list_card_list_container_header_btn_add_set %}\n                                <sw-button\n                                    class=\"sw-settings-snippet-set-list__action-add\"\n                                    size=\"small\"\n                                    variant=\"ghost\"\n                                    :disabled=\"!acl.can('snippet.creator') || undefined\"\n                                    @click=\"onAddSnippetSet\"\n                                >\n                                    {{ $tc('sw-settings-snippet.setList.buttonAddSet') }}\n                                </sw-button>\n                                {% endblock %}\n\n                                <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n                                {% block sw_settings_snippet_set_list_card_list_btn_copy_split %}\n                                <sw-context-button\n                                    headline=\"hi\"\n                                    :disabled=\"!acl.can('snippet.creator') || undefined\"\n                                >\n\n                                    <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n                                    {% block sw_settings_snippet_set_list_card_btn_copy %}\n                                    <template #button>\n                                        <sw-button\n                                            class=\"sw-settings-snippet-set-list__action-context-menu\"\n                                            size=\"small\"\n                                            variant=\"ghost\"\n                                            :disabled=\"!acl.can('snippet.creator') || undefined\"\n                                            square\n                                        >\n                                            <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n                                            {% block sw_settings_snippet_set_list_card_btn_copy_icon %}\n                                            <sw-icon\n                                                name=\"regular-chevron-down-xs\"\n                                                size=\"16\"\n                                            />\n                                            {% endblock %}\n                                        </sw-button>\n                                    </template>\n                                    {% endblock %}\n\n                                    <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n                                    {% block sw_settings_snippet_set_list_card_copy_context_menu %}\n                                    <sw-context-menu-item variant=\"headline\">\n                                        {{ $tc('sw-settings-snippet.setList.splitButtonDuplicateContent') }}\n                                    </sw-context-menu-item>\n                                    {% endblock %}\n\n                                    <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n                                    {% block sw_settings_snippet_set_list_card_copy_context_divider %}\n                                    <sw-context-menu-divider />\n                                    {% endblock %}\n\n                                    <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n                                    {% block sw_settings_snippet_set_list_card_copy_context_menu_items %}\n                                    <sw-context-menu-item\n                                        v-for=\"set in snippetSets\"\n                                        :key=\"set.id\"\n                                        @click=\"onClone(set.id)\"\n                                    >\n                                        {{ set.name }}\n                                    </sw-context-menu-item>\n                                    {% endblock %}\n                                </sw-context-button>\n                                {% endblock %}\n                            </sw-button-group>\n                            {% endblock %}\n                        </div>\n                        {% endblock %}\n                    </sw-card-section>\n                </sw-container>\n                {% endblock %}\n\n                <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n                {% block sw_settings_snippet_set_list_card_list_grid %}\n                <template #grid>\n                    <sw-grid\n                        ref=\"snippetSetList\"\n                        :items=\"snippetSets\"\n                        :sort-direction=\"sortDirection\"\n                        :sort-by=\"sortBy\"\n                        :selectable=\"acl.can('snippet.editor')\"\n                        :allow-inline-edit=\"acl.can('snippet.editor')\"\n                        table\n                        @inline-edit-finish=\"onInlineEditSave\"\n                        @inline-edit-cancel=\"onInlineEditCancel\"\n                        @sw-grid-select-item=\"onSelectionChanged\"\n                        @sw-grid-select-all=\"onSelectionChanged\"\n                        @sort-column=\"onSortColumn\"\n                    >\n                        <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n                        {% block sw_settings_snippet_set_list_card_list_grid_template %}\n                        <template\n                            #columns=\"{ item }\"\n                        >\n                            <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n                            {% block sw_settings_snippet_set_list_card_list_grid_column_name %}\n                            <sw-grid-column\n                                flex=\"minmax(200px, 1fr)\"\n                                class=\"sw-settings-snippet-set__column-name\"\n                                :label=\"$tc('sw-settings-snippet.setList.columnName')\"\n                                data-index=\"name\"\n                                editable\n                                truncate\n                                sortable\n                            >\n\n                                <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n                                {% block sw_settings_snippet_set_list_card_list_grid_column_name_link %}\n                                <router-link :to=\"{ name: 'sw.settings.snippet.list', query: { ids: [item.id] } }\">\n                                    {{ item.name }}\n                                </router-link>\n                                {% endblock %}\n\n                                <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n                                {% block sw_settings_snippet_set_list_card_list_grid_column_name_editor %}\n                                <template #inline-edit>\n                                    <sw-text-field\n                                        ref=\"nameEditor\"\n                                        v-model:value=\"item.name\"\n                                        name=\"sw-field--item-name\"\n                                        :placeholder=\"$tc('sw-settings-snippet.setList.placeholderName')\"\n                                    />\n                                </template>\n                                {% endblock %}\n                            </sw-grid-column>\n                            {% endblock %}\n\n                            <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n                            {% block sw_settings_snippet_set_list_card_list_grid_column_changed %}\n                            <sw-grid-column\n                                flex=\"1fr\"\n                                class=\"sw-settings-snippet-set-file__column-changed-at\"\n                                sortable\n                                :label=\"$tc('sw-settings-snippet.setList.columnChangedAt')\"\n                                data-index=\"createdAt\"\n                            >\n                                <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n                                {% block sw_settings_snippet_set_list_card_list_grid_column_changed_date %}\n                                <div v-if=\"item.updatedAt\">\n                                    {{ dateFilter(item.updatedAt) }}\n                                </div>\n                                <div v-else>\n                                    {{ dateFilter(item.createdAt) }}\n                                </div>\n                                {% endblock %}\n                            </sw-grid-column>\n                            {% endblock %}\n\n                            <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n                            {% block sw_settings_snippet_set_list_card_list_grid_column_base_file %}\n                            <sw-grid-column\n                                flex=\"minmax(200px, 1fr)\"\n                                class=\"sw-settings-snippet-set-file__column-base-file\"\n                                sortable\n                                :label=\"$tc('sw-settings-snippet.setList.columnBaseFile')\"\n                                data-index=\"baseFile\"\n                                truncate\n                            >\n                                {{ item.baseFile }}\n\n                                <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n                                {% block sw_settings_snippet_set_list_card_list_grid_column_base_file_editor %}\n                                <template #inline-edit>\n                                    <sw-select-field\n                                        v-model:value=\"item.baseFile\"\n                                    >\n                                        <option\n                                            v-for=\"file in baseFiles\"\n                                            :key=\"file.name\"\n                                            :value=\"file.name\"\n                                        >\n                                            {{ file.name }}\n                                        </option>\n                                    </sw-select-field>\n                                </template>\n                                {% endblock %}\n                            </sw-grid-column>\n                            {% endblock %}\n\n                            <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n                            {% block sw_settings_snippet_set_list_card_list_grid_column_base_action %}\n                            <sw-grid-column\n                                flex=\"100px\"\n                                align=\"center\"\n                            >\n                                <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n                                {% block sw_settings_snippet_set_list_card_list_grid_column_base_action_buttons %}\n                                <sw-context-button>\n                                    <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n                                    {% block sw_settings_snippet_set_list_card_list_grid_column_base_action_btn_edit %}\n                                    <sw-context-menu-item\n                                        class=\"sw-setting-snippet-set-list__edit-action\"\n                                        :router-link=\"{ name: 'sw.settings.snippet.list', query: { ids: [item.id] } }\"\n                                    >\n                                        {{ contextMenuEditSnippet }}\n                                    </sw-context-menu-item>\n                                    {% endblock %}\n\n                                    <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n                                    {% block sw_settings_snippet_set_list_card_list_grid_column_base_action_btn_clone %}\n                                    <sw-context-menu-item\n                                        v-tooltip.left=\"getNoPermissionsTooltip('snippet.editor')\"\n                                        :disabled=\"!acl.can('snippet.creator') || undefined\"\n                                        @click=\"onClone(item.id)\"\n                                    >\n                                        {{ $tc('sw-settings-snippet.setList.contextMenuClone') }}\n                                    </sw-context-menu-item>\n                                    {% endblock %}\n\n                                    <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n                                    {% block sw_settings_snippet_set_list_card_list_grid_column_base_action_btn_delete %}\n                                    <sw-context-menu-item\n                                        v-tooltip.left=\"getNoPermissionsTooltip('snippet.deleter')\"\n                                        variant=\"danger\"\n                                        :disabled=\"!acl.can('snippet.deleter') || undefined\"\n                                        @click=\"onDeleteSet(item.id)\"\n                                    >\n                                        {{ $tc('sw-settings-snippet.setList.contextMenuDelete') }}\n                                    </sw-context-menu-item>\n                                    {% endblock %}\n                                </sw-context-button>\n                                {% endblock %}\n                            </sw-grid-column>\n                            {% endblock %}\n\n                            <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n                            {% block sw_settings_snippet_set_list_columns_delete_modal %}\n                            <sw-modal\n                                v-if=\"showDeleteModal === item.id\"\n                                :title=\"$tc('global.default.warning')\"\n                                variant=\"small\"\n                                @modal-close=\"onCloseDeleteModal\"\n                            >\n                                <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n                                {% block sw_settings_snippet_set_list_delete_modal_confirm_delete_text %}\n                                <p class=\"sw-settings-snippet-set-list__confirm-delete-text\">\n                                    {{ $tc('sw-settings-snippet.setList.textDeleteConfirm', 0, { name: item.name }) }}\n                                </p>\n                                {% endblock %}\n\n                                <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n                                {% block sw_settings_snippet_set_list_delete_modal_footer %}\n                                <template #modal-footer>\n                                    <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n                                    {% block sw_settings_snippet_set_list_delete_modal_cancel %}\n                                    <sw-button\n                                        size=\"small\"\n                                        @click=\"onCloseDeleteModal\"\n                                    >\n                                        {{ $tc('global.default.cancel') }}\n                                    </sw-button>\n                                    {% endblock %}\n\n                                    <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n                                    {% block sw_settings_snippet_set_list_delete_modal_confirm %}\n                                    <sw-button\n                                        variant=\"danger\"\n                                        size=\"small\"\n                                        @click=\"onConfirmDelete(item.id)\"\n                                    >\n                                        {{ $tc('sw-settings-snippet.setList.buttonDelete') }}\n                                    </sw-button>\n                                    {% endblock %}\n                                </template>\n                                {% endblock %}\n                            </sw-modal>\n                            {% endblock %}\n\n                            <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n                            {% block sw_settings_snippet_set_list_columns_clone_modal %}\n                            <sw-modal\n                                v-if=\"showCloneModal === item.id\"\n                                :title=\"$tc('sw-settings-snippet.setList.modalTitleClone')\"\n                                variant=\"small\"\n                                @modal-close=\"closeCloneModal\"\n                            >\n                                <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n                                {% block sw_settings_snippet_set_list_clone_modal_confirm_delete_text %}\n                                <p class=\"sw-settings-snippet-set-list__confirm-delete-text\">\n                                    {{ $tc('sw-settings-snippet.setList.textCloneConfirm', 0, { name: item.name }) }}\n                                </p>\n                                {% endblock %}\n\n                                <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n                                {% block sw_settings_snippet_set_list_clone_modal_footer %}\n                                <template #modal-footer>\n                                    <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n                                    {% block sw_settings_snippet_set_list_clone_modal_cancel %}\n                                    <sw-button\n                                        size=\"small\"\n                                        @click=\"closeCloneModal\"\n                                    >\n                                        {{ $tc('global.default.cancel') }}\n                                    </sw-button>\n                                    {% endblock %}\n\n                                    <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n                                    {% block sw_settings_snippet_set_list_clone_modal_confirm %}\n                                    <sw-button\n                                        variant=\"primary\"\n                                        size=\"small\"\n                                        @click=\"onConfirmClone(item.id)\"\n                                    >\n                                        {{ $tc('sw-settings-snippet.setList.buttonClone') }}\n                                    </sw-button>\n                                    {% endblock %}\n                                </template>\n                                {% endblock %}\n                            </sw-modal>\n                            {% endblock %}\n                        </template>\n                        {% endblock %}\n\n                        <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n                        {% block sw_settings_snippet_set_list_card_list_grid_pagination %}\n                        <template #pagination>\n                            <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n                            {% block sw_settings_snippet_set_list_card_list_grid_pagination_bar %}\n                            <sw-pagination\n                                :offset=\"offset\"\n                                :limit=\"limit\"\n                                :total=\"total\"\n                                :total-visible=\"7\"\n                                :page=\"page\"\n                                @page-change=\"onPageChange\"\n                            />\n                            {% endblock %}\n                        </template>\n                        {% endblock %}\n                    </sw-grid>\n                </template>\n                {% endblock %}\n            </sw-card>\n            {% endblock %}\n        </sw-card-view>\n    </template>\n    {% endblock %}\n</sw-page>\n{% endblock %}\n","/**\n * @package discovery\n */\nimport template from './sw-settings-snippet-set-list.html.twig';\nimport './sw-settings-snippet-set-list.scss';\n\nconst {\n    Mixin,\n    Data: { Criteria },\n} = Cicada;\n\n// eslint-disable-next-line sw-deprecation-rules/private-feature-declarations\nexport default {\n    template,\n\n    compatConfig: Cicada.compatConfig,\n\n    inject: [\n        'snippetSetService',\n        'repositoryFactory',\n        'acl',\n        'feature',\n    ],\n\n    mixins: [\n        Mixin.getByName('sw-settings-list'),\n    ],\n\n    data() {\n        return {\n            isLoading: false,\n            entityName: 'snippetSet',\n            sortBy: 'name',\n            sortDirection: 'ASC',\n            offset: 0,\n            baseFiles: [],\n            snippetSets: [],\n            showDeleteModal: false,\n            showCloneModal: false,\n            snippetsEditable: false,\n            selection: {},\n        };\n    },\n\n    metaInfo() {\n        return {\n            title: this.$createTitle(),\n        };\n    },\n\n    computed: {\n        snippetSetRepository() {\n            return this.repositoryFactory.create('snippet_set');\n        },\n\n        snippetSetCriteria() {\n            const criteria = new Criteria(this.page, this.limit);\n\n            criteria.addSorting(Criteria.sort('name', 'ASC'));\n\n            if (this.term) {\n                criteria.setTerm(this.term);\n            }\n\n            return criteria;\n        },\n\n        contextMenuEditSnippet() {\n            return this.acl.can('snippet.editor') ? this.$tc('global.default.edit') : this.$tc('global.default.view');\n        },\n\n        dateFilter() {\n            return Cicada.Filter.getByName('date');\n        },\n    },\n\n    methods: {\n        getList() {\n            this.isLoading = true;\n\n            return this.loadBaseFiles().then(() => {\n                return this.snippetSetRepository.search(this.snippetSetCriteria).then((response) => {\n                    this.total = response.total;\n                    this.snippetSets = response;\n                    this.isLoading = false;\n                });\n            });\n        },\n\n        loadBaseFiles() {\n            return this.snippetSetService.getBaseFiles().then((response) => {\n                this.baseFiles = Object.values(response.items ?? {});\n                this.baseFiles.sort((a, b) => a.name.localeCompare(b.name));\n            });\n        },\n\n        onAddSnippetSet() {\n            const newSnippetSet = this.snippetSetRepository.create();\n            newSnippetSet.baseFile = this.baseFiles[0].name;\n\n            const result = this.snippetSets.splice(0, 0, newSnippetSet);\n\n            if (result.length !== 0) {\n                return;\n            }\n\n            this.$nextTick(() => {\n                let foundRow = this.$refs.snippetSetList.$children.find((vueComponent) => {\n                    if (vueComponent.$options.name === 'AsyncComponentWrapper') {\n                        vueComponent = vueComponent?.$children[0];\n                    }\n\n                    return vueComponent?.item !== undefined && vueComponent.item.id === newSnippetSet.id;\n                });\n\n                if (!foundRow) {\n                    return false;\n                }\n\n                if (foundRow.$options.name === 'AsyncComponentWrapper') {\n                    foundRow = foundRow.$children[0];\n                }\n\n                foundRow.isEditingActive = true;\n\n                return true;\n            });\n        },\n\n        onInlineEditSave(item) {\n            this.isLoading = true;\n\n            const match = this.baseFiles.find((element) => {\n                return element.name === item.baseFile;\n            });\n\n            if (match && match.iso !== null) {\n                item.iso = match.iso;\n\n                this.snippetSetRepository\n                    .save(item)\n                    .then(() => {\n                        this.createInlineSuccessNote(item.name);\n                    })\n                    .catch(() => {\n                        this.createInlineErrorNote(item.name);\n                        this.getList();\n                    })\n                    .finally(() => {\n                        this.isLoading = false;\n                    });\n            } else {\n                this.isLoading = false;\n                this.createInlineErrorNote(item.name);\n                this.getList();\n            }\n        },\n\n        onEditSnippetSets() {\n            if (!this.snippetsEditable) {\n                this.createNotEditableErrorNote();\n\n                return;\n            }\n            const selection = Object.keys(this.snippetSelection);\n\n            this.$router.push({\n                name: 'sw.settings.snippet.list',\n                query: { ids: selection },\n            });\n        },\n\n        onSelectionChanged(selection) {\n            this.snippetSelection = selection;\n            this.snippetSelectionCount = Object.keys(selection).length;\n            this.snippetsEditable = this.snippetSelectionCount >= 1;\n        },\n\n        onInlineEditCancel() {\n            this.getList();\n        },\n\n        onDeleteSet(id) {\n            this.showDeleteModal = id;\n        },\n\n        onConfirmDelete(id) {\n            this.showDeleteModal = false;\n\n            return this.snippetSetRepository\n                .delete(id)\n                .then(() => {\n                    this.getList();\n                    this.createDeleteSuccessNote();\n                })\n                .catch(() => {\n                    this.onCloseDeleteModal();\n                    this.createDeleteErrorNote();\n                });\n        },\n\n        onClone(id) {\n            this.showCloneModal = id;\n        },\n\n        closeCloneModal() {\n            this.showCloneModal = false;\n        },\n\n        async onConfirmClone(id) {\n            this.isLoading = true;\n\n            try {\n                const clone = await this.snippetSetRepository.clone(id);\n                const set = await this.snippetSetRepository.get(clone.id);\n\n                if (!set) {\n                    return;\n                }\n\n                set.name = `${set.name} ${this.$tc('sw-settings-snippet.general.copyName')}`;\n\n                const baseName = set.name;\n                const checkUsedNames = (item) => item.name === set.name;\n                let copyCounter = 1;\n\n                while (this.snippetSets.some(checkUsedNames)) {\n                    copyCounter += 1;\n                    set.name = `${baseName} (${copyCounter})`;\n                }\n\n                try {\n                    await this.snippetSetRepository.save(set);\n\n                    this.createCloneSuccessNote();\n                } catch {\n                    await this.snippetSetRepository.delete(set.id);\n\n                    this.createCloneErrorNote();\n                } finally {\n                    this.getList();\n                }\n            } catch {\n                this.createCloneErrorNote();\n            } finally {\n                this.isLoading = false;\n                this.closeCloneModal();\n            }\n        },\n\n        createDeleteSuccessNote() {\n            this.createNotificationSuccess({\n                message: this.$tc('sw-settings-snippet.setList.deleteNoteSuccessMessage'),\n            });\n        },\n\n        createDeleteErrorNote() {\n            this.createNotificationError({\n                message: this.$tc('sw-settings-snippet.setList.deleteNoteErrorMessage'),\n            });\n        },\n\n        createInlineSuccessNote(name) {\n            this.createNotificationSuccess({\n                message: this.$tc('sw-settings-snippet.setList.inlineEditSuccessMessage', 0, { name }),\n            });\n        },\n\n        createInlineErrorNote(name) {\n            this.createNotificationError({\n                message: this.$tc('sw-settings-snippet.setList.inlineEditErrorMessage', name !== null, { name }),\n            });\n        },\n\n        createCloneSuccessNote() {\n            this.createNotificationSuccess({\n                message: this.$tc('sw-settings-snippet.setList.cloneSuccessMessage'),\n            });\n        },\n\n        createCloneErrorNote() {\n            this.createNotificationError({\n                message: this.$tc('sw-settings-snippet.setList.cloneErrorMessage'),\n            });\n        },\n\n        createNotEditableErrorNote() {\n            this.createNotificationError({\n                message: this.$tc('sw-settings-snippet.setList.notEditableNoteErrorMessage'),\n            });\n        },\n\n        getNoPermissionsTooltip(role, showOnDisabledElements = true) {\n            return {\n                showDelay: 300,\n                appearance: 'dark',\n                showOnDisabledElements,\n                disabled: this.acl.can(role),\n                message: this.$tc('sw-privileges.tooltip.warning'),\n            };\n        },\n    },\n};\n"],"names":["template","Mixin","Criteria","index","criteria","response","a","b","newSnippetSet","foundRow","vueComponent","item","match","element","selection","id","clone","set","baseName","checkUsedNames","copyCounter","name","role","showOnDisabledElements"],"mappings":"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"}