{"version":3,"file":"index-5guqX5v2.js","sources":["../../../app/administration/src/module/sw-order/page/sw-order-detail/sw-order-detail.html.twig","../../../app/administration/src/module/sw-order/state/order-detail.store.js","../../../app/administration/src/module/sw-order/page/sw-order-detail/index.js"],"sourcesContent":["<!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n{% block sw_order_detail %}\n<sw-page\n    v-if=\"orderId\"\n    class=\"sw-order-detail\"\n>\n    <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n    {% block sw_order_detail_header %}\n    <template #smart-bar-header>\n\n        <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n        {% block sw_order_detail_header_title %}\n        <h2 v-if=\"orderIdentifier\">\n            {{ $tc('sw-order.detail.textHeadline') }} {{ orderIdentifier }}\n\n            <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n            {% block sw_order_detail_header_label_manual_order %}\n            <sw-label\n                v-if=\"createdById\"\n                appearance=\"pill\"\n                size=\"small\"\n                class=\"sw-order-detail__manual-order-label\"\n            >\n                {{ $tc('sw-order.detail.labelManualOrder') }}\n            </sw-label>\n            {% endblock %}\n        </h2>\n        {% endblock %}\n\n        <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n        {% block sw_order_detail_header_title_new %}\n        <h2 v-else>\n            {{ $tc('sw-order.detail.textHeadlineNew') }}\n        </h2>\n        {% endblock %}\n\n    </template>\n    {% endblock %}\n\n    <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n    {% block sw_order_detail_language_switch %}\n    <template #language-switch>\n        <sw-language-switch\n            @on-change=\"onChangeLanguage\"\n        />\n    </template>\n    {% endblock %}\n\n    <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n    {% block sw_order_detail_actions %}\n    <template #smart-bar-actions>\n\n        <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n        {% block sw_order_detail_actions_slot_smart_bar_actions %}\n        <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n        {% block sw_order_detail_actions_abort %}\n        <sw-button\n            v-tooltip=\"{\n                message: $tc('sw-privileges.tooltip.warning'),\n                disabled: acl.can('order.editor'),\n                showOnDisabledElements: true\n            }\"\n            class=\"sw-order-detail__smart-bar-cancel-button\"\n            :disabled=\"isLoading || !acl.can('order.editor')\"\n            @click=\"onCancelEditing\"\n        >\n            {{ $tc('global.default.cancel') }}\n        </sw-button>\n        {% endblock %}\n\n        <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n        {% block sw_order_detail_actions_save %}\n        <sw-button-process\n            v-tooltip=\"{\n                message: $tc('sw-privileges.tooltip.warning'),\n                disabled: acl.can('order.editor'),\n                showOnDisabledElements: true\n            }\"\n            class=\"sw-order-detail__smart-bar-save-button\"\n            variant=\"primary\"\n            :disabled=\"isLoading || !acl.can('order.editor')\"\n            :is-loading=\"isLoading\"\n            :process-success=\"isSaveSuccessful\"\n            @update:process-success=\"saveEditsFinish\"\n            @click.prevent=\"onSaveEdits\"\n        >\n            {{ $tc('global.default.save') }}\n        </sw-button-process>\n        {% endblock %}\n        {% endblock %}\n\n    </template>\n    {% endblock %}\n\n    <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n    {% block sw_order_detail_content %}\n    <template #content>\n        <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n        {% block sw_order_detail_content_leave_page_modal %}\n        <sw-order-leave-page-modal\n            v-if=\"isDisplayingLeavePageWarning\"\n            @page-leave-cancel=\"onLeaveModalClose\"\n            @page-leave-confirm=\"onLeaveModalConfirm\"\n        />\n        {% endblock %}\n        <sw-card-view>\n\n            <sw-alert\n                v-if=\"isOrderEditing\"\n                class=\"sw-order-detail__alert\"\n                variant=\"warning\"\n            >\n                {{ $tc('sw-order.detail.textUnsavedOrderWarning') }}\n            </sw-alert>\n\n            <sw-alert\n                v-if=\"missingProductLineItems.length > 0\"\n                class=\"sw-order-detail__alert\"\n                variant=\"warning\"\n            >\n                {{ $tc('sw-order.detailBase.textMissingProductLineItems') }}\n\n                <ul class=\"sw_order_detail_base__missing_products_alert-list\">\n                    <li\n                        v-for=\"lineItem in missingProductLineItems\"\n                        :key=\"lineItem.id\"\n                    >\n                        {{ lineItem.label }}\n                    </li>\n                </ul>\n\n                {{ $tc('sw-order.detailBase.textMissingProductLineItemsDescription') }}\n            </sw-alert>\n\n            <sw-alert\n                v-if=\"convertedProductLineItems.length > 0\"\n                class=\"sw-order-detail__alert\"\n                variant=\"info\"\n            >\n                {{ $tc('sw-order.detailBase.textConvertedProductLineItems') }}\n\n                <ul class=\"sw_order_detail_base__converted_products_alert-list\">\n                    <li\n                        v-for=\"lineItem in convertedProductLineItems\"\n                        :key=\"lineItem.id\"\n                    >\n                        {{ lineItem.label }}\n                    </li>\n                </ul>\n\n                {{ $tc('sw-order.detailBase.textConvertedProductLineItemsDescription') }}\n            </sw-alert>\n\n            <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n            {% block sw_order_detail_content_tabs %}\n            <sw-tabs\n                v-if=\"showTabs\"\n                class=\"sw-order-detail__tabs\"\n                :class=\"{ 'has-warning': showWarningTabStyle }\"\n                position-identifier=\"sw-order-detail\"\n            >\n\n                <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n                {% block sw_order_detail_content_tabs_general %}\n                <sw-tabs-item\n                    class=\"sw-order-detail__tabs-tab-general\"\n                    :route=\"{ name: 'sw.order.detail.general', params: { id: $route.params.id } }\"\n                    :title=\"$tc('sw-order.detail.tabGeneral')\"\n                >\n                    {{ $tc('sw-order.detail.tabGeneral') }}\n                </sw-tabs-item>\n                {% endblock %}\n\n                <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n                {% block sw_order_detail_content_tabs_details %}\n                <sw-tabs-item\n                    class=\"sw-order-detail__tabs-tab-details\"\n                    :route=\"{ name: 'sw.order.detail.details', params: { id: $route.params.id } }\"\n                    :title=\"$tc('sw-order.detail.tabDetails')\"\n                >\n                    {{ $tc('sw-order.detail.tabDetails') }}\n                </sw-tabs-item>\n                {% endblock %}\n\n                <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n                {% block sw_order_detail_content_tabs_extension %}{% endblock %}\n            </sw-tabs>\n            {% endblock %}\n\n            <sw-extension-component-section\n                position-identifier=\"sw-order-detail__before-content\"\n            />\n\n            <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n            {% block sw_order_detail_content_view %}\n            <template v-if=\"isLoading\">\n                <sw-skeleton />\n                <sw-skeleton />\n            </template>\n\n            {# v-show is used here as underlying components influence the loading state and v-if would destroy this behaviour #}\n            <router-view\n                v-if=\"order\"\n                v-show=\"!isLoading\"\n                ref=\"baseComponent\"\n                :order-id=\"orderId\"\n                :is-editing=\"isEditing\"\n                :is-loading=\"isLoading\"\n                :is-save-successful=\"isSaveSuccessful\"\n                @identifier-change=\"updateIdentifier\"\n                @created-by-id-change=\"updateCreatedById\"\n                @loading-change=\"onUpdateLoading\"\n                @editing-change=\"onUpdateEditing\"\n                @save-and-recalculate=\"onSaveAndRecalculate\"\n                @recalculate-and-reload=\"onRecalculateAndReload\"\n                @reload-entity-data=\"reloadEntityData\"\n                @save-and-reload=\"onSaveAndReload\"\n                @save-edits=\"onSaveEdits\"\n                @error=\"onError\"\n            />\n            {% endblock %}\n\n        </sw-card-view>\n    </template>\n    {% endblock %}\n\n</sw-page>\n{% endblock %}\n","/**\n * @package checkout\n * @deprecated tag:v6.7.0 - Will be replaced with Pinia store\n */\n\n// eslint-disable-next-line sw-deprecation-rules/private-feature-declarations\nexport default {\n    namespaced: true,\n\n    state() {\n        return {\n            order: null,\n            loading: {\n                order: false,\n                states: false,\n            },\n            editing: false,\n            savedSuccessful: false,\n            versionContext: null,\n            orderAddressIds: [],\n        };\n    },\n\n    getters: {\n        isLoading: (state) => {\n            return Object.values(state.loading).some((loadState) => loadState);\n        },\n\n        isEditing: (state) => {\n            return state.editing;\n        },\n    },\n\n    mutations: {\n        setOrder(state, newOrder) {\n            state.order = newOrder;\n        },\n\n        setLoading(state, value) {\n            const name = value[0];\n            const data = value[1];\n\n            if (typeof data !== 'boolean') {\n                return;\n            }\n\n            if (state.loading[name] !== undefined) {\n                state.loading[name] = data;\n            }\n        },\n\n        setEditing(state, value) {\n            state.editing = value;\n        },\n\n        setSavedSuccessful(state, value) {\n            state.savedSuccessful = value;\n        },\n\n        setVersionContext(state, versionContext) {\n            state.versionContext = versionContext;\n        },\n\n        setOrderAddressIds(state, value) {\n            if (!value) {\n                state.orderAddressIds = [];\n                return;\n            }\n\n            const { orderAddressId, customerAddressId, type, edited } = value;\n\n            // Handle deletion scenario where orderAddressId matches customerAddressId\n            if (orderAddressId === customerAddressId && !edited) {\n                state.orderAddressIds = state.orderAddressIds.filter(\n                    (ids) => !(ids.orderAddressId === orderAddressId && ids.type === type),\n                );\n\n                return;\n            }\n\n            // Find index of the existing item\n            const index = state.orderAddressIds.findIndex(\n                (ids) => ids.orderAddressId === orderAddressId && ids.type === type,\n            );\n\n            // If found, update the existing item\n            if (index !== -1) {\n                state.orderAddressIds[index].customerAddressId = customerAddressId;\n\n                return;\n            }\n\n            // Add a new item if no existing item was found\n            state.orderAddressIds.push(value);\n        },\n    },\n};\n","import template from './sw-order-detail.html.twig';\nimport './sw-order-detail.scss';\nimport swOrderDetailState from '../../state/order-detail.store';\n\n/**\n * @package checkout\n */\n\nconst { State, Mixin, Utils } = Cicada;\nconst { Criteria } = Cicada.Data;\nconst { array } = Utils;\nconst { mapState } = Cicada.Component.getComponentHelper();\nconst ApiService = Cicada.Classes.ApiService;\n\n// eslint-disable-next-line sw-deprecation-rules/private-feature-declarations\nexport default {\n    template,\n\n    compatConfig: Cicada.compatConfig,\n\n    inject: [\n        'repositoryFactory',\n        'acl',\n        'orderService',\n        'feature',\n    ],\n\n    provide() {\n        return {\n            swOrderDetailOnIdentifierChange: this.updateIdentifier,\n            swOrderDetailOnCreatedByIdChange: this.updateCreatedById,\n            swOrderDetailOnLoadingChange: this.onUpdateLoading,\n            swOrderDetailOnEditingChange: this.onUpdateEditing,\n            swOrderDetailOnSaveAndRecalculate: this.onSaveAndRecalculate,\n            swOrderDetailOnRecalculateAndReload: this.onRecalculateAndReload,\n            swOrderDetailOnReloadEntityData: this.reloadEntityData,\n            swOrderDetailOnSaveAndReload: this.onSaveAndReload,\n            swOrderDetailOnSaveEdits: this.onSaveEdits,\n            swOrderDetailOnError: this.onError,\n        };\n    },\n\n    mixins: [\n        Mixin.getByName('notification'),\n    ],\n\n    props: {\n        orderId: {\n            type: String,\n            required: false,\n            default: null,\n        },\n    },\n\n    data() {\n        return {\n            /*\n             * @deprecated tag:v6.7.0 - identifier will be removed\n             */\n            identifier: '',\n            isEditing: false,\n            isLoading: true,\n            isSaveSuccessful: false,\n            createdById: '',\n            isDisplayingLeavePageWarning: false,\n            nextRoute: null,\n            hasNewVersionId: false,\n            hasOrderDeepEdit: false,\n            missingProductLineItems: [],\n            promotionsToDelete: [],\n            deliveryDiscountsToDelete: [],\n        };\n    },\n\n    metaInfo() {\n        return {\n            title: this.$createTitle(this.orderIdentifier),\n        };\n    },\n\n    computed: {\n        ...mapState('swOrderDetail', [\n            'order',\n            'versionContext',\n            'orderAddressIds',\n            'editing',\n            'loading',\n        ]),\n\n        orderIdentifier() {\n            return this.order !== null ? this.order.orderNumber : '';\n        },\n\n        orderChanges() {\n            if (!this.order) {\n                return false;\n            }\n\n            return this.orderRepository.hasChanges(this.order);\n        },\n\n        showTabs() {\n            return this.$route.meta.$module.routes.detail.children.length > 1;\n        },\n\n        showWarningTabStyle() {\n            return this.isOrderEditing;\n        },\n\n        isOrderEditing() {\n            return this.orderChanges || this.hasOrderDeepEdit || this.orderAddressIds?.length > 0;\n        },\n\n        orderRepository() {\n            return this.repositoryFactory.create('order');\n        },\n\n        automaticPromotions() {\n            return this.order.lineItems.filter((item) => item.type === 'promotion' && item.referencedId === null);\n        },\n\n        deliveryDiscounts() {\n            return array.slice(this.order.deliveries, 1) || [];\n        },\n\n        orderCriteria() {\n            const criteria = new Criteria(1, 25);\n\n            criteria.addAssociation('currency').addAssociation('orderCustomer.salutation').addAssociation('language');\n\n            criteria\n                .getAssociation('lineItems')\n                .addFilter(Criteria.equals('parentId', null))\n                .addSorting(Criteria.sort('position', 'ASC'));\n\n            criteria.getAssociation('lineItems.children').addSorting(Criteria.sort('position', 'ASC'));\n\n            criteria.addAssociation('salesChannel');\n\n            criteria\n                .addAssociation('addresses.country')\n                .addAssociation('addresses.countryState')\n                .addAssociation('deliveries.shippingMethod')\n                .addAssociation('deliveries.shippingOrderAddress')\n                .addAssociation('transactions.paymentMethod')\n                .addAssociation('tags');\n\n            criteria.addAssociation('stateMachineState');\n\n            criteria\n                .getAssociation('deliveries')\n                .addAssociation('stateMachineState')\n                .addSorting(Criteria.sort('shippingCosts.unitPrice', 'DESC'));\n\n            criteria\n                .getAssociation('transactions')\n                .addAssociation('stateMachineState')\n                .addSorting(Criteria.sort('createdAt'));\n\n            criteria.addAssociation('billingAddress');\n\n            return criteria;\n        },\n\n        convertedProductLineItems() {\n            return (\n                this.order?.lineItems?.filter((lineItem) => {\n                    return (\n                        lineItem.payload?.isConvertedProductLineItem &&\n                        lineItem.type === 'custom' &&\n                        !this.missingProductLineItems.includes(lineItem)\n                    );\n                }) || []\n            );\n        },\n    },\n\n    watch: {\n        orderId() {\n            this.createdComponent();\n        },\n\n        isOrderEditing(value) {\n            this.updateEditing(value);\n        },\n    },\n\n    beforeCreate() {\n        State.registerModule('swOrderDetail', swOrderDetailState);\n    },\n\n    beforeUnmount() {\n        this.beforeDestroyComponent();\n\n        State.unregisterModule('swOrderDetail');\n    },\n\n    beforeRouteLeave(to, from, next) {\n        if (this.isOrderEditing) {\n            this.nextRoute = next;\n            this.isDisplayingLeavePageWarning = true;\n        } else {\n            next();\n        }\n    },\n\n    created() {\n        this.createdComponent();\n    },\n\n    methods: {\n        createdComponent() {\n            Cicada.ExtensionAPI.publishData({\n                id: 'sw-order-detail-base__order',\n                path: 'order',\n                scope: this,\n            });\n\n            window.addEventListener('beforeunload', this.beforeDestroyComponent);\n\n            Cicada.State.commit('cicadaApps/setSelectedIds', this.orderId ? [this.orderId] : []);\n\n            this.createNewVersionId();\n        },\n\n        async beforeDestroyComponent() {\n            if (this.hasNewVersionId) {\n                const oldVersionContext = this.versionContext;\n                State.commit('swOrderDetail/setVersionContext', Cicada.Context.api);\n                this.hasNewVersionId = false;\n\n                // clean up recently created version\n                await this.orderRepository.deleteVersion(this.orderId, oldVersionContext.versionId, oldVersionContext);\n            }\n        },\n\n        updateIdentifier(identifier) {\n            this.identifier = identifier;\n        },\n\n        updateCreatedById(createdById) {\n            this.createdById = createdById;\n        },\n\n        onChangeLanguage() {\n            this.$root.$emit('language-change');\n        },\n\n        saveEditsFinish() {\n            this.isSaveSuccessful = false;\n            this.isEditing = false;\n        },\n\n        onStartEditing() {\n            this.$root.$emit('order-edit-start');\n        },\n\n        async onSaveEdits() {\n            this.isLoading = true;\n\n            await this.handleOrderAddressUpdate(this.orderAddressIds);\n\n            if (this.promotionsToDelete.length > 0) {\n                this.order.lineItems = this.order.lineItems.filter(\n                    (lineItem) => !this.promotionsToDelete.includes(lineItem.id),\n                );\n            }\n\n            if (this.order.lineItems.length === 0) {\n                this.createNotificationError({\n                    message: this.$tc('sw-order.detail.messageEmptyLineItems'),\n                });\n\n                this.createNewVersionId().then(() => {\n                    State.commit('swOrderDetail/setLoading', [\n                        'order',\n                        false,\n                    ]);\n                });\n\n                return;\n            }\n\n            if (this.deliveryDiscountsToDelete.length > 0) {\n                this.order.deliveries = this.order.deliveries.filter(\n                    (delivery) => !this.deliveryDiscountsToDelete.includes(delivery.id),\n                );\n            }\n\n            await this.orderRepository\n                .save(this.order, this.versionContext)\n                .then(() => {\n                    this.hasOrderDeepEdit = false;\n                    this.promotionsToDelete = [];\n                    this.deliveryDiscountsToDelete = [];\n                    return this.orderRepository.mergeVersion(this.versionContext.versionId, this.versionContext);\n                })\n                .then(() => this.createNewVersionId())\n                .then(() => {\n                    State.commit('swOrderDetail/setSavedSuccessful', true);\n                })\n                .catch((error) => {\n                    this.onError('error', error);\n                    this.isLoading = false;\n                });\n\n            this.$root.$emit('order-edit-save');\n        },\n\n        async handleOrderAddressUpdate(addressMappings) {\n            const mappings = [];\n\n            addressMappings.forEach((addressMapping) => {\n                // If they are the same means that the address has not changed, so skip it\n                if (addressMapping.customerAddressId === addressMapping.orderAddressId) {\n                    return;\n                }\n\n                const mapping = {\n                    customerAddressId: addressMapping.customerAddressId,\n                    type: addressMapping.type,\n                };\n\n                if (addressMapping.type === 'shipping') {\n                    mapping.deliveryId = this.order.deliveries[0].id;\n                }\n\n                mappings.push(mapping);\n            });\n\n            if (mappings.length === 0) {\n                State.commit('swOrderDetail/setOrderAddressIds', false);\n\n                return;\n            }\n\n            await this.updateOrderAddresses(mappings)\n                .then(() => {\n                    State.commit('swOrderDetail/setOrderAddressIds', false);\n                })\n                .catch((error) => {\n                    this.createNotificationError({\n                        message: error,\n                    });\n                });\n        },\n\n        onCancelEditing() {\n            this.isLoading = true;\n            State.commit('swOrderDetail/setLoading', [\n                'order',\n                true,\n            ]);\n\n            const oldVersionContext = this.versionContext;\n            State.commit('swOrderDetail/setVersionContext', Cicada.Context.api);\n            this.hasNewVersionId = false;\n\n            return this.orderRepository\n                .deleteVersion(this.orderId, oldVersionContext.versionId, oldVersionContext)\n                .then(() => {\n                    this.hasOrderDeepEdit = false;\n                    State.commit('swOrderDetail/setOrderAddressIds', false);\n                })\n                .catch((error) => {\n                    this.onError('error', error);\n                })\n                .finally(() => {\n                    this.missingProductLineItems = [];\n\n                    return this.createNewVersionId().then(() => {\n                        State.commit('swOrderDetail/setLoading', [\n                            'order',\n                            false,\n                        ]);\n                    });\n                });\n        },\n\n        async onSaveAndRecalculate() {\n            State.commit('swOrderDetail/setLoading', [\n                'order',\n                true,\n            ]);\n            this.isLoading = true;\n\n            this.order.lineItems = this.order.lineItems.filter((lineItem) => !this.automaticPromotions.includes(lineItem));\n            this.order.deliveries = this.order.deliveries.filter((delivery) => !this.deliveryDiscounts.includes(delivery));\n\n            try {\n                await this.orderRepository.save(this.order, this.versionContext);\n                await this.orderService.recalculateOrder(this.orderId, this.versionContext.versionId, {}, {});\n                await this.orderService.toggleAutomaticPromotions(this.orderId, this.versionContext.versionId, false);\n                await this.reloadEntityData();\n            } catch (error) {\n                this.onError('error', error);\n            } finally {\n                this.isLoading = false;\n                Cicada.State.commit('swOrderDetail/setLoading', [\n                    'order',\n                    false,\n                ]);\n            }\n        },\n\n        async onRecalculateAndReload() {\n            State.commit('swOrderDetail/setLoading', [\n                'order',\n                true,\n            ]);\n            try {\n                this.promotionsToDelete = this.automaticPromotions.map((promotion) => promotion.id);\n                this.deliveryDiscountsToDelete = this.deliveryDiscounts.map((discount) => discount.id);\n                await this.orderService.recalculateOrder(this.orderId, this.versionContext.versionId, {}, {});\n                await this.orderService.toggleAutomaticPromotions(this.orderId, this.versionContext.versionId, false);\n                await this.reloadEntityData();\n                this.order.lineItems = this.order.lineItems.filter(\n                    (lineItem) => !this.promotionsToDelete.includes(lineItem.id),\n                );\n                this.order.deliveries = this.order.deliveries.filter(\n                    (delivery) => !this.deliveryDiscountsToDelete.includes(delivery.id),\n                );\n            } catch (error) {\n                this.onError('error', error);\n                this.promotionsToDelete = [];\n                this.deliveryDiscountsToDelete = [];\n            } finally {\n                Cicada.State.commit('swOrderDetail/setLoading', [\n                    'order',\n                    false,\n                ]);\n            }\n        },\n\n        onSaveAndReload() {\n            State.commit('swOrderDetail/setLoading', [\n                'order',\n                true,\n            ]);\n\n            return this.orderRepository\n                .save(this.order, this.versionContext)\n                .then(() => this.reloadEntityData())\n                .catch((error) => {\n                    this.onError('error', error);\n                })\n                .finally(() => {\n                    Cicada.State.commit('swOrderDetail/setLoading', [\n                        'order',\n                        false,\n                    ]);\n                });\n        },\n\n        onUpdateLoading(loadingValue) {\n            this.isLoading = loadingValue;\n        },\n\n        onUpdateEditing(editingValue) {\n            this.isEditing = editingValue;\n        },\n\n        onError(error) {\n            let errorDetails = null;\n\n            try {\n                errorDetails = error.response.data.errors[0].detail;\n            } catch (e) {\n                errorDetails = '';\n            }\n\n            this.createNotificationError({\n                message: this.$tc('sw-order.detail.messageRecalculationError') + errorDetails,\n            });\n        },\n\n        onLeaveModalClose() {\n            this.nextRoute(false);\n            this.nextRoute = null;\n            this.isDisplayingLeavePageWarning = false;\n        },\n\n        onLeaveModalConfirm() {\n            this.isDisplayingLeavePageWarning = false;\n\n            this.$nextTick(() => {\n                this.nextRoute();\n            });\n        },\n\n        reloadEntityData(isSaved = true) {\n            State.commit('swOrderDetail/setLoading', [\n                'order',\n                true,\n            ]);\n\n            return this.orderRepository\n                .get(this.orderId, this.versionContext, this.orderCriteria)\n                .then((response) => {\n                    if (isSaved) {\n                        this.hasOrderDeepEdit = true;\n                    }\n\n                    State.commit('swOrderDetail/setOrder', response);\n                })\n                .finally(() => {\n                    Cicada.State.commit('swOrderDetail/setLoading', [\n                        'order',\n                        false,\n                    ]);\n                    this.isLoading = false;\n                });\n        },\n\n        createNewVersionId() {\n            // Reset the current version context\n            State.commit('swOrderDetail/setVersionContext', Cicada.Context.api);\n            this.hasNewVersionId = false;\n\n            return this.orderRepository\n                .createVersion(this.orderId, this.versionContext)\n                .then((newContext) => {\n                    this.hasNewVersionId = true;\n\n                    State.commit('swOrderDetail/setVersionContext', newContext);\n\n                    return this.reloadEntityData(false);\n                })\n                .then(() => this.convertMissingProductLineItems());\n        },\n\n        updateOrderAddresses(mappings) {\n            return this.orderService.updateOrderAddresses(\n                this.orderId,\n                mappings,\n                {},\n                ApiService.getVersionHeader(this.order.versionId),\n            );\n        },\n\n        updateEditing(value) {\n            State.commit('swOrderDetail/setEditing', value);\n        },\n\n        convertMissingProductLineItems() {\n            this.missingProductLineItems =\n                this.order?.lineItems?.filter((lineItem) => {\n                    return lineItem.productId === null && lineItem.type === 'product';\n                }) || [];\n\n            if (this.missingProductLineItems.length === 0) {\n                return Promise.resolve();\n            }\n\n            this.missingProductLineItems.forEach((lineItem) => {\n                lineItem.type = 'custom';\n                lineItem.productId = null;\n                lineItem.referencedId = null;\n                lineItem.payload.isConvertedProductLineItem = true;\n            });\n\n            return this.orderRepository.save(this.order, this.versionContext);\n        },\n    },\n};\n"],"names":["template","swOrderDetailState","state","loadState","newOrder","value","name","data","versionContext","orderAddressId","customerAddressId","type","edited","ids","index","State","Mixin","Utils","Criteria","array","mapState","ApiService","_a","item","criteria","_b","lineItem","to","from","next","oldVersionContext","identifier","createdById","delivery","error","addressMappings","mappings","addressMapping","mapping","promotion","discount","loadingValue","editingValue","errorDetails","isSaved","response","newContext"],"mappings":"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"}