const l=`{% block sw_media_library %} <div class="sw-media-library"> {% block sw_media_library_display_options %} <div class="sw-media-library__options-container"> <sw-media-display-options class="sw-media-library__display-options" :presentation="presentation" :sorting="sorting" :hide-presentation="compact" @media-presentation-change="presentation = $event" @media-sorting-change="sorting = $event" /> <sw-extension-teaser-popover position-identifier="sw-media-generate-image-button" /> {% block sw_media_index_create_folder %} <sw-button v-if="editable" v-tooltip="{ message: $tc('sw-privileges.tooltip.warning'), disabled: acl.can('media.creator'), showOnDisabledElements: true }" :disabled="!acl.can('media.creator')" class="sw-media-index__create-folder-action" variant="ghost" size="small" @click="createFolder" > {{ $tc('sw-media.index.buttonCreateFolder') }} </sw-button> {% endblock %} </div> {% endblock %} {% block sw_media_library_scroll_container %} <div ref="scrollContainer" class="sw-media-library__scroll-container" > <div class="sw-media-library__scroll-content"> {% block sw_media_library_media_grid %} <sw-media-grid ref="mediaGrid" class="sw-media-library_media-grid" :presentation="gridPresentation" @media-grid-selection-clear="clearSelection" > {% block sw_media_library_back_to_parent_item %} <sw-media-folder-item v-if="parentFolder && (!isLoading || selectableItems.length > 0)" :allow-edit="acl.can('media.editor')" :allow-delete="acl.can('media.deleter')" class="sw-media-library__parent-folder" :item="parentFolder" :show-selection-indicator="false" :show-context-menu-button="false" :allow-multi-select="allowMultiSelect" :is-list="showItemsAsList" is-parent @media-item-click="goToParentFolder" /> {% endblock %} {% block sw_media_library_media_item_list %} <sw-media-entity-mapper v-for="(gridItem, index) in selectableItems" :key="gridItem.getEntityName() + '_' + gridItem.id" :class="\`sw-media-grid-item__item--\${index}\`" :item="gridItem" :allow-edit="acl.can('media.editor')" :allow-delete="acl.can('media.deleter')" :selected="showItemSelected(gridItem)" :show-selection-indicator="isListSelect" :show-context-menu-button="editable" :is-list="showItemsAsList" :editable="editable" :allow-multi-select="allowMultiSelect" @media-item-replaced="refreshList" @media-item-delete="refreshList" @media-folder-delete="refreshList" @media-folder-remove="removeNewFolder" @media-folder-dissolve="refreshList" @media-folder-move="refreshList" @media-folder-changed="refreshList" v-on="mediaItemSelectionHandler" /> {% endblock %} <template v-if="isLoading"> <sw-skeleton variant="media" /> <sw-skeleton variant="media" /> <sw-skeleton variant="media" /> <sw-skeleton variant="media" /> <sw-skeleton variant="media" /> <sw-skeleton variant="media" /> <sw-skeleton variant="media" /> <sw-skeleton variant="media" /> </template> {% block sw_media_library_load_more_button %} <sw-button v-if="showLoadMoreButton" class="sw-media-library__load-more-button" @click="loadNextItems" > {{ $tc('sw-media.mediaLibrary.labelButtonLoadMore') }} </sw-button> {% endblock %} </sw-media-grid> {% endblock %} </div> </div> {% endblock %} {% block sw_media_library_empty_state %} <sw-empty-state v-if="shouldDisplayEmptyState" :title="$tc('sw-empty-state.messageNoResultTitle')" > <template #icon> <img :src="assetFilter('/administration/static/img/empty-states/media-empty-state.svg')" :alt="$tc('sw-empty-state.messageNoResultSubline')" > </template> <template #default> {{ $tc('sw-empty-state.messageNoResultSublineBefore') }} <router-link class="sw-empty-state__description-link" :to="{ name: 'sw.profile.index.searchPreferences' }" > {{ $tc('sw-empty-state.messageNoResultSublineLink') }} </router-link> {{ $tc('sw-empty-state.messageNoResultSublineAfter') }} </template> </sw-empty-state> {% endblock %} </div> {% endblock %}`,{Mixin:d,Context:s}=Cicada,{Criteria:i}=Cicada.Data,n={template:l,compatConfig:Cicada.compatConfig,inject:["repositoryFactory","acl","searchRankingService","feature"],emits:["update:selection","media-folder-change"],mixins:[d.getByName("media-grid-listener")],props:{selection:{type:Array,required:!0},folderId:{type:String,required:!1,default:null},pendingUploads:{type:Array,required:!1,default(){return[]}},limit:{type:Number,required:!1,default:25,validValues:[1,5,25,50,100,500],validator(e){return[1,5,25,50,100,500].includes(e)}},term:{type:String,required:!1,default:""},compact:{type:Boolean,required:!1,default:!1},editable:{type:Boolean,required:!1,default:!1},allowMultiSelect:{type:Boolean,required:!1,default:!0}},data(){return{isLoading:!1,selectedItems:this.selection,pageItem:1,pageFolder:1,itemLoaderDone:!1,folderLoaderDone:!1,items:[],subFolders:[],currentFolder:null,parentFolder:null,presentation:"medium-preview",sorting:{sortBy:"fileName",sortDirection:"asc"},folderSorting:{sortBy:"name",sortDirection:"asc"}}},computed:{shouldDisplayEmptyState(){return!this.isLoading&&(this.selectableItems.length===0||this.isValidTerm(this.term)&&this.selectableItems.length===0)},mediaRepository(){return this.repositoryFactory.create("media")},mediaFolderRepository(){return this.repositoryFactory.create("media_folder")},mediaFolderConfigurationRepository(){return this.repositoryFactory.create("media_folder_configuration")},selectableItems(){return[...this.subFolders,...this.pendingUploads,...this.items]},rootFolder(){const e=this.mediaFolderRepository.create(s.api);return e.id="",e.name=this.$tc("sw-media.index.rootFolderName"),e},gridPresentation(){return this.compact?"list-preview":this.presentation},showItemsAsList(){return this.gridPresentation==="list-preview"},showLoadMoreButton(){return this.isLoading||this.shouldDisplayEmptyState?!1:!(this.itemLoaderDone&&this.folderLoaderDone)},nextMediaCriteria(){const e=new i(this.pageItem,this.limit);return e.addSorting(i.sort(this.sorting.sortBy,this.sorting.sortDirection)).setTerm(this.term),["tags","productMedia.product","categories","productManufacturers.products","mailTemplateMedia.mailTemplate","avatarUsers","paymentMethods","shippingMethods","cmsBlocks.section.page","cmsSections.page","cmsPages"].forEach(t=>{const r=t.split(".");e.addAssociation(t);let a=null;r.forEach(o=>{a=a?`${a}.${o}`:o,e.getAssociation(a).setLimit(25)})}),e},nextFoldersCriteria(){const e=new i(this.pageFolder,this.limit).addSorting(i.sort(this.folderSorting.sortBy,this.folderSorting.sortDirection)).setTerm(this.term);return this.term||e.addFilter(i.equals("parentId",this.folderId)),e},assetFilter(){return Cicada.Filter.getByName("asset")}},watch:{selection(){this.selectedItems=this.selection,this.listSelectionStartItem!==null&&!this.selectedItems.includes(this.listSelectionStartItem)&&(this.listSelectionStartItem=this.selectedItems[0]||null)},selectedItems(){this.$emit("update:selection",this.selectedItems)},sorting(){this.mapFolderSorting(),this.refreshList()},folderId(){this.refreshList()},term(){this.refreshList()}},created(){this.createdComponent()},methods:{createdComponent(){this.refreshList(),!this.allowMultiSelect&&(this.handleMediaItemClicked=({item:e})=>{this._singleSelect(e)},this.handleMediaGridItemSelected=()=>{})},async refreshList(){this.isLoading!==!0&&(this.subFolders=[],this.items=[],this.isLoading=!0,this.clearSelection(),await this.fetchAssociatedFolders(),this.pageItem=1,this.pageFolder=1,this.itemLoaderDone=!1,this.folderLoaderDone=!1,this.loadItems())},isValidTerm(e){var t;return((t=e==null?void 0:e.trim())==null?void 0:t.length)>1},loadNextItems(){this.isLoading!==!0&&(this.isLoading=!0,this.loadItems())},mapFolderSorting(){switch(this.sorting.sortBy){case"createdAt":this.folderSorting.sortBy="createdAt",this.folderSorting.sortDirection=this.sorting.sortDirection;break;case"fileName":this.folderSorting.sortBy="name",this.folderSorting.sortDirection=this.sorting.sortDirection;break;default:this.folderSorting.sortBy="name",this.folderSorting.sortDirection="asc"}},isLoaderDone(e,t){return e.limit>=t.total||e.limit>t.length},async loadItems(){this.isLoading=!0;const[e,t]=await Promise.allSettled([this.nextFolders(),this.nextMedia()]);t.status==="fulfilled"?this.items.push(...t.value):this.itemLoaderDone=!1,e.status==="fulfilled"?this.subFolders.push(...e.value):this.folderLoaderDone=!1,this.isLoading=!1},async nextMedia(){if(this.itemLoaderDone)return[];let e=this.nextMediaCriteria;if(this.isValidTerm(this.term)){const r=await this.searchRankingService.getSearchFieldsByEntity("media");if(!r||Object.keys(r).length<1)return this.isLoading=!1,this.itemLoaderDone=!0,[];e=this.searchRankingService.buildSearchQueriesForEntity(r,this.term,e)}this.isValidTerm(this.term)||e.addFilter(i.equals("mediaFolderId",this.folderId)),this.folderId!=null&&this.isValidTerm(this.term)&&e.addFilter(i.multi("OR",[i.equals("mediaFolderId",this.folderId),i.contains("mediaFolder.path",this.folderId)]));const t=await this.mediaRepository.search(e,s.api);return this.itemLoaderDone=this.isLoaderDone(e,t),this.pageItem+=1,t},async nextFolders(){if(this.folderLoaderDone)return[];const e=await this.mediaFolderRepository.search(this.nextFoldersCriteria,s.api);return this.folderLoaderDone=this.isLoaderDone(this.nextFoldersCriteria,e),this.pageFolder+=1,e},async fetchAssociatedFolders(){if(this.folderId===null){this.currentFolder=null,this.parentFolder=null;return}this.currentFolder=await this.mediaFolderRepository.get(this.folderId,s.api),this.currentFolder&&this.currentFolder.parentId?this.parentFolder=await this.mediaFolderRepository.get(this.currentFolder.parentId,s.api):this.parentFolder=this.rootFolder},goToParentFolder(){this.$emit("media-folder-change",this.parentFolder.id||null)},clearSelection(){this.selectedItems=[],this.listSelectionStartItem=null},injectItem(e){if(e.getEntityName()==="media"){this.injectMedia(e);return}throw new Error("Injected entity has to be of 'type media'")},injectMedia(e){e.mediaFolderId===this.folderId&&(this.items.some(t=>t.id===e.id)||this.items.unshift(e))},async createFolder(){const e=this.mediaFolderRepository.create(s.api);if(e.parentId=this.folderId,e.name="",this.folderId!==null)e.configurationId=this.currentFolder.configurationId,e.useParentConfiguration=!0;else{const t=this.mediaFolderConfigurationRepository.create(s.api);t.createThumbnails=!0,t.keepProportions=!0,t.thumbnailQuality=80,await this.mediaFolderConfigurationRepository.save(t,s.api),e.configurationId=t.id,e.useParentConfiguration=!1}this.subFolders.unshift(e)},removeNewFolder(){this.subFolders.shift()}}};export{n as default};
//# sourceMappingURL=index-BZUQh1FW.js.map
