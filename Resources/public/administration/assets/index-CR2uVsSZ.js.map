{"version":3,"file":"index-CR2uVsSZ.js","sources":["../../../app/administration/src/module/sw-product/component/sw-product-variants/sw-product-variants-configurator/sw-product-variants-configurator-selection/sw-product-variants-configurator-selection.html.twig","../../../app/administration/src/module/sw-product/component/sw-product-variants/sw-product-variants-configurator/sw-product-variants-configurator-selection/index.js"],"sourcesContent":["<!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n{% block sw_property_search_field %}\n<div class=\"sw-property-search__toolbar sw-product-variants-configurator-selection__toolbar\">\n    <slot name=\"toolbar\">\n        <div class=\"sw-property-search__search-field-container\">\n            <slot name=\"toolbar-search-field\">\n                <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n                {% block sw_product_variants_configurator_selection_search_field %}\n                <sw-simple-search-field\n                    ref=\"searchField\"\n                    v-model:value=\"searchTerm\"\n                    size=\"small\"\n                    variant=\"form\"\n                    class=\"sw-property-search__search-field sw-product-variants-configurator-selection-search__search-field\"\n                    :placeholder=\"$tc('sw-property-search.placeholderSearch')\"\n                    :delay=\"600\"\n                    @search-term-change=\"onSearchOptions\"\n                />\n                {% endblock %}\n            </slot>\n        </div>\n    </slot>\n</div>\n{% endblock %}\n","/**\n * @package inventory\n */\n\nimport template from './sw-product-variants-configurator-selection.html.twig';\nimport './sw-product-variants-configurator-selection.scss';\n\nconst { Mixin } = Cicada;\n\n// eslint-disable-next-line sw-deprecation-rules/private-feature-declarations\nexport default {\n    template,\n\n    compatConfig: Cicada.compatConfig,\n\n    inject: ['repositoryFactory'],\n\n    emits: ['option-select'],\n\n    mixins: [\n        Mixin.getByName('notification'),\n    ],\n\n    props: {\n        product: {\n            type: Object,\n            required: true,\n        },\n        /**\n         * @deprecated tag:v6.7.0 - The disabled props will be removed.\n         */\n        disabled: {\n            type: Boolean,\n            required: false,\n            default: false,\n        },\n    },\n\n    watch: {\n        disabled() {\n            this.selectOptions(this.$refs.optionGrid);\n        },\n    },\n\n    computed: {\n        configuratorSettingsRepository() {\n            // get configuratorSettingsRepository\n            return this.repositoryFactory.create(\n                this.product.configuratorSettings.entity,\n                this.product.configuratorSettings.source,\n            );\n        },\n    },\n\n    created() {\n        this.createdComponent();\n    },\n\n    methods: {\n        /**\n         * Important: options = configurators\n         * Reason: Is extended from sw-property-search\n         */\n        addOptionCount() {\n            this.groups.forEach((group) => {\n                const optionCount = this.options.filter((configurator) => {\n                    // check if option belongs to group\n                    return configurator.option.groupId === group.id && !configurator.isDeleted;\n                });\n\n                // set reactive\n                this.$set(group, 'optionCount', optionCount.length);\n            });\n\n            this.$emit('option-select');\n        },\n\n        selectOptions(grid) {\n            grid.selectAll(false);\n            this.preventSelection = true;\n            this.options.forEach((configurator) => {\n                if (configurator.option) {\n                    configurator.option.gridDisabled = this.disabled && !configurator._isNew;\n                    grid.selectItem(!configurator.isDeleted, configurator.option);\n                }\n            });\n\n            this.preventSelection = false;\n        },\n\n        onOptionSelect(selection, item) {\n            if (this.preventSelection) {\n                return;\n            }\n\n            const exists = this.options.find((i) => i.optionId === item.id);\n\n            if (exists) {\n                this.options.remove(exists.id);\n                this.addOptionCount();\n                return;\n            }\n\n            const newOption = this.configuratorSettingsRepository.create();\n            newOption.optionId = item.id;\n            newOption.option = item;\n\n            this.options.add(newOption);\n\n            this.addOptionCount();\n        },\n    },\n};\n"],"names":["template","Mixin","index","group","optionCount","configurator","grid","selection","item","exists","i","newOption"],"mappings":"AAAA,MAAeA,EAAA,krBCOT,CAAE,MAAAC,CAAO,EAAG,OAGHC,EAAA,CACX,SAAAF,EAEA,aAAc,OAAO,aAErB,OAAQ,CAAC,mBAAmB,EAE5B,MAAO,CAAC,eAAe,EAEvB,OAAQ,CACJC,EAAM,UAAU,cAAc,CACjC,EAED,MAAO,CACH,QAAS,CACL,KAAM,OACN,SAAU,EACb,EAID,SAAU,CACN,KAAM,QACN,SAAU,GACV,QAAS,EACZ,CACJ,EAED,MAAO,CACH,UAAW,CACP,KAAK,cAAc,KAAK,MAAM,UAAU,CAC3C,CACJ,EAED,SAAU,CACN,gCAAiC,CAE7B,OAAO,KAAK,kBAAkB,OAC1B,KAAK,QAAQ,qBAAqB,OAClC,KAAK,QAAQ,qBAAqB,MAClD,CACS,CACJ,EAED,SAAU,CACN,KAAK,iBAAgB,CACxB,EAED,QAAS,CAKL,gBAAiB,CACb,KAAK,OAAO,QAASE,GAAU,CAC3B,MAAMC,EAAc,KAAK,QAAQ,OAAQC,GAE9BA,EAAa,OAAO,UAAYF,EAAM,IAAM,CAACE,EAAa,SACpE,EAGD,KAAK,KAAKF,EAAO,cAAeC,EAAY,MAAM,CAClE,CAAa,EAED,KAAK,MAAM,eAAe,CAC7B,EAED,cAAcE,EAAM,CAChBA,EAAK,UAAU,EAAK,EACpB,KAAK,iBAAmB,GACxB,KAAK,QAAQ,QAASD,GAAiB,CAC/BA,EAAa,SACbA,EAAa,OAAO,aAAe,KAAK,UAAY,CAACA,EAAa,OAClEC,EAAK,WAAW,CAACD,EAAa,UAAWA,EAAa,MAAM,EAEhF,CAAa,EAED,KAAK,iBAAmB,EAC3B,EAED,eAAeE,EAAWC,EAAM,CAC5B,GAAI,KAAK,iBACL,OAGJ,MAAMC,EAAS,KAAK,QAAQ,KAAMC,GAAMA,EAAE,WAAaF,EAAK,EAAE,EAE9D,GAAIC,EAAQ,CACR,KAAK,QAAQ,OAAOA,EAAO,EAAE,EAC7B,KAAK,eAAc,EACnB,MACH,CAED,MAAME,EAAY,KAAK,+BAA+B,OAAM,EAC5DA,EAAU,SAAWH,EAAK,GAC1BG,EAAU,OAASH,EAEnB,KAAK,QAAQ,IAAIG,CAAS,EAE1B,KAAK,eAAc,CACtB,CACJ,CACL"}