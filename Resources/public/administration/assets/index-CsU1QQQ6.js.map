{"version":3,"file":"index-CsU1QQQ6.js","sources":["../../../app/administration/src/app/component/form/sw-colorpicker-deprecated/sw-colorpicker.html.twig","../../../app/administration/src/app/component/form/sw-colorpicker-deprecated/index.js"],"sourcesContent":["<!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n{% block sw_colorpicker %}\n<div class=\"sw-colorpicker\">\n    <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n    {% block sw_colorpicker_contextual_field %}\n    <sw-contextual-field\n        v-bind=\"{\n            ...$attrs,\n            ...inheritanceAttrs\n        }\"\n        :name=\"formFieldName\"\n        :disabled=\"disabled\"\n        @inheritance-restore=\"$emit('inheritance-restore', $event)\"\n        @inheritance-remove=\"$emit('inheritance-remove', $event)\"\n    >\n        <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n        {% block sw_colorpicker_input_prefix %}\n        <template #sw-contextual-field-prefix>\n            <!-- eslint-disable-next-line vuejs-accessibility/click-events-have-key-events, vuejs-accessibility/no-static-element-interactions -->\n            <div\n                tabindex=\"0\"\n                role=\"button\"\n                class=\"sw-colorpicker__previewWrapper\"\n                @click=\"toggleColorPicker\"\n            >\n                <div\n                    class=\"sw-colorpicker__previewColor\"\n                    :class=\"{active:visible}\"\n                    :style=\"{ background: previewColorValue }\"\n                ></div>\n                <div\n                    class=\"sw-colorpicker__previewBackground\"\n                    :class=\"{'is--invalid': !isColorValid}\"\n                ></div>\n            </div>\n        </template>\n        {% endblock %}\n\n        <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n        {% block sw_colorpicker_input_field %}\n        <template #sw-field-input=\"{ disabled }\">\n            <input\n                v-model=\"colorValue\"\n                class=\"sw-colorpicker__input\"\n                :spellcheck=\"false\"\n                :disabled=\"disabled\"\n                :readonly=\"readonly\"\n                @click=\"onClickInput\"\n            >\n        </template>\n        {% endblock %}\n\n        <template #label>\n            <slot name=\"label\"></slot>\n        </template>\n\n    </sw-contextual-field>\n    {% endblock %}\n\n    <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n    {% block sw_colorpicker_popover %}\n    <sw-popover\n        v-if=\"visible\"\n        class=\"sw-colorpicker__colorpicker-position\"\n        :z-index=\"zIndex\"\n    >\n        <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n        {% block sw_colorpicker_colorpicker %}\n        <div class=\"sw-colorpicker__colorpicker\">\n            <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n            {% block sw_colorpicker_selection %}\n            <!-- eslint-disable-next-line vuejs-accessibility/no-static-element-interactions -->\n            <div\n                ref=\"colorPicker\"\n                class=\"sw-colorpicker__colorpicker-selection\"\n                :style=\"{ backgroundColor: selectorBackground }\"\n                @mousedown=\"setDragging\"\n            >\n                <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n                {% block sw_colorpicker_selector %}\n                <div\n                    class=\"sw-colorpicker__colorpicker-selector\"\n                    :style=\"selectorStyles\"\n                ></div>\n                {% endblock %}\n            </div>\n            {% endblock %}\n            <div class=\"sw-colorpicker__row\">\n                <div class=\"sw-colorpicker__sliders\">\n                    <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n                    {% block sw_colorpicker_hue_slider %}\n                    <!-- eslint-disable-next-line vuejs-accessibility/form-control-has-label -->\n                    <input\n                        v-model.number=\"hueValue\"\n                        class=\"sw-colorpicker__colorpicker-slider-range\"\n                        type=\"range\"\n                        min=\"0\"\n                        max=\"360\"\n                        step=\"1\"\n                    >\n                    {% endblock %}\n\n                    <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n                    {% block sw_colorpicker_alpha_slider %}\n                    <!-- eslint-disable-next-line vuejs-accessibility/form-control-has-label -->\n                    <input\n                        v-if=\"alpha\"\n                        v-model.number=\"alphaValue\"\n                        class=\"sw-colorpicker__alpha-slider\"\n                        type=\"range\"\n                        min=\"0\"\n                        max=\"1\"\n                        step=\"0.01\"\n                        :style=\"{ backgroundImage: sliderBackground }\"\n                    >\n                    {% endblock %}\n                </div>\n\n                <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n                {% block sw_colorpicker_preview %}\n                <div\n                    class=\"sw-colorpicker__colorpicker-wrapper\"\n                    :class=\"{ 'is--small': !alpha }\"\n                >\n                    <div\n                        class=\"sw-colorpicker__colorpicker-previewBackground\"\n                        :class=\"{ 'is--invalid': !isColorValid }\"\n                    ></div>\n                    <div\n                        class=\"sw-colorpicker__colorpicker-previewColor\"\n                        :style=\"{ background: previewColorValue}\"\n                    ></div>\n                </div>\n                {% endblock %}\n            </div>\n\n            <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n            {% block sw_colorpicker_inputs %}\n            <div class=\"sw-colorpicker__row sw-colorpicker__input-row\">\n                <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n                {% block sw_colorpicker_inputs_hex %}\n                <div class=\"sw-colorpicker__row-column\">\n                    <!-- eslint-disable-next-line vuejs-accessibility/form-control-has-label -->\n                    <input\n                        v-model.lazy=\"hexValue\"\n                        class=\"sw-colorpicker__colorpicker-input is--hex\"\n                        type=\"text\"\n                        :spellcheck=\"false\"\n                    >\n                    <span\n                        v-if=\"colorLabels\"\n                        class=\"sw-colorpicker__row-column-label\"\n                    >HEX</span>\n                </div>\n                {% endblock %}\n\n                <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n                {% block sw_colorpicker_inputs_red %}\n                <div class=\"sw-colorpicker__row-column\">\n                    <!-- eslint-disable-next-line vuejs-accessibility/form-control-has-label -->\n                    <input\n                        v-model.number=\"redValue\"\n                        class=\"sw-colorpicker__colorpicker-input\"\n                        type=\"number\"\n                        min=\"0\"\n                        max=\"255\"\n                        step=\"1\"\n                        placeholder=\"0\"\n                    >\n                    <span\n                        v-if=\"colorLabels\"\n                        class=\"sw-colorpicker__row-column-label\"\n                    >R</span>\n                </div>\n                {% endblock %}\n\n                <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n                {% block sw_colorpicker_inputs_green %}\n                <div class=\"sw-colorpicker__row-column\">\n                    <!-- eslint-disable-next-line vuejs-accessibility/form-control-has-label -->\n                    <input\n                        v-model.number=\"greenValue\"\n                        class=\"sw-colorpicker__colorpicker-input\"\n                        type=\"number\"\n                        min=\"0\"\n                        max=\"255\"\n                        step=\"1\"\n                        placeholder=\"0\"\n                    >\n                    <span\n                        v-if=\"colorLabels\"\n                        class=\"sw-colorpicker__row-column-label\"\n                    >G</span>\n                </div>\n                {% endblock %}\n\n                <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n                {% block sw_colorpicker_inputs_blue %}\n                <div class=\"sw-colorpicker__row-column\">\n                    <!-- eslint-disable-next-line vuejs-accessibility/form-control-has-label -->\n                    <input\n                        v-model.number=\"blueValue\"\n                        class=\"sw-colorpicker__colorpicker-input\"\n                        type=\"number\"\n                        min=\"0\"\n                        max=\"255\"\n                        step=\"1\"\n                        placeholder=\"0\"\n                    >\n                    <span\n                        v-if=\"colorLabels\"\n                        class=\"sw-colorpicker__row-column-label\"\n                    >B</span>\n                </div>\n                {% endblock %}\n\n                <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n                {% block sw_colorpicker_inputs_alpha %}\n                <div\n                    v-if=\"alpha\"\n                    class=\"sw-colorpicker__row-column\"\n                >\n                    <!-- eslint-disable-next-line vuejs-accessibility/form-control-has-label -->\n                    <input\n                        v-model.number=\"integerAlpha\"\n                        class=\"sw-colorpicker__colorpicker-input\"\n                        type=\"number\"\n                        min=\"0\"\n                        max=\"100\"\n                        step=\"1\"\n                        placeholder=\"0\"\n                    >\n                    <span\n                        v-if=\"colorLabels\"\n                        class=\"sw-colorpicker__row-column-label\"\n                    >Alpha</span>\n                </div>\n                {% endblock %}\n            </div>\n            {% endblock %}\n        </div>\n        {% endblock %}\n    </sw-popover>\n    {% endblock %}\n</div>\n{% endblock %}\n","import template from './sw-colorpicker.html.twig';\nimport './sw-colorpicker.scss';\n\nconst { Component, Mixin } = Cicada;\nconst debounce = Cicada.Utils.debounce;\n\n/**\n * @package admin\n *\n * @private\n * @description\n * The color picker field allows you to select a custom color.\n * @status ready\n * @example-type dynamic\n * @component-example\n * <sw-colorpicker\n *      value=\"#6ed59f\"\n *      colorOutput=\"auto\"\n *      :alpha=\"true\"\n *      :disabled=\"false\"\n *      :colorLabels=\"true\"\n *      zIndex=\"100\">\n * </sw-colorpicker>\n */\nComponent.register('sw-colorpicker-deprecated', {\n    template,\n\n    inject: ['feature'],\n\n    emits: [\n        'update:value',\n        'inheritance-restore',\n        'inheritance-remove',\n    ],\n\n    mixins: [\n        Mixin.getByName('sw-form-field'),\n        Mixin.getByName('remove-api-error'),\n    ],\n\n    compatConfig: Cicada.compatConfig,\n\n    props: {\n        value: {\n            type: String,\n            required: false,\n            default: '',\n        },\n\n        colorOutput: {\n            type: String,\n            required: false,\n            default: 'auto',\n            validValues: [\n                'auto',\n                'hex',\n                'hsl',\n                'rgb',\n            ],\n        },\n\n        alpha: {\n            type: Boolean,\n            required: false,\n            // eslint-disable-next-line vue/no-boolean-default\n            default: true,\n        },\n\n        disabled: {\n            type: Boolean,\n            required: false,\n            default: false,\n        },\n\n        readonly: {\n            type: Boolean,\n            required: false,\n            default: false,\n        },\n\n        colorLabels: {\n            type: Boolean,\n            required: false,\n            // eslint-disable-next-line vue/no-boolean-default\n            default: true,\n        },\n\n        zIndex: {\n            type: [\n                Number,\n                null,\n            ],\n            required: false,\n            default: null,\n        },\n    },\n\n    data() {\n        return {\n            localValue: this.value,\n            visible: false,\n            isDragging: false,\n            userInput: null,\n            luminanceValue: 50,\n            saturationValue: 50,\n            hueValue: 0,\n            alphaValue: 1,\n        };\n    },\n\n    computed: {\n        colorValue: {\n            get() {\n                return this.localValue;\n            },\n\n            set(newColor) {\n                this.localValue = newColor;\n                this.debounceEmitColorValue();\n            },\n        },\n\n        integerAlpha: {\n            get() {\n                return Math.floor(this.alphaValue * 100);\n            },\n\n            set(newAlphaValue) {\n                this.alphaValue = newAlphaValue / 100;\n            },\n        },\n\n        sliderBackground() {\n            // eslint-disable-next-line max-len\n            return `linear-gradient(90deg, hsla(${this.hueValue}, ${this.saturationValue}%, ${this.luminanceValue}%, 0), hsl(${this.hueValue}, ${this.saturationValue}%, ${this.luminanceValue}%)), url(\"data:image/svg+xml,%3Csvg xmlns=\\'http://www.w3.org/2000/svg\\' viewBox=\\'0 0 20 20\\' width=\\'100%25\\' height=\\'100%25\\'%3E%3Crect width=\\'10\\' height=\\'10\\' x=\\'00\\' y=\\'00\\' fill=\\'%23cdd5db\\' /%3E%3Crect width=\\'10\\' height=\\'10\\' x=\\'10\\' y=\\'10\\' fill=\\'%23cdd5db\\' /%3E%3C/svg%3E\")`;\n        },\n\n        isColorValid() {\n            return /^rgb/.test(this.colorValue) || /^hsl/.test(this.colorValue) || /^#/.test(this.colorValue);\n        },\n\n        previewColorValue() {\n            if (!this.isColorValid) {\n                return 'transparent';\n            }\n\n            return this.colorValue;\n        },\n\n        selectorBackground() {\n            return `hsl(${this.hueValue}, 100%, 50%)`;\n        },\n\n        redValue: {\n            get() {\n                return this.convertHSLtoRGB(this.hueValue, this.saturationValue, this.luminanceValue, this.alphaValue).red;\n            },\n\n            set(newRedValue) {\n                this.setSingleRGBValue(newRedValue, 'red');\n            },\n        },\n\n        greenValue: {\n            get() {\n                return this.convertHSLtoRGB(this.hueValue, this.saturationValue, this.luminanceValue, this.alphaValue).green;\n            },\n\n            set(newGreenValue) {\n                this.setSingleRGBValue(newGreenValue, 'green');\n            },\n        },\n\n        blueValue: {\n            get() {\n                return this.convertHSLtoRGB(this.hueValue, this.saturationValue, this.luminanceValue, this.alphaValue).blue;\n            },\n\n            set(newBlueValue) {\n                this.setSingleRGBValue(newBlueValue, 'blue');\n            },\n        },\n\n        rgbValue() {\n            return this.convertHSLtoRGB(\n                Math.abs(this.hueValue),\n                Math.abs(this.saturationValue),\n                Math.abs(this.luminanceValue),\n                Math.abs(this.alphaValue),\n            ).string;\n        },\n\n        hslValue() {\n            const hue = Math.abs(this.roundingFloat(this.hueValue));\n            const saturation = Math.abs(this.roundingFloat(this.saturationValue));\n            const luminance = Math.abs(this.roundingFloat(this.luminanceValue));\n\n            if (this.alphaValue !== 1) {\n                const alpha = Math.abs(this.roundingFloat(this.alphaValue));\n                return `hsla(${hue}, ${saturation}%, ${luminance}%, ${alpha})`;\n            }\n\n            return `hsl(${hue}, ${saturation}%, ${luminance}%)`;\n        },\n\n        hexValue: {\n            get() {\n                if (this.alphaValue < 1) {\n                    return this.convertHSLtoHEX(this.hueValue, this.saturationValue, this.luminanceValue, this.alphaValue);\n                }\n\n                return this.convertHSLtoHEX(this.hueValue, this.saturationValue, this.luminanceValue);\n            },\n\n            set(newValue) {\n                // checking if the new value is an actual hex value\n                const newHexValue = newValue;\n                const validHexCharacters = /^#[0-9a-f]{3,8}/i;\n\n                if (!validHexCharacters.test(newHexValue)) {\n                    return;\n                }\n\n                const hslValue = this.convertHEXtoHSL(newValue);\n                if (hslValue === false) {\n                    return;\n                }\n\n                this.setHslaValues(hslValue.hue, hslValue.saturation, hslValue.luminance, hslValue.alpha || this.alphaValue);\n            },\n        },\n\n        convertedValue() {\n            switch (this.colorOutput) {\n                case 'auto': {\n                    return this.alphaValue < 1 ? this.rgbValue : this.hexValue;\n                }\n\n                case 'rgb': {\n                    return this.rgbValue;\n                }\n\n                case 'hsl': {\n                    return this.hslValue;\n                }\n\n                case 'hex':\n                default: {\n                    return this.hexValue;\n                }\n            }\n        },\n\n        selectorPositionX() {\n            const offsetX = 9;\n            return `calc(${this.saturationValue}% - ${offsetX}px)`;\n        },\n\n        selectorPositionY() {\n            const offsetY = 9;\n            return `calc(${Math.abs(this.luminanceValue - 100)}% - ${offsetY}px)`;\n        },\n\n        selectorStyles() {\n            return {\n                backgroundColor: this.hslValue,\n                top: this.selectorPositionY,\n                left: this.selectorPositionX,\n            };\n        },\n    },\n\n    watch: {\n        value() {\n            this.colorValue = this.value;\n        },\n\n        hslValue() {\n            this.colorValue = this.convertedValue;\n        },\n\n        visible(visibleStatus) {\n            if (!visibleStatus) {\n                return;\n            }\n\n            const color = this.colorValue;\n\n            if (/^#/.test(color)) {\n                // if color is a hex value\n                const convertedHSLValue = this.convertHEXtoHSL(this.colorValue);\n\n                this.setHslaValues(\n                    convertedHSLValue.hue,\n                    convertedHSLValue.saturation,\n                    convertedHSLValue.luminance,\n                    convertedHSLValue.alpha,\n                );\n            } else if (/^rgb/.test(color)) {\n                // if color is a rgb value\n                const rgbValues = this.splitRGBValues(this.colorValue);\n                const convertedHSLValue = this.convertRGBtoHSL(rgbValues.red, rgbValues.green, rgbValues.blue);\n\n                this.setHslaValues(\n                    convertedHSLValue.hue,\n                    convertedHSLValue.saturation,\n                    convertedHSLValue.luminance,\n                    rgbValues.alpha,\n                );\n            } else if (/^hsl/.test(color)) {\n                // if color is an hsl value\n                const hslValues = this.splitHSLValues(this.colorValue);\n\n                this.setHslaValues(hslValues.hue, hslValues.saturation, hslValues.luminance, hslValues.alpha);\n            }\n        },\n    },\n\n    beforeUnmount() {\n        this.componentBeforeDestroy();\n    },\n\n    methods: {\n        componentBeforeDestroy() {\n            window.removeEventListener('mousedown', this.outsideClick);\n        },\n\n        debounceEmitColorValue: debounce(function emitValue() {\n            this.$emit('update:value', this.colorValue);\n        }, 50),\n\n        outsideClick(e) {\n            if (/^sw-colorpicker__previewColor.active/.test(e.target._prevClass)) {\n                return;\n            }\n\n            const isColorpicker = e.target.closest('.sw-colorpicker__colorpicker');\n\n            if (isColorpicker !== null) {\n                return;\n            }\n\n            this.visible = false;\n            this.removeOutsideClickEvent();\n        },\n\n        setOutsideClickEvent() {\n            window.addEventListener('mousedown', this.outsideClick);\n        },\n\n        removeOutsideClickEvent() {\n            window.removeEventListener('mousedown', this.outsideClick);\n        },\n\n        toggleColorPicker() {\n            if (this.disabled) {\n                return;\n            }\n\n            this.visible = !this.visible;\n\n            if (this.visible) {\n                this.setOutsideClickEvent();\n\n                return;\n            }\n\n            this.removeOutsideClickEvent();\n        },\n\n        moveSelector(event) {\n            event.preventDefault();\n\n            if (!this.isDragging) {\n                return;\n            }\n\n            const colorpickerLocation = this.$refs.colorPicker.getBoundingClientRect();\n            const cursorX = event.clientX - colorpickerLocation.left;\n            const cursorY = event.clientY - colorpickerLocation.top;\n\n            const xValue = (cursorX / colorpickerLocation.width) * 100;\n            let correctedXValue;\n\n            if (xValue > 100) {\n                correctedXValue = 100;\n            } else if (xValue < 0) {\n                correctedXValue = 0;\n            } else {\n                correctedXValue = xValue;\n            }\n\n            const yValue = (cursorY / colorpickerLocation.height - 1) * -100;\n            let correctedYValue;\n\n            if (yValue > 100) {\n                correctedYValue = 100;\n            } else if (yValue < 0) {\n                correctedYValue = 0;\n            } else {\n                correctedYValue = yValue;\n            }\n\n            this.saturationValue = this.roundingFloat(correctedXValue);\n            this.luminanceValue = this.roundingFloat(correctedYValue);\n        },\n\n        setDragging(event) {\n            document.body.style.userSelect = 'none';\n            this.isDragging = true;\n            this.moveSelector(event);\n\n            window.addEventListener('mousemove', this.moveSelector, false);\n            window.addEventListener('mouseup', this.removeDragging, false);\n        },\n\n        removeDragging() {\n            document.body.style.userSelect = null;\n            this.isDragging = false;\n\n            window.removeEventListener('mousemove', this.moveSelector);\n            window.removeEventListener('mouseup', this.removeDragging);\n        },\n\n        setSingleRGBValue(newColorValue, type) {\n            const validTypes = [\n                'red',\n                'green',\n                'blue',\n            ];\n\n            if (validTypes.indexOf(type) === -1) {\n                return;\n            }\n\n            let sanitizedColorValue = null;\n\n            if (newColorValue > 255) {\n                sanitizedColorValue = 255;\n            } else if (newColorValue < 0) {\n                sanitizedColorValue = 0;\n            } else {\n                sanitizedColorValue = newColorValue;\n            }\n\n            const hslValue = this.convertRGBtoHSL(\n                type === 'red' ? sanitizedColorValue : this.redValue,\n                type === 'green' ? sanitizedColorValue : this.greenValue,\n                type === 'blue' ? sanitizedColorValue : this.blueValue,\n            );\n\n            this.setHslaValues(hslValue.hue, hslValue.saturation, hslValue.luminance, this.alphaValue);\n        },\n\n        setHslaValues(hue, saturation, luminance, alpha) {\n            this.hueValue = hue;\n            this.luminanceValue = luminance;\n            this.saturationValue = saturation;\n            this.alphaValue = !alpha ? 1 : alpha;\n        },\n\n        splitRGBValues(rgbString) {\n            const rgbValues = rgbString.slice(rgbString.indexOf('(') + 1, rgbString.length - 1).split(', ');\n\n            const red = Number(rgbValues[0]);\n            const green = Number(rgbValues[1]);\n            const blue = Number(rgbValues[2]);\n\n            const returnValue = {\n                red,\n                green,\n                blue,\n            };\n\n            if (/a/.test(rgbString)) {\n                returnValue.alpha = Number(rgbValues[3]);\n            }\n\n            return returnValue;\n        },\n\n        splitHSLValues(hslString) {\n            const hslValue = hslString.slice(hslString.indexOf('(') + 1, hslString.length - 1).split(', ');\n\n            // Removing the '%' character in string\n            const hue = Number(hslValue[0]);\n            const saturation = Number(hslValue[1].slice(0, hslValue[1].length - 1));\n            const luminance = Number(hslValue[2].slice(0, hslValue[2].length - 1));\n            const alpha = hslValue[3] || hslValue[3] === 0 ? Number(hslValue[3]) : undefined;\n\n            const returnValue = {\n                hue,\n                saturation,\n                luminance,\n            };\n\n            if (alpha !== undefined) {\n                returnValue.alpha = alpha;\n            }\n\n            return returnValue;\n        },\n\n        convertHSLtoRGB(previousHue, previousSaturation, previousLuminance, previousAlpha) {\n            const hsla = {\n                hue: previousHue,\n                saturation: previousSaturation,\n                luminance: previousLuminance,\n                alpha: previousAlpha,\n            };\n\n            return this.convertHSL('rgb', hsla);\n        },\n\n        convertHSLtoHEX(previousHue, previousSaturation, previousLuminance, previousAlpha) {\n            const hsla = {\n                hue: previousHue,\n                saturation: previousSaturation,\n                luminance: previousLuminance,\n                alpha: previousAlpha,\n            };\n\n            return this.convertHSL('hex', hsla);\n        },\n\n        convertHSL(mode, color) {\n            const validModes = [\n                'hex',\n                'rgb',\n            ];\n            if (!validModes.includes(mode)) {\n                return {};\n            }\n\n            // eslint-disable-next-line prefer-const\n            let { hue, saturation, luminance, alpha } = color;\n\n            saturation /= 100;\n            luminance /= 100;\n\n            const chroma = (1 - Math.abs(2 * luminance - 1)) * saturation;\n            const x = chroma * (1 - Math.abs(((hue / 60) % 2) - 1));\n            const m = luminance - chroma / 2;\n            let red = 0;\n            let green = 0;\n            let blue = 0;\n\n            if (hue >= 0 && hue < 60) {\n                red = chroma;\n                green = x;\n                blue = 0;\n            } else if (hue >= 60 && hue < 120) {\n                red = x;\n                green = chroma;\n                blue = 0;\n            } else if (hue >= 120 && hue < 180) {\n                red = 0;\n                green = chroma;\n                blue = x;\n            } else if (hue >= 180 && hue < 240) {\n                red = 0;\n                green = x;\n                blue = chroma;\n            } else if (hue >= 240 && hue < 300) {\n                red = x;\n                green = 0;\n                blue = chroma;\n            } else if (hue >= 300 && hue < 361) {\n                red = chroma;\n                green = 0;\n                blue = x;\n            }\n\n            red = Math.round((red + m) * 255);\n            green = Math.round((green + m) * 255);\n            blue = Math.round((blue + m) * 255);\n\n            if (mode === 'hex') {\n                // convert colors into hex values\n                red = red.toString(16);\n                green = green.toString(16);\n                blue = blue.toString(16);\n\n                // Prepend 0s, if necessary\n                if (red.length === 1) {\n                    red = `0${red}`;\n                }\n                if (green.length === 1) {\n                    green = `0${green}`;\n                }\n                if (blue.length === 1) {\n                    blue = `0${blue}`;\n                }\n\n                if (alpha === undefined) {\n                    return `#${red}${green}${blue}`;\n                }\n\n                // convert alpha into hex value\n                alpha = Math.round(alpha * 255).toString(16);\n\n                if (alpha.length === 1) {\n                    alpha = `0${alpha}`;\n                }\n\n                return `#${red}${green}${blue}${alpha}`;\n            }\n\n            const rgbValue = {\n                string: `rgb(${red}, ${green}, ${blue})`,\n                red,\n                green,\n                blue,\n            };\n\n            if (alpha !== 1) {\n                rgbValue.string = `rgba(${red}, ${green}, ${blue}, ${alpha})`;\n                rgbValue.alpha = alpha;\n            }\n\n            return rgbValue;\n        },\n\n        convertRGBtoHSL(previousRed, previousGreen, previousBlue) {\n            let red = previousRed;\n            let green = previousGreen;\n            let blue = previousBlue;\n\n            if (/^-/.test(red)) {\n                red = Math.abs(red);\n            }\n\n            if (/^-/.test(blue)) {\n                blue = Math.abs(blue);\n            }\n\n            if (/^-/.test(green)) {\n                green = Math.abs(green);\n            }\n\n            // Make r, g, and b fractions of 1\n            red /= 255;\n            green /= 255;\n            blue /= 255;\n\n            // Find greatest and smallest channel values\n            const cmin = Math.min(red, green, blue);\n            const cmax = Math.max(red, green, blue);\n            const delta = cmax - cmin;\n            let hue = 0;\n            let saturation = 0;\n            let luminance = 0;\n\n            // Calculate hue\n            // No difference\n            if (delta === 0) {\n                hue = 0;\n            } else if (cmax === red) {\n                hue = ((green - blue) / delta) % 6;\n            } else if (cmax === green) {\n                hue = (blue - red) / delta + 2;\n            } else {\n                hue = (red - green) / delta + 4;\n            }\n\n            hue = this.roundingFloat(hue * 60);\n\n            // Make negative hues positive behind 360°\n            if (hue < 0) {\n                hue += 360;\n            }\n\n            // Calculate lightness\n            luminance = (cmax + cmin) / 2;\n\n            // Calculate saturation\n            saturation = delta === 0 ? 0 : delta / (1 - Math.abs(2 * luminance - 1));\n\n            saturation = this.roundingFloat(+(saturation * 100), 1);\n            luminance = this.roundingFloat(+(luminance * 100), 1);\n\n            return {\n                string: `hsl(${hue},${saturation}%,${luminance}%)`,\n                hue,\n                saturation,\n                luminance,\n            };\n        },\n\n        convertHEXtoHSL(previousHex) {\n            const hex = previousHex;\n\n            // Convert hex to RGB first\n            let red = 0;\n            let green = 0;\n            let blue = 0;\n            let alpha;\n\n            if (hex.length !== 5 && hex.length !== 9 && hex.length !== 4 && hex.length !== 7) {\n                return false;\n            }\n\n            // with the first two if statements, check if hex string has an alpha value\n            // then check if hex string is short or long\n            if (hex.length === 5) {\n                red = `0x${hex[1]}${hex[1]}`;\n                green = `0x${hex[2]}${hex[2]}`;\n                blue = `0x${hex[3]}${hex[3]}`;\n                alpha = `0x${hex[4]}${hex[4]}`;\n            } else if (hex.length === 9) {\n                red = `0x${hex[1]}${hex[2]}`;\n                green = `0x${hex[3]}${hex[4]}`;\n                blue = `0x${hex[5]}${hex[6]}`;\n                alpha = `0x${hex[7]}${hex[8]}`;\n            } else if (hex.length === 4) {\n                red = `0x${hex[1]}${hex[1]}`;\n                green = `0x${hex[2]}${hex[2]}`;\n                blue = `0x${hex[3]}${hex[3]}`;\n            } else if (hex.length === 7) {\n                red = `0x${hex[1]}${hex[2]}`;\n                green = `0x${hex[3]}${hex[4]}`;\n                blue = `0x${hex[5]}${hex[6]}`;\n            }\n\n            // Then to HSL\n            red /= 255;\n            green /= 255;\n            blue /= 255;\n\n            const cmin = Math.min(red, green, blue);\n            const cmax = Math.max(red, green, blue);\n            const delta = cmax - cmin;\n\n            let hue = 0;\n            let saturation = 0;\n            let luminance = 0;\n\n            if (delta === 0) {\n                hue = 0;\n            } else if (cmax === red) {\n                hue = ((green - blue) / delta) % 6;\n            } else if (cmax === green) {\n                hue = (blue - red) / delta + 2;\n            } else {\n                hue = (red - green) / delta + 4;\n            }\n\n            hue = this.roundingFloat(hue * 60);\n\n            if (hue < 0) {\n                hue += 360;\n            }\n\n            luminance = (cmax + cmin) / 2;\n            saturation = delta === 0 ? 0 : delta / (1 - Math.abs(2 * luminance - 1));\n            saturation = this.roundingFloat(+(saturation * 100), 1);\n            luminance = this.roundingFloat(+(luminance * 100), 1);\n\n            const hslValue = {\n                string: `hsl(${hue}, ${saturation}%, ${luminance}%)`,\n                hue,\n                saturation,\n                luminance,\n            };\n\n            if (alpha !== 1) {\n                hslValue.string = `hsla(${hue}, ${saturation}%, ${luminance}, ${alpha}%)`;\n\n                alpha = this.roundingFloat(alpha / 255);\n                hslValue.alpha = alpha;\n            }\n\n            return hslValue;\n        },\n\n        onClickInput() {\n            if (!this.readonly) {\n                return;\n            }\n\n            this.toggleColorPicker();\n        },\n\n        roundingFloat(num, digits = 2) {\n            return Number(Number(num).toFixed(digits));\n        },\n    },\n});\n"],"names":["template","Component","Mixin","debounce","newColor","newAlphaValue","newRedValue","newGreenValue","newBlueValue","hue","saturation","luminance","alpha","newValue","newHexValue","hslValue","visibleStatus","color","convertedHSLValue","rgbValues","hslValues","e","event","colorpickerLocation","cursorX","cursorY","xValue","correctedXValue","yValue","correctedYValue","newColorValue","type","sanitizedColorValue","rgbString","red","green","blue","returnValue","hslString","previousHue","previousSaturation","previousLuminance","previousAlpha","hsla","mode","chroma","x","m","rgbValue","previousRed","previousGreen","previousBlue","cmin","cmax","delta","previousHex","hex","num","digits"],"mappings":"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"}