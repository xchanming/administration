{"version":3,"file":"index-BZa5Aw9F.js","sources":["../../../app/administration/src/module/sw-cms/component/sw-cms-page-select/sw-cms-page-select.html.twig","../../../app/administration/src/module/sw-cms/component/sw-cms-page-select/index.ts"],"sourcesContent":["<!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n{% block sw_cms_page_select %}\n<div class=\"sw-cms-page-select\">\n    <sw-entity-single-select\n        v-bind=\"bind\"\n        ref=\"component\"\n        v-model:value=\"currentValue\"\n        class=\"sw-cms-page-select-box\"\n        entity=\"cms_page\"\n        :criteria=\"pageTypeCriteria\"\n        show-clearable-button\n    />\n</div>\n{% endblock %}\n","import template from './sw-cms-page-select.html.twig';\nimport './sw-cms-page-select.scss';\n\nconst { Mixin } = Cicada;\nconst { Criteria } = Cicada.Data;\n\n/**\n * @private\n * @package discovery\n */\nexport default Cicada.Component.wrapComponentConfig({\n    template,\n\n    compatConfig: Cicada.compatConfig,\n\n    emits: ['update:value'],\n\n    mixins: [\n        Mixin.getByName('sw-inline-snippet'),\n    ],\n\n    props: {\n        pageType: {\n            type: String,\n            required: true,\n        },\n\n        value: {\n            type: String,\n            required: false,\n            default: null,\n        },\n    },\n\n    data() {\n        return {\n            currentValue: this.value,\n        };\n    },\n\n    computed: {\n        bind() {\n            return {\n                ...this.$attrs,\n                ...this.translations,\n            };\n        },\n\n        translations() {\n            return this.getTranslations();\n        },\n\n        pageTypeCriteria() {\n            const criteria = new Criteria(1, 25);\n\n            criteria.addFilter(Criteria.equals('type', this.pageType));\n\n            return criteria;\n        },\n    },\n\n    watch: {\n        currentValue(value) {\n            if (value !== this.value) {\n                this.$emit('update:value', value);\n            }\n        },\n\n        value() {\n            this.currentValue = this.value;\n        },\n    },\n\n    methods: {\n        getTranslations() {\n            const translatableFields = [\n                'label',\n                'placeholder',\n                'helpText',\n            ];\n\n            const translations: {\n                [key: string]:\n                    | {\n                          [key: string]: string;\n                      }\n                    | string;\n            } = {};\n            translatableFields.forEach((field) => {\n                const value = this.$attrs[field];\n\n                if (value && value !== '') {\n                    translations[field] = this.getInlineSnippet(value as { [key: string]: string });\n                }\n            });\n\n            return translations;\n        },\n    },\n});\n"],"names":["template","Mixin","Criteria","index","criteria","value","translatableFields","translations","field"],"mappings":"AAAA,MAAeA,EAAA,mRCGT,CAAE,MAAAC,CAAU,EAAA,OACZ,CAAE,SAAAC,CAAS,EAAI,OAAO,KAM5BC,EAAe,OAAO,UAAU,oBAAoB,CAChD,SAAAH,EAEA,aAAc,OAAO,aAErB,MAAO,CAAC,cAAc,EAEtB,OAAQ,CACJC,EAAM,UAAU,mBAAmB,CACvC,EAEA,MAAO,CACH,SAAU,CACN,KAAM,OACN,SAAU,EACd,EAEA,MAAO,CACH,KAAM,OACN,SAAU,GACV,QAAS,IACb,CACJ,EAEA,MAAO,CACI,MAAA,CACH,aAAc,KAAK,KAAA,CAE3B,EAEA,SAAU,CACN,MAAO,CACI,MAAA,CACH,GAAG,KAAK,OACR,GAAG,KAAK,YAAA,CAEhB,EAEA,cAAe,CACX,OAAO,KAAK,iBAChB,EAEA,kBAAmB,CACf,MAAMG,EAAW,IAAIF,EAAS,EAAG,EAAE,EAEnC,OAAAE,EAAS,UAAUF,EAAS,OAAO,OAAQ,KAAK,QAAQ,CAAC,EAElDE,CACX,CACJ,EAEA,MAAO,CACH,aAAaC,EAAO,CACZA,IAAU,KAAK,OACV,KAAA,MAAM,eAAgBA,CAAK,CAExC,EAEA,OAAQ,CACJ,KAAK,aAAe,KAAK,KAC7B,CACJ,EAEA,QAAS,CACL,iBAAkB,CACd,MAAMC,EAAqB,CACvB,QACA,cACA,UAAA,EAGEC,EAMF,CAAA,EACe,OAAAD,EAAA,QAASE,GAAU,CAC5B,MAAAH,EAAQ,KAAK,OAAOG,CAAK,EAE3BH,GAASA,IAAU,KACnBE,EAAaC,CAAK,EAAI,KAAK,iBAAiBH,CAAkC,EAClF,CACH,EAEME,CACX,CACJ,CACJ,CAAC"}