const a=`{% block sw_users_permissions_additional_permissions %} <sw-card class="sw-users-permissions-additional-permissions" position-identifier="sw-users-permissions-additional-permissions" :title="$tc('sw-users-permissions.roles.additional-permissions.title')" > {% block sw_users_permissions_additional_permissions_additional_privileges %} <template v-for="privilege in additionalPermissions" :key="\`head-\${privilege.key}\`" > {% block sw_users_permissions_additional_permissions_additional_privileges_headline %} <h4 :class="'sw-users-permissions-additional-permissions_' + privilege.key" > {% block sw_users_permissions_additional_permissions_additional_privileges_headline_content %} <strong> {{ $tc('sw-privileges.additional_permissions.' + privilege.key + '.label') }} </strong> {% endblock %} </h4> {% endblock %} {% block sw_users_permissions_additional_permissions_additional_privileges_switches %} <div class="sw-users-permissions-additional-permissions__switches" > {% block sw_users_permissions_additional_permissions_additional_privileges_switches_content %} <template v-for="(value, roleName) in privilege.roles" :key="roleName" > {% block sw_users_permissions_additional_permissions_additional_privileges_switches_content_switch %} <sw-switch-field :disabled="disabled" :class="'sw_users_permissions_additional_permissions_' + privilege.key + '_' + roleName" :value="isPrivilegeSelected(privilege.key + '.' + roleName)" :label="$tc('sw-privileges.additional_permissions.' + privilege.key + '.' + roleName)" :bordered="true" @update:value="onSelectPrivilege(privilege.key + '.' + roleName, $event)" /> {% endblock %} </template> {% endblock %} </div> {% endblock %} </template> {% endblock %} {% block sw_users_permissions_additional_permissions_app_privileges %} <template v-for="privilege in appPermissions" :key="privilege.key" > {% block sw_users_permissions_additional_permissions_app_privileges_headline %} <h4 class="sw-users-permissions-additional-permissions-app" > {% block sw_users_permissions_additional_permissions_app_privileges_headline_content %} <strong> {{ $tc('sw-privileges.additional_permissions.app.label') }} </strong> {% endblock %} </h4> {% endblock %} {% block sw_users_permissions_additional_permissions_app_privileges_switches %} <div class="sw-users-permissions-additional-permissions__switches" > {% block sw_users_permissions_additional_permissions_app_privileges_switches_content %} <template v-for="(key, roleName) in privilege.roles" :key="roleName" > {% block sw_users_permissions_additional_permissions_app_privileges_switches_content_switch %} <sw-switch-field v-if="roleName === 'all'" :disabled="disabled" class="sw_users_permissions_additional_permissions_app_all" :value="isPrivilegeSelected('app.' + roleName)" :label="$tc('sw-privileges.additional_permissions.app.all')" :bordered="true" @update:value="changeAllAppPermissionsForKey('app.' + roleName, $event)" /> <sw-switch-field v-else v-tooltip="{ message: $tc('sw-privileges.additional_permissions.app.disabledCheckboxMessage'), disabled: !isPrivilegeSelected('app.all') || disabled, showOnDisabledElements: false }" :disabled="isPrivilegeSelected('app.all') || disabled" :class="'sw_users_permissions_additional_permissions_app_' + roleName" :value="isPrivilegeSelected('app.' + roleName)" :label="roleName" :bordered="true" @update:value="onSelectPrivilege('app.' + roleName, $event)" /> {% endblock %} </template> {% endblock %} </div> {% endblock %} </template> {% endblock %} </sw-card> {% endblock %}`,p={template:a,compatConfig:Cicada.compatConfig,inject:["privileges"],props:{role:{type:Object,required:!0},disabled:{type:Boolean,required:!1,default:!1}},data(){return{}},computed:{additionalPermissions(){return this.privileges.getPrivilegesMappings().filter(e=>e.category==="additional_permissions"&&e.key!=="app")},appPermissions(){return this.privileges.getPrivilegesMappings().filter(e=>e.category==="additional_permissions"&&e.key==="app")}},methods:{isPrivilegeSelected(s){return this.role.privileges?this.role.privileges.includes(s):!1},onSelectPrivilege(s,e){e?this.role.privileges.push(s):this.role.privileges=this.role.privileges.filter(i=>i!==s)},changeAllAppPermissionsForKey(s,e){this.appPermissions.forEach(i=>{Object.keys(i.roles).forEach(r=>{const l=`app.${r}`;if(e){if(this.role.privileges.includes(l))return;this.role.privileges.push(l)}else this.role.privileges=this.role.privileges.filter(o=>o!==l)})})}}};export{p as default};
//# sourceMappingURL=index-DRZH_bBU.js.map
