const o=`{% block sw_settings_tag_detail_modal %} <sw-modal class="sw-settings-tag-detail-modal" :class="{ 'is--auto-height': initialTab === 'general' }" :title="title" :is-loading="isLoading" variant="full" @modal-close="$emit('close')" > {% block sw_settings_tag_detail_modal_tabs %} <sw-tabs position-identifier="sw-settings-tag-detail-modal" :small="false" :default-item="initialTab" @new-item-active="active => initialTab = active.name" > <template #default="{ active }"> {% block sw_settings_tag_detail_modal_tabs_general %} <sw-tabs-item :title="$tc('sw-settings-tag.detail.generalTab')" :active-tab="active" name="general" > {{ $tc('sw-settings-tag.detail.generalTab') }} </sw-tabs-item> {% endblock %} {% block sw_settings_tag_detail_modal_tabs_assignments %} <sw-tabs-item :title="$tc('sw-settings-tag.detail.assignmentsTab')" :active-tab="active" name="assignments" > {{ $tc('sw-settings-tag.detail.assignmentsTab') }} </sw-tabs-item> {% endblock %} </template> <template #content="{ active }"> <template v-if="active === 'general'"> {% block sw_settings_tag_detail_modal_tabs_general_tab %} <p class="sw-settings-tag-detail-modal__tag-name"> <sw-text-field id="sw-field--tag-name" v-model:value="tag.name" name="sw-field--tag-name" :label="$tc('sw-settings-tag.list.columnName')" :placeholder="$tc('sw-settings-tag.list.placeholderTagName')" :error="tagNameError" maxlength="255" required /> </p> {% endblock %} </template> <template v-if="active === 'assignments'"> {% block sw_settings_tag_detail_modal_tabs_assignments_tab %} <sw-settings-tag-detail-assignments :tag="tag" :initial-counts="computedCounts" :to-be-added="assignmentsToBeAdded" :to-be-deleted="assignmentsToBeDeleted" :property="property" :entity="entity" @add-assignment="addAssignment" @remove-assignment="removeAssignment" /> {% endblock %} </template> </template> </sw-tabs> {% endblock %} {% block sw_settings_tag_detail_modal_footer %} <template #modal-footer> {% block sw_settings_tag_detail_modal_cancel %} <sw-button size="small" @click="$emit('close')" > {{ $tc('global.default.cancel') }} </sw-button> {% endblock %} {% block sw_settings_tag_detail_modal_confirm %} <sw-button variant="primary" size="small" :disabled="!allowSave" :is-loading="isLoading" @click="onSave" > {{ $tc('sw-settings-tag.detail.buttonSave') }} </sw-button> {% endblock %} </template> {% endblock %} </sw-modal> {% endblock %}`,{Mixin:d}=Shopware,{mapPropertyErrors:g}=Shopware.Component.getComponentHelper(),c={template:o,inject:["repositoryFactory","syncService","acl"],emits:["close","finish"],mixins:[d.getByName("notification")],shortcuts:{"SYSTEMKEY+S":{active(){return this.allowSave},method:"onSave"},ESCAPE:"onCancel"},props:{editedTag:{type:Object,required:!1,default:null},counts:{type:Object,required:!1,default(){return{}}},property:{type:String,required:!1,default:null},entity:{type:String,required:!1,default:null}},data(){return{tag:null,isLoading:!1,assignmentsToBeAdded:{},assignmentsToBeDeleted:{},initialTab:this.property&&this.entity?"assignments":"general"}},computed:{tagRepository(){return this.repositoryFactory.create("tag")},tagDefinition(){return Shopware.EntityDefinition.get("tag")},...g("tag",["name"]),title(){return this.tag.isNew()?this.$tc("sw-settings-tag.list.buttonAddTag"):this.$tc("sw-settings-tag.detail.editTitle",{name:this.tag.name},0)},allowSave(){return this.tag.isNew()?this.acl.can("tag.creator"):this.acl.can("tag.editor")},tooltipSave(){return this.allowSave?{message:`${this.$device.getSystemKey()} + S`,appearance:"light"}:{message:this.$tc("sw-privileges.tooltip.warning"),disabled:this.allowSave,showOnDisabledElements:!0}},computedCounts(){const e={...this.counts};return Object.keys(this.assignmentsToBeDeleted).forEach(t=>{e.hasOwnProperty(t)&&(e[t]-=Object.keys(this.assignmentsToBeDeleted[t]).length)}),Object.keys(this.assignmentsToBeAdded).forEach(t=>{if(!e.hasOwnProperty(t)){e[t]=Object.keys(this.assignmentsToBeAdded[t]).length;return}e[t]+=Object.keys(this.assignmentsToBeAdded[t]).length}),e}},created(){this.createdComponent()},methods:{createdComponent(){this.editedTag?(this.tag=Object.assign(this.tagRepository.create(),this.editedTag),this.tag._isNew=!1):this.tag=this.tagRepository.create(),Object.entries(this.tagDefinition.properties).forEach(([e,t])=>{t.relation==="many_to_many"&&(this.assignmentsToBeAdded[e]={},this.assignmentsToBeDeleted[e]={})})},async onSave(){this.isLoading=!0;const e=[];return Object.entries(this.tagDefinition.properties).forEach(([t,s])=>{if(s.relation!=="many_to_many")return;const i=Object.keys(this.assignmentsToBeAdded[t]);i.length!==0&&i.forEach(a=>{this.tag[t].add(this.assignmentsToBeAdded[t][a])});const n=Object.keys(this.assignmentsToBeDeleted[t]);if(n.length===0)return;const l=n.map(a=>({[s.reference]:a,[s.local]:this.tag.id}));e.push({action:"delete",entity:s.mapping,payload:l})}),e.length&&await this.syncService.sync(e,{},{"single-operation":1}),this.tagRepository.save(this.tag).then(()=>{this.$emit("finish")}).catch(()=>{this.createNotificationError({message:this.$tc("global.notification.unspecifiedSaveErrorMessage")}),this.isLoading=!1})},onCancel(){this.$emit("close")},addAssignment(e,t,s){if(this.assignmentsToBeDeleted[e].hasOwnProperty(t)){delete this.assignmentsToBeDeleted[e][t];return}this.assignmentsToBeAdded[e][t]=s},removeAssignment(e,t,s){if(this.assignmentsToBeAdded[e].hasOwnProperty(t)){delete this.assignmentsToBeAdded[e][t];return}this.assignmentsToBeDeleted[e][t]=s}}};export{c as default};
