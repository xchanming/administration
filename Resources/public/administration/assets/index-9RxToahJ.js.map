{"version":3,"file":"index-9RxToahJ.js","sources":["../../../app/administration/src/module/sw-custom-entity/page/sw-generic-custom-entity-list/sw-generic-custom-entity-list.html.twig","../../../app/administration/src/module/sw-custom-entity/page/sw-generic-custom-entity-list/index.ts"],"sourcesContent":["<sw-page\n    :header-border-color=\"entityAccentColor\"\n    class=\"sw-generic-custom-entity-list\"\n>\n    <template #search-bar>\n        <sw-search-bar\n            :key=\"customEntityName\"\n            :initial-search-type=\"customEntityName\"\n            :initial-search=\"term\"\n            :entity-search-color=\"entityAccentColor\"\n            @search=\"onSearch\"\n        />\n    </template>\n\n    <template #smart-bar-header>\n        <h2 class=\"sw-generic-custom-entity-list__title\">\n            {{ $tc(`${customEntityName}.moduleTitle`) }}\n\n            <span v-if=\"!isLoading\">\n                ({{ total }})\n            </span>\n        </h2>\n    </template>\n\n    <template #smart-bar-actions>\n        <sw-button\n            class=\"sw-generic-custom-entity-list__button-add\"\n            :router-link=\"{ name: 'sw.custom.entity.create' }\"\n            variant=\"primary\"\n        >\n            {{ $tc('global.default.add') }}\n        </sw-button>\n    </template>\n\n    <template #language-switch>\n        <sw-language-switch @on-change=\"onChangeLanguage\" />\n    </template>\n\n    <template #content>\n        <div class=\"sw-generic-custom-entity-list__content\">\n            <sw-entity-listing\n                v-if=\"!isLoading && customEntityDefinition && customEntityInstances.length > 0\"\n                class=\"sw-generic-custom-entity-list__content-list\"\n                :repository=\"customEntityRepository\"\n                :items=\"customEntityInstances\"\n                :allow-inline-edit=\"false\"\n                :allow-column-edit=\"false\"\n                :columns=\"columnConfig\"\n                :sort-by=\"sortBy\"\n                :sort-direction=\"sortDirection\"\n                :natural-sorting=\"naturalSorting\"\n                :criteria-limit=\"limit\"\n                :disable-data-fetching=\"true\"\n                :is-loading=\"isLoading\"\n                @column-sort=\"onColumnSort\"\n                @page-change=\"onPageChange\"\n                @update-records=\"onUpdateRecords\"\n            />\n\n            <sw-empty-state\n                v-else\n                class=\"sw-generic-custom-entity-list__content-empty-state\"\n                :title=\"emptyStateTitle\"\n                :subline=\"emptyStateSubline\"\n            >\n                <template #icon>\n                    <img\n                        :src=\"assetFilter('/administration/static/img/empty-states/custom-entity-empty-state.svg')\"\n                        :alt=\"emptyStateTitle\"\n                    >\n                </template>\n            </sw-empty-state>\n        </div>\n    </template>\n</sw-page>\n","import type { AdminUiDefinition, CustomEntityDefinition } from 'src/app/service/custom-entity-definition.service';\nimport type EntityCollection from 'src/core/data/entity-collection.data';\nimport type CriteriaType from 'src/core/data/criteria.data';\nimport type Repository from 'src/core/data/repository.data';\n\nimport template from './sw-generic-custom-entity-list.html.twig';\n\nconst { Criteria } = Cicada.Data;\nconst types = Cicada.Utils.types;\n\ninterface EntityListingColumnConfig {\n    label: string;\n    property: string;\n    routerLink: string;\n    visible: boolean;\n}\n\ninterface ColumnSortEvent {\n    dataIndex: string;\n    naturalSorting: boolean;\n}\n\ninterface RouteUpdateOptions {\n    limit?: number;\n    page?: number;\n    term?: string;\n    sortBy?: string;\n    sortDirection?: string;\n    naturalSorting?: boolean;\n}\n\ntype SortDirectionOptions = 'ASC' | 'DESC';\n\ninterface RouteParseOptions {\n    limit?: string;\n    page?: string;\n    term?: string;\n    sortBy?: string;\n    sortDirection?: SortDirectionOptions;\n    naturalSorting?: string;\n}\n\n/**\n * @private\n * @package content\n */\nexport default Cicada.Component.wrapComponentConfig({\n    template,\n\n    compatConfig: Cicada.compatConfig,\n\n    inject: [\n        'customEntityDefinitionService',\n        'repositoryFactory',\n        'acl',\n    ],\n\n    data() {\n        return {\n            customEntityInstances: null as EntityCollection<'generic_custom_entity'> | null,\n            page: 1,\n            limit: 25,\n            total: 0,\n            term: '',\n            sortBy: '',\n            sortDirection: 'ASC' as SortDirectionOptions,\n            naturalSorting: false,\n            isLoading: false,\n        };\n    },\n\n    created() {\n        this.createdComponent();\n    },\n\n    computed: {\n        customEntityName(): string {\n            const entityName = this.$route.params.entityName as string;\n\n            const customEntityDefinition = this.customEntityDefinitionService.getDefinitionByName(entityName) ?? null;\n\n            if (!customEntityDefinition) {\n                return '';\n            }\n\n            return customEntityDefinition.entity;\n        },\n\n        customEntityDefinition(): Readonly<CustomEntityDefinition | null> {\n            return this.customEntityDefinitionService.getDefinitionByName(this.customEntityName) ?? null;\n        },\n\n        customEntityRepository(): Repository<'generic_custom_entity'> | null {\n            if (this.customEntityDefinition === null) {\n                return null;\n            }\n\n            return this.repositoryFactory.create(this.customEntityDefinition.entity as 'generic_custom_entity');\n        },\n\n        adminConfig(): AdminUiDefinition | undefined {\n            return this.customEntityDefinition?.flags['admin-ui'];\n        },\n\n        entityAccentColor(): string | undefined {\n            return this.adminConfig?.color;\n        },\n\n        columnConfig(): EntityListingColumnConfig[] | [] {\n            if (!this.customEntityDefinition) {\n                return [];\n            }\n\n            const columns = this.customEntityDefinition.flags['admin-ui'].listing.columns;\n\n            return columns.map((column) => {\n                const snippetKey = `${this.customEntityName}.list.${column.ref}`;\n                return {\n                    label: this.$tc(snippetKey),\n                    property: column.ref,\n                    routerLink: 'sw.custom.entity.detail',\n                    visible: !column.hidden,\n                };\n            });\n        },\n\n        customEntityCriteria(): CriteriaType {\n            const criteria = new Criteria(this.page, this.limit);\n\n            criteria.setTerm(this.term);\n\n            criteria.addSorting({\n                field: this.sortBy,\n                naturalSorting: this.naturalSorting,\n                order: this.sortDirection,\n            });\n\n            return criteria;\n        },\n\n        emptyStateTitle(): string {\n            const dynamicSnippetKey = `${this.customEntityName}.list.emptyState`;\n            const fallbackSnippetKey = 'sw-custom-entity.general.emptyState';\n\n            return this.$te(dynamicSnippetKey) ? this.$tc(dynamicSnippetKey) : this.$tc(fallbackSnippetKey);\n        },\n\n        emptyStateSubline(): string {\n            const dynamicSnippetKey = `${this.customEntityName}.list.emptyStateSubline`;\n            const fallbackSnippetKey = 'sw-custom-entity.general.emptyStateSubline';\n\n            return this.$te(dynamicSnippetKey) ? this.$tc(dynamicSnippetKey) : this.$tc(fallbackSnippetKey);\n        },\n\n        assetFilter() {\n            return Cicada.Filter.getByName('asset');\n        },\n    },\n\n    watch: {\n        $route() {\n            if (types.isEmpty(this.$route.query)) {\n                this.updateRoute({});\n            }\n\n            this.parseRoute();\n\n            void this.getList();\n        },\n    },\n\n    methods: {\n        createdComponent(): void {\n            if (this.adminConfig !== null) {\n                this.sortBy = this.adminConfig?.listing?.columns?.[0]?.ref ?? '';\n                // @ts-expect-error\n                // eslint-disable-next-line max-len\n                // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access,@typescript-eslint/no-non-null-assertion\n                this.$route.meta.$module.icon = this.adminConfig?.icon;\n            }\n\n            this.parseRoute();\n            void this.getList();\n        },\n\n        async getList(): Promise<void> {\n            if (!this.customEntityRepository) {\n                return;\n            }\n\n            this.isLoading = true;\n            const customEntityInstances = await this.customEntityRepository.search(this.customEntityCriteria);\n            this.customEntityInstances = customEntityInstances;\n            this.total = customEntityInstances.total ?? 0;\n\n            this.isLoading = false;\n        },\n\n        onChangeLanguage(languageId: string): void {\n            Cicada.State.commit('context/setApiLanguageId', languageId);\n            void this.getList();\n        },\n\n        parseSortDirection(direction?: string): SortDirectionOptions {\n            if (direction === 'ASC' || direction === 'DESC') {\n                return direction;\n            }\n\n            return this.sortDirection;\n        },\n\n        parseRoute(): void {\n            const routeData = this.$route.query as RouteParseOptions;\n            this.page = routeData.page ? parseInt(routeData.page, 10) : this.page;\n            this.limit = routeData.limit ? parseInt(routeData.limit, 10) : this.limit;\n            this.term = routeData.term || this.term;\n            this.sortBy = routeData.sortBy || this.sortBy;\n            this.sortDirection = this.parseSortDirection(routeData.sortDirection);\n            this.naturalSorting = routeData.naturalSorting ? routeData.naturalSorting === 'true' : this.naturalSorting;\n        },\n\n        updateRoute(updates: RouteUpdateOptions): void {\n            void this.$router.replace({\n                query: {\n                    limit: (updates.limit || this.limit).toString(),\n                    page: (updates.page || this.page).toString(),\n                    term: updates.term || this.term,\n                    sortBy: updates.sortBy || this.sortBy,\n                    sortDirection: updates.sortDirection || this.sortDirection,\n                    naturalSorting: updates.naturalSorting || this.naturalSorting ? 'true' : 'false',\n                },\n            });\n        },\n\n        onSearch(term: string): void {\n            this.updateRoute({ term });\n        },\n\n        onColumnSort({ dataIndex, naturalSorting }: ColumnSortEvent): void {\n            if (this.sortBy === dataIndex) {\n                this.updateRoute({\n                    sortDirection: this.sortDirection === 'ASC' ? 'DESC' : 'ASC',\n                });\n            } else {\n                this.updateRoute({\n                    sortBy: dataIndex,\n                    sortDirection: 'ASC',\n                    naturalSorting: naturalSorting,\n                });\n            }\n        },\n\n        onPageChange({ page, limit }: { page: number; limit: number }): void {\n            this.updateRoute({ page, limit });\n        },\n\n        onUpdateRecords(entities: EntityCollection<'generic_custom_entity'>): void {\n            this.customEntityInstances = entities;\n            this.total = entities.total ?? 0;\n        },\n    },\n});\n"],"names":["template","Criteria","types","index","entityName","customEntityDefinition","_a","column","snippetKey","criteria","dynamicSnippetKey","_b","_c","_d","_e","customEntityInstances","languageId","direction","routeData","updates","term","dataIndex","naturalSorting","page","limit","entities"],"mappings":"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"}