const a=`{% block sw_flow_list %} <div class="sw-flow-list"> {% block sw_flow_list_search_bar %}{% endblock %} {% block sw_flow_list_smart_bar_header %}{% endblock %} {% block sw_flow_list_smart_bar_actions %}{% endblock %} {% block sw_flow_list_content %} <sw-card class="sw-flow-list-card" position-identifier="sw-flow-list-card" > <sw-entity-listing class="sw-flow-list__grid" show-selection :show-settings="false" :allow-column-edit="false" :allow-view="acl.can('flow.viewer')" :allow-edit="acl.can('flow.editor')" :allow-delete="acl.can('flow.deleter')" :columns="flowColumns" :sort-by="sortBy" :sort-direction="sortDirection" :repository="flowRepository" :items="flows" :is-loading="isLoading" :full-page="false" :plain-appearance="true" @column-sort="onSortColumn" @page-change="onPageChange" @update-records="updateRecords" @selection-change="selectionChange" > {% block sw_flow_list_grid_columns %} {% block sw_flow_list_grid_columns_active %} <template #column-active="{ item }"> {% block sw_flow_list_columns_active_label %} <sw-icon size="12px" :color="item.active ? \`#37d046\` : \`#de294c\`" :name="item.active ? \`regular-checkmark-xs\` : \`regular-times-s\`" /> {% endblock %} </template> {% endblock %} {% block sw_flow_list_grid_columns_event_name %} <template #column-eventName="{ item }"> <div v-if="isValidTrigger(item.eventName)"> <strong> {{ getTranslatedEventName(item.eventName) }} </strong> <p>{{ item.eventName }}</p> </div> <div v-else> <p>{{ $tc('sw-flow.list.unknownTrigger') }}</p> </div> </template> {% endblock %} {% endblock %} {% block sw_flow_list_grid_actions %} <template #actions="{ item }"> {% block sw_flow_list_grid_actions_duplicate %} <sw-context-menu-item class="sw-flow-list__item-duplicate" :disabled="!acl.can('flow.creator')" @click="onDuplicateFlow(item)" > {{ $tc('global.default.duplicate') }} </sw-context-menu-item> {% endblock %} {% block sw_flow_list_grid_actions_edit %} <sw-context-menu-item class="sw-flow-list__item-edit" :disabled="!acl.can('flow.editor') && !acl.can('flow.viewer')" @click="onEditFlow(item)" > {{ detailPageLinkText }} </sw-context-menu-item> {% endblock %} {% block sw_flow_list_grid_actions_custom %} {% endblock %} {% block sw_flow_list_grid_actions_delete %} <sw-context-menu-item class="sw-context-menu-item--danger sw-flow-list__item-delete" :disabled="!acl.can('flow.deleter')" @click="onDeleteFlow(item)" > {{ $tc('global.default.delete') }} </sw-context-menu-item> {% endblock %} </template> {% endblock %} {% block sw_flow_list_grid_action_modal %} <template #action-modals="{ item }"> <sw-modal v-if="currentFlow.id === item.id && isDeleting" variant="small" :title="$tc('global.default.warning')" @modal-close="onCloseDeleteModal" > {% block sw_flow_list_grid_action_modal_confirm_delete_text %} <sw-alert variant="warning"> {{ deleteWarningMessage() }} </sw-alert> {% endblock %} <template #modal-footer> {% block sw_flow_list_grid_action_modal_buttons %} <sw-button size="small" @click="onCloseDeleteModal" > {{ $tc('global.default.cancel') }} </sw-button> <sw-button size="small" variant="danger" @click="onConfirmDelete(item)" > {{ $tc('global.default.delete') }} </sw-button> {% endblock %} </template> </sw-modal> </template> {% endblock %} {% block sw_flow_list_grid_bulk_modal_delete_confirm_text %} <template #bulk-modal-delete-confirm-text="{ selectionCount }"> <sw-alert variant="warning"> {{ bulkDeleteWarningMessage(selectionCount) }} </sw-alert> </template> {% endblock %} </sw-entity-listing> {% block sw_flow_list_empty_state %} <sw-empty-state v-if="!total && !isLoading" class="sw-flow-list__empty-state" :title="$tc('sw-flow.list.emptyStateTitle')" :subline="$tc('sw-flow.list.emptyStateSubTitle')" > {% block sw_flow_list_empty_state_icon %} <template #icon> <img :alt="$tc('sw-flow.list.emptyStateTitle')" :src="assetFilter('/administration/static/img/empty-states/settings-empty-state.svg')" > </template> {% endblock %} </sw-empty-state> {% endblock %} {% block sw_flow_list_modal_content_custom %} {% endblock %} </sw-card> {% endblock %} </div> {% endblock %}`,{Mixin:s,Data:{Criteria:i},Component:n,Store:c}=Shopware,{mapState:r}=n.getComponentHelper(),w={template:a,inject:["acl","repositoryFactory"],emits:["on-update-total"],mixins:[s.getByName("notification"),s.getByName("listing")],props:{searchTerm:{type:String,required:!1,default:""}},data(){return{sortBy:"createdAt",sortDirection:"DESC",total:0,isLoading:!1,isDeleting:!1,isDownloading:!1,flows:null,currentFlow:{},selectedItems:[]}},metaInfo(){return{title:this.$createTitle()}},computed:{flowRepository(){return this.repositoryFactory.create("flow")},flowCriteria(){const t=new i(this.page,this.limit);return this.searchTerm&&t.setTerm(this.searchTerm),t.addSorting(i.sort(this.sortBy,this.sortDirection)).addSorting(i.sort("updatedAt","DESC")),t},flowColumns(){return[{property:"active",label:this.$tc("sw-flow.list.labelColumnActive"),width:"80px",sortable:!0},{property:"name",dataIndex:"name",label:this.$tc("sw-flow.list.labelColumnName"),allowResize:!0,routerLink:"sw.flow.detail",primary:!0},{property:"eventName",dataIndex:"eventName",label:this.$tc("sw-flow.list.labelColumnTrigger"),allowResize:!0,multiLine:!0},{property:"description",label:this.$tc("sw-flow.list.labelColumnDescription"),allowResize:!0,sortable:!1}]},detailPageLinkText(){return!this.acl.can("flow.editor")&&this.acl.can("flow.viewer")?this.$tc("global.default.view"):this.$tc("global.default.edit")},assetFilter(){return Shopware.Filter.getByName("asset")},...r(()=>c.get("swFlow"),["triggerEvents"])},watch:{searchTerm(t){this.onSearch(t)}},created(){this.createComponent()},methods:{createComponent(){this.getList()},getList(){this.isLoading=!0,Shopware.Store.get("swFlow").fetchTriggerActions(),this.flowRepository.search(this.flowCriteria).then(t=>{this.total=t.total,this.flows=t}).finally(()=>{this.isLoading=!1})},isValidTrigger(t){return this.triggerEvents.some(l=>l.name===t)},onDuplicateFlow(t){const l={overwrites:{name:`${t.name} - ${this.$tc("global.default.copy")}`}};this.flowRepository.clone(t.id,l,Shopware.Context.api).then(e=>{this.createNotificationSuccess({message:this.$tc("sw-flow.flowNotification.messageDuplicateSuccess")}),e!=null&&e.id&&this.$router.push({name:"sw.flow.detail",params:{id:e.id}})}).catch(()=>{this.createNotificationError({message:this.$tc("sw-flow.flowNotification.messageDuplicateError")})})},onEditFlow(t){t!=null&&t.id&&this.$router.push({name:"sw.flow.detail",params:{id:t.id}})},onDeleteFlow(t){this.isDeleting=!0,this.currentFlow=t},onCloseDeleteModal(){this.isDownload=!1,this.currentFlow={}},onConfirmDelete(t){return this.isDeleting=!1,this.currentFlow={},this.flowRepository.delete(t.id).then(()=>{this.createNotificationSuccess({message:this.$tc("sw-flow.flowNotification.messageDeleteSuccess")}),this.getList()}).catch(()=>{this.createNotificationError({message:this.$tc("sw-flow.flowNotification.messageDeleteError")})})},updateRecords(t){this.flows=t,this.total=t.total,this.$emit("on-update-total",this.total)},getTranslatedEventName(t){const l=t.replace(/\./g,"_"),e=`global.businessEvents.${l}`,o=`sw-flow-custom-event.flow-list.${l}`;return this.$te(e)?this.$tc(e):this.$tc(o)},selectionChange(t){this.selectedItems=Object.values(t)},deleteWarningMessage(){return`${this.$tc("sw-flow.list.warningDeleteText")} ${this.$tc("sw-flow.list.confirmText")}`},bulkDeleteWarningMessage(t){return`${this.$tc("sw-flow.list.warningDeleteText")}
            ${this.$tc("global.entity-components.deleteMessage",t,{count:t})}`}}};export{w as default};
