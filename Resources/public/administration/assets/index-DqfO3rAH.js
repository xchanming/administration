const l=`{% block sw_multi_tag_select %} <sw-select-base class="sw-multi-tag-select" :is-loading="isLoading" :error="errorObject" :disabled="disabled" v-bind="$attrs" @select-expanded="setDropDown(true)" @select-collapsed="setDropDown(false)" > {% block sw_multi_tag_select_base %} {% block sw_multi_tag_select_base_selection %} <template #sw-select-selection="{ identification, error, disabled, size, expand, collapse }"> {% block sw_multi_tag_select_base_selection_slot %} <sw-select-selection-list ref="selectionList" :selections="visibleValues" :invisible-count="invisibleValueCount" :disabled="disabled" label-property="value" value-property="value" v-bind="{ size, placeholder, searchTerm }" @total-count-click="expandValueLimit" @item-remove="remove" @last-item-delete="removeLastItem" @search-term-change="onSearchTermChange" @key-down-enter="onSelectionListKeyDownEnter" > {% block sw_multi_tag_select_base_selection_list %} {% block sw_multi_tag_select_base_selection_list_label %} <template #label-property="{ item, index, labelProperty, valueProperty }"> {% block sw_multi_tag_select_base_selection_list_label_inner %} <slot name="selection-label-property" v-bind="{ item, index, labelProperty, valueProperty}" > {{ getKey(item, labelProperty) }} </slot> {% endblock %} </template> {% endblock %} {% endblock %} </sw-select-selection-list> {% endblock %} </template> {% endblock %} {% endblock %} {% block sw_multi_tag_select_validation %} <template #results-list> <div v-if="hasFocus" class="sw-multi-tag-select-validation sw-select-result-list" > <sw-popover class="sw-select-result-list-popover" popover-class="sw-multi-tag-select-validation-popover" :z-index="1100" :resize-width="true" > <div class="sw-select-result-list__content"> {% block sw_multi_tag_select_validation_valid %} <div v-if="inputIsValid" class="sw-multi-tag-select-valid" @click="addItem" > {% block sw_multi_tag_select_validation_valid_message %} <slot name="message-add-data"> <span>{{ $tc('global.sw-multi-tag-select.addData') }}</span> </slot> {% endblock %} </div> {% endblock %} {% block sw_multi_tag_select_validation_invalid %} <div v-else class="sw-multi-tag-select-invalid" > {% block sw_multi_tag_select_validation_invalid_message %} <slot name="message-enter-valid-data"> <span>{{ $tc('global.sw-multi-tag-select.enterValidData') }}</span> </slot> {% endblock %} </div> {% endblock %} </div> </sw-popover> </div> </template> {% endblock %} <template #label> <slot name="label"></slot> </template> <template #hint> <slot name="hint"></slot> </template> </sw-select-base> {% endblock %}`,{Component:s,Mixin:i}=Shopware,{get:a}=Shopware.Utils;s.register("sw-multi-tag-select",{template:l,inheritAttrs:!1,inject:["feature"],emits:["add-item-is-valid","update:value","display-values-expand"],mixins:[i.getByName("remove-api-error")],props:{value:{type:Array,required:!0},valueLimit:{type:Number,required:!1,default:5},placeholder:{type:String,required:!1,default:""},isLoading:{type:Boolean,required:!1,default:!1},validMessage:{type:String,required:!1,default:""},invalidMessage:{type:String,required:!1,default:""},validate:{type:Function,required:!1,default:e=>e.length>0},disabled:{type:Boolean,required:!1,default:!1}},data(){return{searchTerm:"",hasFocus:!1,limit:this.valueLimit}},computed:{objectValues(){},errorObject(){return null},inputIsValid(){return this.validate(this.searchTerm)},visibleValues(){return!this.value||this.value.length<=0?[]:this.value.map(e=>({value:e})).slice(0,this.limit)},totalValuesCount(){return this.value.length?this.value.length:0},invisibleValueCount(){return this.value?Math.max(0,this.totalValuesCount-this.limit):0}},methods:{onSelectionListKeyDownEnter(){this.addItem()},addItem(){this.$emit("add-item-is-valid",this.inputIsValid),this.inputIsValid&&(this.$emit("update:value",[...this.value,this.searchTerm]),this.searchTerm="")},remove({value:e}){this.$emit("update:value",this.value.filter(t=>t!==e))},removeLastItem(){if(this.value.length){if(this.invisibleValueCount>0){this.expandValueLimit();return}this.$emit("update:value",this.value.slice(0,-1))}},onSearchTermChange(e){this.searchTerm=e},getKey:a,setDropDown(e=!0){this.$refs.selectionList.focus(),this.hasFocus=e,!e&&this.addItem()},expandValueLimit(){this.$emit("display-values-expand"),this.limit+=this.limit}}});
