const r=`{% block sw_cms_el_config_product_listing_config_sorting_grid %} <div class="sw-cms-el-config-product-listing-config-sorting-grid"> <sw-data-grid class="sw-cms-el-config-product-listing-config-sorting-grid__grid" :data-source="visibleProductSortings" :columns="gridColumns" :compact-mode="false" :allow-inline-edit="true" :show-selection="false" plain-appearance > <template #actions="{ item }"> <sw-context-menu-item v-if="!item.locked" :class="'sw-cms-el-config-product-listing-config-sorting-grid__grid_item_' + item.id" variant="danger" :disabled="isDefaultSorting(item)" @click="onDelete(item)" > {{ $tc('global.default.delete') }} </sw-context-menu-item> </template> <template #column-fields="{ item }"> <span class="sw-cms-el-config-product-listing-config-sorting-grid__criteria" :title="formatProductSortingFields(item.fields)" > {{ formatProductSortingFields(item.fields) }} </span> </template> <template #pagination> <sw-pagination v-if="paginationVisible" :page="page" :limit="limit" :total="total" :steps="steps" :auto-hide="false" @page-change="onPageChange" /> </template> </sw-data-grid> </div> {% endblock %}`,{Criteria:o}=Shopware.Data,n={template:r,inject:["repositoryFactory"],mixins:["sw-inline-snippet"],props:{productSortings:{type:Array,required:!0},defaultSorting:{type:Object,required:!0}},data(){return{limit:10,page:1,customFields:[]}},computed:{visibleProductSortings(){return this.productSortings.slice((this.page-1)*this.limit,(this.page-1)*this.limit+this.limit)},paginationVisible(){return this.total>this.limit},customFieldRepository(){return this.repositoryFactory.create("custom_field")},customFieldCriteria(){return new o(1,25)},total(){return this.productSortings.length},gridColumns(){return[{property:"label",label:"sw-cms.elements.productListing.config.sorting.gridHeaderName"},{property:"fields",label:"sw-cms.elements.productListing.config.sorting.gridHeaderFields",multiLine:!0},{property:"priority",label:"sw-cms.elements.productListing.config.sorting.gridHeaderPriority",inlineEdit:"number"}]}},created(){this.createdComponent()},methods:{createdComponent(){this.fetchCustomFields()},fetchCustomFields(){this.customFieldRepository.search(this.customFieldCriteria).then(t=>{this.customFields=t})},formatProductSortingFields(t){return Array.isArray(t)?t.map(e=>this.isItemACustomField(e.field)?this.getCustomFieldLabelByCriteriaName(e.field):this.$tc(`sw-settings-listing.general.productSortingCriteriaGrid.options.label.${e.field}`)).join(", "):""},isItemACustomField(t){const i=this.stripCustomFieldPath(t);return this.customFields.some(e=>e.name===i)},stripCustomFieldPath(t){return t.replace(/customFields\./,"")},getCustomFieldLabelByCriteriaName(t){const i=this.stripCustomFieldPath(t),e=this.getCustomFieldByName(i),s=this.getInlineSnippet(e.config.label);return s===null?i:s},getCustomFieldByName(t){return this.customFields.find(i=>i.name===t)},onDelete(t){this.productSortings.remove(t.id)},isDefaultSorting(t){return this.defaultSorting?t.id===this.defaultSorting.id:!1},onPageChange({page:t,limit:i}){this.page=t,this.limit=i}}};export{n as default};
