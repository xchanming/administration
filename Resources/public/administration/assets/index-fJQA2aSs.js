import{_ as a}from"./administration-BlrHhDOI.js";import{C as s}from"./channel-DxwX5hMG.js";import{m as r}from"./main.vite-GBE0T_D3.js";const o=`<sw-page class="sw-settings-units"> <template #search-bar> <sw-search-bar /> </template> <template #smart-bar-header> <h2> {{ $tc('sw-settings.index.title') }} <sw-icon name="regular-chevron-right-xs" small /> {{ $tc('sw-settings-units.general.mainMenuItemGeneral') }} </h2> </template> <template #smart-bar-actions> <sw-button v-tooltip="tooltipCreate" class="sw-settings-units__create-action" variant="primary" :disabled="isAddingUnitsDisabled || !acl.can('scale_unit.creator') || undefined" @click="createNewUnit" > {{ $tc('sw-settings-units.general.createNewUnit') }} </sw-button> </template> <template #language-switch> <sw-language-switch :disabled="!!newUnit || undefined" @on-change="onChangeLanguage" /> </template> <template #content> <sw-card-view> <sw-card position-identifier="sw-settings-units-content" :class="{ 'sw-settings-units-card-empty': isEmpty }" > <sw-empty-state v-if="!isLoading && isEmpty" :title="$tc('sw-settings-units.empty-state.title')" :subline="$tc('sw-settings-units.empty-state.subline')" icon="regular-balance-scale" /> <template #grid> <sw-data-grid v-show="isLoading || !isEmpty" ref="swDataGrid" class="sw-settings-units-grid" :is-loading="isLoading" :data-source="unitList" :columns="unitColumns()" :show-selection="false" :allow-inline-edit="acl.can('scale_unit.editor') || undefined" :skeleton-item-amount="placeholderAmount" @inline-edit-save="saveUnit" @inline-edit-cancel="cancelUnit" > <template #actions="{ item }"> <sw-context-menu-item class="sw-settings-units__edit-action" :disabled="!acl.can('scale_unit.editor') || undefined" @click="editUnit(item)" > {{ $tc('global.default.edit') }} </sw-context-menu-item> <sw-context-menu-divider /> <sw-context-menu-item class="sw-settings-units__delete-action" variant="danger" :disabled="!acl.can('scale_unit.deleter') || undefined" @click="deleteUnit(item)" > {{ $tc('global.default.delete') }} </sw-context-menu-item> </template> </sw-data-grid> </template> </sw-card> </sw-card-view> </template> </sw-page>`,{Mixin:l}=Cicada,{Criteria:n}=Cicada.Data,c={template:o,compatConfig:Cicada.compatConfig,inject:["repositoryFactory","acl"],mixins:[l.getByName("notification")],data(){return{isLoading:!0,placeholderAmount:7,unitsCriteria:null,units:[],newUnit:null}},metaInfo(){return{title:this.$createTitle()}},computed:{unitRepository(){return this.repositoryFactory.create("unit")},unitList(){return this.newUnit?[...this.units,this.newUnit]:this.units},isEmpty(){return this.unitList.length<=0},tooltipCreate(){return this.acl.can("scale_unit.creator")?{showOnDisabledElements:!0,message:this.$tc("sw-settings-units.general.disableAddNewUnitMessage"),disabled:!this.isAddingUnitsDisabled}:{message:this.$tc("sw-privileges.tooltip.warning"),disabled:this.acl.can("scale_unit.creator"),showOnDisabledElements:!0}},isAddingUnitsDisabled(){return Cicada.Context.api.languageId!==Cicada.Context.api.systemLanguageId}},created(){this.createdComponent()},methods:{createdComponent(){this.unitsCriteria=this.createUnitsCriteria(),this.loadUnits()},createUnitsCriteria(){const t=new n(1,500);return t.addSorting(n.sort("name","ASC",!1)),t},loadUnits(){this.isLoading=!0,this.unitRepository.search(this.unitsCriteria).then(t=>{this.units=t,this.placeholderAmount=t.total,this.isLoading=!1})},createNewUnit(){this.$router.push({name:"sw.settings.units.create"})},saveUnit(t){this.isLoading=!0,this.unitRepository.save(t).then(()=>{this.isLoading=!1,this.loadUnits(),this.newUnit=null;const e=this.$tc("global.default.success"),i=this.$tc("sw-settings-units.notification.successMessage");this.createNotificationSuccess({title:e,message:i})}).catch(()=>{this.isLoading=!1;const e=this.$tc("global.default.error"),i=this.$tc("sw-settings-units.notification.errorMessage");this.createNotificationError({title:e,message:i})})},cancelUnit(){this.loadUnits(),this.newUnit=null},deleteUnit(t){this.isLoading=!0,this.unitRepository.delete(t.id).then(()=>{this.isLoading=!1,this.loadUnits()})},activateInlineEdit(t){this.$refs.swDataGrid.currentInlineEditId=t,this.$refs.swDataGrid.isInlineEditActive=!0},unitColumns(){return[{property:"name",label:"sw-settings-units.grid.columnName",routerLink:"sw.settings.units.detail"},{property:"shortCode",label:"sw-settings-units.grid.columnShortCode"}]},onChangeLanguage(){this.loadUnits()},editUnit(t){this.$router.push({name:"sw.settings.units.detail",params:{id:t.id}})}}},d=Object.freeze(Object.defineProperty({__proto__:null,default:c},Symbol.toStringTag,{value:"Module"})),u=`<sw-page class="sw-settings-units"> <template #smart-bar-actions> <sw-button-process class="sw-settings-units__create-action" variant="primary" :is-loading="isLoading" :process-success="isSaveSuccessful" :disabled="!acl.can('scale_unit.editor')" @click="onSave" > {{ $tc('global.default.save') }} </sw-button-process> </template> <template #language-switch> <sw-language-switch :disabled="unit === null || unit.isNew()" @on-change="onChangeLanguage" /> </template> <template #content> <sw-card-view> <sw-card v-if="!isLoading" position-identifier="sw-settings-units-content" > <sw-text-field v-model:value="unit.name" name="sw-field--unit-name" :label="$tc('sw-settings-units.detail.fieldLabels.name')" :error="unitNameError" required /> <sw-text-field v-model:value="unit.shortCode" name="sw-field--unit-shortCode" :label="$tc('sw-settings-units.detail.fieldLabels.shortCode')" :error="unitShortCodeError" required /> <sw-custom-field-set-renderer :entity="unit" :sets="customFieldSets" :disabled="!acl.can('unit.editor')" /> </sw-card> <sw-skeleton v-else /> </sw-card-view> </template> </sw-page>`,{Component:g,Mixin:m}=Cicada,h=g.wrapComponentConfig({template:u,compatConfig:Cicada.compatConfig,mixins:[m.getByName("notification")],inject:["repositoryFactory","acl"],props:{unitId:{type:String,required:!1,default:null}},computed:{unitRepository(){return this.repositoryFactory.create("unit")},customFieldSetRepository(){return this.repositoryFactory.create("custom_field_set")},customFieldSetCriteria(){const t=new s(1,null);return t.addFilter(s.equals("relations.entityName","unit")),t},...r("unit",["name","shortCode"])},data(){return{unit:null,isLoading:!0,isSaveSuccessful:!1,customFieldSets:[]}},watch:{unitId(){this.loadUnit()},isSaveSuccessful(t){t!==!1&&window.setTimeout(()=>{this.isSaveSuccessful=!1},800)}},created(){this.customFieldSetRepository.search(this.customFieldSetCriteria).then(t=>{if(this.customFieldSets=t,this.unitId!==null){this.loadUnit();return}this.unit=this.unitRepository.create(Cicada.Context.api),this.isLoading=!1}).catch(()=>{this.createNotificationError({message:this.$tc("sw-settings-units.notification.errorMessage")}),this.isLoading=!1})},methods:{loadUnit(){this.isLoading=!0,this.unitRepository.get(this.unitId,Cicada.Context.api).then(t=>{this.unit=t,this.isLoading=!1}).catch(t=>{this.createNotificationError({message:this.$tc(t.message)})})},onSave(){this.unit!==null&&(this.isLoading=!0,this.unitRepository.save(this.unit).then(()=>{var t;this.isSaveSuccessful=!0,this.$router.push({name:"sw.settings.units.detail",params:{id:((t=this.unit)==null?void 0:t.id)??""}}),this.isLoading=!1}).catch(()=>{this.createNotificationError({message:this.$tc("sw-settings-units.notification.errorMessage")}),this.isLoading=!1}))},onChangeLanguage(){this.loadUnit()}}}),p=Object.freeze(Object.defineProperty({__proto__:null,default:h},Symbol.toStringTag,{value:"Module"}));Cicada.Service("privileges").addPrivilegeMappingEntry({category:"permissions",parent:"settings",key:"scale_unit",roles:{viewer:{privileges:["unit:read","custom_field_set:read","custom_field:read","custom_field_set_relation:read"],dependencies:[]},editor:{privileges:["unit:update"],dependencies:["scale_unit.viewer"]},creator:{privileges:["unit:create"],dependencies:["scale_unit.viewer","scale_unit.editor"]},deleter:{privileges:["unit:delete"],dependencies:["scale_unit.viewer"]}}});Cicada.Component.register("sw-settings-units-list",()=>a(()=>Promise.resolve().then(()=>d),void 0));Cicada.Component.register("sw-settings-units-detail",()=>a(()=>Promise.resolve().then(()=>p),void 0));const{Module:w}=Cicada;w.register("sw-settings-units",{type:"core",name:"settings-units",title:"sw-settings-units.general.mainMenuItemGeneral",description:"Units section in the settings module",color:"#9AA8B5",icon:"regular-cog",favicon:"icon-module-settings.png",entity:"units",routes:{index:{component:"sw-settings-units-list",path:"index",meta:{parentPath:"sw.settings.index",privilege:"scale_unit.viewer"}},detail:{component:"sw-settings-units-detail",path:"detail/:id",meta:{parentPath:"sw.settings.units.index",privilege:"scale_unit.viewer"},props:{default(t){return{unitId:t.params.id}}}},create:{component:"sw-settings-units-detail",path:"create",meta:{parentPath:"sw.settings.units.index",privilege:"scale_unit.creator"}}},settingsItem:{group:"shop",to:"sw.settings.units.index",icon:"regular-balance-scale",privilege:"scale_unit.viewer"}});
//# sourceMappingURL=index-fJQA2aSs.js.map
