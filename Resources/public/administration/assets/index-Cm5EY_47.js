const m=`{% block sw_cms_element_image_gallery_config %} <div class="sw-cms-el-config-image-gallery"> {% block sw_cms_element_image_gallery_config_tabs %} <sw-tabs position-identifier="sw-cms-element-config-image-gallery" class="sw-cms-el-config-image-gallery__tabs" default-item="content" > <template #default="{ active }"> {% block sw_cms_element_image_gallery_config_tab_content %} <sw-tabs-item :title="$tc('sw-cms.elements.general.config.tab.content')" name="content" :active-tab="active" > {{ $tc('sw-cms.elements.general.config.tab.content') }} </sw-tabs-item> {% endblock %} {% block sw_cms_element_image_gallery_config_tab_options %} <sw-tabs-item :title="$tc('sw-cms.elements.general.config.tab.settings')" name="settings" :active-tab="active" > {{ $tc('sw-cms.elements.general.config.tab.settings') }} </sw-tabs-item> {% endblock %} </template> <template #content="{ active }" > {% block sw_cms_element_image_gallery_config_content %} <sw-container v-if="active === 'content'" class="sw-cms-el-config-image-gallery__tab-content" > {% block sw_cms_element_image_gallery_config_media_selection %} <sw-cms-mapping-field v-model:config="element.config.sliderItems" entity="product_media" value-types="entity" :label="$tc('sw-cms.elements.imageGallery.label')" > {% block sw_cms_element_image_gallery_config_media_list_selection %} <sw-media-list-selection-v2 :entity-media-items="mediaItems" :entity="entity" :upload-tag="uploadTag" :default-folder="defaultFolderName" @upload-finish="onImageUpload" @item-remove="onItemRemove" @open-sidebar="onOpenMediaModal" @item-sort="onItemSort" /> {% endblock %} {% block sw_cms_element_image_gallery_config_media_mapping_preview %} <template #preview="{ demoValue }"> {% block sw_cms_element_image_gallery_config_media_preview_list %} <div v-if="demoValue && demoValue.length" ref="demoMediaGrid" class="sw-cms-el-config-image-gallery__mapping-preview" :style="gridAutoRows" > {% block sw_cms_element_image_gallery_config_media_preview_item %} <div v-for="demo in demoValue" :key="demo.id" class="sw-cms-el-config-image-gallery__preview-image" > <img :src="demo.media.url" alt="" > </div> {% endblock %} </div> {% endblock %} {% block sw_cms_element_image_gallery_config_media_preview_info %} <sw-alert v-else class="sw-cms-el-config-image__preview-info" variant="info" > {{ $tc('sw-cms.detail.label.mappingEmptyPreview') }} </sw-alert> {% endblock %} </template> {% endblock %} </sw-cms-mapping-field> {% endblock %} {% block sw_cms_element_image_gallery_config_media_modal %} <sw-media-modal-v2 v-if="mediaModalIsOpen" variant="full" :caption="$tc('sw-cms.elements.general.config.caption.mediaUpload')" :entity-context="cmsPageState.entityName" :initial-folder-id="cmsPageState.defaultMediaFolderId" @media-upload-remove-image="onItemRemove" @media-modal-selection-change="onMediaSelectionChange" @modal-close="onCloseMediaModal" /> {% endblock %} </sw-container> {% endblock %} {% block sw_cms_element_image_gallery_config_settings %} <sw-container v-if="active === 'settings'" class="sw-cms-el-config-image-gallery__tab-settings" > <div class="sw-cms-el-config-image-gallery__settings-options"> {% block sw_cms_element_image_gallery_config_settings_display_mode %} <div class="sw-cms-el-config-image-gallery__setting-option"> {% block sw_cms_element_image_gallery_config_settings_display_mode_select %} <sw-select-field v-model:value="element.config.displayMode.value" class="sw-cms-el-config-image-gallery__setting-display-mode" :label="$tc('sw-cms.elements.general.config.label.displayMode')" :help-text="$tc('sw-cms.elements.imageGallery.config.helpText.displayMode')" @update:value="onChangeDisplayMode" > <option value="standard"> {{ $tc('sw-cms.elements.general.config.label.displayModeStandard') }} </option> <option value="contain"> {{ $tc('sw-cms.elements.general.config.label.displayModeContain') }} </option> <option value="cover"> {{ $tc('sw-cms.elements.general.config.label.displayModeCover') }} </option> </sw-select-field> {% endblock %} {% block sw_cms_element_image_gallery_config_settings_min_height %} <sw-text-field v-model:value="element.config.minHeight.value" :label="$tc('sw-cms.elements.image.config.label.minHeight')" :placeholder="$tc('sw-cms.elements.image.config.placeholder.enterMinHeight')" :help-text="$tc('sw-cms.elements.image.config.label.minHeightHelpText')" :disabled="!['cover', 'contain'].includes(element.config.displayMode.value)" @update:value="onChangeMinHeight" /> {% endblock %} {% block sw_cms_element_image_gallery_config_settings_vertical_align %} {# ToDo NEXT-38801 - Re-enable and fix broken vertical align #} <sw-select-field v-if="false" v-model:value="element.config.verticalAlign.value" :label="$tc('sw-cms.elements.general.config.label.verticalAlign')" :placeholder="$tc('sw-cms.elements.general.config.label.verticalAlign')" :disabled="['cover', 'contain'].includes(element.config.displayMode.value)" > <option value="flex-start"> {{ $tc('sw-cms.elements.general.config.label.verticalAlignTop') }} </option> <option value="center"> {{ $tc('sw-cms.elements.general.config.label.verticalAlignCenter') }} </option> <option value="flex-end"> {{ $tc('sw-cms.elements.general.config.label.verticalAlignBottom') }} </option> </sw-select-field> {% endblock %} </div> {% endblock %} {% block sw_cms_element_image_gallery_config_settings_navigation %} <div class="sw-cms-el-config-image-gallery__setting-navigations sw-cms-el-config-image-gallery__setting-option"> <div class="sw-cms-el-config-image-gallery__settings-navigation"> {% block sw_cms_element_image_gallery_config_settings_navigation_arrow_position %} <sw-select-field v-model:value="element.config.navigationArrows.value" :label="$tc('sw-cms.elements.imageSlider.config.label.navigationArrows')" @update:value="emitUpdateEl" > <option value="none"> {{ $tc('sw-cms.elements.imageSlider.config.label.navigationPositionNone') }} </option> <option value="inside"> {{ $tc('sw-cms.elements.imageSlider.config.label.navigationPositionInside') }} </option> <option value="outside"> {{ $tc('sw-cms.elements.imageSlider.config.label.navigationPositionOutside') }} </option> </sw-select-field> {% endblock %} </div> <div class="sw-cms-el-config-image-gallery__settings-navigation"> {% block sw_cms_element_image_gallery_config_settings_navigation_dots_position %} <sw-select-field v-model:value="element.config.navigationDots.value" :label="$tc('sw-cms.elements.imageSlider.config.label.navigationDots')" @update:value="emitUpdateEl" > <option value="none"> {{ $tc('sw-cms.elements.imageSlider.config.label.navigationPositionNone') }} </option> <option value="inside"> {{ $tc('sw-cms.elements.imageSlider.config.label.navigationPositionInside') }} </option> <option value="outside"> {{ $tc('sw-cms.elements.imageSlider.config.label.navigationPositionOutside') }} </option> </sw-select-field> {% endblock %} </div> <div class="sw-cms-el-config-image-gallery__settings-navigation"> {% block sw_cms_element_image_gallery_config_settings_navigation_preview_position %} <sw-select-field v-model:value="element.config.galleryPosition.value" :label="$tc('sw-cms.elements.imageGallery.config.label.navigationPreview')" @update:value="emitUpdateEl" > <option value="left"> {{ $tc('sw-cms.elements.imageGallery.config.label.navigationPreviewPositionLeft') }} </option> <option value="underneath"> {{ $tc('sw-cms.elements.imageGallery.config.label.navigationPreviewPositionUnderneath') }} </option> </sw-select-field> {% endblock %} </div> </div> {% endblock %} {% block sw_cms_element_image_gallery_config_settings_zoom_toggles %} <div class="sw-cms-el-config-image-gallery__setting-option"> {% block sw_cms_element_image_gallery_config_settings_toggle_zoom %} <sw-switch-field v-model:value="element.config.zoom.value" bordered :label="$tc('sw-cms.elements.imageGallery.config.label.zoom')" /> {% endblock %} {% block sw_cms_element_image_gallery_config_settings_toggle_fullscreen %} <sw-switch-field v-model:value="element.config.fullScreen.value" bordered :label="$tc('sw-cms.elements.imageGallery.config.label.fullscreen')" /> {% endblock %} </div> {% endblock %} {% block sw_cms_element_image_gallery_config_settings_aspect_ratio_magnifier_over_gallery_toggles %} <div class="sw-cms-el-config-image-gallery__setting-option"> {% block sw_cms_element_image_gallery_config_settings_toggle_keep_aspect_ratio_on_zoom %} <sw-switch-field v-model:value="element.config.keepAspectRatioOnZoom.value" bordered :label="$tc('sw-cms.elements.imageGallery.config.label.keepAspectRatioOnZoom')" /> {% endblock %} {% block sw_cms_element_image_gallery_config_settings_toggle_magnifier_over_gallery %} <sw-switch-field v-model:value="element.config.magnifierOverGallery.value" bordered :label="$tc('sw-cms.elements.imageGallery.config.label.magnifierOverGallery')" :help-text="$tc('sw-cms.elements.imageGallery.config.label.magnifierOverGalleryHelpText')" /> {% endblock %} </div> {% endblock %} </div> </sw-container> {% endblock %} </template> </sw-tabs> {% endblock %} </div> {% endblock %}`,{Mixin:c}=Shopware,{moveItem:o,object:{cloneDeep:d}}=Shopware.Utils,g=Shopware.Data.Criteria,r={template:m,inject:["repositoryFactory","feature"],emits:["element-update"],mixins:[c.getByName("cms-element")],data(){return{mediaModalIsOpen:!1,initialFolderId:null,entity:this.element,mediaItems:[],columnWidth:"100px"}},computed:{mediaRepository(){return this.repositoryFactory.create("media")},uploadTag(){return`cms-element-media-config-${this.element.id}`},defaultFolderName(){return this.cmsPageState._entityName},sliderItems(){return this.element.data&&this.element.data.sliderItems&&this.element.data.sliderItems.length>0?this.element.data.sliderItems:[]},sliderItemsConfigValue(){var e,i,t;return(t=(i=(e=this.element)==null?void 0:e.config)==null?void 0:i.sliderItems)==null?void 0:t.value},gridAutoRows(){return`grid-auto-rows: ${this.columnWidth}`},isProductPage(){var e,i;return(((i=(e=this.cmsPageState)==null?void 0:e.currentPage)==null?void 0:i.type)??"")==="product_detail"}},watch:{sliderItems(){this.updateColumnWidth()},sliderItemsConfigValue(e){var l,s,n;if(!e){this.element.config.sliderItems.value=[];return}const i=((n=(s=(l=this.element)==null?void 0:l.config)==null?void 0:s.sliderItems)==null?void 0:n.source)==="mapped",t=e&&e.length===this.sliderItems.length;i||t||!this.sliderItems.length||(this.mediaItems=this.sliderItems.map(a=>a.media),this.element.config.sliderItems.value=this.sliderItems.map(a=>({mediaId:a.media.id,mediaUrl:a.media.url,newTab:a.newTab,url:a.url})))}},created(){this.createdComponent()},mounted(){this.mountedComponent()},methods:{async createdComponent(){this.initElementConfig("image-gallery");const{source:e,value:i}=this.element.config.sliderItems;if(e==="static"&&i&&i.length>0){const t=i.map(n=>n.mediaId),l=new g(1,25);l.setIds(t);const s=await this.mediaRepository.search(l);this.mediaItems=t.map(n=>s.get(n))}this.initConfig()},mountedComponent(){this.updateColumnWidth()},initConfig(){var e,i,t,l;!this.isProductPage||(i=(e=this.element)==null?void 0:e.translated)!=null&&i.config||(l=(t=this.element)==null?void 0:t.data)!=null&&l.sliderItems||(this.element.config.sliderItems.source="mapped",this.element.config.sliderItems.value="product.media",this.element.config.navigationDots.value="inside",this.element.config.zoom.value=!0,this.element.config.fullScreen.value=!0,this.element.config.keepAspectRatioOnZoom.value=!0,this.element.config.magnifierOverGallery.value=!1,this.element.config.displayMode.value="contain",this.element.config.minHeight.value="430px")},updateColumnWidth(){this.$refs.demoMediaGrid&&this.$nextTick(()=>{const e=window.getComputedStyle(this.$refs.demoMediaGrid,null).getPropertyValue("grid-template-columns").split(" ");this.columnWidth=e[0]})},onOpenMediaModal(){this.mediaModalIsOpen=!0},onCloseMediaModal(){this.mediaModalIsOpen=!1},onImageUpload(e){const i=this.element.config.sliderItems;i.source==="default"&&(i.value=[],i.source="static",this.mediaItems=[]),this.mediaItems.find(l=>l.id===e.id)&&(this.mediaItems=this.mediaItems.filter(l=>l.id!==e.id),i.value=i.value.filter(l=>l.mediaId!==e.id)),i.value.push({mediaUrl:e.url,mediaId:e.id,url:null,newTab:!1}),this.mediaItems.push(e),this.updateMediaDataValue(),this.emitUpdateEl()},onItemRemove(e,i){const t=e.id;this.element.config.sliderItems.value=this.element.config.sliderItems.value.filter((l,s)=>l.mediaId!==t||s!==i),this.mediaItems=this.mediaItems.filter((l,s)=>l.id!==t||s!==i),this.updateMediaDataValue(),this.emitUpdateEl()},onMediaSelectionChange(e){const i=this.element.config.sliderItems;i.source==="default"&&(i.value=[],i.source="static",this.mediaItems=[]),e.forEach(t=>{this.element.config.sliderItems.value.push({mediaUrl:t.url,mediaId:t.id,url:null,newTab:!1})}),this.mediaItems.push(...e),this.updateMediaDataValue(),this.emitUpdateEl()},updateMediaDataValue(){if(this.element.config.sliderItems.value){const e=d(this.element.config.sliderItems.value);e.forEach(i=>{this.mediaItems.forEach(t=>{i.mediaId===t.id&&(i.media=t)})}),this.element.data?this.element.data.sliderItems=e:this.element.data={sliderItems:e}}},onItemSort(e,i){o(this.mediaItems,e.position,i.position),o(this.element.config.sliderItems.value,e.position,i.position),this.updateMediaDataValue(),this.emitUpdateEl()},onChangeMinHeight(e){this.element.config.minHeight.value=e===null?"":e,this.$emit("element-update",this.element)},onChangeDisplayMode(e){["cover","contain"].includes(e)&&(this.element.config.verticalAlign.value=null),this.$emit("element-update",this.element)},emitUpdateEl(){this.$emit("element-update",this.element)}}};export{r as default};
