const c=`{% block sw_text_editor_toolbar_button %} <div class="sw-text-editor-toolbar-button" :class="'sw-text-editor-toolbar-button__type-' + buttonConfig.type" > {% block sw_text_editor_toolbar_button_icon %} <template v-if="buttonConfig.icon"> <div v-tooltip="{ appearance: tooltipAppearance, message: buttonConfig.title }" class="sw-text-editor-toolbar-button__icon" :class="classes" role="button" tabindex="0" @click="buttonHandler($event, buttonConfig)" @keydown.enter="buttonHandler($event, buttonConfig)" > <sw-icon :name="buttonConfig.icon" size="12" /> <sw-icon v-if="buttonConfig.children" name="regular-chevron-down" size="8" /> </div> </template> {% endblock %} {% block sw_text_editor_toolbar_button_name %} <div v-else-if="buttonConfig.name" v-tooltip="{ appearance: tooltipAppearance, message: buttonConfig.title }" :class="classes" role="button" tabindex="0" @click="buttonHandler($event, buttonConfig)" > {{ buttonConfig.name }} </div> {% endblock %} {% block sw_text_editor_toolbar_button_color %} <div v-else-if="buttonConfig.type === 'foreColor'" v-tooltip="{ appearance: tooltipAppearance, message: buttonConfig.title }" :class="classes" role="button" tabindex="0" @click="buttonHandler($event, buttonConfig)" > <sw-compact-colorpicker v-model:value="buttonConfig.value" :disabled="disabled" compact :alpha="false" @update:value="handleButtonClick(buttonConfig)" /> </div> {% endblock %} {% block sw_text_editor_toolbar_button_child %} <div v-if="buttonConfig.children && buttonConfig.expanded" class="sw-text-editor-toolbar-button__children" :class="getDropdownClasses(buttonConfig)" > <div class="sw-text-editor-toolbar-button__children-inner-container"> <div v-for="(child, childIndex) in buttonConfig.children" :key="childIndex" v-tooltip.right="getTooltipConfig(buttonConfig, child)" :class="childActive(child)" class="sw-text-editor-toolbar-button__children-child" @click="handleButtonClick(child)" > {% block sw_text_editor_toolbar_button_child_item %} <div> <sw-icon v-if="child.icon" :name="child.icon" /> <div v-else class="sw-text-editor-toolbar-button__children-child-content" > {{ child.name }} </div> </div> {% endblock %} </div> </div> </div> {% endblock %} {% block sw_text_editor_toolbar_button_link_menu %} <div v-else-if="buttonConfig.type === 'link' && buttonConfig.expanded" ref="flyoutLinkMenu" class="sw-text-editor-toolbar-button__children" > <sw-text-editor-link-menu :button-config="buttonConfig" @button-click="handleButtonClick" @mounted="positionLinkMenu" /> </div> {% endblock %} {% block sw_text_editor_toolbar_button_table %} <div v-else-if="buttonConfig.type === 'table' && buttonConfig.expanded" ref="flyoutMenu" class="sw-text-editor-toolbar-button__children sw-text-editor-toolbar-button__table-menu" :class="flyoutClasses" > {% block sw_text_editor_toolbar_button_table_menu_content %} <sw-text-editor-toolbar-table-button :button-config="buttonConfig" @mounted="onChildMounted" @table-create="handleButtonClick(buttonConfig)" /> {% endblock %} </div> {% endblock %} {% block sw_text_editor_toolbar_button_slot %} <slot name="buttonSlot"></slot> {% endblock %} </div> {% endblock %}`,{Component:u}=Cicada;u.register("sw-text-editor-toolbar-button",{template:c,compatConfig:Cicada.compatConfig,emits:["button-click","menu-toggle"],props:{buttonConfig:{type:Object,required:!0},disabled:{type:Boolean,required:!1,default:!1},isInlineEdit:{type:Boolean,required:!1,default:!1}},data(){return{flyoutClasses:[]}},computed:{classes(){return{"is--active":!!this.buttonConfig.active||this.buttonConfig.expanded,"is--disabled":!!this.disabled}},tooltipAppearance(){return this.isInlineEdit?"light":"dark"}},mounted(){this.mountedComponent()},methods:{mountedComponent(){this.$device.onResize({listener:this.positionLinkMenu})},buttonHandler(t,o){return this.disabled?null:o.children||o.type==="link"||o.type==="table"||o.type==="foreColor"?this.onToggleMenu(t,o):this.handleButtonClick(o)},childActive(t){return{"is--active":!!t.active}},handleButtonClick(t,o=null){this.disabled||(this.$emit("button-click",t,o),this.$emit("menu-toggle",null,t))},onToggleMenu(t,o){!["link","table","foreColor"].includes(o.type)&&!o.children||o.type==="foreColor"&&t.target.closest(".sw-colorpicker__colorpicker")||o.type==="link"&&t.target.closest(".sw-text-editor-toolbar-button__link-menu")||o.type==="table"&&t.target.closest(".sw-text-editor-toolbar-button__table-menu")||t.target.closest(".sw-text-editor-toolbar-button__children")||this.$emit("menu-toggle",t,o)},getDropdownClasses(t){return[`is--${t.dropdownPosition||"right"}`]},onChildMounted(){var i;const t=(i=this.$refs)==null?void 0:i.flyoutMenu;if(!t||this.flyoutClasses.includes("is--left","is--right"))return;const o=t.getBoundingClientRect().right,e=this.$root.$el.getBoundingClientRect().right,n=o-e>0;this.flyoutClasses=n?["is--left"]:["is--right"]},getTooltipConfig(t,o){return{disabled:!o.title,appearance:this.tooltipAppearance,width:"auto",message:o.title,showDelay:t.tooltipShowDelay||100,hideDelay:t.tooltipHideDelay||100}},positionLinkMenu(){var r;const t=(r=this.$refs)==null?void 0:r.flyoutLinkMenu;if(!(t instanceof HTMLElement))return;const o=t.clientWidth,e=this.$el,n=e.clientWidth,a=e.getBoundingClientRect().right-n+o,s=this.$device.getViewportWidth()-a;let l=0,d=10;s<0&&(l=s-50,d=Math.abs(l)+10),t.style.setProperty("--flyoutLinkLeftOffset",`${l}px`),t.style.setProperty("--arrow-position",`${d}px`)}}});
//# sourceMappingURL=index-Yeh1HjN1.js.map
