const l=`{% block sw_condition_base %} {% block sw_product_stream_filter %} <div class="sw-product-stream-filter" :class="conditionClasses" > {% block sw_product_stream_filter_container %} <div class="sw-product-stream-filter__container"> {% block sw_product_stream_filter_selects %} <div class="sw-product-stream-filter__selects"> {% block sw_product_stream_filter_fields %} <template v-for="(definition, index) in fieldDefinitions" :key="index" > {% block sw_product_stream_filter_field_select %} <sw-product-stream-field-select v-bind="{ field: fields[index], definition, index }" :disabled="!acl.can('product_stream.editor') || undefined" :has-error="hasError" @field-changed="updateFields" /> {% endblock %} </template> {% endblock %} {% block sw_product_stream_filter_value %} <sw-product-stream-value v-bind="{ condition, ...lastField }" :disabled="!acl.can('product_stream.editor') || undefined" @type-change="changeType" @boolean-change="changeBooleanValue" @empty-change="changeEmptyValue" /> {% endblock %} </div> {% endblock %} {% block sw_product_stream_filter_field_actions %} <sw-context-button v-tooltip="getNoPermissionsTooltip('product_stream.editor', false)" class="sw-product-stream-filter__context-button" :disabled="!acl.can('product_stream.editor') || undefined" > {% block sw_product_stream_filter_field_create_before_action %} <sw-context-menu-item class="sw-product-stream-filter__create-before-action" @click="onCreateBefore" > {{ $tc('global.sw-condition.condition.createBefore') }} </sw-context-menu-item> {% endblock %} {% block sw_product_stream_filter_field_create_after_action %} <sw-context-menu-item class="sw-product-stream-filter__create-after-action" @click="onCreateAfter" > {{ $tc('global.sw-condition.condition.createAfter') }} </sw-context-menu-item> {% endblock %} {% block sw_product_stream_filter_field_delete_action %} <sw-context-menu-item variant="danger" @click="onDeleteCondition" > {{ $tc('global.default.delete') }} </sw-context-menu-item> {% endblock %} </sw-context-button> {% endblock %} </div> {% endblock %} {% block sw_product_stream_filter_error %} <sw-field-error :error="currentError" /> {% endblock %} </div> {% endblock %} {% endblock %}`,{EntityDefinition:s}=Shopware,c={template:l,inject:["createCondition","insertNodeIntoTree","removeNodeFromTree","productCustomFields","acl","conditionDataProviderService"],computed:{actualCondition(){return this.condition.type==="not"?this.condition.queries[0]:this.condition},fields:{get(){return this.actualCondition.field?this.conditionDataProviderService.allowedJsonAccessors.hasOwnProperty(this.actualCondition.field)?[this.actualCondition.field]:this.isCustomField(this.actualCondition.field)?[this.actualCondition.field]:this.actualCondition.field.split("."):[]},set(t){let e=t.join(".");if(e.match(".$")&&(e=e.substring(0,e.length)),!e){this.actualCondition.field=null;return}this.actualCondition.field=e}},fieldDefinitions(){let t=s.get("product");const e=[t];return this.fields.forEach(i=>{const n=t.getField(i);n&&n.type==="association"&&(t=s.get(n.entity),e.push(t))}),e},lastField(){if(this.fieldDefinitions.length>this.fields.length)return{fieldName:null,definition:s.get("product")};const t=this.fields[this.fields.length-1],e=this.fieldDefinitions[this.fieldDefinitions.length-1];return{fieldName:t,definition:e}}},methods:{updateFields({field:t,index:e}){const i=this.fields.slice(0,e);t&&i.push(t),this.changeType({type:null,parameters:null}),this.fields=i},handleWrapForTypeNull(t,e){return t===null&&this.condition.type==="not"&&this.unwrapNot(this.condition,null),this.conditionDataProviderService.isNegatedType(t)&&this.condition.type!=="not"?(this.wrapInNot(this.condition,t,e),!1):this.condition.type==="not"&&!this.conditionDataProviderService.isNegatedType(t)?(this.unwrapNot(this.condition,t,e),!1):this.condition.type==="not"&&this.conditionDataProviderService.isNegatedType(t)?(this.unwrapNot(this.condition,t,e),this.wrapInNot(this.condition,t,e),!1):(this.actualCondition.type=t,!0)},changeBooleanValue({type:t,value:e}){this.handleWrapForTypeNull(t),this.condition.type==="not"&&(this.condition.queries[0].value="1"),this.condition.value=e},changeEmptyValue({type:t}){this.handleWrapForTypeNull(t),this.condition.type==="not"&&(this.condition.queries[0].value=null),this.condition.value=null},changeType({type:t,parameters:e}){this.handleWrapForTypeNull(t,e)&&(this.actualCondition.parameters=e,this.actualCondition.value=null)},wrapInNot(t,e,i){const{identifier:n}=this.conditionDataProviderService.negateOperator(e),o=this.copyParameters({...t,parameters:i});o.type=n;const r=this.createCondition(o,t.id,0);this.insertNodeIntoTree(this.condition,r),Object.assign(t,{type:"not",field:null,operator:null,value:null,parameters:null})},unwrapNot(t,e,i){const n=t.queries[0],o=this.copyParameters({...n,parameters:i});o.type=e,Object.assign(t,o),this.removeNodeFromTree(this.condition,n)},copyParameters({field:t,type:e,operator:i,parameters:n,value:o}){return{field:t,type:e,operator:i,parameters:n,value:o}},getNoPermissionsTooltip(t,e=!0){return{showDelay:300,message:this.$tc("sw-privileges.tooltip.warning"),appearance:"dark",showOnDisabledElements:e,disabled:this.acl.can(t)}},isCustomField(t){const e=t.replace(/customFields\./,"");return Object.keys(this.productCustomFields).includes(e)}}};export{c as default};
