{"version":3,"file":"index-Cb2cZ3nu.js","sources":["../../../app/administration/node_modules/@cicada-ag/meteor-admin-sdk/es/location/index.js","../../../app/administration/src/app/component/structure/sw-hidden-iframes/sw-hidden-iframes.html.twig","../../../app/administration/src/app/component/structure/sw-hidden-iframes/index.js"],"sourcesContent":["import { send } from '../channel';\nimport { getLocationId } from '../_internals/utils';\n// TODO: add documentation (+ \"body {overflow: hidden}\" notice for views)\nexport const is = (location) => {\n    return getLocationId() === location;\n};\nexport const get = () => {\n    var _a;\n    return (_a = getLocationId()) !== null && _a !== void 0 ? _a : '';\n};\nexport const isIframe = () => {\n    return window !== window.parent;\n};\nexport const updateHeight = (height) => {\n    if (height) {\n        return send('locationUpdateHeight', {\n            height,\n            locationId: getLocationId(),\n        });\n    }\n    // If no height is defined then send the current document height\n    const currentHeight = document.documentElement.offsetHeight;\n    return send('locationUpdateHeight', {\n        height: currentHeight,\n        locationId: getLocationId(),\n    });\n};\nlet resizeObserver = null;\nexport const startAutoResizer = () => {\n    // Create an Observer instance\n    resizeObserver = new ResizeObserver(() => {\n        void updateHeight();\n    });\n    // Start observing a DOM node\n    resizeObserver.observe(document.body);\n};\nexport const stopAutoResizer = () => {\n    if (resizeObserver) {\n        resizeObserver.unobserve(document.body);\n        resizeObserver.disconnect();\n    }\n};\nexport const updateUrl = (url) => {\n    return send('locationUpdateUrl', {\n        hash: url.hash,\n        pathname: url.pathname,\n        searchParams: [...url.searchParams.entries()],\n        locationId: getLocationId(),\n    });\n};\nlet urlUpdateInterval = null;\nexport const startAutoUrlUpdater = () => {\n    let prevUrl = undefined;\n    if (urlUpdateInterval) {\n        clearInterval(urlUpdateInterval);\n    }\n    urlUpdateInterval = setInterval(() => {\n        const currUrl = window.location.href;\n        if (currUrl !== prevUrl) {\n            prevUrl = currUrl;\n            void updateUrl(new URL(currUrl));\n        }\n    }, 50);\n};\nexport const stopAutoUrlUpdater = () => {\n    if (urlUpdateInterval) {\n        clearInterval(urlUpdateInterval);\n    }\n};\nexport const MAIN_HIDDEN = 'sw-main-hidden';\n//# sourceMappingURL=index.js.map","<div\n    class=\"sw-hidden-iframes\"\n    style=\"display: none;\"\n>\n    <sw-iframe-renderer\n        v-for=\"extension in extensions\"\n        :key=\"`${extension.type}-${extension.name}`\"\n        :src=\"extension.baseUrl\"\n        :location-id=\"MAIN_HIDDEN\"\n    />\n</div>\n","import { MAIN_HIDDEN } from '@cicada-ag/meteor-admin-sdk/es/location';\nimport template from './sw-hidden-iframes.html.twig';\n\nconst { Component } = Cicada;\n\n/**\n * @package admin\n *\n * @private\n */\nComponent.register('sw-hidden-iframes', {\n    template,\n\n    compatConfig: Cicada.compatConfig,\n\n    computed: {\n        extensions() {\n            return Cicada.State.getters['extensions/privilegedExtensions'];\n        },\n\n        MAIN_HIDDEN() {\n            return MAIN_HIDDEN;\n        },\n    },\n});\n"],"names":["MAIN_HIDDEN","template","Component"],"mappings":"mEAqEO,MAAMA,EAAc,iBCrEZC,EAAA,yNCGT,CAAE,UAAAC,CAAW,EAAG,OAOtBA,EAAU,SAAS,oBAAqB,CACpC,SAAAD,EAEA,aAAc,OAAO,aAErB,SAAU,CACN,YAAa,CACT,OAAO,OAAO,MAAM,QAAQ,iCAAiC,CAChE,EAED,aAAc,CACV,OAAOD,CACV,CACJ,CACL,CAAC","x_google_ignoreList":[0]}