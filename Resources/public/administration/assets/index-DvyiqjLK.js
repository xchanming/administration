import{r as c}from"./main.vite-GBE0T_D3.js";import"./administration-BlrHhDOI.js";import"./channel-DxwX5hMG.js";const n=`{% block sw_order_address_selection %} <div class="sw-order-address"> {% block sw_order_address_selection_modal %} <sw-modal v-if="currentAddress" :title="modalTitle" @modal-close="currentAddress = null" > {% block sw_order_address_modal_content %} <sw-customer-address-form :address="currentAddress" :customer="customer" > <sw-customer-address-form-options :address="currentAddress" :customer="customer" :custom-field-sets="customerAddressCustomFieldSets" @default-address-change="onChangeDefaultAddress" /> </sw-customer-address-form> {% endblock %} {% block sw_order_address_modal_actions %} <template #modal-footer> {% block sw_order_address_modal_action_close %} <sw-button size="small" @click="currentAddress = null" > {{ $tc('global.default.cancel') }} </sw-button> {% endblock %} {% block sw_order_address_modal_actions_apply %} <sw-button variant="primary" size="small" @click="onSaveAddress" > {{ $tc('global.default.apply') }} </sw-button> {% endblock %} </template> {% endblock %} </sw-modal> {% endblock %} {% block sw_order_address_selection_entity_single_select %} <sw-single-select :value="addressId" class="sw-order-address-selection" :options="addressOptions" value-property="id" :label="label" :placeholder="$tc('sw-order.createBase.detailsBody.placeholderAddress')" :popover-classes="['sw-order-address-selection__popover']" :disabled="disabled" @update:value="onAddressChange" > <template #before-item-list> <ul class="sw-select-result__item-list"> <li class="sw-select-result sw-select-result__add-new-address" role="button" tabindex="0" @click="onCreateNewAddress" @keydown.enter="onCreateNewAddress" > {{ $tc('sw-order.createBase.detailsBody.buttonAddNewAddress') }} </li> </ul> </template> <template #result-item="{ item, index, labelProperty, isSelected }"> <sw-select-result :selected="isSelected(item)" v-bind="{ item, index }" :class="{'sw-order-address-selection__order-address': isSelected(item)}" > <div class="sw-order-address-selection__information"> <p>{{ item.name }}</p> <p v-if="item.company" class="text-gray" > {{ item.company }}<span v-if="item.department"> - {{ item.department }}</span> </p> <p class="text-gray"> {{ item.street }} </p> <p class="text-gray"> {{ item.zipcode }} {{ item.city }} </p> <p class="text-gray"> {{ item.country.translated.name }} </p> </div> <div class="sw-order-address-selection__edit-action"> <sw-context-menu-item @click="onEditAddress(item.id)"> {{ $tc('global.default.edit') }} </sw-context-menu-item> </div> </sw-select-result> </template> </sw-single-select> {% endblock %} </div> {% endblock %}`,{EntityDefinition:l,Mixin:u}=Cicada,{Criteria:i}=Cicada.Data,{mapState:m}=Cicada.Component.getComponentHelper(),{cloneDeep:p}=Cicada.Utils.object,y={template:n,compatConfig:Cicada.compatConfig,inject:["repositoryFactory"],emits:["change-address"],mixins:[u.getByName("notification")],props:{address:{type:Object,required:!1,default:()=>{}},label:{type:String,required:!1,default:""},addressId:{type:String,required:!1,default:null},disabled:{type:Boolean,required:!1,default:!1},type:{type:String,required:!1,default:""}},data(){var e;return{customer:{},currentAddress:null,customerAddressCustomFieldSets:null,orderAddressId:p((e=this.address)==null?void 0:e.id)}},computed:{...m("swOrderDetail",["order","versionContext"]),orderCustomer(){return this.order.orderCustomer},orderRepository(){return this.repositoryFactory.create("order")},addressRepository(){return this.repositoryFactory.create(this.customer.addresses.entity,this.customer.addresses.source)},customerRepository(){return this.repositoryFactory.create("customer")},customerCriteria(){const e=new i(1,25);return e.addAssociation("addresses.country"),e},customFieldSetRepository(){return this.repositoryFactory.create("custom_field_set")},customFieldSetCriteria(){const e=new i(1,25);return e.addFilter(i.equals("relations.entityName","customer_address")).addAssociation("customFields"),e},addressOptions(){var t;const e=(((t=this.customer)==null?void 0:t.addresses)||[]).map(s=>{const r={label:this.addressLabel(s),...s};return r.id=s.id,r});return this.address&&e.unshift({label:this.addressLabel(this.address),...this.address}),e},modalTitle(){var e;return this.$tc(`sw-order.addressSelection.${(e=this.currentAddress)!=null&&e._isNew?"modalTitleEditAddress":"modalTitleSelectAddress"}`)},selectedAddressId(){var e;return((e=this.address)==null?void 0:e.customerAddressId)??this.addressId}},created(){this.createdComponent()},methods:{createdComponent(){this.getCustomer(),this.getCustomFieldSet()},onEditAddress(e){if(e===this.address.id){this.currentAddress=this.address;return}const t=this.addressRepository.create(Cicada.Context.api,e);this.currentAddress=Object.assign(t,this.customer.addresses.get(e))},onCreateNewAddress(){this.createNewCustomerAddress()},createNewCustomerAddress(){const e=this.addressRepository.create();e.customerId=this.customer.id,this.currentAddress=e},onSaveAddress(){if(this.currentAddress===null)return Promise.resolve();if(this.currentAddress.id===this.address.id)return this.orderRepository.save(this.order,this.versionContext).then(()=>{this.currentAddress=null,this.onAddressChange(this.address.id,!0)}).catch(()=>{this.createNotificationError({message:this.$tc("sw-order.detail.messageSaveError")})});if(!this.isValidAddress(this.currentAddress))return this.createNotificationError({message:this.$tc("sw-customer.notification.requiredFields")}),Promise.reject();const e=this.customer.addresses.get(this.currentAddress.id)??this.addressRepository.create(Cicada.Context.api,this.currentAddress.id);return Object.assign(e,this.currentAddress),this.customer.addresses.has(e.id)&&this.customer.addresses.remove(e.id),this.customer.addresses.push(e),this.customerRepository.save(this.customer).then(()=>{this.currentAddress=null})},isValidAddress(e){const t=["createdAt"];return Object.keys(l.getRequiredFields("customer_address")).every(r=>t.indexOf(r)!==-1||c(e[r]))},onChangeDefaultAddress(e){if(!e.value){this.hasOwnProperty("defaultShippingAddressId")&&(this.customer.defaultShippingAddressId=this.defaultShippingAddressId),this.hasOwnProperty("defaultBillingAddressId")&&(this.customer.defaultBillingAddressId=this.defaultBillingAddressId);return}const s=`default${this.createPrefix(e.name,"-address")}AddressId`;this[s]=this.customer[s],this.customer[s]=e.id},createPrefix(e,t){const s=e.replace(t,"");return`${s.charAt(0).toUpperCase()}${s.slice(1)}`},onAddressChange(e,t=!1){this.$emit("change-address",{orderAddressId:this.orderAddressId,customerAddressId:e,type:this.type,edited:t})},getCustomer(){return this.orderCustomer.customerId?this.customerRepository.get(this.orderCustomer.customerId,Cicada.Context.api,this.customerCriteria).then(e=>{this.customer=e}):Promise.reject()},getCustomFieldSet(){return this.customFieldSetRepository.search(this.customFieldSetCriteria).then(e=>{this.customerAddressCustomFieldSets=e})},addressLabel(e){var s,r,o,a;return[[e.company,e.department].filter(d=>d).join(" - "),e.street,`${e.zipcode??""} ${e.city}`.trim(),(r=(s=e==null?void 0:e.countryState)==null?void 0:s.translated)==null?void 0:r.name,(a=(o=e==null?void 0:e.country)==null?void 0:o.translated)==null?void 0:a.name].filter(d=>d).join(", ")}}};export{y as default};
//# sourceMappingURL=index-DvyiqjLK.js.map
