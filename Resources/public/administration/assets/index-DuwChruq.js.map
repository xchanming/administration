{"version":3,"file":"index-DuwChruq.js","sources":["../../../app/administration/src/app/component/form/select/entity/advanced-selection-entities/sw-advanced-selection-rule/sw-advanced-selection-rule.html.twig","../../../app/administration/src/app/component/form/select/entity/advanced-selection-entities/sw-advanced-selection-rule/index.js"],"sourcesContent":["<!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n{% block sw_advanced_selection_rule %}\n{# TODO - NEXT-20791 : remove store-key property. Filters should not be stored somewhere #}\n<sw-entity-advanced-selection-modal\n    entity-name=\"rule\"\n    :entity-display-text=\"$tc('global.sw-entity-advanced-selection-modal.entity.rule')\"\n    store-key=\"advancedSelection.rule\"\n    :entity-context=\"context\"\n    :entity-columns=\"columns\"\n    :entity-filters=\"filters\"\n    :criteria-aggregations=\"aggregations\"\n    :entity-associations=\"associations\"\n    :is-record-selectable-callback=\"isRecordSelectable\"\n    :disable-previews=\"true\"\n    empty-image-path=\"/administration/static/img/empty-states/products-empty-state.svg\"\n    v-bind=\"$attrs\"\n    @selection-submit=\"$emit('selection-submit', $event)\"\n    @modal-close=\"$emit('modal-close', $event)\"\n>\n    <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n    {% block sw_advanced_selection_rule__list_grid_columns_name %}\n    <template #column-name=\"{ item }\">\n        <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n        {% block sw_advanced_selection_rule__list_grid_columns_name_content %}\n        <span :class=\"getColumnClass(item)\">\n            {{ item.name }}\n        </span>\n        {% endblock %}\n    </template>\n    {% endblock %}\n\n    <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n    {% block sw_advanced_selection_rule__list_grid_columns_priority %}\n    <template #column-priority=\"{ item }\">\n        <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n        {% block sw_advanced_selection_rule__list_grid_columns_priority_content %}\n        <span :class=\"getColumnClass(item)\">\n            {{ item.priority }}\n        </span>\n        {% endblock %}\n    </template>\n    {% endblock %}\n\n    <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n    {% block sw_advanced_selection_rule__list_grid_columns_description %}\n    <template #column-description=\"{ item }\">\n        <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n        {% block sw_advanced_selection_rule__list_grid_columns_description_content %}\n        <span :class=\"getColumnClass(item)\">\n            {{ item.description }}\n        </span>\n        {% endblock %}\n    </template>\n    {% endblock %}\n\n    <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n    {% block sw_advanced_selection_rule_list_grid_columns_invalid %}\n    <template #column-invalid=\"{item}\">\n        <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n        {% block sw_advanced_selection_rule_list_grid_columns_invalid_content %}\n        <span :class=\"getColumnClass(item)\">\n            <template v-if=\"item.invalid\">\n                {{ $tc('sw-settings-rule.list.invalid') }}\n            </template>\n            <template v-else>\n                {{ $tc('sw-settings-rule.list.valid') }}\n            </template>\n        </span>\n        {% endblock %}\n    </template>\n    {% endblock %}\n\n    <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n    {% block sw_advanced_selection_rule_list_grid_columns_create_date %}\n    <template #column-updatedAt=\"{item}\">\n        <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n        {% block sw_advanced_selection_rule_list_grid_columns_create_date_content %}\n        <span :class=\"getColumnClass(item)\">\n            <template v-if=\"item.updatedAt\">\n                {{ dateFilter(item.updatedAt) }}\n            </template>\n            <template v-else>\n                {{ dateFilter(item.createdAt) }}\n            </template>\n        </span>\n        {% endblock %}\n    </template>\n    {% endblock %}\n\n    <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n    {% block sw_advanced_selection_rule_list_grid_columns_tags %}\n    <template #column-tags=\"{ item }\">\n        <span :class=\"getColumnClass(item)\">\n            <span class=\"sw-data-grid__cell-value\">\n                <template v-if=\"item.tags.length > 0\">\n                    <sw-label\n                        v-for=\"tag in item.tags\"\n                        :key=\"tag.id\"\n                        size=\"medium\"\n                    >\n                        <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n                        {% block sw_advanced_selection_rule_list_grid_columns_tags_content %}\n                        {{ tag.name }}\n                        {% endblock %}\n                    </sw-label>\n                </template>\n                <template v-else>\n                    -\n                </template>\n            </span>\n        </span>\n    </template>\n    {% endblock %}\n\n    <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n    {% block sw_advanced_selection_rule_list_grid_columns_assignments %}\n    <template\n        v-for=\"(propertyName, index) in assignmentProperties\"\n        #[`column-${propertyName}`]=\"{ item, aggregations }\"\n        :key=\"index\"\n    >\n        <span\n            class=\"sw-data-grid__cell-value\"\n        >\n            {{ getCounts(item.id, aggregations)[propertyName] }}\n            {{ $tc(`sw-settings-rule.list.assignments.${propertyName}`, getCounts(item.id, aggregations)[propertyName]) }}\n        </span>\n    </template>\n    {% endblock %}\n</sw-entity-advanced-selection-modal>\n{% endblock %}\n","import template from './sw-advanced-selection-rule.html.twig';\nimport './sw-advanced-selection-rule.scss';\n\nconst { Component } = Cicada;\nconst { Criteria } = Cicada.Data;\n\n/**\n * @private\n * @package services-settings\n * @description Configures the advanced selection in entity selects.\n * Should only be used as a parameter `advanced-selection-component=\"sw-advanced-selection-rule\"`\n * to `sw-entity-...-select` components.\n * @status prototype\n */\nComponent.register('sw-advanced-selection-rule', {\n    template,\n\n    compatConfig: Cicada.compatConfig,\n\n    inject: [\n        'ruleConditionDataProviderService',\n        'feature',\n    ],\n\n    emits: [\n        'selection-submit',\n        'modal-close',\n    ],\n\n    props: {\n        ruleAwareGroupKey: {\n            type: String,\n            required: true,\n        },\n\n        /**\n         * Contains an array of rule ids which should not be selectable,\n         * for example because they are already used in a different place\n         */\n        restrictedRuleIds: {\n            type: Array,\n            required: false,\n            default() {\n                return [];\n            },\n        },\n\n        /**\n         * Tooltip label to show for any rule in the restrictedRuleIds array\n         */\n        restrictedRuleIdsTooltipLabel: {\n            type: String,\n            required: false,\n            default() {\n                return '';\n            },\n        },\n    },\n\n    computed: {\n        getRuleDefinition() {\n            return Cicada.EntityDefinition.get('rule');\n        },\n\n        assignmentProperties() {\n            const properties = [];\n\n            Object.keys(this.getRuleDefinition.properties).forEach((propertyName) => {\n                if (propertyName === 'conditions' || propertyName === 'tags') {\n                    return;\n                }\n\n                const property = this.getRuleDefinition.properties[propertyName];\n                if (property.relation === 'many_to_many' || property.relation === 'one_to_many') {\n                    properties.push(propertyName);\n                }\n            });\n\n            return properties;\n        },\n\n        context() {\n            return Cicada.Context.api;\n        },\n\n        columns() {\n            const columns = [\n                {\n                    property: 'name',\n                    dataIndex: 'name',\n                    inlineEdit: 'string',\n                    label: 'sw-settings-rule.list.columnName',\n                    routerLink: 'sw.settings.rule.detail',\n                    width: '250px',\n                    allowResize: true,\n                    primary: true,\n                },\n                {\n                    property: 'priority',\n                    label: 'sw-settings-rule.list.columnPriority',\n                    inlineEdit: 'number',\n                    allowResize: true,\n                },\n                {\n                    property: 'description',\n                    label: 'sw-settings-rule.list.columnDescription',\n                    width: '250px',\n                    allowResize: true,\n                },\n                {\n                    property: 'updatedAt',\n                    label: 'sw-settings-rule.list.columnDateCreated',\n                    align: 'right',\n                    allowResize: true,\n                },\n                {\n                    property: 'invalid',\n                    label: 'sw-product-stream.list.columnStatus',\n                    allowResize: true,\n                },\n                {\n                    property: 'tags',\n                    label: 'sw-settings-rule.list.columnTags',\n                    width: '250px',\n                    allowResize: true,\n                    sortable: false,\n                    visible: false,\n                },\n            ];\n\n            this.assignmentProperties.forEach((propertyName) => {\n                const labelPostfix = propertyName.charAt(0).toUpperCase() + propertyName.slice(1);\n                columns.push({\n                    property: `${propertyName}`,\n                    label: `sw-settings-rule.list.column${labelPostfix}`,\n                    width: '250px',\n                    allowResize: true,\n                    sortable: true,\n                    visible: false,\n                });\n            });\n\n            return columns;\n        },\n\n        filters() {\n            const filters = {\n                conditionGroups: {\n                    property: 'conditions.type',\n                    label: this.$tc('sw-settings-rule.filter.groupFilter.label'),\n                    placeholder: this.$tc('sw-settings-rule.filter.groupFilter.placeholder'),\n                    type: 'multi-select-filter',\n                    options: this.groupFilterOptions,\n                },\n                conditions: {\n                    property: 'conditions.type',\n                    label: this.$tc('sw-settings-rule.filter.conditionFilter.label'),\n                    placeholder: this.$tc('sw-settings-rule.filter.conditionFilter.placeholder'),\n                    type: 'multi-select-filter',\n                    options: this.conditionFilterOptions,\n                },\n                assignments: {\n                    existingType: true,\n                    property: 'conditions',\n                    label: this.$tc('sw-settings-rule.filter.assignmentFilter.label'),\n                    placeholder: this.$tc('sw-settings-rule.filter.assignmentFilter.placeholder'),\n                    type: 'multi-select-filter',\n                    options: this.associationFilterOptions,\n                },\n                tags: {\n                    property: 'tags',\n                    label: this.$tc('sw-settings-rule.filter.tagFilter.label'),\n                    placeholder: this.$tc('sw-settings-rule.filter.tagFilter.placeholder'),\n                    criteria: new Criteria(1, 25).addSorting(Criteria.sort('name')),\n                },\n            };\n\n            return filters;\n        },\n\n        conditionFilterOptions() {\n            const conditions = this.ruleConditionDataProviderService.getConditions().map((condition) => {\n                return {\n                    value: condition.type,\n                    label: this.$tc(condition.label),\n                };\n            });\n            conditions.sort((a, b) => a.label.localeCompare(b.label));\n\n            return conditions;\n        },\n\n        groupFilterOptions() {\n            const groupFilter = [];\n            Object.values(this.ruleConditionDataProviderService.getGroups()).forEach((group) => {\n                const conditionFilterString = this.ruleConditionDataProviderService\n                    .getByGroup(group.id)\n                    .map((condition) => {\n                        return condition.type;\n                    })\n                    .join('|');\n\n                groupFilter.push({\n                    value: conditionFilterString,\n                    label: this.$tc(group.name),\n                });\n            });\n            groupFilter.sort((a, b) => a.label.localeCompare(b.label));\n\n            return groupFilter;\n        },\n\n        associationFilterOptions() {\n            const associations = [];\n            Object.entries(this.getRuleDefinition.properties).forEach(\n                ([\n                    key,\n                    value,\n                ]) => {\n                    if (value.type === 'association' && key !== 'conditions' && key !== 'tags') {\n                        associations.push({\n                            value: key,\n                            label: this.$tc(`sw-settings-rule.filter.assignmentFilter.values.${key}`),\n                        });\n                    }\n                },\n            );\n            associations.sort((a, b) => a.label.localeCompare(b.label));\n\n            return associations;\n        },\n\n        associations() {\n            const associations = [\n                'tags',\n            ];\n\n            associations.push('conditions');\n\n            return associations;\n        },\n\n        aggregations() {\n            const aggregations = [];\n            Object.keys(this.getRuleDefinition.properties).forEach((propertyName) => {\n                if (propertyName === 'conditions' || propertyName === 'tags') {\n                    return;\n                }\n\n                const property = this.getRuleDefinition.properties[propertyName];\n\n                if (property.relation === 'many_to_many' || property.relation === 'one_to_many') {\n                    aggregations.push(\n                        Criteria.terms(\n                            propertyName,\n                            'id',\n                            null,\n                            null,\n                            Criteria.count(propertyName, `rule.${propertyName}.id`),\n                        ),\n                    );\n                }\n            });\n\n            return aggregations;\n        },\n\n        dateFilter() {\n            return Cicada.Filter.getByName('date');\n        },\n    },\n\n    methods: {\n        getColumnClass(item) {\n            return this.isRestricted(item) ? 'sw-advanced-selection-rule-disabled' : '';\n        },\n\n        tooltipConfig(rule) {\n            if (this.restrictedRuleIds.includes(rule.id)) {\n                return {\n                    message: this.restrictedRuleIdsTooltipLabel,\n                    disabled: false,\n                };\n            }\n\n            return this.ruleConditionDataProviderService.getRestrictedRuleTooltipConfig(\n                rule.conditions,\n                this.ruleAwareGroupKey,\n            );\n        },\n\n        isRestricted(item) {\n            const insideRestrictedRuleIds = this.restrictedRuleIds.includes(item.id);\n\n            const isRuleRestricted = this.ruleConditionDataProviderService.isRuleRestricted(\n                item.conditions,\n                this.ruleAwareGroupKey,\n            );\n\n            return isRuleRestricted || insideRestrictedRuleIds;\n        },\n\n        isRecordSelectable(item) {\n            const isRestricted = this.isRestricted(item);\n\n            if (isRestricted) {\n                return {\n                    isSelectable: !isRestricted,\n                    tooltip: this.tooltipConfig(item),\n                };\n            }\n\n            return {};\n        },\n\n        getCounts(id, aggregations) {\n            const counts = {};\n\n            if (aggregations === undefined) {\n                return counts;\n            }\n\n            Object.keys(this.getRuleDefinition.properties).forEach((propertyName) => {\n                if (propertyName === 'conditions' || propertyName === 'tags') {\n                    return;\n                }\n\n                const property = this.getRuleDefinition.properties[propertyName];\n                if (property.relation === 'many_to_many' || property.relation === 'one_to_many') {\n                    const countBucket = aggregations[propertyName]?.buckets.filter((bucket) => {\n                        return bucket.key === id;\n                    })[0];\n\n                    if (!countBucket || !countBucket[propertyName] || !countBucket[propertyName].count) {\n                        counts[propertyName] = 0;\n\n                        return;\n                    }\n\n                    counts[propertyName] = countBucket[propertyName].count;\n                }\n            });\n\n            return counts;\n        },\n    },\n});\n"],"names":["template","Component","Criteria","properties","propertyName","property","columns","labelPostfix","conditions","condition","a","b","groupFilter","group","conditionFilterString","associations","key","value","aggregations","item","rule","insideRestrictedRuleIds","isRestricted","id","counts","_a","countBucket","bucket"],"mappings":"AAAA,MAAeA,EAAA,20GCGT,CAAE,UAAAC,CAAW,EAAG,OAChB,CAAE,SAAAC,CAAQ,EAAK,OAAO,KAU5BD,EAAU,SAAS,6BAA8B,CAC7C,SAAAD,EAEA,aAAc,OAAO,aAErB,OAAQ,CACJ,mCACA,SACH,EAED,MAAO,CACH,mBACA,aACH,EAED,MAAO,CACH,kBAAmB,CACf,KAAM,OACN,SAAU,EACb,EAMD,kBAAmB,CACf,KAAM,MACN,SAAU,GACV,SAAU,CACN,MAAO,EACV,CACJ,EAKD,8BAA+B,CAC3B,KAAM,OACN,SAAU,GACV,SAAU,CACN,MAAO,EACV,CACJ,CACJ,EAED,SAAU,CACN,mBAAoB,CAChB,OAAO,OAAO,iBAAiB,IAAI,MAAM,CAC5C,EAED,sBAAuB,CACnB,MAAMG,EAAa,CAAA,EAEnB,cAAO,KAAK,KAAK,kBAAkB,UAAU,EAAE,QAASC,GAAiB,CACrE,GAAIA,IAAiB,cAAgBA,IAAiB,OAClD,OAGJ,MAAMC,EAAW,KAAK,kBAAkB,WAAWD,CAAY,GAC3DC,EAAS,WAAa,gBAAkBA,EAAS,WAAa,gBAC9DF,EAAW,KAAKC,CAAY,CAEhD,CAAa,EAEMD,CACV,EAED,SAAU,CACN,OAAO,OAAO,QAAQ,GACzB,EAED,SAAU,CACN,MAAMG,EAAU,CACZ,CACI,SAAU,OACV,UAAW,OACX,WAAY,SACZ,MAAO,mCACP,WAAY,0BACZ,MAAO,QACP,YAAa,GACb,QAAS,EACZ,EACD,CACI,SAAU,WACV,MAAO,uCACP,WAAY,SACZ,YAAa,EAChB,EACD,CACI,SAAU,cACV,MAAO,0CACP,MAAO,QACP,YAAa,EAChB,EACD,CACI,SAAU,YACV,MAAO,0CACP,MAAO,QACP,YAAa,EAChB,EACD,CACI,SAAU,UACV,MAAO,sCACP,YAAa,EAChB,EACD,CACI,SAAU,OACV,MAAO,mCACP,MAAO,QACP,YAAa,GACb,SAAU,GACV,QAAS,EACZ,CACjB,EAEY,YAAK,qBAAqB,QAASF,GAAiB,CAChD,MAAMG,EAAeH,EAAa,OAAO,CAAC,EAAE,YAAW,EAAKA,EAAa,MAAM,CAAC,EAChFE,EAAQ,KAAK,CACT,SAAU,GAAGF,CAAY,GACzB,MAAO,+BAA+BG,CAAY,GAClD,MAAO,QACP,YAAa,GACb,SAAU,GACV,QAAS,EAC7B,CAAiB,CACjB,CAAa,EAEMD,CACV,EAED,SAAU,CAgCN,MA/BgB,CACZ,gBAAiB,CACb,SAAU,kBACV,MAAO,KAAK,IAAI,2CAA2C,EAC3D,YAAa,KAAK,IAAI,iDAAiD,EACvE,KAAM,sBACN,QAAS,KAAK,kBACjB,EACD,WAAY,CACR,SAAU,kBACV,MAAO,KAAK,IAAI,+CAA+C,EAC/D,YAAa,KAAK,IAAI,qDAAqD,EAC3E,KAAM,sBACN,QAAS,KAAK,sBACjB,EACD,YAAa,CACT,aAAc,GACd,SAAU,aACV,MAAO,KAAK,IAAI,gDAAgD,EAChE,YAAa,KAAK,IAAI,sDAAsD,EAC5E,KAAM,sBACN,QAAS,KAAK,wBACjB,EACD,KAAM,CACF,SAAU,OACV,MAAO,KAAK,IAAI,yCAAyC,EACzD,YAAa,KAAK,IAAI,+CAA+C,EACrE,SAAU,IAAIJ,EAAS,EAAG,EAAE,EAAE,WAAWA,EAAS,KAAK,MAAM,CAAC,CACjE,CACjB,CAGS,EAED,wBAAyB,CACrB,MAAMM,EAAa,KAAK,iCAAiC,cAAa,EAAG,IAAKC,IACnE,CACH,MAAOA,EAAU,KACjB,MAAO,KAAK,IAAIA,EAAU,KAAK,CACnD,EACa,EACD,OAAAD,EAAW,KAAK,CAACE,EAAGC,IAAMD,EAAE,MAAM,cAAcC,EAAE,KAAK,CAAC,EAEjDH,CACV,EAED,oBAAqB,CACjB,MAAMI,EAAc,CAAA,EACpB,cAAO,OAAO,KAAK,iCAAiC,UAAS,CAAE,EAAE,QAASC,GAAU,CAChF,MAAMC,EAAwB,KAAK,iCAC9B,WAAWD,EAAM,EAAE,EACnB,IAAKJ,GACKA,EAAU,IACpB,EACA,KAAK,GAAG,EAEbG,EAAY,KAAK,CACb,MAAOE,EACP,MAAO,KAAK,IAAID,EAAM,IAAI,CAC9C,CAAiB,CACjB,CAAa,EACDD,EAAY,KAAK,CAACF,EAAGC,IAAMD,EAAE,MAAM,cAAcC,EAAE,KAAK,CAAC,EAElDC,CACV,EAED,0BAA2B,CACvB,MAAMG,EAAe,CAAA,EACrB,cAAO,QAAQ,KAAK,kBAAkB,UAAU,EAAE,QAC9C,CAAC,CACGC,EACAC,CACpB,IAAsB,CACEA,EAAM,OAAS,eAAiBD,IAAQ,cAAgBA,IAAQ,QAChED,EAAa,KAAK,CACd,MAAOC,EACP,MAAO,KAAK,IAAI,mDAAmDA,CAAG,EAAE,CACpG,CAAyB,CAER,CACjB,EACYD,EAAa,KAAK,CAACL,EAAGC,IAAMD,EAAE,MAAM,cAAcC,EAAE,KAAK,CAAC,EAEnDI,CACV,EAED,cAAe,CACX,MAAMA,EAAe,CACjB,MAChB,EAEY,OAAAA,EAAa,KAAK,YAAY,EAEvBA,CACV,EAED,cAAe,CACX,MAAMG,EAAe,CAAA,EACrB,cAAO,KAAK,KAAK,kBAAkB,UAAU,EAAE,QAASd,GAAiB,CACrE,GAAIA,IAAiB,cAAgBA,IAAiB,OAClD,OAGJ,MAAMC,EAAW,KAAK,kBAAkB,WAAWD,CAAY,GAE3DC,EAAS,WAAa,gBAAkBA,EAAS,WAAa,gBAC9Da,EAAa,KACThB,EAAS,MACLE,EACA,KACA,KACA,KACAF,EAAS,MAAME,EAAc,QAAQA,CAAY,KAAK,CACzD,CACzB,CAEA,CAAa,EAEMc,CACV,EAED,YAAa,CACT,OAAO,OAAO,OAAO,UAAU,MAAM,CACxC,CACJ,EAED,QAAS,CACL,eAAeC,EAAM,CACjB,OAAO,KAAK,aAAaA,CAAI,EAAI,sCAAwC,EAC5E,EAED,cAAcC,EAAM,CAChB,OAAI,KAAK,kBAAkB,SAASA,EAAK,EAAE,EAChC,CACH,QAAS,KAAK,8BACd,SAAU,EAC9B,EAGmB,KAAK,iCAAiC,+BACzCA,EAAK,WACL,KAAK,iBACrB,CACS,EAED,aAAaD,EAAM,CACf,MAAME,EAA0B,KAAK,kBAAkB,SAASF,EAAK,EAAE,EAOvE,OALyB,KAAK,iCAAiC,iBAC3DA,EAAK,WACL,KAAK,iBACrB,GAEuCE,CAC9B,EAED,mBAAmBF,EAAM,CACrB,MAAMG,EAAe,KAAK,aAAaH,CAAI,EAE3C,OAAIG,EACO,CACH,aAAc,CAACA,EACf,QAAS,KAAK,cAAcH,CAAI,CACpD,EAGmB,EACV,EAED,UAAUI,EAAIL,EAAc,CACxB,MAAMM,EAAS,CAAA,EAEf,OAAIN,IAAiB,QAIrB,OAAO,KAAK,KAAK,kBAAkB,UAAU,EAAE,QAASd,GAAiB,CDlUrF,IAAAqB,ECmUgB,GAAIrB,IAAiB,cAAgBA,IAAiB,OAClD,OAGJ,MAAMC,EAAW,KAAK,kBAAkB,WAAWD,CAAY,EAC/D,GAAIC,EAAS,WAAa,gBAAkBA,EAAS,WAAa,cAAe,CAC7E,MAAMqB,GAAcD,EAAAP,EAAad,CAAY,IAAzB,YAAAqB,EAA4B,QAAQ,OAAQE,GACrDA,EAAO,MAAQJ,GACvB,GAEH,GAAI,CAACG,GAAe,CAACA,EAAYtB,CAAY,GAAK,CAACsB,EAAYtB,CAAY,EAAE,MAAO,CAChFoB,EAAOpB,CAAY,EAAI,EAEvB,MACH,CAEDoB,EAAOpB,CAAY,EAAIsB,EAAYtB,CAAY,EAAE,KACpD,CACjB,CAAa,EAEMoB,CACV,CACJ,CACL,CAAC"}