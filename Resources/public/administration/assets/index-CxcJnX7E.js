const s=`{% block sw_product_clone_modal %} <sw-modal v-if="cloningVariants" :title="$tc('sw-product.general.cloneTitle')" :closable="false" variant="small" class="clone-variant__modal" > {% block sw_product_clone_modal_description %} <div class="clone-variant__description"> {{ $tc('sw-product.general.cloneNotice') }} </div> {% endblock %} {% block sw_product_clone_modal_progress_bar %} <sw-progress-bar class="clone-variant-progress-bar" :value="progressInPercentage" /> {% endblock %} {% block sw_product_clone_modal_progress_bar_description %} <div class="clone-variant-progress-bar__description"> {{ cloneProgress }} {{ $tc('sw-product.variations.progressTypeOf') }} {{ cloneMaxProgress }} {{ $tc('sw-product.general.cloneSuffix') }} </div> {% endblock %} </sw-modal> {% endblock %}`,{Criteria:i}=Cicada.Data,a={template:s,compatConfig:Cicada.compatConfig,inject:["repositoryFactory","numberRangeService"],emits:["clone-finish"],props:{product:{type:Object,required:!0}},data(){return{cloningVariants:!1,cloneMaxProgress:0,cloneProgress:0}},computed:{progressInPercentage(){return 100/(this.cloneMaxProgress*this.cloneProgress)},repository(){return this.repositoryFactory.create("product")}},created(){this.createdComponent()},methods:{createdComponent(){this.duplicate()},duplicate(){this.numberRangeService.reserve("product").then(this.cloneParent).then(this.verifyVariants)},async cloneParent(t){const e=this.product.variantListingConfig;e&&e.mainVariantId&&(e.mainVariantId=null);const r={cloneChildren:!1,overwrites:{productNumber:t.number,name:`${this.product.name} ${this.$tc("global.default.copy")}`,active:!1,mainVariantId:null,variantListingConfig:e}};return await this.repository.save(this.product),{id:(await this.repository.clone(this.product.id,r,Cicada.Context.api)).id,productNumber:t.number}},verifyVariants(t){this.getChildrenIds().then(e=>{if(e.length<=0){this.$emit("clone-finish",{id:t.id});return}this.cloningVariants=!0,this.cloneProgress=1,this.cloneMaxProgress=e.length,this.duplicateVariant(t,e,()=>{this.cloningVariants=!1,this.$emit("clone-finish",{id:t.id})})})},getChildrenIds(){const t=new i(1,null);return t.addFilter(i.equals("parentId",this.product.id)),this.repository.searchIds(t).then(e=>e.data)},duplicateVariant(t,e,r){if(e.length<=0){r();return}const o=e.shift(),n={overwrites:{parentId:t.id,productNumber:`${t.productNumber}.${this.cloneProgress}`},cloneChildren:!1};this.repository.clone(o,n,Cicada.Context.api).then(()=>{this.cloneProgress+=1,this.duplicateVariant(t,e,r)})}}};export{a as default};
//# sourceMappingURL=index-CxcJnX7E.js.map
