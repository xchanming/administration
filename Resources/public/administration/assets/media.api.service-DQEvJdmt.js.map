{"version":3,"file":"media.api.service-DQEvJdmt.js","sources":["../../../app/administration/src/core/helper/upload-task.helper.js","../../../app/administration/src/core/service/api/media.api.service.js"],"sourcesContent":["/**\n * @package admin\n *\n * This class wraps an upload and stores information about it. For use in core/data/UploadStore\n * @class\n * @private\n */\nexport default class UploadTask {\n    constructor({ uploadTag, src, targetId, fileName, extension = 'dat', isPrivate = false }) {\n        this.running = false;\n        this.src = src;\n        this.uploadTag = uploadTag;\n        this.targetId = targetId;\n        this.fileName = fileName;\n        this.extension = extension;\n        this.error = null;\n        this.isPrivate = isPrivate;\n    }\n}\n","/**\n * @package buyers-experience\n */\nimport { fileReader, array } from 'src/core/service/util.service';\nimport UploadTask from 'src/core/helper/upload-task.helper';\nimport ApiService from '../api.service';\n\nconst UploadEvents = {\n    UPLOAD_ADDED: 'media-upload-add',\n    UPLOAD_FINISHED: 'media-upload-finish',\n    UPLOAD_FAILED: 'media-upload-fail',\n    UPLOAD_CANCELED: 'media-upload-cancel',\n};\n\nconst { Criteria } = Cicada.Data;\n\n/**\n * Gateway for the API end point \"media\"\n * @class\n * @extends ApiService\n */\nclass MediaApiService extends ApiService {\n    constructor(httpClient, loginService, apiEndpoint = 'media') {\n        super(httpClient, loginService, apiEndpoint);\n        this.name = 'mediaService';\n        this.uploads = [];\n        this.$listeners = {};\n        this.cacheDefaultFolder = {};\n    }\n\n    hasListeners(uploadTag) {\n        if (!uploadTag) {\n            return false;\n        }\n\n        return this.$listeners.hasOwnProperty(uploadTag);\n    }\n\n    hasDefaultListeners() {\n        return this.hasListeners('default');\n    }\n\n    addListener(uploadTag, callback) {\n        if (!this.hasListeners(uploadTag)) {\n            this.$listeners[uploadTag] = [];\n        }\n        this.$listeners[uploadTag].push(callback);\n    }\n\n    removeListener(uploadTag, callback) {\n        if (!this.hasListeners(uploadTag)) {\n            return;\n        }\n\n        if (callback === undefined) {\n            array.remove(this.$listeners[uploadTag], () => true);\n            return;\n        }\n\n        array.remove(this.$listeners[uploadTag], (listener) => {\n            return listener === callback;\n        });\n    }\n\n    removeDefaultListener(callback) {\n        this.removeListener('default', callback);\n    }\n\n    addDefaultListener(callback) {\n        this.addListener('default', callback);\n    }\n\n    getListenerForTag(uploadTag) {\n        const tagListener = this.hasListeners(uploadTag) ? this.$listeners[uploadTag] : [];\n        const defaultListeners = this.hasDefaultListeners() ? this.$listeners.default : [];\n\n        return [\n            ...tagListener,\n            ...defaultListeners,\n        ];\n    }\n\n    _createUploadEvent(action, uploadTag, payload) {\n        return { action, uploadTag, payload };\n    }\n\n    addUpload(uploadTag, uploadData) {\n        this.addUploads(uploadTag, [uploadData]);\n    }\n\n    addUploads(uploadTag, uploadCollection) {\n        const tasks = uploadCollection.map((uploadData) => {\n            return new UploadTask({ uploadTag, ...uploadData });\n        });\n\n        this.uploads.push(...tasks);\n\n        this.getListenerForTag(uploadTag).forEach((listener) => {\n            listener(\n                this._createUploadEvent(UploadEvents.UPLOAD_ADDED, uploadTag, {\n                    data: tasks,\n                }),\n            );\n        });\n    }\n\n    keepFile(uploadTag, uploadData) {\n        const task = new UploadTask({ uploadTag, ...uploadData });\n        this.getListenerForTag(uploadTag).forEach((listener) => {\n            listener(\n                this._createUploadEvent(UploadEvents.UPLOAD_FINISHED, uploadTag, {\n                    targetId: task.targetId,\n                    successAmount: 0,\n                    failureAmount: 0,\n                    totalAmount: 0,\n                    customMessage: 'global.sw-media-upload.notification.assigned.message',\n                }),\n            );\n        });\n    }\n\n    cancelUpload(uploadTag, uploadData) {\n        const tasks = new UploadTask({ uploadTag, ...uploadData });\n        this.getListenerForTag(uploadTag).forEach((listener) => {\n            listener(this._createUploadEvent(UploadEvents.UPLOAD_CANCELED, uploadTag, { data: tasks }));\n        });\n    }\n\n    removeByTag(uploadTag) {\n        array.remove(this.uploads, (upload) => {\n            return upload.uploadTag === uploadTag;\n        });\n    }\n\n    runUploads(tag) {\n        const affectedUploads = array.remove(this.uploads, (upload) => {\n            return upload.uploadTag === tag;\n        });\n        const affectedListeners = this.getListenerForTag(tag);\n\n        if (affectedUploads.length === 0) {\n            return Promise.resolve();\n        }\n\n        const totalUploads = affectedUploads.length;\n        let successUploads = 0;\n        let failureUploads = 0;\n        return Promise.all(\n            affectedUploads.map((task) => {\n                if (task.running) {\n                    return Promise.resolve();\n                }\n\n                task.running = true;\n                return this._startUpload(task)\n                    .then(() => {\n                        task.running = false;\n                        successUploads += 1;\n                        affectedListeners.forEach((listener) => {\n                            listener(\n                                this._createUploadEvent(UploadEvents.UPLOAD_FINISHED, tag, {\n                                    targetId: task.targetId,\n                                    successAmount: successUploads,\n                                    failureAmount: failureUploads,\n                                    totalAmount: totalUploads,\n                                }),\n                            );\n                        });\n                    })\n                    .catch((cause) => {\n                        task.error = cause;\n                        task.running = false;\n                        failureUploads += 1;\n                        task.successAmount = successUploads;\n                        task.failureAmount = failureUploads;\n                        task.totalAmount = totalUploads;\n                        affectedListeners.forEach((listener) => {\n                            listener(this._createUploadEvent(UploadEvents.UPLOAD_FAILED, tag, task));\n                        });\n                    });\n            }),\n        );\n    }\n\n    _startUpload(task) {\n        if (task.src instanceof File) {\n            return fileReader.readAsArrayBuffer(task.src).then((buffer) => {\n                return this.uploadMediaById(task.targetId, task.src.type, buffer, task.extension, task.fileName);\n            });\n        }\n\n        if (task.src instanceof URL) {\n            return this.uploadMediaFromUrl(task.targetId, task.src.href, task.extension, task.fileName);\n        }\n\n        return Promise.reject(new Error('src of upload must either be an instance of File or URL'));\n    }\n\n    uploadMediaById(id, mimeType, data, extension, fileName = id) {\n        if (extension === 'glb' && mimeType === '') {\n            mimeType = 'model/gltf-binary';\n        }\n        if (mimeType === 'application/json') {\n            mimeType = 'text/plain';\n        }\n        if (mimeType === '') {\n            mimeType = 'application/octet-stream';\n        }\n\n        const apiRoute = `/_action/${this.getApiBasePath(id)}/upload`;\n        const headers = this.getBasicHeaders({ 'Content-Type': mimeType });\n        const params = {\n            extension,\n            fileName,\n        };\n\n        return this.httpClient.post(apiRoute, data, { params, headers }).then((response) => {\n            return ApiService.handleResponse(response);\n        });\n    }\n\n    uploadMediaFromUrl(id, url, extension, fileName = id) {\n        const apiRoute = `/_action/${this.getApiBasePath(id)}/upload`;\n        const headers = this.getBasicHeaders({\n            'Content-Type': 'application/json',\n        });\n        const params = {\n            extension,\n            fileName,\n        };\n\n        const body = JSON.stringify({ url });\n\n        return this.httpClient.post(apiRoute, body, { params, headers }).then((response) => {\n            return ApiService.handleResponse(response);\n        });\n    }\n\n    renameMedia(id, fileName) {\n        const apiRoute = `/_action/${this.getApiBasePath(id)}/rename`;\n        return this.httpClient\n            .post(\n                apiRoute,\n                JSON.stringify({\n                    fileName,\n                }),\n                {\n                    params: {},\n                    headers: this.getBasicHeaders(),\n                },\n            )\n            .then((response) => {\n                return ApiService.handleResponse(response);\n            });\n    }\n\n    provideName(fileName, extension, mediaId = null) {\n        const apiRoute = `/_action/${this.getApiBasePath()}/provide-name`;\n        return this.httpClient\n            .get(apiRoute, {\n                params: { fileName, extension, mediaId },\n                headers: this.getBasicHeaders(),\n            })\n            .then((response) => {\n                return ApiService.handleResponse(response);\n            });\n    }\n\n    async getDefaultFolderId(entity) {\n        if (this.cacheDefaultFolder[entity]) {\n            return this.cacheDefaultFolder[entity];\n        }\n\n        const defaultFolderRepository = Cicada.Service('repositoryFactory').create('media_default_folder');\n\n        const criteria = new Criteria(1, 1).addFilter(Criteria.equals('entity', entity));\n\n        const items = await defaultFolderRepository.search(criteria);\n        if (items.length !== 1) {\n            return null;\n        }\n        const defaultFolder = items[0];\n\n        if (defaultFolder.folder?.id) {\n            this.cacheDefaultFolder[entity] = defaultFolder.folder.id;\n            return defaultFolder.folder.id;\n        }\n\n        return null;\n    }\n}\n\n// eslint-disable-next-line sw-deprecation-rules/private-feature-declarations\nexport { MediaApiService as default, UploadEvents };\n"],"names":["UploadTask","uploadTag","src","targetId","fileName","extension","isPrivate","UploadEvents","Criteria","MediaApiService","ApiService","httpClient","loginService","apiEndpoint","callback","array","listener","tagListener","defaultListeners","action","payload","uploadData","uploadCollection","tasks","task","upload","tag","affectedUploads","affectedListeners","totalUploads","successUploads","failureUploads","cause","fileReader","buffer","id","mimeType","data","apiRoute","headers","params","response","url","body","mediaId","entity","defaultFolderRepository","criteria","items","defaultFolder","_a"],"mappings":"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"}