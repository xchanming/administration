{"version":3,"file":"index-vzyqKuoM.js","sources":["../../../app/administration/src/module/sw-product-stream/component/sw-product-stream-filter/sw-product-stream-filter.html.twig","../../../app/administration/src/module/sw-product-stream/component/sw-product-stream-filter/index.js"],"sourcesContent":["<!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n{% block sw_condition_base %}\n<!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n{% block sw_product_stream_filter %}\n<div\n    class=\"sw-product-stream-filter\"\n    :class=\"conditionClasses\"\n>\n    <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n    {% block sw_product_stream_filter_container %}\n    <div class=\"sw-product-stream-filter__container\">\n        <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n        {% block sw_product_stream_filter_selects %}\n        <div class=\"sw-product-stream-filter__selects\">\n            <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n            {% block sw_product_stream_filter_fields %}\n            <template\n                v-for=\"(definition, index) in fieldDefinitions\"\n                :key=\"index\"\n            >\n                <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n                {% block sw_product_stream_filter_field_select %}\n                <sw-product-stream-field-select\n                    v-bind=\"{ field: fields[index], definition, index }\"\n                    :disabled=\"!acl.can('product_stream.editor') || undefined\"\n                    :has-error=\"hasError\"\n                    @field-changed=\"updateFields\"\n                />\n                {% endblock %}\n            </template>\n            {% endblock %}\n\n            <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n            {% block sw_product_stream_filter_value %}\n            <sw-product-stream-value\n                v-bind=\"{ condition, ...lastField }\"\n                :disabled=\"!acl.can('product_stream.editor') || undefined\"\n                @type-change=\"changeType\"\n                @boolean-change=\"changeBooleanValue\"\n                @empty-change=\"changeEmptyValue\"\n            />\n            {% endblock %}\n        </div>\n        {% endblock %}\n\n        <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n        {% block sw_product_stream_filter_field_actions %}\n        <sw-context-button\n            v-tooltip=\"getNoPermissionsTooltip('product_stream.editor', false)\"\n            class=\"sw-product-stream-filter__context-button\"\n            :disabled=\"!acl.can('product_stream.editor') || undefined\"\n        >\n            <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n            {% block sw_product_stream_filter_field_create_before_action %}\n            <sw-context-menu-item\n                class=\"sw-product-stream-filter__create-before-action\"\n                @click=\"onCreateBefore\"\n            >\n                {{ $tc('global.sw-condition.condition.createBefore') }}\n            </sw-context-menu-item>\n            {% endblock %}\n\n            <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n            {% block sw_product_stream_filter_field_create_after_action %}\n            <sw-context-menu-item\n                class=\"sw-product-stream-filter__create-after-action\"\n                @click=\"onCreateAfter\"\n            >\n                {{ $tc('global.sw-condition.condition.createAfter') }}\n            </sw-context-menu-item>\n            {% endblock %}\n\n            <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n            {% block sw_product_stream_filter_field_delete_action %}\n            <sw-context-menu-item\n                variant=\"danger\"\n                @click=\"onDeleteCondition\"\n            >\n                {{ $tc('global.default.delete') }}\n            </sw-context-menu-item>\n            {% endblock %}\n        </sw-context-button>\n        {% endblock %}\n    </div>\n    {% endblock %}\n\n    <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n    {% block sw_product_stream_filter_error %}\n    <sw-field-error :error=\"currentError\" />\n    {% endblock %}\n</div>\n    {% endblock %}\n{% endblock %}\n","/**\n * @package services-settings\n */\n\nimport template from './sw-product-stream-filter.html.twig';\nimport './sw-product-stream-filter.scss';\n\nconst { EntityDefinition } = Cicada;\n\n/**\n * @private\n */\nexport default {\n    template,\n\n    compatConfig: Cicada.compatConfig,\n\n    inject: [\n        'createCondition',\n        'insertNodeIntoTree',\n        'removeNodeFromTree',\n        'productCustomFields',\n        'acl',\n        'conditionDataProviderService',\n    ],\n\n    computed: {\n        actualCondition() {\n            if (this.condition.type === 'not') {\n                return this.condition.queries[0];\n            }\n\n            return this.condition;\n        },\n\n        fields: {\n            get() {\n                if (!this.actualCondition.field) {\n                    return [];\n                }\n\n                if (this.conditionDataProviderService.allowedJsonAccessors.hasOwnProperty(this.actualCondition.field)) {\n                    return [this.actualCondition.field];\n                }\n\n                if (this.isCustomField(this.actualCondition.field)) {\n                    return [this.actualCondition.field];\n                }\n\n                return this.actualCondition.field.split('.');\n            },\n            set(fields) {\n                let concatenation = fields.join('.');\n\n                if (concatenation.match('.$')) {\n                    concatenation = concatenation.substring(0, concatenation.length);\n                }\n\n                if (!concatenation) {\n                    this.actualCondition.field = null;\n                    return;\n                }\n\n                this.actualCondition.field = concatenation;\n            },\n        },\n\n        fieldDefinitions() {\n            let currentDefinition = EntityDefinition.get('product');\n\n            const fieldDefinitions = [currentDefinition];\n            this.fields.forEach((fieldName) => {\n                const fieldDefinition = currentDefinition.getField(fieldName);\n\n                if (!fieldDefinition) {\n                    return;\n                }\n\n                if (fieldDefinition.type === 'association') {\n                    currentDefinition = EntityDefinition.get(fieldDefinition.entity);\n                    fieldDefinitions.push(currentDefinition);\n                }\n            });\n\n            return fieldDefinitions;\n        },\n\n        lastField() {\n            if (this.fieldDefinitions.length > this.fields.length) {\n                return {\n                    fieldName: null,\n                    definition: EntityDefinition.get('product'),\n                };\n            }\n\n            const fieldName = this.fields[this.fields.length - 1];\n            const definition = this.fieldDefinitions[this.fieldDefinitions.length - 1];\n\n            return {\n                fieldName,\n                definition,\n            };\n        },\n    },\n\n    methods: {\n        updateFields({ field, index }) {\n            const fields = this.fields.slice(0, index);\n\n            if (field) {\n                fields.push(field);\n            }\n\n            this.changeType({ type: null, parameters: null });\n\n            this.fields = fields;\n        },\n\n        handleWrapForTypeNull(type, parameters) {\n            if (type === null) {\n                if (this.condition.type === 'not') {\n                    this.unwrapNot(this.condition, null);\n                }\n            }\n\n            if (this.conditionDataProviderService.isNegatedType(type) && this.condition.type !== 'not') {\n                this.wrapInNot(this.condition, type, parameters);\n                return false;\n            }\n\n            if (this.condition.type === 'not' && !this.conditionDataProviderService.isNegatedType(type)) {\n                this.unwrapNot(this.condition, type, parameters);\n                return false;\n            }\n\n            if (this.condition.type === 'not' && this.conditionDataProviderService.isNegatedType(type)) {\n                this.unwrapNot(this.condition, type, parameters);\n                this.wrapInNot(this.condition, type, parameters);\n                return false;\n            }\n\n            this.actualCondition.type = type;\n\n            return true;\n        },\n\n        changeBooleanValue({ type, value }) {\n            this.handleWrapForTypeNull(type);\n            if (this.condition.type === 'not') {\n                this.condition.queries[0].value = '1';\n            }\n\n            this.condition.value = value;\n        },\n\n        changeEmptyValue({ type }) {\n            this.handleWrapForTypeNull(type);\n            if (this.condition.type === 'not') {\n                this.condition.queries[0].value = null;\n            }\n\n            this.condition.value = null;\n        },\n\n        changeType({ type, parameters }) {\n            if (this.handleWrapForTypeNull(type, parameters)) {\n                this.actualCondition.parameters = parameters;\n                this.actualCondition.value = null;\n            }\n        },\n\n        wrapInNot(condition, newType, parameters) {\n            const { identifier: negatedType } = this.conditionDataProviderService.negateOperator(newType);\n            const conditionData = this.copyParameters({\n                ...condition,\n                parameters,\n            });\n            conditionData.type = negatedType;\n\n            const query = this.createCondition(conditionData, condition.id, 0);\n            this.insertNodeIntoTree(this.condition, query);\n\n            Object.assign(condition, {\n                type: 'not',\n                field: null,\n                operator: null,\n                value: null,\n                parameters: null,\n            });\n        },\n\n        unwrapNot(condition, newType, parameters) {\n            const innerCondition = condition.queries[0];\n            const conditionData = this.copyParameters({\n                ...innerCondition,\n                parameters,\n            });\n\n            conditionData.type = newType;\n            Object.assign(condition, conditionData);\n            this.removeNodeFromTree(this.condition, innerCondition);\n        },\n\n        copyParameters({ field, type, operator, parameters, value }) {\n            return { field, type, operator, parameters, value };\n        },\n\n        getNoPermissionsTooltip(role, showOnDisabledElements = true) {\n            return {\n                showDelay: 300,\n                message: this.$tc('sw-privileges.tooltip.warning'),\n                appearance: 'dark',\n                showOnDisabledElements,\n                disabled: this.acl.can(role),\n            };\n        },\n\n        isCustomField(fieldName) {\n            const strippedFieldName = fieldName.replace(/customFields\\./, '');\n\n            return Object.keys(this.productCustomFields).includes(strippedFieldName);\n        },\n    },\n};\n"],"names":["template","EntityDefinition","index","fields","concatenation","currentDefinition","fieldDefinitions","fieldName","fieldDefinition","definition","field","type","parameters","value","condition","newType","negatedType","conditionData","query","innerCondition","operator","role","showOnDisabledElements","strippedFieldName"],"mappings":"AAAA,MAAeA,EAAA,kpECOT,CAAE,iBAAAC,CAAkB,EAAG,OAKdC,EAAA,CACX,SAAAF,EAEA,aAAc,OAAO,aAErB,OAAQ,CACJ,kBACA,qBACA,qBACA,sBACA,MACA,8BACH,EAED,SAAU,CACN,iBAAkB,CACd,OAAI,KAAK,UAAU,OAAS,MACjB,KAAK,UAAU,QAAQ,CAAC,EAG5B,KAAK,SACf,EAED,OAAQ,CACJ,KAAM,CACF,OAAK,KAAK,gBAAgB,MAItB,KAAK,6BAA6B,qBAAqB,eAAe,KAAK,gBAAgB,KAAK,EACzF,CAAC,KAAK,gBAAgB,KAAK,EAGlC,KAAK,cAAc,KAAK,gBAAgB,KAAK,EACtC,CAAC,KAAK,gBAAgB,KAAK,EAG/B,KAAK,gBAAgB,MAAM,MAAM,GAAG,EAXhC,EAYd,EACD,IAAIG,EAAQ,CACR,IAAIC,EAAgBD,EAAO,KAAK,GAAG,EAMnC,GAJIC,EAAc,MAAM,IAAI,IACxBA,EAAgBA,EAAc,UAAU,EAAGA,EAAc,MAAM,GAG/D,CAACA,EAAe,CAChB,KAAK,gBAAgB,MAAQ,KAC7B,MACH,CAED,KAAK,gBAAgB,MAAQA,CAChC,CACJ,EAED,kBAAmB,CACf,IAAIC,EAAoBJ,EAAiB,IAAI,SAAS,EAEtD,MAAMK,EAAmB,CAACD,CAAiB,EAC3C,YAAK,OAAO,QAASE,GAAc,CAC/B,MAAMC,EAAkBH,EAAkB,SAASE,CAAS,EAEvDC,GAIDA,EAAgB,OAAS,gBACzBH,EAAoBJ,EAAiB,IAAIO,EAAgB,MAAM,EAC/DF,EAAiB,KAAKD,CAAiB,EAE3D,CAAa,EAEMC,CACV,EAED,WAAY,CACR,GAAI,KAAK,iBAAiB,OAAS,KAAK,OAAO,OAC3C,MAAO,CACH,UAAW,KACX,WAAYL,EAAiB,IAAI,SAAS,CAC9D,EAGY,MAAMM,EAAY,KAAK,OAAO,KAAK,OAAO,OAAS,CAAC,EAC9CE,EAAa,KAAK,iBAAiB,KAAK,iBAAiB,OAAS,CAAC,EAEzE,MAAO,CACH,UAAAF,EACA,WAAAE,CAChB,CACS,CACJ,EAED,QAAS,CACL,aAAa,CAAE,MAAAC,EAAO,MAAAR,GAAS,CAC3B,MAAMC,EAAS,KAAK,OAAO,MAAM,EAAGD,CAAK,EAErCQ,GACAP,EAAO,KAAKO,CAAK,EAGrB,KAAK,WAAW,CAAE,KAAM,KAAM,WAAY,IAAI,CAAE,EAEhD,KAAK,OAASP,CACjB,EAED,sBAAsBQ,EAAMC,EAAY,CAOpC,OANID,IAAS,MACL,KAAK,UAAU,OAAS,OACxB,KAAK,UAAU,KAAK,UAAW,IAAI,EAIvC,KAAK,6BAA6B,cAAcA,CAAI,GAAK,KAAK,UAAU,OAAS,OACjF,KAAK,UAAU,KAAK,UAAWA,EAAMC,CAAU,EACxC,IAGP,KAAK,UAAU,OAAS,OAAS,CAAC,KAAK,6BAA6B,cAAcD,CAAI,GACtF,KAAK,UAAU,KAAK,UAAWA,EAAMC,CAAU,EACxC,IAGP,KAAK,UAAU,OAAS,OAAS,KAAK,6BAA6B,cAAcD,CAAI,GACrF,KAAK,UAAU,KAAK,UAAWA,EAAMC,CAAU,EAC/C,KAAK,UAAU,KAAK,UAAWD,EAAMC,CAAU,EACxC,KAGX,KAAK,gBAAgB,KAAOD,EAErB,GACV,EAED,mBAAmB,CAAE,KAAAA,EAAM,MAAAE,GAAS,CAChC,KAAK,sBAAsBF,CAAI,EAC3B,KAAK,UAAU,OAAS,QACxB,KAAK,UAAU,QAAQ,CAAC,EAAE,MAAQ,KAGtC,KAAK,UAAU,MAAQE,CAC1B,EAED,iBAAiB,CAAE,KAAAF,GAAQ,CACvB,KAAK,sBAAsBA,CAAI,EAC3B,KAAK,UAAU,OAAS,QACxB,KAAK,UAAU,QAAQ,CAAC,EAAE,MAAQ,MAGtC,KAAK,UAAU,MAAQ,IAC1B,EAED,WAAW,CAAE,KAAAA,EAAM,WAAAC,GAAc,CACzB,KAAK,sBAAsBD,EAAMC,CAAU,IAC3C,KAAK,gBAAgB,WAAaA,EAClC,KAAK,gBAAgB,MAAQ,KAEpC,EAED,UAAUE,EAAWC,EAASH,EAAY,CACtC,KAAM,CAAE,WAAYI,CAAa,EAAG,KAAK,6BAA6B,eAAeD,CAAO,EACtFE,EAAgB,KAAK,eAAe,CACtC,GAAGH,EACH,WAAAF,CAChB,CAAa,EACDK,EAAc,KAAOD,EAErB,MAAME,EAAQ,KAAK,gBAAgBD,EAAeH,EAAU,GAAI,CAAC,EACjE,KAAK,mBAAmB,KAAK,UAAWI,CAAK,EAE7C,OAAO,OAAOJ,EAAW,CACrB,KAAM,MACN,MAAO,KACP,SAAU,KACV,MAAO,KACP,WAAY,IAC5B,CAAa,CACJ,EAED,UAAUA,EAAWC,EAASH,EAAY,CACtC,MAAMO,EAAiBL,EAAU,QAAQ,CAAC,EACpCG,EAAgB,KAAK,eAAe,CACtC,GAAGE,EACH,WAAAP,CAChB,CAAa,EAEDK,EAAc,KAAOF,EACrB,OAAO,OAAOD,EAAWG,CAAa,EACtC,KAAK,mBAAmB,KAAK,UAAWE,CAAc,CACzD,EAED,eAAe,CAAE,MAAAT,EAAO,KAAAC,EAAM,SAAAS,EAAU,WAAAR,EAAY,MAAAC,GAAS,CACzD,MAAO,CAAE,MAAAH,EAAO,KAAAC,EAAM,SAAAS,EAAU,WAAAR,EAAY,MAAAC,CAAK,CACpD,EAED,wBAAwBQ,EAAMC,EAAyB,GAAM,CACzD,MAAO,CACH,UAAW,IACX,QAAS,KAAK,IAAI,+BAA+B,EACjD,WAAY,OACZ,uBAAAA,EACA,SAAU,KAAK,IAAI,IAAID,CAAI,CAC3C,CACS,EAED,cAAcd,EAAW,CACrB,MAAMgB,EAAoBhB,EAAU,QAAQ,iBAAkB,EAAE,EAEhE,OAAO,OAAO,KAAK,KAAK,mBAAmB,EAAE,SAASgB,CAAiB,CAC1E,CACJ,CACL"}