const i=`{% block sw_bulk_edit_modal %} <sw-modal class="sw-bulk-edit-modal" :title="$tc('global.sw-bulk-edit-modal.bulkEditModalTitle', itemCount, { count: itemCount })" variant="full" @modal-close="$emit('modal-close')" @edit-items="$emit('edit-items')" > {% block sw_bulk_edit_modal_grid %} <sw-data-grid ref="bulkEditGrid" :identifier="identifier" :data-source="paginateRecords" :columns="bulkGridEditColumns" :pre-selection="selection" :show-selection="true" :show-actions="false" :skeleton-item-amount="limit" @selection-change="updateBulkEditSelection" > {% block sw_bulk_edit_modal_grid_custom_slot %} <template v-for="(_, slot) in getSlots" #[slot]="props" > <slot :name="slot" v-bind="props" ></slot> </template> {% endblock %} {% block sw_bulk_edit_modal_list_pagination %} <template #pagination> <sw-pagination v-bind="{ page, limit, steps }" :total="records.length" :auto-hide="false" :total-visible="7" @page-change="paginate" /> </template> {% endblock %} </sw-data-grid> {% endblock %} {% block sw_bulk_edit_modal_grid_footer %} <template #modal-footer> <slot name="sw-bulk-edit-modal-cancel"> <sw-button size="small" @click="$emit('modal-close')" > {{ $tc('global.default.cancel') }} </sw-button> </slot> <slot name="sw-bulk-edit-modal-confirm"> <sw-button variant="primary" size="small" @click="editItems" > {{ $tc('global.sw-bulk-edit-modal.startBulkEdit') }} </sw-button> </slot> </template> {% endblock %} </sw-modal> {% endblock %}`,{Component:l}=Cicada;l.register("sw-bulk-edit-modal",{template:i,compatConfig:Cicada.compatConfig,emits:["modal-close","edit-items"],props:{selection:{type:Object,required:!1,default(){return{}}},steps:{type:Array,required:!1,default(){return[200,300,400,500]}},bulkGridEditColumns:{type:Array,required:!0}},data(){return{records:[],bulkEditSelection:this.selection,limit:200,page:1,identifier:"sw-bulk-edit-grid"}},computed:{itemCount(){return Object.keys(this.bulkEditSelection).length},paginateRecords(){return this.records.slice((this.page-1)*this.limit,this.page*this.limit)},getSlots(){return this.isCompatEnabled("INSTANCE_SCOPED_SLOTS")?this.$scopedSlots:this.$slots}},created(){this.createdComponent()},methods:{createdComponent(){const t=Object.values(this.selection);t.length>0&&(this.records=t)},paginate({page:t=1,limit:e=10}){this.page=t,this.limit=e},updateBulkEditSelection(t){this.bulkEditSelection=t},editItems(){this.$emit("modal-close"),this.itemCount>0&&(Cicada.State.commit("cicadaApps/setSelectedIds",Object.keys(this.bulkEditSelection)),this.$emit("edit-items"))}}});
//# sourceMappingURL=index-DVd_epNJ.js.map
