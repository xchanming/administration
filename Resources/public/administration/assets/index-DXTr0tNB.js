const s=`{% block sw_settings_tax_rule_type_individual_states %} <sw-entity-multi-select v-if="individualStates && taxRule.countryId" :label="$tc('sw-settings-tax.taxRuleCard.labelStates')" :placeholder="$tc('sw-settings-tax.taxRuleCard.placeholderStates')" :criteria="exclusionCriteria" :entity-collection="individualStates" @update:entity-collection="onChange" /> {% endblock %}`,{Context:a}=Shopware,{Criteria:e,EntityCollection:r}=Shopware.Data,n={template:s,inject:["repositoryFactory"],props:{taxRule:{type:Object,required:!0}},data(){return{individualStates:null}},computed:{exclusionCriteria(){const t=new e(1,25);return t.addFilter(e.equals("countryId",this.taxRule.countryId)),t},stateRepository(){return this.repositoryFactory.create("country_state")}},created(){this.createdComponent()},methods:{createdComponent(){if(!this.taxRule.data||!this.taxRule.data.states||!this.taxRule.data.states.length)this.taxRule.data={states:[]},this.individualStates=new r(this.stateRepository.route,this.stateRepository.entityName,a.api);else{const t=new e(1,25);t.setIds(this.taxRule.data.states),this.stateRepository.search(t,a.api).then(i=>{this.individualStates=i})}},onChange(t){this.individualStates=t,this.taxRule.data.states=t.getIds()}}};export{n as default};
