import{A as y}from"./api.service-C76VAMec.js";import"./channel-oRk5-XZJ.js";import"./administration-DCOj2uiN.js";const{Service:C}=Cicada,{Criteria:l}=Cicada.Data;class x extends y{constructor(a,e){super(a,e,null,"application/json"),this.name="tagApiService"}filterIds(a,e={},o={}){return this.httpClient.post("_admin/tag-filter-ids",{...a,...e},{headers:this.getBasicHeaders(o)}).then(t=>y.handleResponse(t))}async merge(a,e,o,t){const n=this.getRepository("tag");t.isRunning=!0;const i=n.create();i.name=e,await n.save(i),i._isNew=!1;for(const[s,c]of Object.entries(o)){if(c.relation!=="many_to_many")continue;let r=1;t.currentAssignment=s,t.progress=0,t.total=0;const h=this.getRepository(c.entity);do{const p=new l(r,200);p.addFilter(l.equalsAny("tags.id",a));const{data:d,total:m}=await h.searchIds(p,Cicada.Context.api);i[s]=d.map(f=>({id:f})),m!==0&&(t.total=m,await n.save(i)),i[s]=[],t.progress+=d.length,r+=1}while(t.isRunning&&t.progress<t.total)}t.isRunning&&await n.syncDeleted(a,Cicada.Context.api)}getRepository(a){return C("repositoryFactory").create(a)}}export{x as default};
//# sourceMappingURL=tag.api.service-DryG_1c7.js.map
