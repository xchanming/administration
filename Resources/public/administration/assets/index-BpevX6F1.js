const u=`{% block sw_flow_detail %} <sw-page class="sw-flow-detail"> {% block sw_flow_detail_header %} <template #smart-bar-header> <h2>{{ placeholder(flow, 'name', $tc('sw-flow.detail.textHeadline')) }}</h2> </template> {% endblock %} {% block sw_flow_detail_smart_bar_actions %} <template #smart-bar-actions> {% block sw_flow_detail_smart_bar_actions_save %} <sw-button-process v-tooltip="{ message: $tc('sw-privileges.tooltip.warning'), disabled: acl.can('flow.editor'), position: 'bottom', showOnDisabledElements: true }" class="sw-flow-detail__save" variant="primary" :is-loading="isLoading" :process-success="isSaveSuccessful" :disabled="!acl.can('flow.editor')" @update:process-success="saveFinish" @click.prevent="onSave" > {{ $tc('global.default.save') }} </sw-button-process> {% endblock %} </template> {% endblock %} {% block sw_flow_content %} <template #content> {% block sw_flow_leave_page_modal %} <sw-flow-leave-page-modal v-if="showLeavePageWarningModal" @page-leave-cancel="onLeaveModalClose" @page-leave-confirm="onLeaveModalConfirm" /> {% endblock %} <sw-card-view :class="{'sw-flow-detail__template': isTemplate }"> {% block sw_flow_tabs_header %} <sw-tabs position-identifier="sw-flow-detail"> {% block sw_flow_tabs_header_general %} <sw-tabs-item class="sw-flow-detail__tab-general" :route="routeDetailTab('general')" > {{ $tc('sw-flow.page.tabGeneral') }} </sw-tabs-item> {% endblock %} {% block sw_flow_tabs_header_builder %} <sw-tabs-item class="sw-flow-detail__tab-flow" :route="routeDetailTab('flow')" > {{ $tc('sw-flow.page.tabFlow') }} </sw-tabs-item> {% endblock %} {% block sw_flow_tabs_header_extension %}{% endblock %} </sw-tabs> {% endblock %} <sw-alert v-if="isTemplate" variant="warning" class="sw-flow-detail__warning" > {{ $tc('sw-flow.flowNotification.messageWarningSave') }} </sw-alert> {% block sw_flow_tabs_content %} <template v-if="isLoading"> <sw-skeleton /> <sw-skeleton /> </template> <template v-else> <router-view v-slot="{ Component }" > <component :is="Component" :is-loading="isLoading" :is-new-flow="isNewFlow" :is-template="isTemplate" :is-unknown-trigger="isUnknownTrigger" /> </router-view> </template> {% endblock %} </sw-card-view> {% block sw_flow_detail_modal_extension %}{% endblock %} </template> {% endblock %} </sw-page> {% endblock %}`,{Component:f,Mixin:h,Context:n,State:a,Utils:d,Service:m}=Cicada,{Criteria:o,EntityCollection:p}=Cicada.Data,{cloneDeep:c}=Cicada.Utils.object,{mapState:g,mapGetters:S,mapPropertyErrors:F}=f.getComponentHelper(),_={template:u,compatConfig:Cicada.compatConfig,inject:["acl","repositoryFactory","feature","flowBuilderService"],mixins:[h.getByName("placeholder"),h.getByName("notification")],props:{flowId:{type:String,required:!1,default:null}},data(){return{isLoading:!1,isSaveSuccessful:!1,showLeavePageWarningModal:!1,nextRoute:null}},metaInfo(){return{title:this.$createTitle(this.identifier)}},computed:{identifier(){var e;return(e=this.flow)==null?void 0:e.name},flowRepository(){return this.repositoryFactory.create("flow")},flowTemplateRepository(){return this.repositoryFactory.create("flow_template")},flowSequenceRepository(){return this.repositoryFactory.create("flow_sequence")},appFlowActionRepository(){return this.repositoryFactory.create("app_flow_action")},isNewFlow(){return!this.flowId},flowCriteria(){const e=new o(1,25);return e.addAssociation("sequences.rule"),e.getAssociation("sequences").addSorting(o.sort("displayGroup","ASC")).addSorting(o.sort("parentId","ASC")).addSorting(o.sort("trueCase","ASC")).addSorting(o.sort("position","ASC")),e},flowTemplateCriteria(){return new o(1,25)},documentTypeRepository(){return this.repositoryFactory.create("document_type")},documentTypeCriteria(){const e=new o(1,100);return e.addSorting(o.sort("name","ASC")),e},mailTemplateRepository(){return this.repositoryFactory.create("mail_template")},customFieldSetRepository(){return this.repositoryFactory.create("custom_field_set")},customFieldRepository(){return this.repositoryFactory.create("custom_field")},mailTemplateIdsCriteria(){const e=new o(1,25);return e.addAssociation("mailTemplateType"),e.addFilter(o.equalsAny("id",this.mailTemplateIds)),e},customerGroupRepository(){return this.repositoryFactory.create("customer_group")},customerGroupCriteria(){const e=new o(1,100);return e.addSorting(o.sort("name","ASC")),e},appFlowActionCriteria(){const e=new o(1,25);return e.addAssociation("app"),e},stateMachineStateRepository(){return this.repositoryFactory.create("state_machine_state")},stateMachineStateCriteria(){const e=new o(1,null);return e.addSorting({field:"name",order:"ASC"}),e.addAssociation("stateMachine"),e.addFilter(o.equalsAny("state_machine_state.stateMachine.technicalName",["order.state","order_transaction.state","order_delivery.state"])),e},customFieldSetCriteria(){const e=new o(1,25);return e.addFilter(o.equalsAny("id",this.customFieldSetIds)),e},customFieldCriteria(){const e=new o(1,25);return e.addFilter(o.equalsAny("id",this.customFieldIds)),e},ruleRepository(){return this.repositoryFactory.create("rule")},isTemplate(){var e;return((e=this.$route.query)==null?void 0:e.type)==="template"},isUnknownTrigger(){return!this.flowId||this.isLoading?!1:!this.triggerEvents.some(e=>e.name===this.flow.eventName)},...g("swFlowState",["flow","triggerEvents"]),...S("swFlowState",["sequences","mailTemplateIds","customFieldSetIds","customFieldIds","hasFlowChanged"]),...F("flow",["name","eventName"])},watch:{flowId(){this.$route.params.flowTemplateId||this.getDetailFlow()}},created(){this.createdComponent()},beforeRouteLeave(e,i,t){if(this.flow._isNew){t();return}this.hasFlowChanged?(this.nextRoute=t,this.showLeavePageWarningModal=!0):t()},beforeUnmount(){this.beforeDestroyComponent()},methods:{createdComponent(){if(m("flowBuilderService").addLabels({entity:"sw-flow.labelDescription.labelEntity",tagIds:"sw-flow.labelDescription.labelTag"}),Cicada.ExtensionAPI.publishData({id:"sw-flow-detail__flow",path:"flow",scope:this}),this.getAppFlowAction(),this.isTemplate){this.getDetailFlowTemplate();return}if(this.flowId){this.getDetailFlow();return}this.createNewFlow()},beforeDestroyComponent(){a.dispatch("swFlowState/resetFlowState")},routeDetailTab(e){return e?this.isNewFlow?this.$route.params.flowTemplateId?{name:`sw.flow.create.${e}`,params:{flowTemplateId:this.$route.params.flowTemplateId}}:{name:`sw.flow.create.${e}`}:this.isTemplate?{name:`sw.flow.detail.${e}`,query:{type:"template"}}:{name:`sw.flow.detail.${e}`}:{}},createNewFlow(){if(this.$route.params.flowTemplateId)return this.createFromFlowTemplate();const e=this.flowRepository.create();return e.id=d.createId(),e.priority=0,e.eventName="",a.commit("swFlowState/setFlow",e)},getDetailFlow(){return this.isLoading=!0,Cicada.State.dispatch("swFlowState/fetchTriggerActions"),this.flowRepository.get(this.flowId,n.api,this.flowCriteria).then(e=>{a.commit("swFlowState/setFlow",e),a.commit("swFlowState/setOriginFlow",c(e)),this.getDataForActionDescription()}).catch(()=>{this.createNotificationError({message:this.$tc("sw-flow.flowNotification.messageError")})}).finally(()=>{this.isLoading=!1})},getAppFlowAction(){return this.appFlowActionRepository.search(this.appFlowActionCriteria,Cicada.Context.api).then(e=>{a.commit("swFlowState/setAppActions",e)})},getDetailFlowTemplate(){return this.isLoading=!0,this.flowTemplateRepository.get(this.flowId,n.api,this.flowTemplateCriteria).then(e=>{a.commit("swFlowState/setFlow",e),a.commit("swFlowState/setOriginFlow",c(e)),this.getDataForActionDescription(),this.getRuleDataForFlowTemplate()}).catch(()=>{this.createNotificationError({message:this.$tc("sw-flow.flowNotification.messageError")})}).finally(()=>{this.isLoading=!1})},async onSave(){if(this.removeAllSelectors(),this.validateEmptySequence().length){this.createNotificationWarning({message:this.$tc("sw-flow.flowNotification.messageRequiredEmptyFields")});return}if(this.isSaveSuccessful=!1,this.isLoading=!0,this.isTemplate){this.createNotificationError({message:this.$tc("sw-flow.flowNotification.messageWarningSave")}),this.isLoading=!1;return}!(typeof this.flow.isNew=="function"&&this.flow.isNew())&&!this.isTemplate&&await this.updateSequences(),this.flowRepository.save(this.flow).then(()=>{typeof this.flow.isNew=="function"&&this.flow.isNew()||this.$route.params.flowTemplateId?(this.createNotificationSuccess({message:this.$tc("sw-flow.flowNotification.messageCreateSuccess")}),this.$router.push({name:"sw.flow.detail",params:{id:this.flow.id}})):this.getDetailFlow(),this.isSaveSuccessful=!0}).catch(()=>{this.createNotificationError({message:this.$tc("sw-flow.flowNotification.messageSaveError")}),this.handleFieldValiationError()}).finally(()=>{this.isLoading=!1})},async updateSequences(){const e=this.sequences.map(r=>(r.flowId=this.flow.id,r));await this.flowSequenceRepository.sync(e);const i=this.getDeletedSequenceIds();i.length>0&&await this.flowSequenceRepository.syncDeleted(i);const t=await this.flowRepository.get(this.flowId,n.api);Object.keys(t).forEach(r=>{r!=="sequences"&&(t[r]=this.flow[r])}),a.commit("swFlowState/setFlow",t)},getDeletedSequenceIds(){const e=this.sequences.map(t=>t.id);return this.flow.getOrigin().sequences.filter(t=>!e.includes(t.id)).map(t=>t.id)},handleFieldValiationError(){if(!this.flowNameError&&!this.flowEventNameError)return;const e=this.$router.history.current.name,i=(e==="sw.flow.create.flow"||e==="sw.flow.detail.flow")&&this.flowEventNameError,t=(e==="sw.flow.create.general"||e==="sw.flow.detail.general")&&this.flowNameError;if(!(i||t)){if(this.flowId){this.$router.push({name:this.flowNameError?"sw.flow.detail.general":"sw.flow.detail.flow",params:{flowId:this.flowId}});return}this.$router.push({name:this.flowNameError?"sw.flow.create.general":"sw.flow.create.flow"})}},saveFinish(){this.isLoading=!1,this.isSaveSuccessful=!1},onLeaveModalClose(){this.nextRoute(!1),this.nextRoute=null,this.showLeavePageWarningModal=!1},onLeaveModalConfirm(){this.showLeavePageWarningModal=!1,this.$nextTick(()=>{this.nextRoute()})},removeAllSelectors(){const e=this.sequences.filter(i=>i.ruleId!==null||i.actionName!==null);a.commit("swFlowState/setSequences",e)},validateEmptySequence(){const e=this.sequences.reduce((i,t)=>((t.ruleId===""||t.actionName==="")&&i.push(t.id),i),[]);return a.commit("swFlowState/setInvalidSequences",e),e},getDataForActionDescription(){if(!this.sequences)return null;const e=[];this.sequences.some(s=>s.actionName===this.flowBuilderService.getActionName("SET_ORDER_STATE"))&&e.push(this.stateMachineStateRepository.search(this.stateMachineStateCriteria).then(s=>{a.commit("swFlowState/setStateMachineState",s)})),this.sequences.some(s=>s.actionName===this.flowBuilderService.getActionName("GENERATE_DOCUMENT"))&&e.push(this.documentTypeRepository.search(this.documentTypeCriteria).then(s=>{Cicada.State.commit("swFlowState/setDocumentTypes",s)})),this.sequences.some(s=>s.actionName===this.flowBuilderService.getActionName("MAIL_SEND"))&&e.push(this.mailTemplateRepository.search(this.mailTemplateIdsCriteria).then(s=>{Cicada.State.commit("swFlowState/setMailTemplates",s)})),this.sequences.some(s=>s.actionName===this.flowBuilderService.getActionName("CHANGE_CUSTOMER_GROUP"))&&e.push(this.customerGroupRepository.search(this.customerGroupCriteria).then(s=>{Cicada.State.commit("swFlowState/setCustomerGroups",s)}));const w=[this.flowBuilderService.getActionName("SET_ORDER_CUSTOM_FIELD"),this.flowBuilderService.getActionName("SET_CUSTOMER_CUSTOM_FIELD"),this.flowBuilderService.getActionName("SET_CUSTOMER_GROUP_CUSTOM_FIELD")];return this.sequences.some(s=>w.includes(s.actionName))&&(e.push(this.customFieldSetRepository.search(this.customFieldSetCriteria).then(s=>{Cicada.State.commit("swFlowState/setCustomFieldSets",s)})),e.push(this.customFieldRepository.search(this.customFieldCriteria).then(s=>{Cicada.State.commit("swFlowState/setCustomFields",s)}))),Promise.all(e)},createFromFlowTemplate(){const e=this.flowRepository.create();return e.id=d.createId(),e.priority=0,this.flowTemplateRepository.get(this.$route.params.flowTemplateId,n.api,this.flowTemplateCriteria).then(i=>{var t,r,l;e.name=i.name,e.eventName=(t=i.config)==null?void 0:t.eventName,e.description=(r=i.config)==null?void 0:r.description,e.sequences=this.buildSequencesFromConfig(((l=i.config)==null?void 0:l.sequences)??[]),a.commit("swFlowState/setFlow",e),a.commit("swFlowState/setOriginFlow",c(e)),this.getDataForActionDescription(),this.getRuleDataForFlowTemplate()}).catch(()=>{this.createNotificationError({message:this.$tc("sw-flow.flowNotification.messageError")})}).finally(()=>{this.isLoading=!1})},createSequenceEntity(e){const i=this.flowSequenceRepository.create();return Object.keys(e).forEach(t=>{if(t==="trueCase"){i[t]=!!e[t];return}if(t==="config"){i[t]={...e[t]};return}i[t]=e[t]}),i},buildSequencesFromConfig(e){const i={};e=e.map(t=>(t=this.createSequenceEntity(t),i[t.id]=d.createId(),t.id=i[t.id],t));for(let t=0;t<e.length;t+=1)e[t].parentId!==null&&(e[t].parentId=i[e[t].parentId]);return e=m("flowBuilderService").rearrangeArrayObjects(e),new p(this.flowSequenceRepository.source,this.flowSequenceRepository.entityName,n.api,null,e)},getRuleDataForFlowTemplate(){const e=this.sequences.filter(t=>t.ruleId!==null).map(t=>t.ruleId);if(!e.length)return;const i=new o(1,25);i.addFilter(o.equalsAny("id",e)),this.ruleRepository.search(i).then(t=>{const r=this.sequences.map(l=>(l.ruleId&&(l.rule=t.find(w=>w.id===l.ruleId)),l));a.commit("swFlowState/setSequences",r),a.commit("swFlowState/setOriginFlow",c(this.flow))})}}};export{_ as default};
//# sourceMappingURL=index-BpevX6F1.js.map
