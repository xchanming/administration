const o='{% block sw_order_customer_address_select %} <sw-single-select v-model:value="addressId" v-bind="$attrs" class="sw-order-customer-address-select" value-property="id" required :is-loading="isLoading" :options="customerAddresses" :disabled="disabled" :search-function="searchAddressResults" @search="searchAddress" > <template #selection-label-property="{ item }"> {{ getSelectionLabel(item) }} </template> <template #result-item="{ item, index, searchTerm, highlightSearchTerm, isSelected, setValue, getKey }"> <sw-select-result :selected="isSelected(item)" v-bind="{ item, index }" @item-select="setValue" > <sw-highlight-text v-if="highlightSearchTerm && !isSelected(item)" :text="getCustomerAddress(item)" :search-term="searchTerm" /> <template v-else> {{ getCustomerAddress(item) }} </template> </sw-select-result> </template> </sw-single-select> {% endblock %}',{Component:n}=Shopware,{Criteria:c}=Shopware.Data,l=n.wrapComponentConfig({template:o,inject:["repositoryFactory"],props:{customer:{type:Object,required:!0},value:{type:String,required:!0},sameAddressLabel:{type:String,required:!1,default:""},sameAddressValue:{type:String,required:!0},disabled:{type:Boolean,required:!1,default:!1}},data(){return{customerAddresses:[],isLoading:!1,addressSearchTerm:""}},computed:{addressId:{get(){return this.value},set(e){e!==null&&this.$emit("update:value",e)}},isSameAddress(){return this.value===this.sameAddressValue},addressRepository(){var e,s;return this.repositoryFactory.create(((e=this.customer.addresses)==null?void 0:e.entity)??"customer_address",(s=this.customer.addresses)==null?void 0:s.source)},addressCriteria(){const e=new c(1,25);return e.addAssociation("salutation"),e.addAssociation("country"),e.addAssociation("countryState"),this.addressSearchTerm&&e.setTerm(this.addressSearchTerm),e}},created(){this.createdComponent()},methods:{createdComponent(){this.getCustomerAddresses()},getSelectionLabel(e){return this.isSameAddress&&this.sameAddressLabel?this.sameAddressLabel:this.getCustomerAddress(e)},getCustomerAddress(e){if(!e)return"";const s=[];return["street","zipcode","city","countryState","country"].forEach(t=>{var i,d;if(e[t]){if(t==="countryState"||t==="country"){const a=(d=(i=e[t])==null?void 0:i.translated)==null?void 0:d.name;a&&s.push(a);return}s.push(e[t])}}),s.join(", ")},getCustomerAddresses(){return this.isLoading=!0,this.addressRepository.search(this.addressCriteria).then(e=>{this.customerAddresses=e}).finally(()=>{this.isLoading=!1})},searchAddress(e){return this.isLoading=!0,this.addressSearchTerm=e,this.addressRepository.search(this.addressCriteria).then(s=>{this.customerAddresses.forEach(r=>{r.hidden=!s.has(r.id)})}).finally(()=>{this.isLoading=!1})},searchAddressResults(){return this.customerAddresses}}});export{l as default};
