const i=`{% block sw_extension_config %} <sw-meteor-page class="sw-extension-config" :from-link="fromLink" > <template #smart-bar-icon> <sw-extension-icon class="sw-extension-config__extension-icon" :src="image" :alt="$tc('sw-extension-store.component.sw-extension-config.imageDescription', { extensionName: extensionLabel}, 0)" /> </template> <template #smart-bar-header> {{ extensionLabel }} </template> <template v-if="extension" #smart-bar-header-meta > <span v-if="extension.producerWebsite && extension.producerName"> {{ $tc('sw-extension-store.component.sw-extension-config.labelBy') }} <sw-external-link small :href="extension.producerWebsite" class="sw-extension-config__producer-link" > {{ extension.producerName }} </sw-external-link> </span> <span v-else-if="extension.producerName"> {{ $tc('sw-extension-store.component.sw-extension-config.labelBy') }} {{ extension.producerName }} </span> </template> <template #smart-bar-actions> <sw-button variant="primary" class="sw-extension-config__save-action" @click.prevent="onSave" > {{ $tc('global.default.save') }} </sw-button> </template> <template #default> <sw-system-config ref="systemConfig" :domain="domain" sales-channel-switchable :sales-channel-id="salesChannelId" /> </template> </sw-meteor-page> {% endblock %}`,{Mixin:o}=Shopware,a=Shopware.Component.wrapComponentConfig({template:i,beforeRouteEnter(e,n,t){t(s=>{s.fromLink=n})},inject:["shopwareExtensionService"],mixins:[o.getByName("notification")],props:{namespace:{type:String,required:!0}},data(){return{salesChannelId:null,extension:null,fromLink:null}},computed:{domain(){return`${this.namespace}.config`},myExtensions(){return Shopware.Store.get("shopwareExtensions").myExtensions.data},defaultThemeAsset(){return Shopware.Filter.getByName("asset")("administration/static/img/theme/default_theme_preview.jpg")},image(){var e,n;return(e=this.extension)!=null&&e.icon?this.extension.icon:(n=this.extension)!=null&&n.iconRaw?`data:image/png;base64, ${this.extension.iconRaw}`:this.defaultThemeAsset},extensionLabel(){var e;return((e=this.extension)==null?void 0:e.label)??this.namespace}},created(){this.createdComponent()},methods:{async createdComponent(){this.myExtensions.length||await this.shopwareExtensionService.updateExtensionData(),this.refreshExtension()},refreshExtension(){this.extension=this.myExtensions.find(e=>e.name===this.namespace)??null},async onSave(){try{await this.$refs.systemConfig.saveAll(),this.createNotificationSuccess({message:this.$tc("sw-extension-store.component.sw-extension-config.messageSaveSuccess")})}catch(e){this.createNotificationError({message:e})}}}});export{a as default};
