const i=`{% block sw_property_option_list %} <sw-card :is-loading="isLoading" class="sw-property-option-list" position-identifier="sw-property-option-list" :title="$tc('sw-property.detail.cardTitle')" > {% block sw_property_option_list_toolbar %} <div class="sw-property-option-list__toolbar"> {% block sw_property_option_list_toolbar_container %} <sw-container columns="1fr 32px minmax(100px, 200px)" gap="0 10px" > {% block sw_property_option_list_toolbar_search %} <sw-simple-search-field v-model:value="term" size="small" variant="form" @search-term-change="onSearch" /> {% endblock %} {% block sw_property_option_list_toolbar_delete %} <sw-button v-tooltip="{ message: $tc('sw-privileges.tooltip.warning'), disabled: acl.can('property.editor'), showOnDisabledElements: true }" :disabled="deleteButtonDisabled || !acl.can('property.editor')" square size="small" class="sw-property-option-list__delete-button" @click="onDeleteOptions" > <sw-icon name="regular-trash" small /> </sw-button> {% endblock %} {% block sw_property_option_list_toolbar_add %} <sw-container v-tooltip="tooltipAdd"> <sw-button v-tooltip="{ message: $tc('sw-privileges.tooltip.warning'), disabled: acl.can('property.editor'), showOnDisabledElements: true }" :disabled="disableAddButton" size="small" class="sw-property-option-list__add-button" @click="onAddOption(propertyGroup)" > {{ $tc('sw-property.detail.addOption') }} </sw-button> </sw-container> {% endblock %} </sw-container> {% endblock %} </div> {% endblock %} {% block sw_property_option_list_grid %} <template #grid> <sw-one-to-many-grid ref="grid" :is-loading="isLoading" :collection="propertyGroup.options" :data-source="dataSource" :columns="getGroupColumns()" :full-page="false" :local-mode="propertyGroup.isNew()" :allow-inline-edit="allowInlineEdit" :sort-by="sortBy" :sort-direction="sortDirection" @selection-change="onGridSelectionChanged" > <template #column-name="{ item, isInlineEdit }"> <template v-if="isInlineEdit"> <sw-text-field v-model:value="item.name" size="small" /> </template> <a v-else class="sw-settings-option-detail__link" role="button" tabindex="0" @click="onOptionEdit(item)" @keydown.enter="onOptionEdit(item)" > {{ item.translated.name }} </a> </template> {% block sw_settings_property_list_grid_columns_actions %} <template #more-actions="{ item }"> {% block sw_settings_property_list_grid_columns_actions_edit %} <sw-context-menu-item class="sw-property-option-list__edit-action" :disabled="!acl.can('property.editor')" @click="onOptionEdit(item)" > {{ $tc('sw-property.list.contextMenuView') }} </sw-context-menu-item> {% endblock %} </template> {% endblock %} {% block sw_property_list_grid_columns_actions_delete %} <template #delete-action="{ item }"> <sw-context-menu-item variant="danger" :disabled="!acl.can('property.editor')" @click="onSingleOptionDelete(item.id)" > {{ $tc('sw-property.list.contextMenuDelete') }} </sw-context-menu-item> </template> {% endblock %} </sw-one-to-many-grid> {% endblock %} </template> {% block sw_property_option_list_detail %} <sw-property-option-detail v-if="currentOption" :current-option="currentOption" :allow-edit="acl.can('property.editor')" @save-option-edit="onSaveOption" @cancel-option-edit="onCancelOption" /> {% endblock %} {% block sw_property_option_list_loader %} <sw-loader v-if="isLoading" /> {% endblock %} </sw-card> {% endblock %}`,{Store:o,Mixin:r}=Shopware,n={template:i,inject:["repositoryFactory","acl"],mixins:[r.getByName("listing")],props:{propertyGroup:{type:Object,required:!0},optionRepository:{type:Object,required:!0}},data(){return{isLoading:!1,currentOption:null,term:null,naturalSorting:!0,selection:null,deleteButtonDisabled:!0,sortBy:"name",sortDirection:"ASC",showDeleteModal:!1}},computed:{isSystemLanguage(){return o.get("context").api.systemLanguageId===this.currentLanguage},currentLanguage(){return o.get("context").api.languageId},allowInlineEdit(){return!!this.acl.can("property.editor")},tooltipAdd(){return{message:this.$tc("sw-property.detail.addOptionNotPossible"),disabled:this.isSystemLanguage}},disableAddButton(){return this.propertyGroup.isLoading||!this.isSystemLanguage||!this.acl.can("property.editor")},dataSource(){return this.propertyGroup.options&&this.propertyGroup.options.slice(0,this.limit)}},watch:{currentLanguage(){this.refreshOptionList()}},methods:{onSearch(){this.propertyGroup.options.criteria.setTerm(this.term),this.refreshOptionList()},onGridSelectionChanged(t,e){this.selection=t,this.deleteButtonDisabled=e<=0},onOptionDelete(t){return t.isNew()?(this.propertyGroup.options.remove(t.id),Promise.resolve()):this.optionRepository.delete(t.id)},onSingleOptionDelete(t){this.$refs.grid.deleteItem(t)},onDeleteOptions(){this.selection&&Promise.allSettled(Object.values(this.selection).map(t=>this.onOptionDelete(t))).then(()=>{this.refreshOptionList()})},onAddOption(){return this.isSystemLanguage?(this.currentOption=this.optionRepository.create(),!0):!1},onCancelOption(){this.currentOption=null,this.$refs.grid.load()},onSaveOption(){return this.propertyGroup.isNew()?this.saveGroupLocal():this.saveGroupRemote()},saveGroupLocal(){return this.currentOption.isNew()&&(this.propertyGroup.options.has(this.currentOption.id)||this.propertyGroup.options.add(this.currentOption),this.currentOption=null),Promise.resolve()},saveGroupRemote(){return this.optionRepository.save(this.currentOption).then(()=>{this.currentOption=null,this.$refs.grid.load()})},refreshOptionList(){this.isLoading=!0,this.$refs.grid.load().then(()=>{this.isLoading=!1})},onOptionEdit(t){const e=t;e._isNew=!1,this.currentOption=e},getGroupColumns(){return[{property:"name",label:this.$tc("sw-property.detail.labelOptionName"),routerLink:"sw.property.detail",inlineEdit:"string",primary:!0},{property:"colorHexCode",label:this.$tc("sw-property.detail.labelOptionColor")},{property:"position",label:this.$tc("sw-property.detail.labelOptionPosition"),inlineEdit:"number"}]}}};export{n as default};
