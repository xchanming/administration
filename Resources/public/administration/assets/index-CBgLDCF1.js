const l='{% block sw_context_button %} <button ref="swContextButton" class="sw-context-button" :class="contextClass" :aria-label="ariaLabel && $tc(ariaLabel)" @click="onClickButton" @keydown.enter="onClickButton" > {% block sw_context_button_button %} <slot name="button"> <div class="sw-context-button__button" :class="contextButtonClass" tabindex="-1" > <sw-icon :name="icon" decorative /> </div> </slot> {% endblock %} {% block sw_context_button_menu %} <sw-popover v-if="showMenu" class="sw-context-button__menu-position" popover-class="sw-context-button__menu-popover" :z-index="zIndex" > <sw-context-menu ref="swContextMenu" :class="contextMenuClass" :style="menuStyles" > <slot> {% block sw_context_button_menu_slot_default %}{% endblock %} </slot> </sw-context-menu> </sw-popover> {% endblock %} </button> {% endblock %}',{Component:a}=Shopware;a.register("sw-context-button",{template:l,inject:["feature"],emits:["on-open-change"],props:{showMenuOnStartup:{type:Boolean,required:!1,default:!1},menuWidth:{type:Number,required:!1,default:220},menuHorizontalAlign:{type:String,required:!1,default:"right",validator(t){return t.length?["right","left"].includes(t):!0}},menuVerticalAlign:{type:String,required:!1,default:"bottom",validator(t){return t.length?["bottom","top"].includes(t):!0}},icon:{type:String,required:!1,default:"solid-ellipsis-h-s"},disabled:{type:Boolean,required:!1,default:!1},autoClose:{type:Boolean,required:!1,default:!0},autoCloseOutsideClick:{type:Boolean,required:!1,default:!1},additionalContextMenuClasses:{type:Object,required:!1,default(){return{}}},zIndex:{type:Number,required:!1,default:1100},ariaLabel:{type:String,required:!1,default:"sw-context-button.ariaLabel"}},data(){return{showMenu:this.showMenuOnStartup}},computed:{menuStyles(){return{width:`${this.menuWidth}px`}},contextClass(){return{"is--disabled":this.disabled,"is--active":this.showMenu}},contextButtonClass(){return{"is--active":this.showMenu}},contextMenuClass(){return{"is--left-align":this.menuHorizontalAlign==="left","is--top-align":this.menuVerticalAlign==="top",...this.additionalContextMenuClasses}}},methods:{onClickButton(){this.disabled||(this.showMenu?this.closeMenu():this.openMenu())},openMenu(){this.$emit("on-open-change",!0),this.showMenu=!0,document.addEventListener("click",this.handleClickEvent)},handleClickEvent(t){if(t&&t.target.classList.contains("is--disabled"))return!1;const e=this.$refs.swContextButton;if(!e)return this.closeMenu();const n=e?e.contains(t.target):!1;if(this.autoCloseOutsideClick&&this.showMenu&&!n){const s=this.$refs.swContextMenu.$el,i=(s==null?void 0:s.contains(t.target))??!1;if(!(t!=null&&t.target)||!i)return this.closeMenu()}const o=this.autoClose&&!n;return!t||!t.target||o?this.closeMenu():!1},closeMenu(){this.$emit("on-open-change",!1),this.showMenu=!1,document.removeEventListener("click",this.handleClickEvent)}}});
