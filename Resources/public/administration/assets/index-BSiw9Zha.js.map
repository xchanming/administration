{"version":3,"file":"index-BSiw9Zha.js","sources":["../../../app/administration/src/app/component/form/select/entity/sw-entity-advanced-selection-modal/sw-entity-advanced-selection-modal.html.twig","../../../app/administration/src/app/component/form/select/entity/sw-entity-advanced-selection-modal/index.js"],"sourcesContent":["<!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n{% block sw_entity_advanced_selection_modal %}\n<sw-modal\n    class=\"sw-entity-advanced-selection-modal\"\n    v-bind=\"$attrs\"\n    variant=\"large\"\n    :title=\"modalTitle\"\n    @modal-close=\"$emit('modal-close')\"\n>\n\n    <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n    {% block sw_entity_advanced_selection_modal_content_card %}\n    <sw-card\n        class=\"sw-entity-advanced-selection-modal__content\"\n        position-identifier=\"sw-entity-advanced-selection-modal-content\"\n        :large=\"true\"\n        :is-loading=\"isLoading\"\n    >\n        <template #toolbar>\n            <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n            {% block sw_entity_advanced_selection_modal_toolbar %}\n            <sw-card-filter\n                class=\"sw-entity-advanced-selection-modal__card-filter\"\n                :placeholder=\"$tc('global.sw-entity-advanced-selection-modal.searchPlaceholder')\"\n                :initial-search-term=\"initialSearchTerm\"\n                @sw-card-filter-term-change=\"onSearch\"\n            >\n                <template #filter>\n                    <div class=\"sw-entity-advanced-selection-modal__filter-list-button\">\n                        <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n                        {% block sw_entity_advanced_selection_modal_toolbar_filter_button %}\n                        <sw-button\n                            size=\"small\"\n                            @click=\"filterWindowOpen = !filterWindowOpen\"\n                        >\n                            <sw-icon\n                                name=\"regular-filter-s\"\n                                small\n                            />\n                            <i\n                                v-if=\"activeFilterNumber > 0\"\n                                class=\"sw-entity-advanced-selection-modal__filter-badge\"\n                            >{{ activeFilterNumber }}</i>\n                            {{ $tc('global.sw-entity-advanced-selection-modal.filter') }}\n                        </sw-button>\n                        {% endblock %}\n\n                        <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n                        {% block sw_entity_advanced_selection_modal_toolbar_filter_panel %}\n                        <sw-context-menu v-show=\"filterWindowOpen\">\n                            <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n                            {% block sw_entity_advanced_selection_modal_toolbar_filter_panel_headline %}\n                            <h3 class=\"sw-entity-advanced-selection-modal__filter-headline\">\n                                {{ $tc('global.sw-entity-advanced-selection-modal.filter') }}\n                            </h3>\n                            {% endblock %}\n\n                            <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n                            {% block sw_entity_advanced_selection_modal_toolbar_filter_panel_filters %}\n                            <div class=\"sw-entity-advanced-selection-modal__filter-panel\">\n                                {# TODO - NEXT-20791 : remove store-key property. Filters should not be stored somewhere #}\n                                <sw-filter-panel\n                                    ref=\"filterPanel\"\n                                    class=\"sw-entity-advanced-selection-modal__filter-panel\"\n                                    entity=\"product\"\n                                    :store-key=\"storeKey\"\n                                    :active-filter-number=\"activeFilterNumber\"\n                                    :filters=\"listFilters\"\n                                    :defaults=\"defaultFilters\"\n                                    @criteria-changed=\"updateCriteria\"\n                                />\n                            </div>\n                            {% endblock %}\n\n                            <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n                            {% block sw_entity_advanced_selection_modal_toolbar_filter_panel_footer %}\n                            <div class=\"sw-entity-advanced-selection-modal__filter-footer\">\n                                <!-- eslint-disable-next-line vuejs-accessibility/interactive-supports-focus vuejs-accessibility/click-events-have-key-events -->\n                                <a\n                                    role=\"button\"\n                                    class=\"sw-entity-advanced-selection-modal__filter-reset\"\n                                    @click=\"clearFilters\"\n                                >\n                                    {{ $tc('global.sw-entity-advanced-selection-modal.resetFilters') }}\n                                </a>\n                            </div>\n                            {% endblock %}\n                        </sw-context-menu>\n                        {% endblock %}\n                    </div>\n                </template>\n            </sw-card-filter>\n            {% endblock %}\n        </template>\n\n        <template #grid>\n            <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n            {% block sw_entity_advanced_selection_modal_list_grid %}\n            <sw-entity-advanced-selection-modal-grid\n                v-if=\"entities && entities.length\"\n                class=\"sw-entity-advanced-selection-modal__grid\"\n                :items=\"entities\"\n                :columns=\"entityColumns\"\n                :repository=\"entityRepository\"\n                :full-page=\"true\"\n                :plain-appearance=\"true\"\n                :compact-mode=\"true\"\n                :show-selection=\"true\"\n                :show-actions=\"true\"\n                :show-settings=\"true\"\n                :is-loading=\"isLoading\"\n                :allow-view=\"acl.can(`${entityName}.viewer`)\"\n                :allow-edit=\"false\"\n                :allow-delete=\"false\"\n                :allow-inline-edit=\"false\"\n                :allow-bulk-edit=\"false\"\n                :disable-data-fetching=\"true\"\n                :sort-by=\"sortBy\"\n                :sort-direction=\"sortDirection\"\n                :maximum-select-items=\"isSingleSelect ? 1 : null\"\n                :pre-selection=\"currentSelection\"\n                :is-record-selectable-callback=\"isRecordSelectableCallback\"\n                @selection-change=\"onSelectionChange\"\n                @column-sort=\"onSortColumn\"\n                @page-change=\"onPageChange\"\n            >\n                <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n                {% block sw_entity_advanced_selection_modal_list_grid_slots %}\n                {# Re-expose essential column slots #}\n                <template\n                    v-for=\"column in previewColumns\"\n                    #[`preview-${column.property}`]=\"slotData\"\n                >\n                    <slot\n                        :name=\"`preview-${column.property}`\"\n                        v-bind=\"slotData\"\n                    ></slot>\n                </template>\n\n                <template\n                    v-for=\"column in entityColumns\"\n                    #[`column-${column.property}`]=\"slotData\"\n                >\n                    <slot\n                        :name=\"`column-${column.property}`\"\n                        v-bind=\"{ ...slotData, aggregations }\"\n                    ></slot>\n                </template>\n                {% endblock %}\n\n            </sw-entity-advanced-selection-modal-grid>\n            {% endblock %}\n\n            <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n            {% block sw_entity_advanced_selection_modal_list_empty_state %}\n            <sw-empty-state\n                v-else\n                class=\"sw-entity-advanced-selection-modal__empty-state\"\n                :absolute=\"false\"\n                :show-description=\"true\"\n                :title=\"$tc('sw-empty-state.messageNoResultTitle')\"\n                :subline=\"$tc('sw-empty-state.messageNoResultSublineSimple')\"\n            >\n                <template #icon>\n                    <img\n                        :src=\"assetFilter(emptyImagePath)\"\n                        :alt=\"$tc('sw-empty-state.messageNoResultTitle')\"\n                    >\n                </template>\n            </sw-empty-state>\n            {% endblock %}\n        </template>\n    </sw-card>\n    {% endblock %}\n\n    <template #modal-footer>\n        <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n        {% block sw_entity_advanced_selection_modal_button_cancel %}\n        <sw-button\n            size=\"small\"\n            class=\"sw-entity-advanced-selection-modal__button-cancel\"\n            @click=\"$emit('modal-close')\"\n        >\n            {{ $tc('global.default.cancel') }}\n        </sw-button>\n        {% endblock %}\n\n        <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n        {% block sw_entity_advanced_selection_modal_button_apply %}\n        <sw-button\n            variant=\"primary\"\n            size=\"small\"\n            class=\"sw-entity-advanced-selection-modal__button-apply\"\n            :disabled=\"isLoading\"\n            @click=\"onApply\"\n        >\n            {{ $tc('global.sw-entity-advanced-selection-modal.applySelection') }}\n        </sw-button>\n        {% endblock %}\n    </template>\n\n</sw-modal>\n{% endblock %}\n","import template from './sw-entity-advanced-selection-modal.html.twig';\nimport './sw-entity-advanced-selection-modal.scss';\n\nconst { Component, Mixin } = Cicada;\nconst { debounce } = Cicada.Utils;\nconst { Criteria } = Cicada.Data;\n\n/**\n * @private\n * @description This component should not be used directly.\n * Instead, create a wrapper component which defines all the props and can be passed to\n * `sw-entity-...-select` components as `advanced-selection-component=\"your-component-name\"`.\n * Also have a look for already existing wrapper components for your entity.\n * @status prototype\n */\nComponent.register('sw-entity-advanced-selection-modal', {\n    template,\n\n    compatConfig: Cicada.compatConfig,\n\n    inject: [\n        'acl',\n        'repositoryFactory',\n        'filterFactory',\n        'filterService',\n    ],\n\n    emits: [\n        'modal-close',\n        'selection-submit',\n    ],\n\n    mixins: [\n        Mixin.getByName('listing'),\n    ],\n\n    props: {\n        entityName: {\n            type: String,\n            required: true,\n        },\n        // Translated entity name to display in the modal title.\n        entityDisplayText: {\n            type: String,\n            required: true,\n        },\n        // A unique identifier for this kind of advanced selection.\n        // The same uniquely configured modal for a single entity can have the same key.\n        // It is passed to the sw-filter-panel and sw-entity-listing to retrieve user configured data\n        // like visible columns, column order and the last filters that were applied.\n        storeKey: {\n            type: String,\n            required: true,\n        },\n        // An array of column information. This is passed to the 'columns' property of the sw-entity-listing.\n        entityColumns: {\n            type: Array,\n            required: true,\n        },\n        // A key-value object containing all the possible filter definitions under a unique identifier.\n        // This is passed to the `filters` property of the sw-filter-panel after\n        // a call to filterFactory.create(...)\n        entityFilters: {\n            type: Object,\n            required: true,\n        },\n        // Path to an image that is used as an Icon for the empty state.\n        // This depends on what entity is used for the modal and where it is found in the administration.\n        emptyImagePath: {\n            type: String,\n            required: true,\n        },\n        // Additional associations which can't be inferred from the entityColumns or entityFilters.\n        // This is most likely needed if the column slots are used for custom rendering and usage of associations.\n        entityAssociations: {\n            type: Array,\n            required: false,\n            default() {\n                return [];\n            },\n        },\n        isSingleSelect: {\n            type: Boolean,\n            required: false,\n            default: false,\n        },\n        // Callback functions which receives one item of the entity and returns true or false,\n        // depending on if the corresponding grid row should be selectable.\n        // This is passed to the 'is-record-selectable-callback' property of the sw-entity-advanced-selection-modal-grid.\n        isRecordSelectableCallback: {\n            type: Function,\n            required: false,\n            // by default no callback function should be provided to the sw-entity-advanced-selection-modal-grid\n            default: undefined,\n        },\n        // Additional criteria filters that should always apply.\n        criteriaFilters: {\n            type: Array,\n            required: false,\n            default() {\n                return [];\n            },\n        },\n        criteriaAggregations: {\n            type: Array,\n            required: false,\n            default() {\n                return [];\n            },\n        },\n        // Custom context which is used for the search requests. If none is specified the default API context is used.\n        entityContext: {\n            type: Object,\n            required: false,\n            default() {\n                return Cicada.Context.api;\n            },\n        },\n        // Optional search term which should be applied to the search field.\n        initialSearchTerm: {\n            type: String,\n            required: false,\n            default() {\n                return '';\n            },\n        },\n        // An array containing the already selected items.\n        initialSelection: {\n            type: Array,\n            required: false,\n            default() {\n                return [];\n            },\n        },\n        disablePreviews: {\n            type: Boolean,\n            required: false,\n            default: false,\n        },\n    },\n\n    data() {\n        return {\n            isLoading: true, // must be true on component creation\n            entities: [],\n            aggregations: [],\n            currentSelection: {},\n            filterCriteria: [],\n            disableRouteParams: true,\n            filterWindowOpen: false,\n        };\n    },\n\n    computed: {\n        modalTitle() {\n            return this.$tc('global.sw-entity-advanced-selection-modal.title', 1, {\n                entity: this.entityDisplayText,\n            });\n        },\n\n        entityRepository() {\n            return this.repositoryFactory.create(this.entityName);\n        },\n\n        entityDefinition() {\n            return Cicada.EntityDefinition.get(this.entityName);\n        },\n\n        assignmentProperties() {\n            const properties = [];\n\n            Object.entries(this.entityDefinition.properties).forEach(\n                ([\n                    propertyName,\n                    property,\n                ]) => {\n                    if (property.relation === 'many_to_many' || property.relation === 'one_to_many') {\n                        properties.push(propertyName);\n                    }\n                },\n            );\n\n            return properties;\n        },\n\n        allEntityAssociations() {\n            // add all custom associations which might be needed in the template slots\n            const allAssociations = new Set(this.entityAssociations);\n\n            // get associations from property usage in entityColumns\n            this.entityColumns.forEach((column) => {\n                if (column.property && column.property.includes('.')) {\n                    const propertyDotIndex = column.property.lastIndexOf('.');\n                    allAssociations.add(column.property.slice(0, propertyDotIndex));\n                }\n            });\n\n            // get associations from property usage in entityFilters\n            Object.values(this.entityFilters).forEach((filter) => {\n                if (filter.property && filter.property.includes('.')) {\n                    const propertyDotIndex = filter.property.lastIndexOf('.');\n                    allAssociations.add(filter.property.slice(0, propertyDotIndex));\n                }\n            });\n\n            return allAssociations;\n        },\n\n        entityCriteria() {\n            // basic pagination + search criteria setup\n            const defaultCriteria = new Criteria(this.page, this.limit);\n            defaultCriteria.setTerm(this.term);\n\n            if (this.sortBy) {\n                this.sortBy.split(',').forEach((sortBy) => {\n                    const sorting = Criteria.sort(sortBy, this.sortDirection, this.naturalSorting);\n                    if (this.assignmentProperties.includes(this.sortBy)) {\n                        sorting.field += '.id';\n                        sorting.type = 'count';\n                    }\n                    defaultCriteria.addSorting(sorting);\n                });\n            }\n\n            // add all associations which are either provided or needed by the columns or filters\n            this.allEntityAssociations.forEach((association) => {\n                defaultCriteria.addAssociation(association);\n            });\n\n            // add custom filters which should always apply\n            this.criteriaFilters.forEach((filter) => {\n                defaultCriteria.addFilter(filter);\n            });\n\n            // add selected filters\n            this.filterCriteria.forEach((filter) => {\n                defaultCriteria.addFilter(filter);\n            });\n\n            // add aggregations\n            this.criteriaAggregations.forEach((aggregation) => {\n                defaultCriteria.addAggregation(aggregation);\n            });\n\n            return defaultCriteria;\n        },\n\n        activeFilterNumber() {\n            return this.filterCriteria.length;\n        },\n\n        defaultFilters() {\n            return Object.keys(this.entityFilters);\n        },\n\n        listFilters() {\n            return this.filterFactory.create(this.entityName, this.entityFilters);\n        },\n\n        previewColumns() {\n            if (this.disablePreviews) {\n                return [];\n            }\n\n            return this.entityColumns;\n        },\n\n        assetFilter() {\n            return Cicada.Filter.getByName('asset');\n        },\n    },\n\n    created() {\n        this.createdComponent();\n    },\n\n    methods: {\n        createdComponent() {\n            this.isLoading = true;\n            this.term = `${this.initialSearchTerm}`;\n            this.initialSelection.forEach((selection) => {\n                this.currentSelection[selection.id] = selection;\n            });\n\n            this.filterService.getStoredCriteria(this.storeKey).then((criteria) => {\n                this.filterCriteria.push(...criteria);\n                this.isLoading = false;\n                return this.getList();\n            });\n        },\n\n        async getList() {\n            if (this.isLoading) {\n                // don't fetch if still in loading state\n                // (for example on component creation the stored filter criteria must first be fetched)\n                return Promise.resolve();\n            }\n            this.isLoading = true;\n\n            return this.entityRepository\n                .search(this.entityCriteria, this.entityContext)\n                .then((items) => {\n                    this.total = items.total;\n                    this.entities = items;\n                    this.aggregations = items.aggregations;\n                    this.isLoading = false;\n\n                    return items;\n                })\n                .catch(() => {\n                    this.isLoading = false;\n                });\n        },\n\n        onSelectionChange(selection) {\n            this.currentSelection = selection;\n        },\n\n        onApply() {\n            const items = Object.values(this.currentSelection);\n\n            this.$emit('selection-submit', items);\n            this.$emit('modal-close');\n        },\n\n        updateCriteria(criteria) {\n            this.page = 1;\n            this.filterCriteria = criteria;\n\n            this.debouncedGetList();\n        },\n\n        debouncedGetList: debounce(function onGetList() {\n            this.getList();\n        }, 400),\n\n        clearFilters() {\n            this.$refs.filterPanel.resetAll();\n        },\n    },\n});\n"],"names":["template","Component","Mixin","debounce","Criteria","properties","propertyName","property","allAssociations","column","propertyDotIndex","filter","defaultCriteria","sortBy","sorting","association","aggregation","selection","criteria","items"],"mappings":"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"}