{"version":3,"file":"index-eMk6Od30.js","sources":["../../../app/administration/src/app/component/filter/sw-multi-select-filter/sw-multi-select-filter.html.twig","../../../app/administration/src/app/component/filter/sw-multi-select-filter/index.js"],"sourcesContent":["<!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n{% block sw_multi_select_filter %}\n<sw-base-filter\n    :title=\"filter.label\"\n    :show-reset-button=\"!!values.length\"\n    :active=\"active\"\n    @filter-reset=\"resetFilter\"\n>\n    <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n    {% block sw_multi_select_filter_content %}\n\n    <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n    {% block sw_multi_select_filter_content_entity_select %}\n    <sw-entity-multi-select\n        v-if=\"isEntityMultiSelect\"\n        :label-property=\"labelProperty\"\n        :placeholder=\"filter.placeholder\"\n        :criteria=\"filter.criteria\"\n        :entity-name=\"filter.schema.entity\"\n        :entity-collection=\"values\"\n        :display-variants=\"filter.displayVariants\"\n        @update:entity-collection=\"changeValue\"\n    >\n        <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n        {% block sw_multi_select_filter_content_slot_selection_label_property %}\n        <template #selection-label-property=\"{ item, index }\">\n            <slot\n                name=\"selection-label-property\"\n                v-bind=\"{ item, index }\"\n            ></slot>\n        </template>\n        {% endblock %}\n\n        <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n        {% block sw_multi_select_filter_content_slot_result_item %}\n        <template #result-item=\"{ item, index }\">\n            <slot\n                name=\"result-item\"\n                v-bind=\"{ item, index }\"\n            ></slot>\n        </template>\n        {% endblock %}\n    </sw-entity-multi-select>\n    {% endblock %}\n\n    <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n    {% block sw_multi_select_filter_content_option_select %}\n    <sw-multi-select\n        v-if=\"filter.options\"\n        :label-property=\"filter.labelProperty\"\n        :value-property=\"filter.valueProperty\"\n        :placeholder=\"filter.placeholder\"\n        :options=\"filter.options\"\n        :value=\"values\"\n        @update:value=\"changeValue\"\n    />\n    {% endblock %}\n    {% endblock %}\n</sw-base-filter>\n{% endblock %}\n","import template from './sw-multi-select-filter.html.twig';\n\nconst { Component } = Cicada;\nconst { Criteria, EntityCollection } = Cicada.Data;\n\n/**\n * @private\n */\nComponent.register('sw-multi-select-filter', {\n    template,\n\n    compatConfig: Cicada.compatConfig,\n\n    inject: ['repositoryFactory'],\n\n    emits: [\n        'filter-update',\n        'filter-reset',\n    ],\n\n    props: {\n        filter: {\n            type: Object,\n            required: true,\n        },\n        active: {\n            type: Boolean,\n            required: true,\n        },\n    },\n\n    computed: {\n        isEntityMultiSelect() {\n            return !this.filter.options;\n        },\n\n        labelProperty() {\n            return this.filter.labelProperty || 'name';\n        },\n\n        values() {\n            if (!this.isEntityMultiSelect) {\n                return this.filter.value || [];\n            }\n\n            const entities = new EntityCollection('', this.filter.schema.entity, Cicada.Context.api);\n\n            if (Array.isArray(this.filter.value)) {\n                this.filter.value.forEach((value) => {\n                    const entityValue = {\n                        id: value.id,\n                        [this.labelProperty]: value[this.labelProperty],\n                    };\n\n                    if (this.filter.displayVariants) {\n                        entityValue.variation = value.variation;\n                    }\n\n                    entities.push(entityValue);\n                });\n            }\n\n            return entities;\n        },\n    },\n\n    methods: {\n        changeValue(newValues) {\n            if (newValues.length <= 0) {\n                this.resetFilter();\n                return;\n            }\n\n            let filterCriteria = [];\n            if (this.filter.existingType) {\n                const multiFilter = [];\n                newValues.forEach((value) => {\n                    multiFilter.push(\n                        Criteria.not('and', [\n                            Criteria.equals(`${value}.id`, null),\n                        ]),\n                    );\n                });\n                filterCriteria.push(Criteria.multi('or', multiFilter));\n            } else {\n                filterCriteria = [\n                    this.filter.schema\n                        ? Criteria.equalsAny(\n                              `${this.filter.property}.${this.filter.schema.referenceField}`,\n                              newValues.map((newValue) => newValue[this.filter.schema.referenceField]),\n                          )\n                        : Criteria.equalsAny(this.filter.property, newValues),\n                ];\n            }\n\n            const values = !this.isEntityMultiSelect\n                ? newValues\n                : newValues.map((value) => {\n                      if (!this.filter.displayVariants) {\n                          return {\n                              id: value.id,\n                              [this.labelProperty]: value?.[this.labelProperty],\n                          };\n                      }\n\n                      return {\n                          id: value.id,\n                          variation: value.variation,\n                          [this.labelProperty]: value?.translated?.[this.labelProperty] || value?.[this.labelProperty],\n                      };\n                  });\n\n            this.$emit('filter-update', this.filter.name, filterCriteria, values);\n        },\n\n        resetFilter() {\n            this.$emit('filter-reset', this.filter.name);\n        },\n    },\n});\n"],"names":["template","Component","Criteria","EntityCollection","entities","value","entityValue","newValues","filterCriteria","multiFilter","newValue","values","_a"],"mappings":"AAAA,MAAeA,EAAA,y0CCET,CAAE,UAAAC,CAAW,EAAG,OAChB,CAAE,SAAAC,EAAU,iBAAAC,GAAqB,OAAO,KAK9CF,EAAU,SAAS,yBAA0B,CACzC,SAAAD,EAEA,aAAc,OAAO,aAErB,OAAQ,CAAC,mBAAmB,EAE5B,MAAO,CACH,gBACA,cACH,EAED,MAAO,CACH,OAAQ,CACJ,KAAM,OACN,SAAU,EACb,EACD,OAAQ,CACJ,KAAM,QACN,SAAU,EACb,CACJ,EAED,SAAU,CACN,qBAAsB,CAClB,MAAO,CAAC,KAAK,OAAO,OACvB,EAED,eAAgB,CACZ,OAAO,KAAK,OAAO,eAAiB,MACvC,EAED,QAAS,CACL,GAAI,CAAC,KAAK,oBACN,OAAO,KAAK,OAAO,OAAS,GAGhC,MAAMI,EAAW,IAAID,EAAiB,GAAI,KAAK,OAAO,OAAO,OAAQ,OAAO,QAAQ,GAAG,EAEvF,OAAI,MAAM,QAAQ,KAAK,OAAO,KAAK,GAC/B,KAAK,OAAO,MAAM,QAASE,GAAU,CACjC,MAAMC,EAAc,CAChB,GAAID,EAAM,GACV,CAAC,KAAK,aAAa,EAAGA,EAAM,KAAK,aAAa,CACtE,EAEwB,KAAK,OAAO,kBACZC,EAAY,UAAYD,EAAM,WAGlCD,EAAS,KAAKE,CAAW,CAC7C,CAAiB,EAGEF,CACV,CACJ,EAED,QAAS,CACL,YAAYG,EAAW,CACnB,GAAIA,EAAU,QAAU,EAAG,CACvB,KAAK,YAAW,EAChB,MACH,CAED,IAAIC,EAAiB,CAAA,EACrB,GAAI,KAAK,OAAO,aAAc,CAC1B,MAAMC,EAAc,CAAA,EACpBF,EAAU,QAASF,GAAU,CACzBI,EAAY,KACRP,EAAS,IAAI,MAAO,CAChBA,EAAS,OAAO,GAAGG,CAAK,MAAO,IAAI,CAC/D,CAAyB,CACzB,CACA,CAAiB,EACDG,EAAe,KAAKN,EAAS,MAAM,KAAMO,CAAW,CAAC,CACrE,MACgBD,EAAiB,CACb,KAAK,OAAO,OACNN,EAAS,UACL,GAAG,KAAK,OAAO,QAAQ,IAAI,KAAK,OAAO,OAAO,cAAc,GAC5DK,EAAU,IAAKG,GAAaA,EAAS,KAAK,OAAO,OAAO,cAAc,CAAC,CAC1E,EACDR,EAAS,UAAU,KAAK,OAAO,SAAUK,CAAS,CAC5E,EAGY,MAAMI,EAAU,KAAK,oBAEfJ,EAAU,IAAKF,GAAU,CDjG3C,IAAAO,ECkGsB,OAAK,KAAK,OAAO,gBAOV,CACH,GAAIP,EAAM,GACV,UAAWA,EAAM,UACjB,CAAC,KAAK,aAAa,IAAGO,EAAAP,GAAA,YAAAA,EAAO,aAAP,YAAAO,EAAoB,KAAK,kBAAkBP,GAAA,YAAAA,EAAQ,KAAK,eACxG,EAViC,CACH,GAAIA,EAAM,GACV,CAAC,KAAK,aAAa,EAAGA,GAAA,YAAAA,EAAQ,KAAK,cACjE,CAQA,CAAmB,EAdDE,EAgBN,KAAK,MAAM,gBAAiB,KAAK,OAAO,KAAMC,EAAgBG,CAAM,CACvE,EAED,aAAc,CACV,KAAK,MAAM,eAAgB,KAAK,OAAO,IAAI,CAC9C,CACJ,CACL,CAAC"}