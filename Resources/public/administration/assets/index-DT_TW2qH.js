const s=`{% block sw_first_run_wizard_paypal_info %} <div class="sw-first-run-wizard-paypal"> <div v-if="!isInstallingPlugin" class="sw-first-run-wizard-paypal-info" > <img class="sw-first-run-wizard-paypal-info__icon" :src="assetFilter('/administration/static/img/paypal-official-logo.svg')" alt="" > <h3 class="headline"> {{ $tc('sw-first-run-wizard.paypalInfo.headline') }} </h3> <sw-container columns="1fr 1fr 1fr 1fr" class="paymethods" > <div class="paymethod"> <sw-icon name="regular-check-circle" size="12px" /> <span>{{ $tc('sw-first-run-wizard.paypalInfo.paymethod.paypal') }}</span> </div> <div class="paymethod"> <sw-icon name="regular-check-circle" size="12px" /> <span>{{ $tc('sw-first-run-wizard.paypalInfo.paymethod.debit') }}</span> </div> <div class="paymethod"> <sw-icon name="regular-check-circle" size="12px" /> <span>{{ $tc('sw-first-run-wizard.paypalInfo.paymethod.creditcard') }}</span> </div> <div class="paymethod"> <sw-icon name="regular-check-circle" size="12px" /> <span>{{ $tc('sw-first-run-wizard.paypalInfo.paymethod.invoice') }}**</span> </div> </sw-container> <div v-if="pluginInstallationFailed" class="sw-first-run-wizard-paypal__error" > <sw-alert :title="pluginError.title" variant="error" appearance="notification" > {{ pluginError.detail }} </sw-alert> </div> <div class="disclaimer"> <p>{{ $tc('sw-first-run-wizard.paypalInfo.disclaimerLineOne') }}</p> <p>{{ $tc('sw-first-run-wizard.paypalInfo.disclaimerLineTwo') }}</p> </div> </div> <div v-else class="sw-first-run-wizard-paypal-install" > <sw-loader size="48px" /> <p class="sw-loader-info-text" v-html="$tc('sw-first-run-wizard.paypalInstall.loadingMessage')" ></p> </div> </div> {% endblock %}`,e={template:s,inject:["extensionStoreActionService"],emits:["frw-set-title","buttons-update"],data(){return{isInstallingPlugin:!1,pluginInstallationFailed:!1,pluginError:null,pluginName:"SwagPayPal",installPromise:Promise.resolve()}},computed:{assetFilter(){return Shopware.Filter.getByName("asset")}},created(){this.createdComponent()},methods:{createdComponent(){this.updateButtons(),this.setTitle(),this.installPromise=this.installPayPal()},setTitle(){this.$emit("frw-set-title",this.$tc("sw-first-run-wizard.paypalInfo.modalTitle"))},updateButtons(){const i=[{key:"back",label:this.$tc("sw-first-run-wizard.general.buttonBack"),position:"left",variant:null,action:"sw.first.run.wizard.index.mailer.selection",disabled:!1},{key:"skip",label:this.$tc("sw-first-run-wizard.general.buttonSkip"),position:"right",variant:null,action:"sw.first.run.wizard.index.plugins",disabled:!1},{key:"configure",label:this.$tc("sw-first-run-wizard.general.buttonNextPayPalInfo"),position:"right",variant:"primary",action:this.activatePayPalAndRedirect.bind(this),disabled:!1}];this.$emit("buttons-update",i)},installPayPal(){return this.extensionStoreActionService.downloadExtension(this.pluginName).then(()=>this.extensionStoreActionService.installExtension(this.pluginName,"plugin"))},activatePayPalAndRedirect(){this.isInstallingPlugin=!0,this.installPromise.then(()=>this.extensionStoreActionService.activateExtension(this.pluginName,"plugin")).then(async()=>(await this.$router.push({name:"sw.first.run.wizard.index.paypal.credentials"}),window.location.reload(),Promise.resolve(!0))).catch(i=>{var a,t;return this.isInstallingPlugin=!1,this.pluginInstallationFailed=!0,(t=(a=i.response)==null?void 0:a.data)!=null&&t.errors&&(this.pluginError=i.response.data.errors.pop()),!0})}}};export{e as default};
