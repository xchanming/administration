const r=`{% block sw_entity_single_select %} <sw-select-base ref="selectBase" class="sw-entity-single-select" :is-loading="isLoading" :disable-auto-close="disableAutoClose" v-bind="$attrs" :label="label" :disabled="disabled" @clear="clearInput" @select-expanded="onSelectExpanded" @select-collapsed="onSelectCollapsed" v-on="listeners" > {% block sw_entity_single_select_base %} {% block sw_entity_single_select_base_selection %} <template #sw-select-selection="{ identification, error, disabled, size, setFocusClass, removeFocusClass }"> {% block sw_entity_single_select_advanced_selection_modal %} <component :is="advancedSelectionComponent" v-if="isAdvancedSelectionActive && isAdvancedSelectionModalVisible" :is-single-select="true" :initial-search-term="advancedSelectionInitialSearchTerm" v-bind="advancedSelectionParameters" @modal-close="closeAdvancedSelectionModal" @selection-submit="onAdvancedSelectionSubmit" /> {% endblock %} {% block sw_entity_single_select_base_selection_slot %} <div class="sw-entity-single-select__selection"> {% block sw_entity_single_select_single_selection_inner %} {% block sw_entity_single_select_single_selection_inner_label %} <div v-if="!isExpanded" class="sw-entity-single-select__selection-text" :class="selectionTextClasses" > <template v-if="singleSelection"> <slot name="selection-label-property" v-bind="{ item: singleSelection, labelProperty, searchTerm, getKey }" > <sw-product-variant-info v-if="displayVariants" :variations="singleSelection.variation" > {{ displayLabelProperty(singleSelection) }} </sw-product-variant-info> <template v-else> {{ displayLabelProperty(singleSelection) }} </template> </slot> </template> <template v-else> {{ placeholder }} </template> </div> {% endblock %} {% block sw_entity_single_select_single_selection_inner_input %} <input ref="swSelectInput" v-model="searchTerm" class="sw-entity-single-select__selection-input" :class="inputClasses" type="text" :placeholder="placeholder" :aria-label="label" @input="onInputSearchTerm" > {% endblock %} {% endblock %} </div> {% endblock %} </template> {% endblock %} {% block sw_entity_single_select_base_results %} <template #results-list> {% block sw_entity_single_select_base_results_slot %} <sw-select-result-list ref="resultsList" :options="results" :is-loading="isLoading" :empty-message="$tc('global.sw-single-select.messageNoResults', searchTerm, { term: searchTerm })" :focus-el="$refs.swSelectInput" @paginate="paginate" @item-select="setValue" > {% block sw_entity_single_select_base_results_list %} {% block sw_entity_single_select_base_results_list_before %} <template #before-item-list> {% block sw_entity_single_select_base_results_list_before_advanced_selection %} <div v-if="isAdvancedSelectionActive" class="sw-single-select-filtering__advanced-selection sw-select-result" @click="openAdvancedSelectionModal" > {{ $tc('global.sw-entity-advanced-selection-modal.link') }} </div> {% endblock %} {% block sw_entity_single_select_base_results_list_before_slot %} <slot name="before-item-list"></slot> {% endblock %} </template> {% endblock %} {% block sw_entity_single_select_base_results_list_result %} <template #result-item="{ item, index }"> <slot name="result-item" v-bind="{ item, index, labelProperty, searchTerm, highlightSearchTerm, isSelected, setValue, getKey }" > <sw-select-result v-tooltip="getDisabledSelectionTooltip(item)" :selected="isSelected(item)" :disabled="isSelectionDisabled(item)" :description-position="descriptionPosition" v-bind="{ item, index }" @item-select="setValue" > {% block sw_entity_multi_select_base_results_list_result_preview %} <template v-if="shouldShowActiveState" #preview > {% block sw_entity_multi_select_base_results_list_result_active %} <sw-icon class="sw-entity-single-select__selection-active" size="6" :color="getActiveIconColor(item)" name="default-basic-shape-circle-filled" /> {% endblock %} </template> {% endblock %} {% block sw_entity_single_select_base_results_list_result_label %} <slot name="result-label-property" v-bind="{ item, index, labelProperty, searchTerm, highlightSearchTerm, getKey }" > <sw-product-variant-info v-if="displayVariants" :variations="item.variation" :highlighted="true" :search-term="searchTerm" > {{ displayLabelProperty(item) }} </sw-product-variant-info> <template v-else> <sw-highlight-text v-if="highlightSearchTerm && !isSelected(item)" :text="displayLabelProperty(item)" :search-term="searchTerm" /> <template v-else> {{ displayLabelProperty(item) }} </template> </template> </slot> {% endblock %} {% block sw_entity_multi_select_base_results_list_result_description %} <template #description> <slot name="result-description-property" v-bind="{ item, searchTerm, highlightSearchTerm }" ></slot> </template> {% endblock %} </sw-select-result> </slot> </template> {% endblock %} {% block sw_entity_single_select_base_results_list_after %} <template #after-item-list> <slot name="after-item-list"></slot> </template> {% endblock %} {% endblock %} </sw-select-result-list> {% endblock %} </template> {% endblock %} {% endblock %} <template #label> <slot name="label"></slot> </template> <template #hint> <slot name="hint"></slot> </template> </sw-select-base> {% endblock %}`,{Component:a,Mixin:n,Utils:l}=Cicada,{Criteria:s,EntityCollection:c}=Cicada.Data,{debounce:o,get:d}=Cicada.Utils;a.register("sw-entity-single-select",{template:r,compatConfig:Cicada.compatConfig,inject:["repositoryFactory","feature"],emits:["update:value","search","option-select","before-selection-clear","search-term-change"],mixins:[n.getByName("remove-api-error"),n.getByName("notification")],props:{value:{required:!0},highlightSearchTerm:{type:Boolean,required:!1,default:!0},placeholder:{type:String,required:!1,default:""},resetOption:{type:String,required:!1,default:""},labelProperty:{type:[String,Array],required:!1,default:"name"},labelCallback:{type:Function,required:!1,default:null},entity:{required:!0,type:String},resultLimit:{type:Number,required:!1,default:25},criteria:{type:Object,required:!1,default(e){return new s(1,e.resultLimit)}},context:{type:Object,required:!1,default:()=>Cicada.Context.api},selectionDisablingMethod:{type:Function,required:!1,default:()=>!1},disableAutoClose:{type:Boolean,required:!1,default:!1},disabledSelectionTooltip:{type:Object,required:!1,default:()=>({message:""})},descriptionPosition:{type:String,required:!1,default:"right",validValues:["bottom","right","left"],validator(e){return["bottom","right","left"].includes(e)}},allowEntityCreation:{type:Boolean,required:!1,default:!1},entityCreationLabel:{type:String,required:!1,default(){return Cicada.Snippet.tc("global.sw-single-select.labelEntity")}},advancedSelectionComponent:{type:String,required:!1,default:""},advancedSelectionParameters:{type:Object,required:!1,default(){return{}}},displayVariants:{type:Boolean,required:!1,default:!1},shouldShowActiveState:{type:Boolean,required:!1,default:!1},disabled:{type:Boolean,required:!1,default:void 0},label:{type:String,required:!1,default:void 0}},data(){return{searchTerm:"",isExpanded:!1,resultCollection:null,singleSelection:null,isLoading:!1,itemRecentlySelected:!1,lastSelection:null,entityExists:!0,newEntityName:"",isAdvancedSelectionModalVisible:!1}},computed:{inputClasses(){return{"is--expanded":this.isExpanded}},selectionTextClasses(){return{"is--placeholder":!this.singleSelection}},repository(){return this.repositoryFactory.create(this.entity)},results(){return this.resultCollection},isAdvancedSelectionActive(){return this.advancedSelectionComponent&&a.getComponentRegistry().has(this.advancedSelectionComponent)},advancedSelectionInitialSearchTerm(){return this.singleSelection&&this.tryGetSearchText(this.singleSelection)===this.searchTerm?"":this.searchTerm},listeners(){return this.isCompatEnabled("INSTANCE_LISTENERS")?this.$listeners:{}}},watch:{value(e){if(this.lastSelection&&this.value===this.lastSelection.id){this.singleSelection=this.lastSelection,this.lastSelection=null;return}if(e===""||e===null){this.singleSelection=null;return}this.loadSelected()}},created(){this.createdComponent()},methods:{createdComponent(){this.loadSelected()},loadSelected(){return!this.value||this.value.length===0?(this.resetOption&&(this.singleSelection={id:null,name:this.resetOption}),Promise.resolve()):(this.isLoading=!0,this.repository.get(this.value,{...this.context,inheritance:!0},this.criteria).then(e=>(e||this.$emit("update:value",null),this.criteria.setIds([]),this.singleSelection=e,this.isLoading=!1,e)))},createCollection(e){return new c(e.source,e.entity,e.criteria)},isSelected(e){return e.id===this.value},debouncedSearch:o(function(){this.search()},400),search(){return this.criteria.term===this.searchTerm?(this.allowEntityCreation&&this.filterSearchGeneratedTags(),Promise.resolve()):this.allowEntityCreation?(this.isLoading=!0,this.checkEntityExists(this.searchTerm).then(()=>{if(!this.entityExists&&this.searchTerm){const e=new s(1,this.resultLimit);return e.addFilter(s.contains("name",this.searchTerm)),this.repository.search(e,{...this.context,inheritance:!0}).then(t=>{this.resultCollection=t;const i=this.repository.create(this.context,-1);return i.name=this.$tc("global.sw-single-select.labelEntityAdd",0,{term:this.searchTerm,entity:this.entityCreationLabel}),this.resultCollection.unshift(i),this.newEntityName=this.searchTerm,this.displaySearch(this.resultCollection),this.isLoading=!1,Promise.resolve()})}return this.handleSearchPromise()})):this.handleSearchPromise()},handleSearchPromise(){this.criteria.setPage(1),this.criteria.setLimit(this.resultLimit),this.criteria.setTerm(this.searchTerm),this.resultCollection=null;const e=this.loadData().then(()=>{this.resetActiveItem()});return this.$emit("search",e),e},paginate(){!this.resultCollection||this.resultCollection.total<this.criteria.page*this.criteria.limit||(this.criteria.setPage(this.criteria.page+1),this.loadData())},loadData(){return this.isLoading=!0,this.repository.search(this.criteria,{...this.context,inheritance:!0}).then(e=>(this.displaySearch(e),this.isLoading=!1,e))},checkEntityExists(e){if(e.trim().length===0)return this.entityExists=!0,Promise.resolve();const t=new s(1,this.resultLimit);return t.addIncludes({[this.entity]:["id","name"]}),t.addFilter(s.equals("name",e)),this.repository.search(t,this.context).then(i=>(this.entityExists=i.total>0,i.total>0))},displaySearch(e){this.resultCollection?e.forEach(t=>{this.resultCollection.has(t.id)||this.resultCollection.push(t)}):this.resultCollection=e,this.resetOption&&(this.resultCollection.has(null)||this.resultCollection.unshift({id:null,name:this.resetOption}))},displayLabelProperty(e){if(typeof this.labelCallback=="function")return this.labelCallback(e);const t=[];return Array.isArray(this.labelProperty)?t.push(...this.labelProperty):t.push(this.labelProperty),t.map(i=>this.getKey(e,i)||this.getKey(e,`translated.${i}`)).join(" ")},onSelectExpanded(){this.isExpanded=!0,this.criteria.setPage(1),this.criteria.setLimit(this.resultLimit),this.criteria.setTerm(""),this.resultCollection=null,this.loadData().then(()=>{this.resetActiveItem()}),this.searchTerm=this.tryGetSearchText(this.singleSelection),this.$nextTick(()=>{this.$refs.swSelectInput.select(),this.$refs.swSelectInput.focus()})},tryGetSearchText(e){if(typeof this.labelCallback=="function")return this.labelCallback(e);let t=this.getKey(e,this.labelProperty,"");return t||(t=this.getKey(e,`translated.${this.labelProperty}`,"")),t},onSelectCollapsed(){this.searchTerm===""&&!this.itemRecentlySelected&&this.clearSelection(),this.$refs.swSelectInput.blur(),this.searchTerm="",this.itemRecentlySelected=!1,this.isExpanded=!1},closeResultList(){this.$refs.selectBase.collapse()},setValue(e){return this.itemRecentlySelected=!0,this.disableAutoClose||this.closeResultList(),this.allowEntityCreation&&!this.entityExists&&e.id===-1?this.addItem(e):(this.lastSelection=e,this.$emit("update:value",e.id,e),this.$emit("option-select",l.string.camelCase(this.entity),e),null)},addItem(e){return this.allowEntityCreation&&(e.id===-1?this.createNewEntity():this.$super("addItem",e)),null},clearSelection(){this.$emit("before-selection-clear",this.singleSelection,this.value),this.$emit("update:value",null),this.$emit("option-select",l.string.camelCase(this.entity),null)},clearInput(){this.searchTerm="",this.clearSelection(),this.$refs.selectBase.collapse()},resetActiveItem(e=0){this.$refs.resultsList&&(this.singleSelection&&(e=1),this.$refs.resultsList.setActiveItemIndex(e))},onInputSearchTerm(e){const t=e.target.value;this.$emit("search-term-change",t),this.debouncedSearch()},getKey(e,t,i){return d(e,t,i)},isSelectionDisabled(e){return this.disabled?!0:this.selectionDisablingMethod(e)},getDisabledSelectionTooltip(e){return{...this.disabledSelectionTooltip,disabled:this.disabledSelectionTooltip.disabled||!this.selectionDisablingMethod(e)}},createNewEntity(){const e=this.repository.create(this.context);e.name=this.newEntityName,this.repository.save(e,this.context).then(()=>{this.lastSelection=e,this.$emit("update:value",e.id,e),this.$emit("option-select",l.string.camelCase(this.entity),e),this.createNotificationSuccess({message:this.$tc("global.sw-single-select.labelEntityAddedSuccess",0,{term:e.name,entity:this.entityCreationLabel})})}).catch(()=>{this.createNotificationError({message:this.$tc("global.notification.notificationSaveErrorMessage",0,{entityName:this.entity})}),Cicada.Utils.debug.error('Only Entities with "name" as the only required field are creatable.'),this.isLoading=!1})},filterSearchGeneratedTags(){this.resultCollection=this.resultCollection.filter(e=>e.id!==-1)},openAdvancedSelectionModal(){this.isAdvancedSelectionModalVisible=!0},closeAdvancedSelectionModal(){this.isAdvancedSelectionModalVisible=!1},onAdvancedSelectionSubmit(e){e.length>0&&this.setValue(e[0])},getActiveIconColor(e){return e!=null&&e.active&&e.active===!0?"#37d046":"#d1d9e0"}}});
//# sourceMappingURL=index-T5pA4jYm.js.map
