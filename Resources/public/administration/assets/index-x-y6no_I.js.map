{"version":3,"file":"index-x-y6no_I.js","sources":["../../../app/administration/src/app/component/rule/condition-type/sw-condition-line-item/sw-condition-line-item.html.twig","../../../app/administration/src/app/component/rule/condition-type/sw-condition-line-item/index.js"],"sourcesContent":["<!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n{% block sw_condition_value_content %}\n<div class=\"sw-condition-line-item sw-condition__condition-value\">\n    <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n    {% block sw_condition_line_item_field_operator %}\n    <sw-condition-operator-select\n        v-bind=\"{ operators, condition }\"\n        :plural=\"matchesAll\"\n        :disabled=\"disabled || undefined\"\n    />\n    {% endblock %}\n\n    <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n    {% block sw_condition_line_item_field_identifier %}\n    <sw-entity-multi-select\n        entity=\"product\"\n        size=\"medium\"\n        :disabled=\"disabled || undefined\"\n        :entity-collection=\"products\"\n        :criteria=\"productCriteria\"\n        :context=\"productContext\"\n        advanced-selection-component=\"sw-advanced-selection-product\"\n        @update:entity-collection=\"setIds\"\n    >\n        <template #selection-label-property=\"{ item }\">\n            <slot\n                name=\"selection-label-property\"\n                v-bind=\"{ item }\"\n            >\n                <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n                {% block sw_condition_line_item_results_variant_info %}\n                <sw-product-variant-info\n                    :variations=\"item.variation\"\n                >\n                    {{ item.translated.name || item.name }}\n                </sw-product-variant-info>\n                {% endblock %}\n            </slot>\n        </template>\n\n        <template #result-item=\"{ item, index, searchTerm, highlightSearchTerm, isSelected }\">\n            <slot\n                name=\"result-item\"\n                v-bind=\"{ item, index, searchTerm, highlightSearchTerm }\"\n            >\n                <sw-select-result\n                    :selected=\"isSelected(item)\"\n                    v-bind=\"{ item, index, searchTerm, highlightSearchTerm }\"\n                >\n                    <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n                    {% block sw_condition_line_item_results_list_result_label %}\n                    <span class=\"sw-select-result__result-item-text\">\n                        <sw-product-variant-info\n                            :variations=\"item.variation\"\n                            :highlighted=\"highlightSearchTerm\"\n                            :search-term=\"searchTerm\"\n                        >\n                            {{ item.translated.name || item.name }}\n                        </sw-product-variant-info>\n                    </span>\n                    {% endblock %}\n                </sw-select-result>\n            </slot>\n        </template>\n    </sw-entity-multi-select>\n    {% endblock %}\n</div>\n{% endblock %}\n","import template from './sw-condition-line-item.html.twig';\nimport './sw-condition-line-item.scss';\n\nconst { Component } = Cicada;\nconst { mapPropertyErrors } = Component.getComponentHelper();\nconst { EntityCollection, Criteria } = Cicada.Data;\n\n/**\n * @public\n * @package services-settings\n * @description Condition for the LineItemRule. This component must a be child of sw-condition-tree.\n * @status prototype\n * @example-type code-only\n * @component-example\n * <sw-condition-line-item :condition=\"condition\" :level=\"0\"></sw-condition-line-item>\n */\nComponent.extend('sw-condition-line-item', 'sw-condition-base-line-item', {\n    template,\n\n    inject: ['repositoryFactory'],\n\n    data() {\n        return {\n            products: null,\n        };\n    },\n\n    computed: {\n        operators() {\n            return this.conditionDataProviderService.getOperatorSet('multiStore');\n        },\n\n        productRepository() {\n            return this.repositoryFactory.create('product');\n        },\n\n        productIds: {\n            get() {\n                this.ensureValueExist();\n                return this.condition.value.identifiers || [];\n            },\n            set(identifiers) {\n                this.ensureValueExist();\n                this.condition.value = { ...this.condition.value, identifiers };\n            },\n        },\n\n        ...mapPropertyErrors('condition', [\n            'value.operator',\n            'value.identifiers',\n        ]),\n\n        currentError() {\n            return this.conditionValueOperatorError || this.conditionValueIdentifiersError;\n        },\n\n        productCriteria() {\n            const criteria = new Criteria(1, 25);\n            criteria.addAssociation('options.group');\n\n            return criteria;\n        },\n\n        resultCriteria() {\n            const criteria = new Criteria(1, 25);\n            criteria.addAssociation('options.group');\n\n            return criteria;\n        },\n\n        productContext() {\n            return { ...Cicada.Context.api, inheritance: true };\n        },\n    },\n\n    created() {\n        this.createdComponent();\n    },\n\n    methods: {\n        createdComponent() {\n            this.products = new EntityCollection(\n                this.productRepository.route,\n                this.productRepository.entityName,\n                this.productContext,\n            );\n\n            if (this.productIds.length <= 0) {\n                return Promise.resolve();\n            }\n\n            const criteria = new Criteria(1, 25);\n            criteria.addAssociation('options.group');\n            criteria.setIds(this.productIds);\n\n            return this.productRepository.search(criteria, this.productContext).then((products) => {\n                this.products = products;\n            });\n        },\n\n        setIds(productCollection) {\n            this.productIds = productCollection.getIds();\n            this.products = productCollection;\n        },\n    },\n});\n"],"names":["template","Component","mapPropertyErrors","EntityCollection","Criteria","identifiers","criteria","products","productCollection"],"mappings":"AAAA,MAAeA,EAAA,smDCGT,CAAE,UAAAC,CAAW,EAAG,OAChB,CAAE,kBAAAC,CAAmB,EAAGD,EAAU,qBAClC,CAAE,iBAAAE,EAAkB,SAAAC,GAAa,OAAO,KAW9CH,EAAU,OAAO,yBAA0B,8BAA+B,CACtE,SAAAD,EAEA,OAAQ,CAAC,mBAAmB,EAE5B,MAAO,CACH,MAAO,CACH,SAAU,IACtB,CACK,EAED,SAAU,CACN,WAAY,CACR,OAAO,KAAK,6BAA6B,eAAe,YAAY,CACvE,EAED,mBAAoB,CAChB,OAAO,KAAK,kBAAkB,OAAO,SAAS,CACjD,EAED,WAAY,CACR,KAAM,CACF,YAAK,iBAAgB,EACd,KAAK,UAAU,MAAM,aAAe,CAAA,CAC9C,EACD,IAAIK,EAAa,CACb,KAAK,iBAAgB,EACrB,KAAK,UAAU,MAAQ,CAAE,GAAG,KAAK,UAAU,MAAO,YAAAA,EACrD,CACJ,EAED,GAAGH,EAAkB,YAAa,CAC9B,iBACA,mBACZ,CAAS,EAED,cAAe,CACX,OAAO,KAAK,6BAA+B,KAAK,8BACnD,EAED,iBAAkB,CACd,MAAMI,EAAW,IAAIF,EAAS,EAAG,EAAE,EACnC,OAAAE,EAAS,eAAe,eAAe,EAEhCA,CACV,EAED,gBAAiB,CACb,MAAMA,EAAW,IAAIF,EAAS,EAAG,EAAE,EACnC,OAAAE,EAAS,eAAe,eAAe,EAEhCA,CACV,EAED,gBAAiB,CACb,MAAO,CAAE,GAAG,OAAO,QAAQ,IAAK,YAAa,GAChD,CACJ,EAED,SAAU,CACN,KAAK,iBAAgB,CACxB,EAED,QAAS,CACL,kBAAmB,CAOf,GANA,KAAK,SAAW,IAAIH,EAChB,KAAK,kBAAkB,MACvB,KAAK,kBAAkB,WACvB,KAAK,cACrB,EAEgB,KAAK,WAAW,QAAU,EAC1B,OAAO,QAAQ,UAGnB,MAAMG,EAAW,IAAIF,EAAS,EAAG,EAAE,EACnC,OAAAE,EAAS,eAAe,eAAe,EACvCA,EAAS,OAAO,KAAK,UAAU,EAExB,KAAK,kBAAkB,OAAOA,EAAU,KAAK,cAAc,EAAE,KAAMC,GAAa,CACnF,KAAK,SAAWA,CAChC,CAAa,CACJ,EAED,OAAOC,EAAmB,CACtB,KAAK,WAAaA,EAAkB,SACpC,KAAK,SAAWA,CACnB,CACJ,CACL,CAAC"}