{"version":3,"file":"index-CMA8wqvN.js","sources":["../../../app/administration/src/app/component/form/sw-custom-field-set-renderer/sw-custom-field-set-renderer.html.twig","../../../app/administration/src/app/component/form/sw-custom-field-set-renderer/index.js"],"sourcesContent":["<!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n{% block sw_custom_field_set_renderer %}\n<div class=\"sw-custom-field-set-renderer\">\n    <template v-if=\"visibleCustomFieldSets.length > 0\">\n        <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n        {% block sw_custom_field_set_renderer_card %}\n        <sw-tabs\n            v-if=\"variant === 'tabs'\"\n            ref=\"tabComponent\"\n            class=\"sw-custom-field-set-renderer__card-tabs\"\n            variant=\"minimal\"\n            :default-item=\"visibleCustomFieldSets[0].id\"\n            :position-identifier=\"'sw-custom-field-set-renderer'\"\n            @new-item-active=\"(tab) => loadCustomFieldSet(tab.name)\"\n        >\n            <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n            {% block sw_custom_field_set_renderer_card_tabs %}\n            <template #default=\"{ active }\">\n                <template\n                    v-for=\"set in visibleCustomFieldSets\"\n                    :key=\"`sw-tab--${set.id}`\"\n                >\n                    <sw-tabs-item\n                        variant=\"minimal\"\n                        :name=\"set.id\"\n                        :class=\"'sw-tab--name-' + set.name\"\n                        :active-tab=\"active\"\n                    >\n                        {{ getTabLabel(set) }}\n                    </sw-tabs-item>\n                </template>\n            </template>\n            {% endblock %}\n\n            <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n            {% block sw_custom_field_set_renderer_card_tabs_content %}\n            <template\n                #content=\"{ active }\"\n            >\n                <template\n                    v-for=\"set in visibleCustomFieldSets\"\n                    :key=\"set.id\"\n                >\n                    <div\n                        v-show=\"active === set.id\"\n                        :class=\"'sw-custom-field-set-renderer-tab-content__' + set.name\"\n                    >\n                        <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n                        {% block sw_custom_field_set_renderer_card_form_renderer %}\n                        <sw-skeleton\n                            v-if=\"!set.customFields\"\n                            style=\"width:100%\"\n                        />\n                        <template v-else>\n                            <template\n                                v-for=\"customField in set.customFields\"\n                                :key=\"customField.name\"\n                            >\n                                <sw-inherit-wrapper\n                                    v-if=\"entity && customField.config\"\n                                    v-model:value=\"customFields[customField.name]\"\n                                    v-bind=\"getInheritWrapperBind(customField)\"\n                                    :class=\"'sw-form-field-renderer-field__' + customField.name\"\n                                    :has-parent=\"hasParent\"\n                                    :required=\"customField.config.validation === 'required'\"\n                                    :inherited-value=\"getInheritedCustomField(customField.name)\"\n                                >\n                                    <template #content=\"props\">\n                                        <sw-form-field-renderer\n                                            v-bind=\"getBind(customField, props)\"\n                                            :key=\"props.isInherited\"\n                                            :class=\"'sw-form-field-renderer-input-field__' + customField.name\"\n                                            :disabled=\"disabled || props.isInherited\"\n                                            :value=\"props.currentValue\"\n                                            @update:value=\"props.updateCurrentValue\"\n                                        />\n                                    </template>\n                                </sw-inherit-wrapper>\n                            </template>\n                        </template>\n                        {% endblock %}\n                    </div>\n                </template>\n            </template>\n            {% endblock %}\n        </sw-tabs>\n        {% endblock %}\n\n        <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n        {% block sw_custom_field_set_renderer_media %}\n        <template v-else-if=\"variant === 'media-collapse'\">\n            <template\n                v-for=\"set in visibleCustomFieldSets\"\n                :key=\"`sw-media-collapse--${set.id}`\"\n            >\n                <!-- eslint-disable vue/no-use-v-if-with-v-for -->\n                <sw-media-collapse\n                    v-if=\"set.customFields && set.customFields.length > 0\"\n                    :expand-on-loading=\"false\"\n                    :title=\"getInlineSnippet(set.config.label) || set.name\"\n                >\n                    <template #content>\n                        <template\n                            v-for=\"customField in set.customFields\"\n                            :key=\"customField.name\"\n                        >\n                            <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n                        {% block sw_custom_field_set_renderer_media_form_renderer %}\n                            <sw-form-field-renderer\n                                v-bind=\"customField\"\n                                v-model:value=\"customFields[customField.name]\"\n                                :disabled=\"disabled\"\n                                :required=\"customField.config.validation === 'required'\"\n                            />\n                        {% endblock %}\n                        </template>\n                        <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n                    {% block sw_custom_field_set_renderer_media_button_save %}\n                        <sw-button-process\n                            :is-loading=\"isLoading\"\n                            :process-success=\"isSaveSuccessful\"\n                            :disabled=\"isLoading || disabled\"\n                            variant=\"primary\"\n                            size=\"small\"\n                            @update:process-success=\"$emit('process-finish')\"\n                            @click=\"$emit('save')\"\n                        >\n                            {{ $tc('global.default.save') }}\n                        </sw-button-process>\n                    {% endblock %}\n                    </template>\n                </sw-media-collapse>\n            </template>\n        </template>\n        {% endblock %}\n    </template>\n</div>\n{% endblock %}\n","import template from './sw-custom-field-set-renderer.html.twig';\nimport './sw-custom-field-set-renderer.scss';\n\nconst { Component, Mixin } = Cicada;\nconst { Criteria } = Cicada.Data;\n\n/**\n * @package admin\n *\n * @private\n * @status ready\n * @description\n * Renders custom-field sets\n * @example-type code-only\n * @component-example\n */\nComponent.register('sw-custom-field-set-renderer', {\n    template,\n\n    inject: [\n        'feature',\n        'repositoryFactory',\n    ],\n\n    compatConfig: Cicada.compatConfig,\n\n    // Grant access to some variables to the child form render components\n    provide() {\n        return {\n            getEntity: this.entity,\n            getParentEntity: this.parentEntity,\n            getCustomFieldSet: this.set,\n            getCustomFieldSetVariant: this.variant,\n        };\n    },\n\n    emits: [\n        'process-finish',\n        'save',\n        'change-active-selection',\n    ],\n\n    mixins: [\n        Mixin.getByName('sw-inline-snippet'),\n        Mixin.getByName('placeholder'),\n    ],\n\n    props: {\n        sets: {\n            type: Array,\n            required: true,\n        },\n        entity: {\n            type: Object,\n            required: true,\n        },\n        parentEntity: {\n            type: Object,\n            required: false,\n            default: null,\n        },\n        variant: {\n            type: String,\n            required: false,\n            default: 'tabs',\n            validValues: [\n                'tabs',\n                'media-collapse',\n            ],\n            validator(value) {\n                if (!value.length) {\n                    return true;\n                }\n                return [\n                    'tabs',\n                    'media-collapse',\n                ].includes(value);\n            },\n        },\n        disabled: {\n            type: Boolean,\n            default: false,\n            required: false,\n        },\n        isLoading: {\n            type: Boolean,\n            default: false,\n            required: false,\n        },\n        isSaveSuccessful: {\n            type: Boolean,\n            default: false,\n            required: false,\n        },\n        showCustomFieldSetSelection: {\n            type: Boolean,\n            default: false,\n            require: false,\n        },\n    },\n\n    data() {\n        return {\n            customFields: {},\n            loadingFields: [],\n            tabWaitMaxAttempts: 10,\n            tabWaitsAttempts: 0,\n            refreshVisibleSets: false,\n        };\n    },\n\n    computed: {\n        hasParent() {\n            return this.parentEntity ? !!this.parentEntity.id : false;\n        },\n\n        visibleCustomFieldSets() {\n            return this.sortSets(this.sets);\n        },\n\n        customFieldSetRepository() {\n            return this.repositoryFactory.create('custom_field_set');\n        },\n\n        customFieldSetCriteria() {\n            const criteria = new Criteria(1, null);\n\n            criteria.addFilter(Criteria.equals('relations.entityName', this.entity.getEntityName()));\n            criteria.addFilter(Criteria.equals('global', 0));\n            criteria.addSorting(Criteria.sort('config.customFieldPosition', 'ASC', true));\n\n            return criteria;\n        },\n\n        globalCustomFieldSets() {\n            return this.sets.filter((set) => set.global);\n        },\n\n        componentsWithMapInheritanceSupport() {\n            return [\n                'sw-text-field',\n                'sw-textarea-field',\n                'sw-select-field',\n                'sw-checkbox-field',\n                'sw-switch-field',\n                'sw-number-field',\n                'sw-datepicker',\n                'sw-email-field',\n                'sw-url-field',\n                'sw-password-field',\n                'sw-radio-field',\n                'sw-colorpicker',\n                'sw-compact-colorpicker',\n                'sw-price-field',\n                'sw-tagged-field',\n                // for backwards compatibility with old custom fields\n                'sw-field',\n            ];\n        },\n    },\n\n    watch: {\n        'entity.customFieldSetSelectionActive': {\n            handler(value) {\n                this.onChangeCustomFieldSetSelectionActive(value);\n            },\n            deep: true,\n        },\n\n        'entity.customFieldsSets': {\n            handler() {\n                this.onChangeCustomFieldSets();\n            },\n        },\n\n        entity: {\n            handler() {\n                this.initializeCustomFields();\n            },\n            deep: true,\n        },\n\n        customFields: {\n            handler(customFields) {\n                // eslint-disable-next-line vue/no-mutating-props\n                this.entity.customFields = customFields;\n            },\n            deep: true,\n        },\n    },\n\n    created() {\n        this.createdComponent();\n    },\n\n    methods: {\n        createdComponent() {\n            this.initializeCustomFields();\n            this.onChangeCustomFieldSets();\n        },\n\n        initializeCustomFields() {\n            if (!this.entity.customFields) {\n                return;\n            }\n\n            this.customFields = this.entity.customFields;\n        },\n\n        getInheritedCustomField(customFieldName) {\n            const value = this.parentEntity?.translated?.customFields?.[customFieldName] ?? null;\n\n            if (value) {\n                return value;\n            }\n\n            const customFieldInformation = this.getCustomFieldInformation(customFieldName);\n            const customFieldType = customFieldInformation.type;\n\n            switch (customFieldType) {\n                case 'select': {\n                    return [];\n                }\n\n                case 'bool': {\n                    return false;\n                }\n\n                case 'html':\n                case 'datetime':\n                case 'text': {\n                    return '';\n                }\n\n                case 'float':\n                case 'int': {\n                    return 0;\n                }\n\n                default: {\n                    return null;\n                }\n            }\n        },\n\n        getCustomFieldInformation(customFieldName) {\n            let returnValue;\n\n            this.sets.some((set) =>\n                set.customFields.some((customField) => {\n                    const isMatching = customField.name === customFieldName;\n\n                    if (isMatching) {\n                        returnValue = customField;\n                    }\n\n                    return isMatching;\n                }),\n            );\n\n            return returnValue;\n        },\n\n        getInheritValue(field) {\n            // Search field in translated\n            const value = this.parentEntity?.translated?.[field] ?? null;\n\n            if (value) {\n                return value;\n            }\n\n            // Search field on top level of entity\n            return this.parentEntity?.[field] ?? null;\n        },\n\n        getParentCustomFieldSetSelectionSwitchState() {\n            const parentEntity = this.parentEntity;\n\n            if (parentEntity && parentEntity.hasOwnProperty('customFieldSets')) {\n                return parentEntity.customFieldSets.length > 0;\n            }\n\n            return null;\n        },\n\n        supportsMapInheritance(customField) {\n            const componentName = customField.config.componentName;\n\n            if (customField.config.customFieldType === 'date') {\n                return false;\n            }\n\n            return this.componentsWithMapInheritanceSupport.includes(componentName);\n        },\n\n        getBind(customField, props) {\n            const customFieldClone = Cicada.Utils.object.cloneDeep(customField);\n\n            if (customFieldClone.type === 'bool') {\n                customFieldClone.config.bordered = true;\n            }\n\n            if (this.supportsMapInheritance(customFieldClone)) {\n                customFieldClone.mapInheritance = props;\n\n                return customFieldClone;\n            }\n\n            if (customFieldClone.config.customFieldType === 'entity' && customFieldClone.config.entity === 'product') {\n                const criteria = new Criteria(1, 25);\n                criteria.addAssociation('options.group');\n\n                customFieldClone.config.criteria = criteria;\n                customFieldClone.config.displayVariants = true;\n            }\n\n            delete customFieldClone.config.label;\n            delete customFieldClone.config.helpText;\n\n            return customFieldClone;\n        },\n\n        getInheritWrapperBind(customField) {\n            if (this.supportsMapInheritance(customField)) {\n                return {};\n            }\n\n            return {\n                helpText: this.getInlineSnippet(customField.config.helpText) || '',\n                label: this.getInlineSnippet(customField.config.label) || ' ',\n            };\n        },\n\n        customFieldSetCriteriaById() {\n            const criteria = new Criteria(1, 1);\n\n            criteria.getAssociation('customFields').addSorting(Criteria.naturalSorting('config.customFieldPosition'));\n\n            return criteria;\n        },\n\n        loadCustomFieldSet(setId) {\n            if (this.loadingFields.includes(setId)) {\n                // as we might triggered multiple times with the same item, we store the loading set in a heap cache\n                return;\n            }\n\n            // failsave dealing with sets (should be an entityCollection, but in reality might be just an array)\n            const set = this.sets.get ? this.sets.get(setId) : this.sets.find((s) => s.id === setId);\n\n            if (set.customFields && set.customFields.length > 0) {\n                // already loaded, so do nothing\n                return;\n            }\n\n            // indicate the loading of this item\n            this.loadingFields.push(setId);\n\n            // fully load the set\n            this.customFieldSetRepository\n                .get(setId, Cicada.Context.api, this.customFieldSetCriteriaById())\n                .then((newSet) => {\n                    // replace the fully fetched set\n                    this.sets.forEach((originalSet, index) => {\n                        if (originalSet.id === newSet.id) {\n                            if (this.isCompatEnabled('INSTANCE_SET')) {\n                                this.$set(this.sets, index, newSet);\n                            } else {\n                                // eslint-disable-next-line vue/no-mutating-props\n                                this.sets[index] = newSet;\n                            }\n                        }\n                    });\n\n                    // remove the set from the currently loading onces and refresh the visible sets\n                    this.loadingFields = this.loadingFields.filter((s) => s.id !== setId);\n                })\n                .catch((error) => {\n                    console.error(error);\n                    // in case of error make loading again possible\n                    this.loadingFields = this.loadingFields.filter((s) => s.id !== setId);\n                });\n        },\n\n        resetTabs() {\n            if (this.visibleCustomFieldSets.length > 0 && this.$refs.tabComponent) {\n                // Reset state of tab component if custom field selection changes\n                this.$refs.tabComponent.mountedComponent();\n                this.$refs.tabComponent.setActiveItem({\n                    name: this.visibleCustomFieldSets[0].id,\n                });\n            }\n        },\n\n        waitForTabComponent() {\n            if (this.$refs.tabComponent || this.tabWaitsAttempts > this.tabWaitMaxAttempts) {\n                return this.resetTabs();\n            }\n            // eslint-disable-next-line vue/valid-next-tick\n            return this.$nextTick(() => {\n                this.tabWaitsAttempts += 1;\n                this.waitForTabComponent();\n            });\n        },\n\n        getTabLabel(set) {\n            if (set.config && this.getInlineSnippet(set.config.label)) {\n                return this.getInlineSnippet(set.config.label);\n            }\n\n            return set.name;\n        },\n\n        onChangeCustomFieldSets(value, updateFn) {\n            if (!this.$refs.tabComponent && (this.visibleCustomFieldSets.length > 0 || value)) {\n                // when rendered initially we wait for the tabcomponent to load so we can activate the first item\n                this.waitForTabComponent();\n            } else {\n                this.resetTabs();\n            }\n\n            if (typeof updateFn === 'function') {\n                updateFn(value);\n            }\n        },\n\n        onChangeCustomFieldSetSelectionActive(newVal) {\n            this.onChangeCustomFieldSets();\n            if (!newVal) {\n                if (!this.entity.customFieldSets) {\n                    this.initializeCustomFields();\n                    return;\n                }\n                // eslint-disable-next-line vue/no-mutating-props\n                this.entity.customFieldSets = this.entity.customFieldSets.filter(() => {\n                    return false;\n                });\n            }\n        },\n\n        /**\n         * @param { Array } sets\n         */\n        sortSets(sets) {\n            return sets.sort((a, b) => a.position - b.position);\n        },\n\n        onUpdateActiveSelection(value) {\n            this.$emit('change-active-selection', value);\n        },\n    },\n});\n"],"names":["template","Component","Mixin","Criteria","value","criteria","set","customFields","customFieldName","_a","_b","_c","returnValue","customField","isMatching","field","parentEntity","componentName","props","customFieldClone","setId","s","newSet","originalSet","index","error","updateFn","newVal","sets","a","b"],"mappings":"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"}