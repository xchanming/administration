import{A as d}from"./api.service-DUFBkRAb.js";import"./channel-Cvr-E4M4.js";const{Service:f}=Shopware,{Criteria:l}=Shopware.Data;class A extends d{constructor(a,e){super(a,e,null,"application/json"),this.name="tagApiService"}filterIds(a,e={},o={}){return this.httpClient.post("_admin/tag-filter-ids",{...a,...e},{headers:this.getBasicHeaders(o)}).then(t=>d.handleResponse(t))}async merge(a,e,o,t){const n=this.getRepository("tag");t.isRunning=!0;const i=n.create();i.name=e,await n.save(i),i._isNew=!1;for(const[s,r]of Object.entries(o)){if(r.relation!=="many_to_many")continue;let p=1;t.currentAssignment=s,t.progress=0,t.total=0;const m=this.getRepository(r.entity);do{const c=new l(p,200);c.addFilter(l.equalsAny("tags.id",a));const{data:h,total:y}=await m.searchIds(c,Shopware.Context.api);i[s]=h.map(w=>({id:w})),y!==0&&(t.total=y,await n.save(i)),i[s]=[],t.progress+=h.length,p+=1}while(t.isRunning&&t.progress<t.total)}t.isRunning&&await n.syncDeleted(a,Shopware.Context.api)}getRepository(a){return f("repositoryFactory").create(a)}}export{A as default};
