{"version":3,"file":"index-iDGYDz5M.js","sources":["../../../app/administration/src/app/component/form/sw-snippet-field/sw-snippet-field.html.twig","../../../app/administration/src/app/component/form/sw-snippet-field/index.js"],"sourcesContent":["<!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n{% block sw_snippet_field %}\n<div class=\"sw-snippet-field\">\n    <sw-text-field\n        v-if=\"textField\"\n        v-bind=\"$attrs\"\n        :value=\"textValue\"\n        :type=\"fieldType\"\n        disabled\n    />\n\n    <sw-textarea-field\n        v-else-if=\"textareaField\"\n        v-bind=\"$attrs\"\n        :value=\"textValue\"\n        :type=\"fieldType\"\n        disabled\n    />\n\n    <sw-loader\n        v-if=\"isLoading\"\n        size=\"16px\"\n    />\n    <sw-icon\n        v-else\n        v-tooltip=\"{\n            message: $tc('global.sw-snippet-field.tooltip'),\n        }\"\n        class=\"sw-snippet-field__icon\"\n        name=\"regular-globe-stand\"\n        small\n        @click=\"openEditModal()\"\n    />\n\n    <sw-snippet-field-edit-modal\n        v-if=\"showEditModal\"\n        :snippets=\"snippets\"\n        :snippet-sets=\"snippetSets\"\n        :translation-key=\"snippet\"\n        :field-type=\"fieldType\"\n        @modal-close=\"closeEditModal\"\n        @save=\"onSave\"\n    />\n</div>\n{% endblock %}\n","import template from './sw-snippet-field.html.twig';\nimport './sw-snippet-field.scss';\n\nconst {\n    Component,\n    State,\n    Data: { Criteria },\n} = Cicada;\n\n/**\n * @package admin\n *\n * @private\n * @description Input field that allows you to easily edit and translate snippet in a modal.\n * @status ready\n * @example-type static\n * @component-example\n * <sw-snippet-field snippet=\"myPlugin.test.snippet\" fieldType=\"text\"></sw-switch-field>\n */\nComponent.register('sw-snippet-field', {\n    template,\n\n    compatConfig: Cicada.compatConfig,\n\n    inject: [\n        'snippetSetService',\n        'repositoryFactory',\n    ],\n\n    props: {\n        snippet: {\n            type: String,\n            required: true,\n        },\n\n        fieldType: {\n            type: String,\n            required: false,\n            default: 'text',\n            validValues: [\n                'text',\n                'textarea',\n            ],\n            validator(value) {\n                return [\n                    'text',\n                    'textarea',\n                ].includes(value);\n            },\n        },\n    },\n\n    data() {\n        return {\n            textValue: this.snippet,\n            snippets: [],\n            snippetSets: [],\n            showEditModal: false,\n            isLoading: false,\n        };\n    },\n\n    computed: {\n        snippetSetRepository() {\n            return this.repositoryFactory.create('snippet_set');\n        },\n\n        languageRepository() {\n            return this.repositoryFactory.create('language');\n        },\n\n        languageCriteria() {\n            const criteria = new Criteria(1, 25);\n\n            criteria.addFilter(Criteria.equals('id', Cicada.Context.api.systemLanguageId));\n            criteria.addAssociation('locale');\n\n            return criteria;\n        },\n\n        textField() {\n            return this.fieldType === 'text';\n        },\n\n        textareaField() {\n            return this.fieldType === 'textarea';\n        },\n    },\n\n    created() {\n        this.createdComponent();\n    },\n\n    methods: {\n        async createdComponent() {\n            this.isLoading = true;\n\n            const translations = await this.snippetSetService.getCustomList(1, undefined, {\n                translationKey: [this.snippet],\n            });\n\n            if (translations.total < 1) {\n                this.snippets = [];\n            } else {\n                this.snippets = translations.data[this.snippet];\n            }\n\n            this.snippetSets = await this.snippetSetRepository.search(new Criteria(), Cicada.Context.api);\n\n            await this.updatePlaceholderValueToSnippetTranslation();\n\n            this.isLoading = false;\n        },\n\n        async updatePlaceholderValueToSnippetTranslation() {\n            if (this.snippets.length < 1) {\n                return;\n            }\n\n            const currentLocale = State.get('session').currentLocale;\n            let translation = this.getTranslationByLocale(currentLocale);\n            if (translation) {\n                this.textValue = translation.value;\n                return;\n            }\n\n            const systemDefaultLocale = await this.getSystemDefaultLocale();\n            translation = this.getTranslationByLocale(systemDefaultLocale);\n            if (translation) {\n                this.textValue = translation.value;\n                return;\n            }\n\n            translation = this.getTranslationByLocale('en-GB');\n            if (translation) {\n                this.textValue = translation.value;\n            }\n        },\n\n        getTranslationByLocale(locale) {\n            const snippetSet = this.snippetSets.find((set) => {\n                return set.iso === locale;\n            });\n\n            if (!snippetSet) {\n                return null;\n            }\n\n            return this.snippets.find((translation) => {\n                return translation.setId === snippetSet.id && translation.value !== '';\n            });\n        },\n\n        async getSystemDefaultLocale() {\n            const languages = await this.languageRepository.search(this.languageCriteria, Cicada.Context.api);\n\n            return languages.first().locale.code;\n        },\n\n        openEditModal() {\n            this.showEditModal = true;\n        },\n\n        closeEditModal() {\n            this.showEditModal = false;\n        },\n\n        onSave() {\n            this.createdComponent();\n            this.closeEditModal();\n        },\n    },\n});\n"],"names":["template","Component","State","Criteria","value","criteria","translations","currentLocale","translation","systemDefaultLocale","locale","snippetSet","set"],"mappings":"AAAA,MAAeA,EAAA,isBCGT,CACF,UAAAC,EACA,MAAAC,EACA,KAAM,CAAE,SAAAC,CAAU,CACtB,EAAI,OAYJF,EAAU,SAAS,mBAAoB,CACnC,SAAAD,EAEA,aAAc,OAAO,aAErB,OAAQ,CACJ,oBACA,mBACH,EAED,MAAO,CACH,QAAS,CACL,KAAM,OACN,SAAU,EACb,EAED,UAAW,CACP,KAAM,OACN,SAAU,GACV,QAAS,OACT,YAAa,CACT,OACA,UACH,EACD,UAAUI,EAAO,CACb,MAAO,CACH,OACA,UACpB,EAAkB,SAASA,CAAK,CACnB,CACJ,CACJ,EAED,MAAO,CACH,MAAO,CACH,UAAW,KAAK,QAChB,SAAU,CAAE,EACZ,YAAa,CAAE,EACf,cAAe,GACf,UAAW,EACvB,CACK,EAED,SAAU,CACN,sBAAuB,CACnB,OAAO,KAAK,kBAAkB,OAAO,aAAa,CACrD,EAED,oBAAqB,CACjB,OAAO,KAAK,kBAAkB,OAAO,UAAU,CAClD,EAED,kBAAmB,CACf,MAAMC,EAAW,IAAIF,EAAS,EAAG,EAAE,EAEnC,OAAAE,EAAS,UAAUF,EAAS,OAAO,KAAM,OAAO,QAAQ,IAAI,gBAAgB,CAAC,EAC7EE,EAAS,eAAe,QAAQ,EAEzBA,CACV,EAED,WAAY,CACR,OAAO,KAAK,YAAc,MAC7B,EAED,eAAgB,CACZ,OAAO,KAAK,YAAc,UAC7B,CACJ,EAED,SAAU,CACN,KAAK,iBAAgB,CACxB,EAED,QAAS,CACL,MAAM,kBAAmB,CACrB,KAAK,UAAY,GAEjB,MAAMC,EAAe,MAAM,KAAK,kBAAkB,cAAc,EAAG,OAAW,CAC1E,eAAgB,CAAC,KAAK,OAAO,CAC7C,CAAa,EAEGA,EAAa,MAAQ,EACrB,KAAK,SAAW,GAEhB,KAAK,SAAWA,EAAa,KAAK,KAAK,OAAO,EAGlD,KAAK,YAAc,MAAM,KAAK,qBAAqB,OAAO,IAAIH,EAAY,OAAO,QAAQ,GAAG,EAE5F,MAAM,KAAK,6CAEX,KAAK,UAAY,EACpB,EAED,MAAM,4CAA6C,CAC/C,GAAI,KAAK,SAAS,OAAS,EACvB,OAGJ,MAAMI,EAAgBL,EAAM,IAAI,SAAS,EAAE,cAC3C,IAAIM,EAAc,KAAK,uBAAuBD,CAAa,EAC3D,GAAIC,EAAa,CACb,KAAK,UAAYA,EAAY,MAC7B,MACH,CAED,MAAMC,EAAsB,MAAM,KAAK,yBAEvC,GADAD,EAAc,KAAK,uBAAuBC,CAAmB,EACzDD,EAAa,CACb,KAAK,UAAYA,EAAY,MAC7B,MACH,CAEDA,EAAc,KAAK,uBAAuB,OAAO,EAC7CA,IACA,KAAK,UAAYA,EAAY,MAEpC,EAED,uBAAuBE,EAAQ,CAC3B,MAAMC,EAAa,KAAK,YAAY,KAAMC,GAC/BA,EAAI,MAAQF,CACtB,EAED,OAAKC,EAIE,KAAK,SAAS,KAAMH,GAChBA,EAAY,QAAUG,EAAW,IAAMH,EAAY,QAAU,EACvE,EALU,IAMd,EAED,MAAM,wBAAyB,CAG3B,OAFkB,MAAM,KAAK,mBAAmB,OAAO,KAAK,iBAAkB,OAAO,QAAQ,GAAG,GAE/E,QAAQ,OAAO,IACnC,EAED,eAAgB,CACZ,KAAK,cAAgB,EACxB,EAED,gBAAiB,CACb,KAAK,cAAgB,EACxB,EAED,QAAS,CACL,KAAK,iBAAgB,EACrB,KAAK,eAAc,CACtB,CACJ,CACL,CAAC"}