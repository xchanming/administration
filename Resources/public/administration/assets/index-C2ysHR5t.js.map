{"version":3,"file":"index-C2ysHR5t.js","sources":["../../../app/administration/src/module/sw-profile/view/sw-profile-index-search-preferences/sw-profile-index-search-preferences.html.twig","../../../app/administration/src/module/sw-profile/view/sw-profile-index-search-preferences/index.js"],"sourcesContent":["<!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n{% block sw_profile_index_search_preferences %}\n<div class=\"sw-profile-index-search-preferences\">\n    <sw-card\n        v-if=\"adminEsEnable\"\n        class=\"sw-card-elasticsearch-enabled\"\n        position-identifier=\"sw-card-elasticsearch-enabled\"\n    >\n        <sw-alert\n            class=\"sw-card-elasticsearch-enabled__alert\"\n            variant=\"info\"\n            :title=\"$tc('sw-profile.tabSearchPreferences.alert_elasticsearch.title')\"\n        >\n            {{ $tc('sw-profile.tabSearchPreferences.alert_elasticsearch.text') }}\n        </sw-alert>\n    </sw-card>\n\n    <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n    {% block sw_profile_index_search_preferences_searchable_elements %}\n    <sw-card\n        class=\"sw-profile-index-search-preferences-searchable-elements\"\n        position-identifier=\"sw-profile-index-search-preferences\"\n        :title=\"$tc('sw-profile.tabSearchPreferences.cardSearchableElements.title')\"\n        :is-loading=\"isLoading\"\n    >\n        <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n        {% block sw_profile_index_search_preferences_searchable_elements_content %}\n        <sw-container\n            v-if=\"searchPreferences.length > 0\"\n            rows=\"auto auto auto\"\n            gap=\"24px\"\n        >\n            <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n            {% block sw_profile_index_search_preferences_searchable_elements_header %}\n            <p>{{ $tc('sw-profile.tabSearchPreferences.cardSearchableElements.description') }}</p>\n\n            <sw-container\n                columns=\"auto auto auto 1fr\"\n                gap=\"8px\"\n            >\n                <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n                {% block sw_profile_index_search_preferences_searchable_elements_button_select %}\n                <sw-button\n                    class=\"sw-profile-index-search-preferences-searchable-elements__button-select-all\"\n                    @click=\"onSelect(true)\"\n                >\n                    {{ $tc('sw-profile.tabSearchPreferences.cardSearchableElements.buttonSelect') }}\n                </sw-button>\n                {% endblock %}\n\n                <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n                {% block sw_profile_index_search_preferences_searchable_elements_button_deselect %}\n                <sw-button\n                    class=\"sw-profile-index-search-preferences-searchable-elements__button-deselect-all\"\n                    @click=\"onSelect(false)\"\n                >\n                    {{ $tc('sw-profile.tabSearchPreferences.cardSearchableElements.buttonDeselect') }}\n                </sw-button>\n                {% endblock %}\n\n                <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n                {% block sw_profile_index_search_preferences_searchable_elements_button_reset %}\n                <sw-button\n                    class=\"sw-profile-index-search-preferences-searchable-elements__button-reset-to-default\"\n                    @click=\"onReset\"\n                >\n                    {{ $tc('sw-profile.tabSearchPreferences.cardSearchableElements.buttonReset') }}\n                </sw-button>\n                {% endblock %}\n            </sw-container>\n            {% endblock %}\n\n            <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n            {% block sw_profile_index_search_preferences_searchable_elements_body %}\n            <div class=\"sw-profile-index-search-preferences-searchable-elements__entity-container\">\n                <ul\n                    v-for=\"searchPreference in searchPreferences\"\n                    :key=\"searchPreference.entityName\"\n                    class=\"sw-profile-index-search-preferences-searchable-elements__entity\"\n                >\n                    <li class=\"sw-profile-index-search-preferences-searchable-elements__entity-field\">\n                        <!-- eslint-disable vue/attributes-order -->\n                        <sw-checkbox-field\n                            v-model:value=\"searchPreference._searchable\"\n                            :label=\"getModuleTitle(searchPreference.entityName)\"\n                            @update:value=\"onChangeSearchPreference(searchPreference)\"\n                            name=\"sw-field--searchPreference-_searchable\"\n                        />\n                        <ul class=\"sw-profile-index-search-preferences-searchable-elements__entity\">\n                            <li\n                                v-for=\"field in searchPreference.fields\"\n                                :key=\"field.fieldName\"\n                                class=\"sw-profile-index-search-preferences-searchable-elements__entity-field\"\n                            >\n                                <sw-checkbox-field\n                                    v-model:value=\"field._searchable\"\n                                    name=\"sw-field--field-_searchable\"\n                                    :label=\"$tc(`sw-profile.tabSearchPreferences.modules.${searchPreference.entityName}.${field.fieldName}`)\"\n                                    :disabled=\"adminEsEnable || !searchPreference._searchable\"\n                                />\n                            </li>\n                        </ul>\n                    </li>\n                </ul>\n            </div>\n            {% endblock %}\n        </sw-container>\n        {% endblock %}\n    </sw-card>\n    {% endblock %}\n</div>\n{% endblock %}\n","/**\n * @package services-settings\n */\nimport template from './sw-profile-index-search-preferences.html.twig';\nimport './sw-profile-index-search-preferences.scss';\n\nconst { Module, State, Mixin } = Cicada;\n\n// eslint-disable-next-line sw-deprecation-rules/private-feature-declarations\nexport default {\n    template,\n\n    compatConfig: Cicada.compatConfig,\n\n    inject: ['searchPreferencesService'],\n\n    mixins: [\n        Mixin.getByName('notification'),\n    ],\n\n    data() {\n        return {\n            isLoading: false,\n        };\n    },\n\n    computed: {\n        searchPreferences: {\n            get() {\n                return State.get('swProfile').searchPreferences;\n            },\n            set(searchPreferences) {\n                State.commit('swProfile/setSearchPreferences', searchPreferences);\n            },\n        },\n\n        userSearchPreferences: {\n            get() {\n                return State.get('swProfile').userSearchPreferences;\n            },\n            set(userSearchPreferences) {\n                State.commit('swProfile/setUserSearchPreferences', userSearchPreferences);\n            },\n        },\n\n        defaultSearchPreferences() {\n            const defaultSearchPreferences = this.searchPreferencesService.getDefaultSearchPreferences();\n\n            if (this.userSearchPreferences === null) {\n                return defaultSearchPreferences;\n            }\n\n            const mergedPreferences = [];\n\n            defaultSearchPreferences.forEach((defaultPref) => {\n                const prefKey = Object.keys(defaultPref)[0];\n                const userPref = this.userSearchPreferences.find((item) => Object.keys(item)[0] === prefKey);\n\n                if (!userPref) {\n                    mergedPreferences.push(defaultPref);\n                    return;\n                }\n\n                const userPrefValue = userPref[prefKey];\n                const defaultPrefValue = defaultPref[prefKey];\n\n                // Merge values from default into user preferences\n                Object.keys(defaultPrefValue).forEach((prop) => {\n                    if (!userPrefValue.hasOwnProperty(prop)) {\n                        userPrefValue[prop] = defaultPrefValue[prop];\n                    }\n                });\n\n                // Remove values from user preferences that are not in default\n                Object.keys(userPrefValue).forEach((prop) => {\n                    if (!defaultPrefValue.hasOwnProperty(prop)) {\n                        delete userPrefValue[prop];\n                    }\n                });\n\n                mergedPreferences.push({ [prefKey]: userPrefValue });\n            });\n\n            return mergedPreferences;\n        },\n\n        adminEsEnable() {\n            return Cicada.Context.app.adminEsEnable ?? false;\n        },\n    },\n\n    created() {\n        this.createdComponent();\n    },\n\n    beforeUnmount() {\n        this.beforeDestroyComponent();\n    },\n\n    methods: {\n        async createdComponent() {\n            await this.getDataSource();\n            this.updateDataSource();\n            this.addEventListeners();\n        },\n\n        beforeDestroyComponent() {\n            this.removeEventListeners();\n        },\n\n        async getDataSource() {\n            this.isLoading = true;\n\n            try {\n                this.userSearchPreferences = await this.searchPreferencesService.getUserSearchPreferences();\n                this.searchPreferences = this.searchPreferencesService.processSearchPreferences(\n                    this.defaultSearchPreferences,\n                );\n            } catch (error) {\n                this.createNotificationError({ message: error.message });\n                this.searchPreferences = [];\n                this.userSearchPreferences = null;\n            } finally {\n                this.isLoading = false;\n            }\n        },\n\n        addEventListeners() {\n            if (this.isCompatEnabled('INSTANCE_EVENT_EMITTER')) {\n                this.$root.$on('sw-search-preferences-modal-close', this.getDataSource);\n            } else {\n                Cicada.Utils.EventBus.on('sw-search-preferences-modal-close', this.getDataSource);\n            }\n        },\n\n        removeEventListeners() {\n            if (this.isCompatEnabled('INSTANCE_EVENT_EMITTER')) {\n                this.$root.$off('sw-search-preferences-modal-close', this.getDataSource);\n            } else {\n                Cicada.Utils.EventBus.off('sw-search-preferences-modal-close', this.getDataSource);\n            }\n        },\n\n        updateDataSource() {\n            if (!this.adminEsEnable) {\n                return;\n            }\n\n            this.searchPreferences.forEach((searchPreference) => {\n                searchPreference.fields.forEach((field) => {\n                    field._searchable = true;\n                });\n            });\n        },\n\n        getModuleTitle(entityName) {\n            const module = Module.getModuleByEntityName(entityName);\n\n            return this.$tc(module?.manifest.title);\n        },\n\n        onChangeSearchPreference(searchPreference) {\n            if (searchPreference._searchable && searchPreference.fields.every((field) => !field._searchable)) {\n                searchPreference.fields.forEach((field) => {\n                    field._searchable = true;\n                });\n            }\n        },\n\n        onSelect(event) {\n            this.searchPreferences.forEach((searchPreference) => {\n                searchPreference._searchable = event;\n\n                if (!this.adminEsEnable) {\n                    searchPreference.fields.forEach((field) => {\n                        field._searchable = event;\n                    });\n                }\n            });\n        },\n\n        onReset() {\n            const defaultSearchPreferences = this.searchPreferencesService.getDefaultSearchPreferences();\n            const toReset = this.searchPreferencesService.processSearchPreferences(defaultSearchPreferences);\n\n            this.searchPreferences.forEach((searchPreference, index) => {\n                toReset.forEach((item) => {\n                    if (item.entityName === searchPreference.entityName) {\n                        this.resetSearchPreference(item, this.searchPreferences[index]);\n                    }\n                });\n            });\n        },\n\n        resetSearchPreference(toReset, searchPreference) {\n            searchPreference._searchable = toReset._searchable;\n\n            if (!this.adminEsEnable) {\n                searchPreference.fields = searchPreference.fields.map((field) => {\n                    return toReset.fields.find((item) => item.fieldName === field.fieldName) || field;\n                });\n            }\n        },\n    },\n};\n"],"names":["template","Module","State","Mixin","index","searchPreferences","userSearchPreferences","defaultSearchPreferences","mergedPreferences","defaultPref","prefKey","userPref","item","userPrefValue","defaultPrefValue","prop","error","searchPreference","field","entityName","module","event","toReset"],"mappings":"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"}