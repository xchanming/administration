{"version":3,"mappings":"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","names":["object","Criteria","bulkSyncTypes","types","getObjectDiff","BulkEditBaseHandler","changes","definition","change","field","isOneToOne","e","value","id","_a","groupedPayload","syncPayload","operator","operatorPayload","payloadEntity","items","payloadKey","fieldDefinition","mapping","entity","local","reference","localField","referenceField","isMappingField","existAssociations","changeValue","referenceEntity","localKey","referenceKey","type","mappingReferenceField","changeItems","editableProperties","changeItem","original","entityId","record","key","associations","association","actualChange","updatePayload","existedRecord","hasChanged","fieldValue","referenceValue","fieldType","page","mappedExistAssociations","criteria","referenceIds","referenceId","foreignId","mappedExistAssociationsLen","acc","mappingIds","localId","fields","property","deletePayload","transformedPayload","deleteItem","newValue","origin","Service","Application","cloneDeep","BulkEditProductHandler","entityIds","payload","taxId","price","_b","purchasePrices","_c","updatedPricePayload","syncPayloadStringified","k","v","RetryHelper","updatePricePayload","mappedPayload","pricePayload","productPrice","productRepository","products","inputPrice","inputPurchasePrices","updatePriceTax","updateListPriceTax","updateRegulationPriceTax","updatePurchasePriceTax","product","productListPrice","_d","productRegulationPrice","_f","_e","productPurchasePrice","_h","_g","results","calculatedPrices","calculatedListPrices","calculatedRegulationPrices","calculatedPurchasePrices","reformatted","calculatedPrice","calculatedListPrice","calculatedRegulationPrice","calculatedPurchasePrice","currentPrice","prices","dbPrices","dbPrice","currencyId","listPrice","regulationPrice","regulationPriceTaxes","calculatedTaxes","tax","item","calculatedProductPrices","currentData","originalPrice","productPrices","dbListPrice","dbRegulationPrice","BulkEditOrderHandler","promises","shouldTriggerFlows","orders","order","optionsMail","BulkEditCustomerHandler","BulkEditApiFactory","module","__vitePreload","Module"],"ignoreList":[],"sources":["../../../app/administration/src/module/sw-bulk-edit/service/handler/bulk-edit-base.handler.js","../../../app/administration/src/module/sw-bulk-edit/service/handler/bulk-edit-product.handler.js","../../../app/administration/src/module/sw-bulk-edit/service/handler/bulk-edit-order.handler.js","../../../app/administration/src/module/sw-bulk-edit/service/handler/bulk-edit-customer.handler.js","../../../app/administration/src/module/sw-bulk-edit/service/bulk-edit.api.factory.js","../../../app/administration/src/module/sw-bulk-edit/init/services.init.js","../../../app/administration/src/module/sw-bulk-edit/index.js"],"sourcesContent":["const { object } = Cicada.Utils;\nconst { Criteria } = Cicada.Data;\nconst bulkSyncTypes = Object.freeze({\n    OVERWRITE: 'overwrite',\n    CLEAR: 'clear',\n    ADD: 'add',\n    REMOVE: 'remove',\n});\nconst { types } = Cicada.Utils;\nconst { getObjectDiff } = Cicada.Utils.object;\n\n/**\n * @class\n *\n * @package services-settings\n */\nclass BulkEditBaseHandler {\n    constructor() {\n        this.syncService = Cicada.Service('syncService');\n        this.repositoryFactory = Cicada.Service('repositoryFactory');\n        this.entityName = null;\n        this.entityIds = [];\n\n        // Grouped sync payload by operator and entities\n        this.groupedPayload = {\n            upsert: {},\n            delete: {},\n        };\n    }\n\n    /**\n     * @param  {Array.<Object>} changes\n     * @return {Object} syncPayload\n     * @example\n     * const changes = [\n        { type: 'overwrite', field: 'description', value: 'test' },\n        { type: 'clear', field: 'stock' },\n        {\n            type: 'overwrite',\n            field: 'visibilities',\n            mappingReferenceField: 'salesChannelId',\n            value: ProductVisibilitiesCollection\n        },\n        { type: 'overwrite', field: 'categories', value: [{id: 'category_1'}, {id: 'category_2'}]}\n     ];\n     * const syncPayload = buildBulkSyncPayload(changes);\n     * syncPayload // {\n        'upsert-product': {\n            action: 'upsert',\n            entity: 'product',\n            payload: [\n                {\n                    id: 'product_1',\n                    description: 'test',\n                    stock: 0\n                },\n                {\n                    id: 'product_2',\n                    description: 'test',\n                    stock: 0\n                }\n            ]\n        },...\n    }\n     */\n    async buildBulkSyncPayload(changes) {\n        const definition = Cicada.EntityDefinition.get(this.entityName);\n\n        if (!definition) {\n            throw Error(`No schema found for entity ${this.entityName}`);\n        }\n\n        // Initialize the grouped payload of referenceEntity\n        this.groupedPayload.delete[this.entityName] = {};\n        this.groupedPayload.upsert[this.entityName] = {};\n\n        await Promise.all(\n            changes.map(async (change) => {\n                if (!Object.values(bulkSyncTypes).includes(change.type)) {\n                    return;\n                }\n\n                // If the change type is not a toMany association change,\n                // grouped the change by entity's id so each entity can have a same sync payload\n                const field = definition.getField(change.field);\n\n                if (!field) {\n                    Cicada.Utils.debug.warn('Entity factory', `Property ${this.entityName}.${change.field} not found`);\n\n                    return;\n                }\n\n                const isOneToOne = definition.isOneToOneAssociation(field);\n                if (definition.isToManyAssociation(field) || isOneToOne) {\n                    try {\n                        await this._handleAssociationChange(field, change, isOneToOne);\n\n                        return;\n                    } catch (e) {\n                        Cicada.Utils.debug.warn(e);\n\n                        // Ignore the failed change\n                        return;\n                    }\n                }\n\n                const value = this._castDefaultValueIfNecessary(change, field.type);\n\n                this.entityIds.forEach((id) => {\n                    this.groupedPayload.upsert[this.entityName][id] ??= { id };\n                    this.groupedPayload.upsert[this.entityName][id][change.field] = value;\n                });\n            }),\n        );\n\n        return this._transformSyncPayload(this.groupedPayload);\n    }\n\n    /**\n     * @private\n     *\n     * Transform grouped bulk edit payload to sync payload\n     *\n     * @param {Object} groupedPayload\n     * @return {Object} syncPayload\n     */\n    _transformSyncPayload(groupedPayload) {\n        const syncPayload = {};\n\n        Object.keys(groupedPayload).forEach((operator) => {\n            const operatorPayload = groupedPayload[operator];\n\n            if (Object.keys(operatorPayload).length === 0) {\n                return;\n            }\n\n            Object.keys(operatorPayload).forEach((payloadEntity) => {\n                const items = Object.values(operatorPayload[payloadEntity]);\n                if (items.length === 0) {\n                    return;\n                }\n\n                const payloadKey = `${operator}-${payloadEntity}`;\n                syncPayload[payloadKey] ??= {\n                    action: operator,\n                    entity: payloadEntity,\n                    payload: [],\n                };\n\n                syncPayload[payloadKey].payload.push(...items.flat());\n            });\n        });\n\n        return syncPayload;\n    }\n\n    /**\n     * @private\n     *\n     * Build upsert or delete payload of an association change depending on change's type and existing associations\n     *\n     * @param {Object} fieldDefinition\n     * @param {Object} change\n     * @param {boolean} isOneToOne\n     * @example\n     * change =[{ type: 'overwrite', field: 'categories', value: [{id: 'category_1'}, {id: 'category_2'}]];\n     */\n    async _handleAssociationChange(fieldDefinition, change, isOneToOne = false) {\n        const { mapping, entity, local, reference, localField, referenceField } = fieldDefinition;\n\n        const isMappingField = !!mapping;\n        let existAssociations;\n\n        change.referenceEntity = mapping ?? entity;\n\n        // Initialize the grouped payload of referenceEntity\n        this.groupedPayload.delete[change.referenceEntity] = {};\n        this.groupedPayload.upsert[change.referenceEntity] = {};\n\n        // normalize selected association entities, eg: [{id: 'category_id_1'}, {id: 'category_id_2'},...]\n        const changeValue = Array.isArray(change.value) ? change.value : [change.value];\n        change.value = changeValue.filter(Boolean);\n\n        if (isMappingField) {\n            change.localKey = local;\n            change.referenceKey = reference;\n            existAssociations = await this._fetchManyToManyAssociated(fieldDefinition, change);\n        } else {\n            change.localKey = localField;\n            change.referenceKey = referenceField;\n\n            existAssociations = await this._fetchOneToManyAssociated(fieldDefinition, change);\n        }\n\n        const { referenceEntity, localKey, referenceKey, type } = change;\n\n        // if change type is CLEAR or REMOVE Delete existing associations\n        if (\n            [\n                bulkSyncTypes.CLEAR,\n                bulkSyncTypes.REMOVE,\n            ].includes(type)\n        ) {\n            this.groupedPayload.delete[referenceEntity] = {\n                ...this._transformDeletePayload(existAssociations, localKey, referenceKey),\n            };\n\n            return;\n        }\n\n        // if change type is OVERWRITE, all existing associations should be removed by default\n        // then we can filter the ones we want to keep by remove it from delete payload\n        if (type === bulkSyncTypes.OVERWRITE) {\n            this.groupedPayload.delete[referenceEntity] = {\n                ...this._transformDeletePayload(existAssociations, localKey, referenceKey),\n            };\n        }\n\n        if (isMappingField) {\n            this._detectManyToManyChange(change, existAssociations);\n        } else if (isOneToOne) {\n            this._detectOneToOneChange(change, existAssociations);\n        } else {\n            this._detectOneToManyChange(change, existAssociations);\n        }\n    }\n\n    /**\n     * Handler for bulk edit a OneToMany association\n     * @param change\n     * @param existAssociations\n     * @private\n     */\n    _detectOneToManyChange(change, existAssociations) {\n        const { referenceEntity, referenceKey, localKey, mappingReferenceField, value: changeItems, type } = change;\n        const editableProperties = this._getEditableProperties(referenceEntity);\n\n        if (mappingReferenceField) {\n            editableProperties.push(mappingReferenceField);\n        }\n\n        changeItems.forEach((changeItem) => {\n            const original = changeItem;\n            // Clean non-editable fields\n            changeItem = object.pick(changeItem, editableProperties);\n\n            this.entityIds.forEach((entityId) => {\n                const record = { ...changeItem };\n                record[referenceKey] = entityId;\n\n                const identifyKey = mappingReferenceField ?? localKey;\n                const key = mappingReferenceField ? `${original[identifyKey]}.${entityId}` : entityId;\n\n                const associations = existAssociations[key] ?? [];\n                if (mappingReferenceField && type === bulkSyncTypes.ADD && associations.length > 0) {\n                    return;\n                }\n\n                let association = null;\n\n                // Only update existing association if there's only one association record\n                if (type === bulkSyncTypes.OVERWRITE && associations.length === 1) {\n                    association = { ...associations[0] };\n                    existAssociations[key].shift();\n                    // Remove existing OneToMany association record from delete payload\n                    delete this.groupedPayload.delete[referenceEntity][key];\n                }\n\n                const actualChange = this._getOneToManyChange(record, localKey, mappingReferenceField, association);\n\n                if (actualChange === null || Object.keys(actualChange).length === 0) {\n                    return;\n                }\n\n                this.groupedPayload.upsert[referenceEntity][key] ??= [];\n                this.groupedPayload.upsert[referenceEntity][key].push(actualChange);\n            });\n        });\n    }\n\n    /**\n     * Handler for bulk edit a OneToOne association\n     * @param change\n     * @param existAssociations\n     * @private\n     */\n    _detectOneToOneChange(change, existAssociations) {\n        const { referenceEntity, referenceKey, localKey, value: changeItems } = change;\n        const editableProperties = this._getEditableProperties(referenceEntity);\n        changeItems.forEach((changeItem) => {\n            changeItem = object.pick(changeItem, editableProperties);\n\n            this.entityIds.forEach((entityId) => {\n                const record = { ...changeItem };\n                record[referenceKey] = entityId;\n\n                const key = entityId;\n                const associations = existAssociations[key] ?? [];\n\n                let association = null;\n                if (associations.length === 1) {\n                    association = { ...associations[0] };\n                    existAssociations[key].shift();\n\n                    delete this.groupedPayload.delete[referenceEntity][key];\n                }\n\n                const actualChange = this._getOneToManyChange(record, localKey, null, association);\n\n                if (actualChange === null || Object.keys(actualChange).length === 0) {\n                    return;\n                }\n\n                this.groupedPayload.upsert[referenceEntity][key] ??= [];\n                this.groupedPayload.upsert[referenceEntity][key].push(actualChange);\n            });\n        });\n    }\n\n    /**\n     * get actual changes of a OneToMany association, if existedRecord means a new record will be inserted\n     * @private\n     */\n    _getOneToManyChange(updatePayload, localKey, mappingReferenceField, existedRecord = null) {\n        const actualChange = {};\n\n        if (mappingReferenceField) {\n            actualChange[mappingReferenceField] = updatePayload[mappingReferenceField];\n        }\n\n        if (existedRecord) {\n            actualChange[localKey] = existedRecord[localKey];\n\n            // These fields are fixed if the oneToMany association exists\n            delete updatePayload[localKey];\n            delete updatePayload[mappingReferenceField];\n        }\n\n        // Detect if there is any change in oneToMany association so we should update it, otherwise we can skip it\n        Object.keys(updatePayload).forEach((field) => {\n            if (\n                !existedRecord ||\n                (updatePayload[field] !== undefined && this._isFieldValueChanged(updatePayload[field], existedRecord[field]))\n            ) {\n                actualChange[field] = updatePayload[field];\n            }\n        });\n\n        // Reduce request payload\n        if (existedRecord) {\n            delete actualChange[mappingReferenceField];\n        }\n\n        // If the change payload has any properties other than localKey (id) we should update it\n        const hasChanged = Object.keys(actualChange).some((key) => key !== localKey);\n\n        // the fields are not updated, skip it\n        if (existedRecord && !hasChanged) {\n            return null;\n        }\n\n        return actualChange;\n    }\n\n    /**\n     * Handler for bulk edit a ManyToMany association\n     *\n     * @param change\n     * @param existAssociations\n     * @private\n     */\n    _detectManyToManyChange(change, existAssociations) {\n        const { referenceEntity, referenceKey, localKey, value: items } = change;\n\n        items.forEach((fieldValue) => {\n            this.entityIds.forEach((entityId) => {\n                const referenceValue = fieldValue.id;\n                const key = `${referenceValue}.${entityId}`;\n\n                if (existAssociations[key]) {\n                    delete this.groupedPayload.delete[referenceEntity][key];\n\n                    return;\n                }\n\n                this.groupedPayload.upsert[referenceEntity][key] = [\n                    {\n                        [referenceKey]: referenceValue,\n                        [localKey]: entityId,\n                    },\n                ];\n            });\n        });\n    }\n\n    /**\n     * @private\n     */\n    _castDefaultValueIfNecessary(change, fieldType) {\n        const { value, type } = change;\n\n        // Cast the value to 0 if the we 'CLEAR' an int or float field\n        if (type === bulkSyncTypes.CLEAR) {\n            return [\n                'int',\n                'float',\n            ].includes(fieldType)\n                ? 0\n                : null;\n        }\n\n        if (value === '' || typeof value === 'undefined') {\n            return null;\n        }\n\n        return value;\n    }\n\n    /**\n     * @private\n     *\n     * Fetch OneToMany association ids and mapped each id using `${foreignId}.${localId}` as a key\n     */\n    async _fetchOneToManyAssociated(fieldDefinition, change, page = 1, mappedExistAssociations = {}) {\n        const { entity, referenceField: referenceKey } = fieldDefinition;\n\n        const criteria = new Criteria(page, 500);\n        criteria.addFilter(Criteria.equalsAny(referenceKey, this.entityIds));\n\n        /**\n         * change.mappingReferenceField to handle special cases like product.visibilities, it will be salesChannelId\n         * It's OneToMany association but behave similar to a ManyToMany association\n         * We need to prefetch the OneToMany associations to avoid unique constraint.\n         * e.g `product_visibility`.`product_id_sales_channel_id`\n         */\n        if (change.mappingReferenceField && change.type === bulkSyncTypes.REMOVE) {\n            const referenceIds = change.value.map((value) => value[change.mappingReferenceField]);\n\n            if (referenceIds && referenceIds.filter(Boolean)) {\n                criteria.addFilter(Criteria.equalsAny(change.mappingReferenceField, referenceIds));\n            }\n        }\n\n        const referenceRepository = this.repositoryFactory.create(entity);\n        const existAssociations = await referenceRepository.search(criteria);\n\n        existAssociations.forEach((association) => {\n            let key = association[referenceKey];\n\n            if (change.mappingReferenceField) {\n                const { [referenceKey]: referenceId, [change.mappingReferenceField]: foreignId } = association;\n                key = `${foreignId}.${referenceId}`;\n            }\n\n            if (mappedExistAssociations.hasOwnProperty(key)) {\n                mappedExistAssociations[key].push(association);\n            } else {\n                mappedExistAssociations[key] = [association];\n            }\n        });\n\n        // Associations at key can be more than one, so they must be counted properly\n        const mappedExistAssociationsLen = Object.keys(mappedExistAssociations).reduce(\n            (acc, key) => acc + mappedExistAssociations[key].length,\n            0,\n        );\n\n        if (existAssociations.total > mappedExistAssociationsLen) {\n            return this._fetchOneToManyAssociated(fieldDefinition, change, page + 1, mappedExistAssociations);\n        }\n\n        return mappedExistAssociations;\n    }\n\n    /**\n     * @private\n     *\n     * Fetch ManyToMany association ids and mapped each id using `${foreignId}.${localId}` as a key\n     */\n    async _fetchManyToManyAssociated(fieldDefinition, change, page = 1, mappedExistAssociations = {}) {\n        const { referenceField, mapping: entity, local, reference } = fieldDefinition;\n\n        const referenceIds =\n            change.type === bulkSyncTypes.REMOVE ? change.value.map((value) => value[referenceField]) : null;\n\n        const criteria = new Criteria(page, 500);\n        criteria.addFilter(Criteria.equalsAny(local, this.entityIds));\n\n        if (referenceIds && referenceIds.filter(Boolean)) {\n            criteria.addFilter(Criteria.equalsAny(reference, referenceIds));\n        }\n\n        const mappingRepository = this.repositoryFactory.create(entity);\n\n        const mappingIds = await mappingRepository.searchIds(criteria);\n        const existAssociations = mappingIds.data;\n\n        existAssociations.forEach((association) => {\n            // e.g: { productId: 'product_id_1', categoryId: 'product_cat_2' }\n            const { [local]: localId, [reference]: referenceId } = association;\n\n            const key = `${referenceId}.${localId}`;\n\n            // ManyToMany have 2 primary keys, e.g product_category\n            mappedExistAssociations[key] = [association];\n        });\n\n        if (mappingIds.total > Object.keys(mappedExistAssociations).length) {\n            return this._fetchManyToManyAssociated(fieldDefinition, change, page + 1, mappedExistAssociations);\n        }\n\n        return mappedExistAssociations;\n    }\n\n    _getEditableProperties(entity) {\n        const definition = Cicada.EntityDefinition.get(entity);\n        const fields = definition.filterProperties((property) => {\n            return (\n                definition.isScalarField(property) ||\n                definition.isJsonField(property) ||\n                !property.flags ||\n                property.flags.write_protected\n            );\n        });\n\n        return Object.keys(fields).filter(\n            (field) =>\n                ![\n                    'updatedAt',\n                    'createdAt',\n                ].includes(field),\n        );\n    }\n\n    _transformDeletePayload(deletePayload, localKey, referenceKey) {\n        const transformedPayload = {};\n\n        Object.keys(deletePayload).forEach((key) => {\n            const deleteItems = deletePayload[key] ?? [];\n\n            deleteItems.forEach((deleteItem) => {\n                const { id, [localKey]: localId, [referenceKey]: referenceId } = deleteItem;\n\n                transformedPayload[key] ??= [];\n\n                if (id) {\n                    transformedPayload[key].push({ id });\n                } else {\n                    transformedPayload[key].push({\n                        [localKey]: localId,\n                        [referenceKey]: referenceId,\n                    });\n                }\n            });\n        });\n\n        return transformedPayload;\n    }\n\n    _isFieldValueChanged(newValue, origin) {\n        if (types.isObject(newValue) && types.isObject(origin)) {\n            return Object.keys(getObjectDiff(newValue, origin)).length > 0;\n        }\n\n        return !types.isEqual(newValue, origin);\n    }\n}\n\n// eslint-disable-next-line sw-deprecation-rules/private-feature-declarations\nexport default BulkEditBaseHandler;\n","import BulkEditBaseHandler from './bulk-edit-base.handler';\nimport RetryHelper from '../../../../core/helper/retry.helper';\n\nconst types = Cicada.Utils.types;\nconst { Service, Application } = Cicada;\nconst { Criteria } = Cicada.Data;\nconst { cloneDeep } = Cicada.Utils.object;\n\n/**\n * @class\n * @extends BulkEditBaseHandler\n * @package services-settings\n */\nclass BulkEditProductHandler extends BulkEditBaseHandler {\n    constructor() {\n        super();\n        this.name = 'bulkEditProductHandler';\n        this.calculatePriceService = Application.getContainer('factory').apiService.getByName('calculate-price');\n        this.entityName = 'product';\n        this.entityIds = [];\n        this.products = {};\n    }\n\n    async bulkEdit(entityIds, payload) {\n        this.entityIds = entityIds;\n        const taxId = payload.find((change) => change.field === 'taxId')?.value;\n        const price = payload.find((change) => change.field === 'price')?.value;\n        const purchasePrices = payload.find((change) => change.field === 'purchasePrices')?.value;\n        let updatedPricePayload = [];\n\n        if (taxId || price || purchasePrices) {\n            await this.getProducts();\n        }\n\n        if (this.shouldRecalculateTax(taxId, price, purchasePrices)) {\n            updatedPricePayload = await this.recalculatePrices(taxId, price, purchasePrices);\n\n            payload = payload.filter((change) => change.field !== 'taxId');\n        }\n\n        if (price || purchasePrices) {\n            updatedPricePayload = this.updatePriceDirectly(price, purchasePrices, updatedPricePayload);\n\n            payload = payload.filter((change) => change.field !== 'price' && change.field !== 'purchasePrices');\n        }\n\n        const syncPayload = await this.buildBulkSyncPayload(payload);\n\n        if (updatedPricePayload.length) {\n            if (!types.isEmpty(syncPayload) && 'upsert-product' in syncPayload) {\n                syncPayload['upsert-product'].payload = this.mapProductPricesToSyncPayload(\n                    syncPayload['upsert-product'].payload,\n                    updatedPricePayload,\n                );\n            } else {\n                syncPayload['upsert-product'] = {\n                    action: 'upsert',\n                    entity: 'product',\n                    payload: updatedPricePayload,\n                };\n            }\n        }\n\n        if (types.isEmpty(syncPayload)) {\n            return Promise.resolve({ data: [] });\n        }\n\n        const syncPayloadStringified = JSON.stringify(syncPayload, (k, v) => (v === undefined ? null : v));\n\n        return RetryHelper.retry(() => {\n            return this.syncService.sync(\n                syncPayloadStringified,\n                {},\n                {\n                    'single-operation': 1,\n                    'sw-language-id': Cicada.Context.api.languageId,\n                },\n            );\n        });\n    }\n\n    shouldRecalculateTax(taxId, price, purchasePrices) {\n        return taxId && this.isNullPrice(price, purchasePrices);\n    }\n\n    isNullPrice(price, purchasePrices) {\n        return !price || !price[0].listPrice || !price[0].regulationPrice || !purchasePrices;\n    }\n\n    mapProductPricesToSyncPayload(syncPayload, updatePricePayload) {\n        const mappedPayload = [];\n        syncPayload.forEach((payload) => {\n            const pricePayload = updatePricePayload.find((productPrice) => productPrice.id === payload.id);\n\n            if (pricePayload) {\n                payload = { ...payload, ...pricePayload };\n                updatePricePayload = updatePricePayload.filter((productPrice) => productPrice.id !== payload.id);\n            }\n\n            mappedPayload.push(payload);\n        });\n\n        return mappedPayload.concat(updatePricePayload);\n    }\n\n    getProducts() {\n        const productRepository = Service('repositoryFactory').create('product');\n\n        const criteria = new Criteria(1, 25);\n        criteria.setIds(this.entityIds);\n\n        return productRepository.search(criteria, Cicada.Context.api).then((products) => {\n            this.products = products;\n        });\n    }\n\n    async recalculatePrices(taxId, inputPrice, inputPurchasePrices) {\n        const updatePriceTax = {};\n        const updateListPriceTax = {};\n        const updateRegulationPriceTax = {};\n        const updatePurchasePriceTax = {};\n\n        const products = this.products.filter((product) => product.taxId !== taxId);\n\n        products.forEach((product) => {\n            if (!inputPrice) {\n                const productPrice = product.price\n                    ?.filter((price) => price.linked)\n                    ?.map((price) => this.getRecalculatePrice(price));\n\n                if (!types.isEmpty(productPrice)) {\n                    updatePriceTax[product.id] = productPrice;\n                }\n            }\n\n            if (!inputPrice || !inputPrice[0].listPrice) {\n                const productListPrice = product.price\n                    ?.filter((price) => price.listPrice?.linked)\n                    ?.map((price) => this.getRecalculatePrice(price.listPrice));\n\n                if (!types.isEmpty(productListPrice)) {\n                    updateListPriceTax[product.id] = productListPrice;\n                }\n            }\n\n            if (!inputPrice || !inputPrice[0].regulationPrice) {\n                const productRegulationPrice = product.price\n                    ?.filter((price) => price.regulationPrice?.linked)\n                    ?.map((price) => this.getRecalculatePrice(price.regulationPrice));\n\n                if (!types.isEmpty(productRegulationPrice)) {\n                    updateRegulationPriceTax[product.id] = productRegulationPrice;\n                }\n            }\n\n            if (!inputPurchasePrices) {\n                const productPurchasePrice = product.purchasePrices\n                    ?.filter((price) => price.linked)\n                    ?.map((price) => this.getRecalculatePrice(price));\n\n                if (!types.isEmpty(productPurchasePrice)) {\n                    updatePurchasePriceTax[product.id] = productPurchasePrice;\n                }\n            }\n        });\n\n        const results = await Promise.all([\n            this.calculatePrices(taxId, updatePriceTax),\n            this.calculatePrices(taxId, updateListPriceTax),\n            this.calculatePrices(taxId, updateRegulationPriceTax),\n            this.calculatePrices(taxId, updatePurchasePriceTax),\n        ]);\n\n        const calculatedPrices = results[0];\n        const calculatedListPrices = results[1];\n        const calculatedRegulationPrices = results[2];\n        const calculatedPurchasePrices = results[3];\n        const reformatted = [];\n\n        products.forEach((product) => {\n            const calculatedPrice = calculatedPrices[product.id] ?? [];\n            const calculatedListPrice = calculatedListPrices[product.id] ?? [];\n            const calculatedRegulationPrice = calculatedRegulationPrices[product.id] ?? [];\n            const calculatedPurchasePrice = calculatedPurchasePrices[product.id] ?? [];\n            const currentPrice = {\n                id: product.id,\n                taxId: taxId,\n            };\n\n            if (product.price) {\n                currentPrice.price = this.getCalculatedPrices(\n                    product.price,\n                    calculatedPrice,\n                    calculatedListPrice,\n                    calculatedRegulationPrice,\n                );\n            }\n\n            if (product.purchasePrices) {\n                currentPrice.purchasePrices = this.getCalculatedPrices(product.purchasePrices, calculatedPurchasePrice);\n            }\n\n            reformatted.push(currentPrice);\n        });\n\n        return reformatted;\n    }\n\n    getRecalculatePrice(price) {\n        return {\n            price: price.gross,\n            currencyId: price.currencyId,\n        };\n    }\n\n    async calculatePrices(taxId, prices) {\n        if (prices === null || Object.keys(prices).length === 0) {\n            return {};\n        }\n\n        return this.calculatePriceService.calculatePrices(taxId, prices);\n    }\n\n    getCalculatedPrices(dbPrices, calculatedPrices, calculatedListPrices = [], calculatedRegulationPrices = []) {\n        const price = [];\n        dbPrices.forEach((dbPrice) => {\n            const { currencyId, listPrice, regulationPrice } = dbPrice;\n            if (dbPrice.linked && calculatedPrices[currencyId]) {\n                dbPrice.net = dbPrice.gross - this.getTax(calculatedPrices[currencyId].calculatedTaxes);\n            }\n\n            if (listPrice?.linked && calculatedListPrices[currencyId]) {\n                dbPrice.listPrice.net = listPrice.gross - this.getTax(calculatedListPrices[currencyId].calculatedTaxes);\n            }\n\n            if (regulationPrice?.linked && calculatedRegulationPrices[currencyId]) {\n                const regulationPriceTaxes = calculatedRegulationPrices[currencyId].calculatedTaxes;\n                dbPrice.regulationPrice.net = regulationPrice.gross - this.getTax(regulationPriceTaxes);\n            }\n\n            price.push(dbPrice);\n        });\n\n        return price;\n    }\n\n    getTax(calculatedTaxes) {\n        let tax = 0;\n\n        calculatedTaxes.forEach((item) => {\n            tax += item.tax;\n        });\n\n        return tax;\n    }\n\n    updatePriceDirectly(inputPrice, inputPurchasePrices, calculatedProductPrices) {\n        const payload = [];\n        this.products.forEach((product) => {\n            const calculatedPrice = calculatedProductPrices.find((productPrice) => productPrice.id === product.id);\n            const currentData = calculatedPrice ?? { id: product.id };\n\n            if (inputPrice) {\n                const originalPrice = calculatedPrice?.price ?? product.price;\n                currentData.price = this.updatePrice(inputPrice[0], originalPrice);\n            }\n\n            if (inputPurchasePrices) {\n                currentData.purchasePrices = this.updatePrice(inputPurchasePrices[0], product.purchasePrices);\n            }\n\n            if (calculatedPrice) {\n                calculatedProductPrices = calculatedProductPrices.filter((productPrice) => productPrice.id !== product.id);\n            }\n\n            payload.push(currentData);\n        });\n\n        return payload.concat(calculatedProductPrices);\n    }\n\n    updatePrice(inputPrice, dbPrices) {\n        const currencyId = inputPrice.currencyId;\n        let productPrices = [];\n        const dbPrice = dbPrices?.find((productPrice) => productPrice.currencyId === currencyId) ?? null;\n        const currentPrice = this.getPrice(inputPrice, dbPrice);\n\n        if (dbPrices) {\n            productPrices = dbPrices.filter((productPrice) => productPrice.currencyId !== currencyId);\n        }\n\n        productPrices.push(currentPrice);\n\n        return productPrices;\n    }\n\n    getPrice(inputPrice, dbPrice) {\n        const dbListPrice = dbPrice?.listPrice;\n        const dbRegulationPrice = dbPrice?.regulationPrice;\n        let currentPrice = cloneDeep(inputPrice);\n        currentPrice = this.formatPrice(currentPrice, dbPrice);\n\n        // Set listPrice as the input value if exist, otherwise, set listPrice as the old value in the DB\n        if (currentPrice.listPrice) {\n            currentPrice.listPrice = this.formatPrice(currentPrice.listPrice, dbListPrice);\n        } else if (dbListPrice) {\n            currentPrice.listPrice = dbListPrice;\n        }\n\n        // Set regulationPrice as the input value if exist, otherwise, set regulationPrice as the old value in the DB\n        if (currentPrice.regulationPrice) {\n            currentPrice.regulationPrice = this.formatPrice(currentPrice.regulationPrice, dbRegulationPrice);\n        } else if (dbRegulationPrice) {\n            currentPrice.regulationPrice = dbRegulationPrice;\n        }\n\n        return currentPrice;\n    }\n\n    formatPrice(price, dbPrice) {\n        if (price.gross === null) {\n            price.linked = false;\n            price.gross = dbPrice?.gross ?? 0;\n        }\n\n        if (price.net === null) {\n            price.linked = false;\n            price.net = dbPrice?.net ?? 0;\n        }\n\n        return price;\n    }\n}\n\n// eslint-disable-next-line sw-deprecation-rules/private-feature-declarations\nexport default BulkEditProductHandler;\n","import BulkEditBaseHandler from './bulk-edit-base.handler';\nimport RetryHelper from '../../../../core/helper/retry.helper';\n\nconst { Criteria } = Cicada.Data;\nconst { types } = Cicada.Utils;\n\n/**\n * @class\n * @extends BulkEditBaseHandler\n * @package services-settings\n */\nclass BulkEditOrderHandler extends BulkEditBaseHandler {\n    constructor() {\n        super();\n        this.name = 'BulkEditOrderHandler';\n        this.entityIds = [];\n        this.orderStateMachineService = Cicada.Service('orderStateMachineService');\n        this.orderRepository = Cicada.Service('repositoryFactory').create('order');\n        this.entityName = 'order';\n    }\n\n    async bulkEditStatus(entityIds, payload) {\n        this.entityIds = entityIds;\n\n        let promises = [];\n        const shouldTriggerFlows = Cicada.State.get('swBulkEdit').isFlowTriggered;\n\n        const orders = await this.orderRepository.search(this.getCriteria());\n\n        payload.forEach((change) => {\n            if (!change.value) {\n                return;\n            }\n\n            promises = orders.map((order) => {\n                const optionsMail = {\n                    documentTypes: change.documentTypes,\n                    skipSentDocuments: change.skipSentDocuments,\n                    sendMail: change.sendMail,\n                };\n\n                switch (change.field) {\n                    case 'orderTransactions':\n                        return this.orderStateMachineService.transitionOrderTransactionState(\n                            order.transactions.first()?.id,\n                            change.value,\n                            optionsMail,\n                            {},\n                            {\n                                'sw-skip-trigger-flow': !shouldTriggerFlows,\n                            },\n                        );\n                    case 'orderDeliveries':\n                        return this.orderStateMachineService.transitionOrderDeliveryState(\n                            order.deliveries.first()?.id,\n                            change.value,\n                            optionsMail,\n                            {},\n                            {\n                                'sw-skip-trigger-flow': !shouldTriggerFlows,\n                            },\n                        );\n                    default:\n                        return this.orderStateMachineService.transitionOrderState(\n                            order.id,\n                            change.value,\n                            optionsMail,\n                            {},\n                            {\n                                'sw-skip-trigger-flow': !shouldTriggerFlows,\n                            },\n                        );\n                }\n            });\n        });\n\n        return Promise.all(promises);\n    }\n\n    async bulkEdit(entityIds, payload) {\n        this.entityIds = entityIds;\n\n        const syncPayload = await this.buildBulkSyncPayload(payload);\n\n        if (types.isEmpty(syncPayload)) {\n            return Promise.resolve({ data: [] });\n        }\n\n        return RetryHelper.retry(() => {\n            return this.syncService.sync(\n                syncPayload,\n                {},\n                {\n                    'single-operation': 1,\n                    'sw-language-id': Cicada.Context.api.languageId,\n                },\n            );\n        });\n    }\n\n    getCriteria() {\n        const criteria = new Criteria(1, 25);\n        criteria.setIds(this.entityIds);\n        criteria.getAssociation('deliveries');\n        criteria.getAssociation('transactions');\n\n        return criteria;\n    }\n}\n\n// eslint-disable-next-line sw-deprecation-rules/private-feature-declarations\nexport default BulkEditOrderHandler;\n","import BulkEditBaseHandler from './bulk-edit-base.handler';\nimport RetryHelper from '../../../../core/helper/retry.helper';\n\nconst types = Cicada.Utils.types;\n\n/**\n * @class\n * @extends BulkEditBaseHandler\n * @package services-settings\n */\nclass BulkEditCustomerHandler extends BulkEditBaseHandler {\n    constructor() {\n        super();\n        this.name = 'bulkEditCustomerHandler';\n        this.entityName = 'customer';\n        this.entityIds = [];\n        this.customerGroupRegistrationService = Cicada.Service('customerGroupRegistrationService');\n        this.customerRepository = Cicada.Service('repositoryFactory').create('customer');\n    }\n\n    async bulkEdit(entityIds, payload) {\n        this.entityIds = entityIds;\n\n        const syncPayload = await this.buildBulkSyncPayload(payload);\n\n        if (types.isEmpty(syncPayload)) {\n            return Promise.resolve({ success: true });\n        }\n\n        return RetryHelper.retry(() => {\n            return this.syncService.sync(\n                syncPayload,\n                {},\n                {\n                    'single-operation': 1,\n                    'sw-language-id': Cicada.Context.api.languageId,\n                },\n            );\n        });\n    }\n\n    async bulkEditRequestedGroup(entityIds, payload) {\n        const promises = [];\n        const shouldTriggerFlows = Cicada.State.get('swBulkEdit').isFlowTriggered;\n\n        payload.forEach((change) => {\n            if (!change.value) {\n                return;\n            }\n\n            switch (change.value) {\n                case 'decline':\n                    promises.push(\n                        RetryHelper.retry(() => {\n                            this.customerGroupRegistrationService.decline(\n                                entityIds,\n                                {},\n                                {\n                                    'sw-skip-trigger-flow': !shouldTriggerFlows,\n                                },\n                                {\n                                    silentError: true,\n                                },\n                            );\n                        }),\n                    );\n                    break;\n                case 'accept':\n                    promises.push(\n                        RetryHelper.retry(() => {\n                            this.customerGroupRegistrationService.accept(\n                                entityIds,\n                                {},\n                                {\n                                    'sw-skip-trigger-flow': !shouldTriggerFlows,\n                                },\n                                {\n                                    silentError: true,\n                                },\n                            );\n                        }),\n                    );\n                    break;\n                default:\n                    throw new Error();\n            }\n        });\n\n        return Promise.all(promises);\n    }\n}\n\n// eslint-disable-next-line sw-deprecation-rules/private-feature-declarations\nexport default BulkEditCustomerHandler;\n","import BulkEditProductHandler from './handler/bulk-edit-product.handler';\nimport BulkEditOrderHandler from './handler/bulk-edit-order.handler';\nimport BulkEditCustomerHandler from './handler/bulk-edit-customer.handler';\n\n/**\n * @class\n *\n * @package services-settings\n */\nclass BulkEditApiFactory {\n    constructor() {\n        this.handlers = {\n            product: () => new BulkEditProductHandler(),\n            order: () => new BulkEditOrderHandler(),\n            customer: () => new BulkEditCustomerHandler(),\n        };\n    }\n\n    getHandler(module) {\n        if (!this.handlers[module]) {\n            throw Error(`Bulk Edit Handler not found for ${module} module`);\n        }\n\n        // Lazy load the module handler\n        return this.handlers[module]();\n    }\n}\n\n// eslint-disable-next-line sw-deprecation-rules/private-feature-declarations\nexport default BulkEditApiFactory;\n","import BulkEditApiFactory from '../service/bulk-edit.api.factory';\n\n/**\n * @package services-settings\n */\n// eslint-disable-next-line sw-deprecation-rules/private-feature-declarations\nCicada.Service().register('bulkEditApiFactory', () => {\n    return new BulkEditApiFactory();\n});\n","/**\n * @package services-settings\n */\nimport './init/services.init';\n\n/* eslint-disable max-len, sw-deprecation-rules/private-feature-declarations */\nCicada.Component.register('sw-bulk-edit-product', () => import('./page/sw-bulk-edit-product'));\nCicada.Component.register('sw-bulk-edit-order', () => import('./page/sw-bulk-edit-order'));\nCicada.Component.register('sw-bulk-edit-customer', () => import('./page/sw-bulk-edit-customer'));\nCicada.Component.register(\n    'sw-bulk-edit-order-documents',\n    () => import('./component/sw-bulk-edit-order/sw-bulk-edit-order-documents'),\n);\nCicada.Component.register(\n    'sw-bulk-edit-order-documents-generate-invoice',\n    () => import('./component/sw-bulk-edit-order/sw-bulk-edit-order-documents-generate-invoice'),\n);\nCicada.Component.extend(\n    'sw-bulk-edit-order-documents-generate-cancellation-invoice',\n    'sw-bulk-edit-order-documents-generate-invoice',\n    () => import('./component/sw-bulk-edit-order/sw-bulk-edit-order-documents-generate-cancellation-invoice'),\n);\nCicada.Component.extend(\n    'sw-bulk-edit-order-documents-generate-delivery-note',\n    'sw-bulk-edit-order-documents-generate-invoice',\n    () => import('./component/sw-bulk-edit-order/sw-bulk-edit-order-documents-generate-delivery-note'),\n);\nCicada.Component.extend(\n    'sw-bulk-edit-order-documents-generate-credit-note',\n    'sw-bulk-edit-order-documents-generate-invoice',\n    () => import('./component/sw-bulk-edit-order/sw-bulk-edit-order-documents-generate-credit-note'),\n);\nCicada.Component.register(\n    'sw-bulk-edit-order-documents-download-documents',\n    () => import('./component/sw-bulk-edit-order/sw-bulk-edit-order-documents-download-documents'),\n);\nCicada.Component.extend(\n    'sw-bulk-edit-custom-fields',\n    'sw-custom-field-set-renderer',\n    () => import('./component/sw-bulk-edit-custom-fields'),\n);\nCicada.Component.register('sw-bulk-edit-change-type', () => import('./component/sw-bulk-edit-change-type'));\nCicada.Component.register(\n    'sw-bulk-edit-change-type-field-renderer',\n    () => import('./component/sw-bulk-edit-change-type-field-renderer'),\n);\nCicada.Component.extend(\n    'sw-bulk-edit-form-field-renderer',\n    'sw-form-field-renderer',\n    () => import('./component/sw-bulk-edit-form-field-renderer'),\n);\nCicada.Component.register(\n    'sw-bulk-edit-product-visibility',\n    () => import('./component/product/sw-bulk-edit-product-visibility'),\n);\nCicada.Component.register('sw-bulk-edit-product-media', () => import('./component/product/sw-bulk-edit-product-media'));\nCicada.Component.extend(\n    'sw-bulk-edit-product-media-form',\n    'sw-product-media-form',\n    () => import('./component/product/sw-bulk-edit-product-media-form'),\n);\nCicada.Component.extend(\n    'sw-bulk-edit-product-description',\n    'sw-text-editor',\n    () => import('./component/product/sw-bulk-edit-product-description'),\n);\nCicada.Component.register('sw-bulk-edit-save-modal', () => import('./component/sw-bulk-edit-save-modal'));\nCicada.Component.register('sw-bulk-edit-save-modal-confirm', () => import('./component/sw-bulk-edit-save-modal-confirm'));\nCicada.Component.register('sw-bulk-edit-save-modal-process', () => import('./component/sw-bulk-edit-save-modal-process'));\nCicada.Component.register('sw-bulk-edit-save-modal-success', () => import('./component/sw-bulk-edit-save-modal-success'));\nCicada.Component.register('sw-bulk-edit-save-modal-error', () => import('./component/sw-bulk-edit-save-modal-error'));\n/* eslint-enable max-len, sw-deprecation-rules/private-feature-declarations */\n\nconst { Module } = Cicada;\n\n// eslint-disable-next-line sw-deprecation-rules/private-feature-declarations\nModule.register('sw-bulk-edit', {\n    type: 'core',\n    name: 'bulk-edit',\n    title: 'sw-bulk-edit.general.mainMenuTitle',\n    description: 'sw-bulk-edit.general.descriptionTextModule',\n    version: '1.0.0',\n    targetVersion: '1.0.0',\n\n    routes: {\n        product: {\n            component: 'sw-bulk-edit-product',\n            path: 'product/:parentId/:includesDigital',\n            meta: {\n                parentPath: 'sw.product.index',\n            },\n            children: {\n                save: {\n                    component: 'sw-bulk-edit-save-modal',\n                    path: 'save',\n                    redirect: {\n                        name: 'sw.bulk.edit.product.save.confirm',\n                    },\n                    children: {\n                        confirm: {\n                            component: 'sw-bulk-edit-save-modal-confirm',\n                            path: 'confirm',\n                        },\n                        process: {\n                            component: 'sw-bulk-edit-save-modal-process',\n                            path: 'process',\n                        },\n                        success: {\n                            component: 'sw-bulk-edit-save-modal-success',\n                            path: 'success',\n                        },\n                        error: {\n                            component: 'sw-bulk-edit-save-modal-error',\n                            path: 'error',\n                        },\n                    },\n                },\n            },\n        },\n        order: {\n            component: 'sw-bulk-edit-order',\n            path: 'order/:excludeDelivery',\n            meta: {\n                parentPath: 'sw.order.index',\n            },\n            children: {\n                save: {\n                    component: 'sw-bulk-edit-save-modal',\n                    path: 'save',\n                    redirect: {\n                        name: 'sw.bulk.edit.order.save.confirm',\n                    },\n                    children: {\n                        confirm: {\n                            component: 'sw-bulk-edit-save-modal-confirm',\n                            path: 'confirm',\n                        },\n                        process: {\n                            component: 'sw-bulk-edit-save-modal-process',\n                            path: 'process',\n                        },\n                        success: {\n                            component: 'sw-bulk-edit-save-modal-success',\n                            path: 'success',\n                        },\n                        error: {\n                            component: 'sw-bulk-edit-save-modal-error',\n                            path: 'error',\n                        },\n                    },\n                },\n            },\n        },\n\n        customer: {\n            component: 'sw-bulk-edit-customer',\n            path: 'customer',\n            meta: {\n                parentPath: 'sw.customer.index',\n            },\n            children: {\n                save: {\n                    component: 'sw-bulk-edit-save-modal',\n                    path: 'save',\n                    redirect: {\n                        name: 'sw.bulk.edit.customer.save.confirm',\n                    },\n                    children: {\n                        confirm: {\n                            component: 'sw-bulk-edit-save-modal-confirm',\n                            path: 'confirm',\n                        },\n                        process: {\n                            component: 'sw-bulk-edit-save-modal-process',\n                            path: 'process',\n                        },\n                        success: {\n                            component: 'sw-bulk-edit-save-modal-success',\n                            path: 'success',\n                        },\n                        error: {\n                            component: 'sw-bulk-edit-save-modal-error',\n                            path: 'error',\n                        },\n                    },\n                },\n            },\n        },\n    },\n});\n"],"file":"assets/index-jRXB8aer.js"}