const r=`{% block sw_property_search_field %} <div class="sw-property-search__toolbar sw-product-variants-configurator-selection__toolbar"> <slot name="toolbar"> <div class="sw-property-search__search-field-container"> <slot name="toolbar-search-field"> {% block sw_product_variants_configurator_selection_search_field %} <sw-simple-search-field ref="searchField" v-model:value="searchTerm" size="small" variant="form" class="sw-property-search__search-field sw-product-variants-configurator-selection-search__search-field" :placeholder="$tc('sw-property-search.placeholderSearch')" :delay="600" @search-term-change="onSearchOptions" /> {% endblock %} </slot> </div> </slot> </div> {% endblock %}`,{Mixin:n}=Shopware,c={template:r,inject:["repositoryFactory"],emits:["option-select"],mixins:[n.getByName("notification")],props:{product:{type:Object,required:!0}},watch:{disabled(){this.selectOptions(this.$refs.optionGrid)}},computed:{configuratorSettingsRepository(){return this.repositoryFactory.create(this.product.configuratorSettings.entity,this.product.configuratorSettings.source)}},created(){this.createdComponent()},methods:{addOptionCount(){this.groups.forEach(e=>{const t=this.options.filter(o=>o.option.groupId===e.id&&!o.isDeleted);e.optionCount=t.length}),this.$emit("option-select")},selectOptions(e){e.selectAll(!1),this.preventSelection=!0,this.options.forEach(t=>{t.option&&(t.option.gridDisabled=this.disabled&&!t._isNew,e.selectItem(!t.isDeleted,t.option))}),this.preventSelection=!1},onOptionSelect(e,t){if(this.preventSelection)return;const o=this.options.find(i=>i.optionId===t.id);if(o){this.options.remove(o.id),this.addOptionCount();return}const s=this.configuratorSettingsRepository.create();s.optionId=t.id,s.option=t,this.options.add(s),this.addOptionCount()}}};export{c as default};
