{"version":3,"file":"index-BUZwq9gA.js","sources":["../../../app/administration/src/app/component/data-grid/sw-data-grid/sw-data-grid.html.twig","../../../app/administration/src/app/component/data-grid/sw-data-grid/index.js"],"sourcesContent":["<!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n{% block sw_data_grid %}\n<div\n    class=\"sw-data-grid\"\n    :class=\"classes\"\n>\n\n    <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n    {% block sw_data_grid_wrapper %}\n    <div\n        ref=\"wrapper\"\n        class=\"sw-data-grid__wrapper\"\n    >\n        <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n        {% block sw_data_grid_bulk %}\n        <div\n            v-if=\"selectionCount > 0\"\n            class=\"sw-data-grid__bulk\"\n        >\n            <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n            {% block sw_data_grid_bulk_selected_count %}\n            <span class=\"sw-data-grid__bulk-selected sw-data-grid__bulk-selected-label\">{{ $tc('global.sw-data-grid.labelSelectionCount') }}</span>\n            <span class=\"sw-data-grid__bulk-selected sw-data-grid__bulk-selected-count\">{{ selectionCount }}</span>\n            <span\n                v-if=\"reachMaximumSelectionExceed\"\n                class=\"sw-data-grid__bulk-selected sw-data-grid__bulk-max-selection\"\n            >\n                {{ $tc('global.sw-data-grid.maximumSelectionExceed') }}\n            </span>\n            {% endblock %}\n\n            <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n            {% block sw_data_grid_bulk_selected_actions %}\n            <span class=\"sw-data-grid__bulk-selected bulk-link\">\n                <a\n                    v-if=\"hasInvisibleSelection\"\n                    class=\"link link-warning bulk-deselect-all\"\n                    role=\"button\"\n                    tabindex=\"0\"\n                    @click=\"resetSelection\"\n                    @keydown.enter=\"resetSelection\"\n                >\n                    {{ $tc('global.sw-data-grid.labelDeSelectAll') }}\n                </a>\n                <slot name=\"bulk\">\n                <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n                {% block sw_data_grid_bulk_selected_actions_content %}{% endblock %}\n                </slot>\n            </span>\n            {% endblock %}\n        </div>\n        {% endblock %}\n\n        <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n        {% block sw_data_grid_bulk_modals %}\n        <slot\n            name=\"bulk-modals\"\n            v-bind=\"{ selection }\"\n        >\n            <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n            {% block sw_data_grid_slot_bulk_modals %}{% endblock %}\n        </slot>\n        {% endblock %}\n\n        <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n        {% block sw_data_grid_table %}\n        <table\n            ref=\"table\"\n            class=\"sw-data-grid__table\"\n        >\n\n            <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n            {% block sw_data_grid_header %}\n            <thead\n                v-if=\"showHeader\"\n                class=\"sw-data-grid__header\"\n            >\n\n                <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n                {% block sw_data_grid_header_row %}\n                <tr class=\"sw-data-grid__row\">\n\n                    <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n                    {% block sw_data_grid_header_cell_selection %}\n                    <th\n                        v-if=\"showSelection\"\n                        class=\"sw-data-grid__cell sw-data-grid__cell--header sw-data-grid__cell--selection\"\n                    >\n                        <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n                        {% block sw_data_grid_header_cell_selection_content %}\n                        <div class=\"sw-data-grid__cell-content\">\n                            <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n                            {% block sw_data_grid_select_all_checkbox %}\n                            <sw-checkbox-field\n                                v-if=\"records && records.length > 0\"\n                                :aria-label=\"$tc(allSelectedChecked ? 'global.sw-data-grid.labelDeSelectAll' : 'global.sw-data-grid.labelSelectAll')\"\n                                :disabled=\"isSelectAllDisabled\"\n                                class=\"sw-data-grid__select-all\"\n                                :value=\"allSelectedChecked\"\n                                @update:value=\"selectAll\"\n                            />\n                            {% endblock %}\n                        </div>\n                        {% endblock %}\n                    </th>\n                    {% endblock %}\n\n                    <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n                    {% block sw_data_grid_header_columns %}\n                    <th\n                        v-for=\"(column, columnIndex) in currentColumns\"\n                        v-show=\"column.visible\"\n                        :key=\"`${column.property}-${columnIndex}`\"\n                        ref=\"column\"\n                        class=\"sw-data-grid__cell sw-data-grid__cell--header sw-data-grid__cell--property\"\n                        :class=\"getHeaderCellClasses(column, columnIndex)\"\n                        :style=\"{ width: column.width, minWidth: column.width }\"\n                        @click=\"onClickHeaderCell($event, column)\"\n                    >\n\n                        <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n                        {% block sw_data_grid_header_columns_content %}\n                        <div class=\"sw-data-grid__cell-content\">\n\n                            <slot\n                                :name=\"`column-label-${column.property}`\"\n                                v-bind=\"{ column, columnIndex }\"\n                            >\n\n                                <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n                                {% block sw_data_grid_header_columns_icon %}\n                                <sw-icon\n                                    v-if=\"column.iconLabel && column.iconTooltip\"\n                                    v-tooltip=\"column.iconTooltip\"\n                                    :name=\"column.iconLabel\"\n                                >\n                                    {{ $te((column.label ?? 'undefined')) ? $tc(column.label) : column.label }}\n                                </sw-icon>\n\n                                <sw-icon\n                                    v-else-if=\"column.iconLabel\"\n                                    :name=\"column.iconLabel\"\n                                >\n                                    {{ $te((column.label ?? 'undefined')) ? $tc(column.label) : column.label }}\n                                </sw-icon>\n                                {% endblock %}\n\n                                <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n                                {% block sw_data_grid_header_columns_label %}\n                                <template v-else>\n                                    {{ $te((column.label ?? 'undefined')) ? $tc(column.label) : column.label }}\n                                </template>\n                                {% endblock %}\n                            </slot>\n\n                            <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n                            {% block sw_data_grid_column_actions %}\n                            <sw-context-button\n                                v-if=\"allowColumnEdit && !isInlineEditActive\"\n                                class=\"sw-data-grid__action-edit-column\"\n                                aria-label=\"global.sw-data-grid.columnsActions\"\n                            >\n                                <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n                                {% block sw_data_grid_column_actions_hide %}\n                                <sw-context-menu-item\n                                    :disabled=\"column.primary\"\n                                    variant=\"danger\"\n                                    @click=\"hideColumn(columnIndex)\"\n                                >\n                                    {{ $tc('global.sw-data-grid.labelColumnHide') }}\n                                </sw-context-menu-item>\n                                {% endblock %}\n                            </sw-context-button>\n                            {% endblock %}\n\n                            <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n                            {% block sw_data_grid_sort_indicator %}\n                            <span\n                                v-if=\"column.sortable && currentSortBy === column.dataIndex\"\n                                class=\"sw-data-grid__sort-indicator\"\n                            >\n                                <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n                                {% block sw_data_grid_sort_indicator_transition %}\n                                <transition\n                                    name=\"sort-indicator\"\n                                    mode=\"out-in\"\n                                >\n                                    <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n                                    {% block sw_data_grid_sort_indicator_icon_asc %}\n                                    <sw-icon\n                                        v-if=\"currentSortDirection === 'ASC'\"\n                                        key=\"ASC\"\n                                        name=\"regular-chevron-up-xxs\"\n                                        size=\"16px\"\n                                    />\n                                    {% endblock %}\n\n                                    <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n                                    {% block sw_data_grid_sort_indicator_icon_desc %}\n                                    <sw-icon\n                                        v-else\n                                        key=\"DESC\"\n                                        name=\"regular-chevron-down-xxs\"\n                                        size=\"16px\"\n                                    />\n                                    {% endblock %}\n                                </transition>\n                                {% endblock %}\n                            </span>\n                            {% endblock %}\n                        </div>\n                        {% endblock %}\n\n                        <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n                        {% block sw_data_grid_header_columns_resize %}\n                        <!-- eslint-disable-next-line vuejs-accessibility/no-static-element-interactions -->\n                        <span\n                            v-if=\"column.allowResize\"\n                            class=\"sw-data-grid__cell-resize\"\n                            @mousedown=\"onStartResize($event, column, columnIndex)\"\n                        ></span>\n                        {% endblock %}\n                    </th>\n                    {% endblock %}\n\n                    <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n                    {% block sw_data_grid_header_cell_spacer %}\n                    <th\n                        v-if=\"hasResizeColumns\"\n                        aria-hidden=\"true\"\n                        class=\"sw-data-grid__cell sw-data-grid__cell--header sw-data-grid__cell-spacer\"\n                    >\n                        <div class=\"sw-data-grid__cell-content\"></div>\n                    </th>\n                    {% endblock %}\n\n                    <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n                    {% block sw_data_grid_header_cell_actions %}\n                    <th\n                        v-if=\"showActions\"\n                        class=\"sw-data-grid__cell sw-data-grid__cell--header sw-data-grid__cell--actions sw-data-grid__cell-settings\"\n                        :class=\"{ 'is--loading': loading }\"\n                    >\n                        <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n                        {% block sw_data_grid_header_cell_actions_content %}\n                        <div class=\"sw-data-grid__cell-content\">\n                            <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n                            {% block sw_data_grid_settings %}\n                            <sw-data-grid-settings\n                                v-if=\"showSettings\"\n                                :columns=\"currentColumns\"\n                                :compact=\"compact\"\n                                :previews=\"previews\"\n                                :enable-previews=\"hasPreviewSlots\"\n                                :disabled=\"isInlineEditActive\"\n                                @change-compact-mode=\"onChangeCompactMode\"\n                                @change-preview-images=\"onChangePreviews\"\n                                @change-column-visibility=\"onChangeColumnVisibility\"\n                                @change-column-order=\"onChangeColumnOrder\"\n                            >\n                                <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n                                {% block sw_data_grid_settings_additional_settings %}\n                                <template #additionalSettings>\n                                    <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n                                    {% block sw_data_grid_settings_additional_settings_inner %}\n                                    <slot name=\"additionalSettings\"></slot>\n                                    {% endblock %}\n                                </template>\n                                {% endblock %}\n                            </sw-data-grid-settings>\n\n                            <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n                            {% block sw_data_grid_settings_custom_settings %}\n                            <slot name=\"customSettings\">\n                                <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n                                {% block sw_data_grid_settings_custom_settings_slot %}{% endblock %}\n                            </slot>\n                            {% endblock %}\n                            {% endblock %}\n                        </div>\n                        {% endblock %}\n                    </th>\n                    {% endblock %}\n                </tr>\n                {% endblock %}\n            </thead>\n            {% endblock %}\n\n            <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n            {% block sw_data_grid_body %}\n            <tbody\n                v-if=\"!loading\"\n                class=\"sw-data-grid__body\"\n            >\n\n                <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n                {% block sw_data_grid_body_row %}\n                <tr\n                    v-for=\"(item, itemIndex) in records\"\n                    :key=\"item.id\"\n                    class=\"sw-data-grid__row\"\n                    :class=\"getRowClasses(item, itemIndex)\"\n                >\n\n                    <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n                    {% block sw_data_grid_body_cell_selection %}\n                    <td\n                        v-if=\"showSelection\"\n                        class=\"sw-data-grid__cell sw-data-grid__cell--selection\"\n                    >\n                        <slot\n                            name=\"selection-content\"\n                            v-bind=\"{ item, isSelected, isRecordSelectable, selectItem, itemIdentifierProperty }\"\n                        >\n                            <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n                            {% block sw_data_grid_body_cell_selection_content %}\n                            <div class=\"sw-data-grid__cell-content\">\n                                <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n                                {% block sw_data_grid_select_item_checkbox %}\n                                <sw-checkbox-field\n                                    :aria-label=\"$tc('global.sw-data-grid.labelSelected')\"\n                                    :disabled=\"!isRecordSelectable(item)\"\n                                    :value=\"isSelected(item[itemIdentifierProperty])\"\n                                    @update:value=\"selectItem($event, item)\"\n                                />\n                                {% endblock %}\n                            </div>\n                            {% endblock %}\n                        </slot>\n                    </td>\n                    {% endblock %}\n\n                    <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n                    {% block sw_data_grid_body_columns %}\n                    <td\n                        v-for=\"(column, columnIndex) in currentVisibleColumns\"\n                        :key=\"`${item.id}-${columnIndex}`\"\n                        class=\"sw-data-grid__cell\"\n                        :class=\"getCellClasses(column)\"\n                        role=\"gridcell\"\n                        @dblclick=\"onDbClickCell(item)\"\n                    >\n\n                        <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n                        {% block sw_data_grid_body_columns_content %}\n                        <div class=\"sw-data-grid__cell-content\">\n\n                            <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n                            {% block sw_data_grid_preview_slot %}\n                            <slot\n                                v-if=\"previews && !isInlineEdit(item)\"\n                                :name=\"`preview-${column.property}`\"\n                                v-bind=\"{ item, column, compact }\"\n                            ></slot>\n                            {% endblock %}\n\n                            <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n                            {% block sw_data_grid_columns_slot %}\n                            <slot\n                                :name=\"`column-${column.property}`\"\n                                v-bind=\"{ item, itemIndex, column, columnIndex, compact, isInlineEdit: (isInlineEdit(item) && column.hasOwnProperty('inlineEdit')), selectItem }\"\n                            >\n                                <template v-if=\"column.inlineEdit === 'boolean'\">\n                                    <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n                                    {% block sw_data_grid_columns_boolean %}\n                                    <sw-data-grid-column-boolean\n                                        v-model:value=\"item[column.property]\"\n                                        :is-inline-edit=\"isInlineEdit(item) && column.hasOwnProperty('inlineEdit')\"\n                                    />\n                                    {% endblock %}\n                                </template>\n                                <template v-else>\n                                    <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n                                    {% block sw_data_grid_columns_inline_edit %}\n                                    <template v-if=\"isInlineEdit(item) && column.hasOwnProperty('inlineEdit')\">\n                                        <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n                                        {% block sw_data_grid_columns_render_inline_edit %}\n                                        <sw-data-grid-inline-edit\n                                            :column=\"column\"\n                                            :compact=\"compact\"\n                                            :value=\"item[column.property]\"\n                                            @update:value=\"item[column.property] = $event\"\n                                        />\n                                        {% endblock %}\n                                    </template>\n                                    {% endblock %}\n\n                                    <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n                                    {% block sw_data_grid_columns_value %}\n                                    <template v-else>\n                                        <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n                                        {% block sw_data_grid_columns_render_router_link %}\n                                        <router-link\n                                            v-if=\"column.routerLink\"\n                                            class=\"sw-data-grid__cell-value\"\n                                            :to=\"{ name: column.routerLink, params: { id: item.id } }\"\n                                        >\n                                            {{ renderColumn(item, column) }}\n                                        </router-link>\n                                        {% endblock %}\n                                        <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n                                        {% block sw_data_grid_columns_render_value %}\n                                        <span\n                                            v-else\n                                            class=\"sw-data-grid__cell-value\"\n                                        >\n                                            {{ renderColumn(item, column) }}\n                                        </span>\n                                        {% endblock %}\n                                    </template>\n                                    {% endblock %}\n                                </template>\n                            </slot>\n                            {% endblock %}\n                        </div>\n                        {% endblock %}\n                    </td>\n                    {% endblock %}\n\n                    <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n                    {% block sw_data_grid_body_cell_spacer %}\n                    <td\n                        v-if=\"hasResizeColumns\"\n                        aria-hidden=\"true\"\n                        class=\"sw-data-grid__cell sw-data-grid__cell-spacer\"\n                        @dblclick=\"onDbClickCell(item)\"\n                    >\n                        <div class=\"sw-data-grid__cell-content\"></div>\n                    </td>\n                    {% endblock %}\n\n                    <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n                    {% block sw_data_grid_body_cell_actions %}\n                    <td\n                        v-if=\"showActions\"\n                        class=\"sw-data-grid__cell sw-data-grid__cell--actions\"\n                    >\n                        <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n                        {% block sw_data_grid_body_cell_actions_content %}\n                        <div class=\"sw-data-grid__cell-content\">\n\n                            <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n                            {% block sw_data_grid_inline_edit_actions %}\n                            <template v-if=\"isInlineEditActive && currentInlineEditId === item[itemIdentifierProperty]\">\n\n                                <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n                                {% block sw_data_grid_inline_edit_actions_cancel %}\n                                <sw-button\n                                    class=\"sw-data-grid__inline-edit-cancel\"\n                                    size=\"x-small\"\n                                    :title=\"$tc('global.default.cancel')\"\n                                    :aria-label=\"$tc('global.default.cancel')\"\n                                    square\n                                    @click=\"onClickCancelInlineEdit(item)\"\n                                >\n                                    <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n                                    {% block sw_data_grid_inline_edit_actions_cancel_icon %}\n                                    <sw-icon name=\"regular-times-xs\" />\n                                    {% endblock %}\n                                </sw-button>\n                                {% endblock %}\n\n                                <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n                                {% block sw_data_grid_inline_edit_actions_save %}\n                                <sw-button\n                                    class=\"sw-data-grid__inline-edit-save\"\n                                    variant=\"primary\"\n                                    size=\"x-small\"\n                                    :title=\"$tc('global.default.save')\"\n                                    :aria-label=\"$tc('global.default.save')\"\n                                    square\n                                    @click=\"onClickSaveInlineEdit(item)\"\n                                >\n                                    <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n                                    {% block sw_data_grid_inline_edit_actions_save_icon %}\n                                    <sw-icon\n                                        name=\"regular-checkmark-xxs\"\n                                    />\n                                    {% endblock %}\n                                </sw-button>\n                                {% endblock %}\n                            </template>\n                            {% endblock %}\n\n                            <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n                            {% block sw_data_grid_body_cell_actions_menu %}\n                            <sw-context-button\n                                v-else\n                                class=\"sw-data-grid__actions-menu\"\n                                aria-label=\"global.sw-data-grid.actionsMenu\"\n                            >\n                                <slot\n                                    name=\"actions\"\n                                    :item=\"item\"\n                                    :item-index=\"itemIndex\"\n                                >\n                                    <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n                                    {% block sw_data_grid_slot_actions %}{% endblock %}\n                                </slot>\n                            </sw-context-button>\n                            {% endblock %}\n\n                            <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n                            {% block sw_data_grid_body_cell_action_modals %}\n                            <slot\n                                name=\"action-modals\"\n                                :item=\"item\"\n                            >\n                                <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n                                {% block sw_data_grid_slot_action_modals %}{% endblock %}\n                            </slot>\n                            {% endblock %}\n                        </div>\n                        {% endblock %}\n                    </td>\n                    {% endblock %}\n                </tr>\n                {% endblock %}\n            </tbody>\n            {% endblock %}\n\n            <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n            {% block sw_data_grid_skeleton %}\n            <sw-data-grid-skeleton\n                v-else\n                :show-selection=\"showSelection\"\n                :show-actions=\"showActions\"\n                :current-columns=\"currentColumns\"\n                :has-resize-columns=\"hasResizeColumns\"\n                :item-amount=\"skeletonItemAmount\"\n                class=\"sw-data-grid__body\"\n            />\n            {% endblock %}\n        </table>\n        {% endblock %}\n    </div>\n    {% endblock %}\n\n    <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n    {% block sw_data_grid_pagination %}\n    <div class=\"sw-data-grid__pagination\">\n        <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n        {% block sw_data_grid_pagination_inner %}\n        <slot name=\"pagination\">\n            <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n            {% block sw_data_grid_slot_pagination %}{% endblock %}\n        </slot>\n        {% endblock %}\n    </div>\n    {% endblock %}\n</div>\n{% endblock %}\n","import template from './sw-data-grid.html.twig';\nimport './sw-data-grid.scss';\n\nconst { Component } = Cicada;\nconst { Criteria } = Cicada.Data;\nconst utils = Cicada.Utils;\n\n/**\n * @package admin\n *\n * @private\n * @status ready\n * @description The sw-data-grid is a component to render tables with data.\n * It also supports hiding columns or scrolling horizontally when many columns are present.\n * @example-type static\n * @component-example\n * <sw-data-grid\n *     :dataSource=\"[\n *         { id: 'uuid1', company: 'Wordify', name: 'Portia Jobson' },\n *         { id: 'uuid2', company: 'Twitternation', name: 'Baxy Eardley' },\n *         { id: 'uuid3', company: 'Skidoo', name: 'Arturo Staker' },\n *         { id: 'uuid4', company: 'Meetz', name: 'Dalston Top' },\n *         { id: 'uuid5', company: 'Photojam', name: 'Neddy Jensen' }\n *     ]\"\n *     :columns=\"[\n *          { property: 'name', label: 'Name' },\n *          { property: 'company', label: 'Company' }\n *     ]\">\n * </sw-data-grid>\n */\nComponent.register('sw-data-grid', {\n    template,\n\n    compatConfig: Cicada.compatConfig,\n\n    inject: [\n        'acl',\n        'repositoryFactory',\n        'feature',\n    ],\n\n    emits: [\n        'selection-change',\n        'select-all-items',\n        'select-item',\n        'inline-edit-assign',\n        'inline-edit-save',\n        'inline-edit-cancel',\n        'column-sort',\n    ],\n\n    props: {\n        dataSource: {\n            type: Array,\n            required: true,\n        },\n\n        columns: {\n            type: Array,\n            required: true,\n        },\n\n        identifier: {\n            type: String,\n            required: false,\n            default: '',\n        },\n\n        showSelection: {\n            type: Boolean,\n            // eslint-disable-next-line vue/no-boolean-default\n            default: true,\n            required: false,\n        },\n\n        showActions: {\n            type: Boolean,\n            // eslint-disable-next-line vue/no-boolean-default\n            default: true,\n            required: false,\n        },\n\n        showHeader: {\n            type: Boolean,\n            // eslint-disable-next-line vue/no-boolean-default\n            default: true,\n            required: false,\n        },\n\n        showSettings: {\n            type: Boolean,\n            default: false,\n            required: false,\n        },\n\n        fullPage: {\n            type: Boolean,\n            default: false,\n            required: false,\n        },\n\n        allowInlineEdit: {\n            type: Boolean,\n            default: false,\n            required: false,\n        },\n\n        allowColumnEdit: {\n            type: Boolean,\n            default: false,\n            required: false,\n        },\n\n        isLoading: {\n            type: Boolean,\n            default: false,\n            required: false,\n        },\n\n        skeletonItemAmount: {\n            type: Number,\n            required: false,\n            default: 7,\n        },\n\n        sortBy: {\n            type: String,\n            required: false,\n            default: null,\n        },\n\n        sortDirection: {\n            type: String,\n            required: false,\n            default: 'ASC',\n        },\n\n        naturalSorting: {\n            type: Boolean,\n            required: false,\n            default: false,\n        },\n\n        compactMode: {\n            type: Boolean,\n            required: false,\n            // eslint-disable-next-line vue/no-boolean-default\n            default: true,\n        },\n\n        plainAppearance: {\n            type: Boolean,\n            required: false,\n            default: false,\n        },\n\n        showPreviews: {\n            type: Boolean,\n            required: false,\n            // eslint-disable-next-line vue/no-boolean-default\n            default: true,\n        },\n\n        isRecordEditable: {\n            type: Function,\n            required: false,\n            default() {\n                return true;\n            },\n        },\n\n        isRecordSelectable: {\n            type: Function,\n            required: false,\n            default(item) {\n                return (\n                    !this.reachMaximumSelectionExceed ||\n                    Object.keys(this.selection).includes(item[this.itemIdentifierProperty])\n                );\n            },\n        },\n\n        itemIdentifierProperty: {\n            type: String,\n            required: false,\n            default: 'id',\n        },\n\n        maximumSelectItems: {\n            type: Number,\n            required: false,\n            default: null,\n        },\n\n        preSelection: {\n            type: Object,\n            required: false,\n            default: null,\n        },\n\n        isRecordDisabled: {\n            type: Function,\n            required: false,\n            default() {\n                return false;\n            },\n        },\n    },\n\n    data() {\n        return {\n            /** @type {Array} */\n            records: this.dataSource,\n            currentSortBy: this.sortBy,\n            currentSortDirection: this.sortDirection,\n            currentNaturalSorting: this.naturalSorting,\n            loading: this.isLoading,\n            currentSetting: {},\n            currentColumns: [],\n            columnIndex: null,\n            selection: { ...(this.preSelection || {}) },\n            originalTarget: null,\n            compact: this.compactMode,\n            previews: this.showPreviews,\n            isInlineEditActive: false,\n            currentInlineEditId: '',\n            hasPreviewSlots: false,\n            hasResizeColumns: false,\n            // eslint-disable-next-line vue/no-reserved-keys\n            _hasColumnsResize: false,\n            // eslint-disable-next-line vue/no-reserved-keys\n            _isResizing: false,\n        };\n    },\n\n    computed: {\n        classes() {\n            return {\n                'is--compact': this.compact,\n                'sw-data-grid--full-page': this.fullPage,\n                'sw-data-grid--actions': this.showActions,\n                'sw-data-grid--plain-appearance': this.plainAppearance,\n            };\n        },\n\n        selectionCount() {\n            return Object.values(this.selection).length;\n        },\n\n        reachMaximumSelectionExceed() {\n            if (!this.maximumSelectItems) {\n                return false;\n            }\n\n            return this.selectionCount >= this.maximumSelectItems;\n        },\n\n        isSelectAllDisabled() {\n            if (!this.maximumSelectItems) {\n                return false;\n            }\n\n            if (!this.records) {\n                return false;\n            }\n\n            const currentVisibleIds = this.records.map((record) => record.id);\n\n            return (\n                this.reachMaximumSelectionExceed &&\n                Object.keys(this.selection).every((id) => !currentVisibleIds.includes(id))\n            );\n        },\n\n        allSelectedChecked() {\n            if (this.isSelectAllDisabled) {\n                return false;\n            }\n\n            if (this.reachMaximumSelectionExceed) {\n                return true;\n            }\n\n            if (!this.records || this.records.length === 0) {\n                return false;\n            }\n\n            if (this.selectionCount < this.records.length) {\n                return false;\n            }\n\n            const selectedItems = Object.values(this.selection);\n\n            return this.records.every((item) => {\n                return selectedItems.some((selection) => {\n                    return selection[this.itemIdentifierProperty] === item[this.itemIdentifierProperty];\n                });\n            });\n        },\n\n        userConfigRepository() {\n            return this.repositoryFactory.create('user_config');\n        },\n\n        currentUser() {\n            return Cicada.State.get('session').currentUser;\n        },\n\n        userGridSettingCriteria() {\n            const criteria = new Criteria(1, 25);\n            const configurationKey = `grid.setting.${this.identifier}`;\n            criteria.addFilter(Criteria.equals('key', configurationKey));\n            criteria.addFilter(Criteria.equals('userId', this.currentUser && this.currentUser.id));\n\n            return criteria;\n        },\n\n        hasInvisibleSelection() {\n            if (!this.records) {\n                return false;\n            }\n\n            const currentVisibleIds = this.records.map((record) => record.id);\n            return this.selectionCount > 0 && Object.keys(this.selection).some((id) => !currentVisibleIds.includes(id));\n        },\n\n        currentVisibleColumns() {\n            return this.currentColumns.filter((column) => column.visible);\n        },\n    },\n\n    watch: {\n        columns() {\n            this.initGridColumns();\n        },\n\n        sortBy() {\n            this.currentSortBy = this.sortBy;\n        },\n\n        sortDirection() {\n            this.currentSortDirection = this.sortDirection;\n        },\n\n        naturalSorting() {\n            this.currentNaturalSorting = this.naturalSorting;\n        },\n\n        isLoading() {\n            this.loading = this.isLoading;\n        },\n\n        dataSource() {\n            this.records = this.dataSource;\n        },\n\n        showSelection() {\n            this.selection = this.showSelection ? this.selection : {};\n        },\n\n        compactMode() {\n            this.compact = this.compactMode;\n        },\n\n        selection() {\n            this.$emit('selection-change', this.selection, this.selectionCount);\n        },\n    },\n\n    created() {\n        this.createdComponent();\n    },\n\n    mounted() {\n        this.mountedComponent();\n    },\n\n    methods: {\n        createdComponent() {\n            this.initGridColumns();\n        },\n\n        mountedComponent() {\n            this.trackScrollX();\n            this.findPreviewSlots();\n\n            this.$device.onResize({\n                listener: this.trackScrollX.bind(this),\n                component: this,\n            });\n        },\n\n        initGridColumns() {\n            this.currentColumns = this.getDefaultColumns();\n            this.findResizeColumns();\n\n            if (!this.identifier) {\n                return;\n            }\n\n            this.findUserSetting();\n        },\n\n        findUserSetting() {\n            if (!this.acl.can('user_config:read')) {\n                return Promise.resolve();\n            }\n\n            return this.userConfigRepository.search(this.userGridSettingCriteria, Cicada.Context.api).then((response) => {\n                if (!response.length) {\n                    return;\n                }\n\n                this.currentSetting = response[0];\n                const userSetting = response[0].value;\n\n                this.applyUserSettings({\n                    columns: userSetting?.columns ?? userSetting,\n                    compact: userSetting?.compact,\n                    previews: userSetting?.previews,\n                });\n            });\n        },\n\n        findUserSettingById() {\n            return this.userConfigRepository.get(this.currentSetting.id, Cicada.Context.api).then((response) => {\n                if (!response) {\n                    return;\n                }\n\n                this.currentSetting = response;\n                const userSetting = response.value;\n\n                this.applyUserSettings({\n                    columns: userSetting?.columns ?? userSetting,\n                    compact: userSetting?.compact,\n                    previews: userSetting?.previews,\n                });\n            });\n        },\n\n        applyUserSettings(userSettings) {\n            if (typeof userSettings.compact === 'boolean') {\n                this.compact = userSettings.compact;\n            }\n\n            if (typeof userSettings.previews === 'boolean') {\n                this.previews = userSettings.previews;\n            }\n\n            if (!userSettings.columns) {\n                return;\n            }\n\n            const userColumnSettings = Object.fromEntries(\n                userSettings.columns.map((column, index) => {\n                    return [\n                        column.dataIndex,\n                        {\n                            width: column.width,\n                            allowResize: column.allowResize,\n                            sortable: column.sortable,\n                            visible: column.visible,\n                            align: column.align,\n                            naturalSorting: column.naturalSorting,\n                            position: index,\n                        },\n                    ];\n                }),\n            );\n\n            this.currentColumns = this.currentColumns\n                .map((column) => {\n                    if (userColumnSettings[column.dataIndex] === undefined) {\n                        return column;\n                    }\n\n                    return utils.object.mergeWith(\n                        {},\n                        column,\n                        userColumnSettings[column.dataIndex],\n                        (localValue, serverValue) => {\n                            if (serverValue !== undefined && serverValue !== null) {\n                                return serverValue;\n                            }\n\n                            return localValue;\n                        },\n                    );\n                })\n                .sort((column1, column2) => column1.position - column2.position);\n        },\n\n        findResizeColumns() {\n            this.hasResizeColumns = this.currentColumns.some((column) => {\n                return column.allowResize;\n            });\n        },\n\n        findPreviewSlots() {\n            let scopedSlots = [];\n\n            if (this.isCompatEnabled('INSTANCE_SCOPED_SLOTS')) {\n                scopedSlots = Array.from(Object.keys(this.$scopedSlots));\n            } else {\n                scopedSlots = Object.keys(this.$slots);\n            }\n\n            this.hasPreviewSlots = scopedSlots.some((scopedSlot) => {\n                return scopedSlot.includes('preview-');\n            });\n        },\n\n        getDefaultColumns() {\n            return this.columns.map((column) => {\n                const defaults = {\n                    width: 'auto',\n                    allowResize: false,\n                    sortable: true,\n                    visible: true,\n                    align: 'left',\n                    naturalSorting: false,\n                };\n\n                if (!column.property) {\n                    throw new Error(`[${this.$options.name}] Please specify a \"property\" to render a column.`);\n                }\n                if (!column.dataIndex) {\n                    column.dataIndex = column.property;\n                }\n\n                return { ...defaults, ...column };\n            });\n        },\n\n        createUserGridSetting() {\n            const newUserGrid = this.userConfigRepository.create(Cicada.Context.api);\n            newUserGrid.key = `grid.setting.${this.identifier}`;\n            newUserGrid.userId = this.currentUser && this.currentUser.id;\n            this.currentSetting = newUserGrid;\n        },\n\n        saveUserSettings() {\n            if (!this.acl.can('user_config:create') || !this.acl.can('user_config:update')) {\n                return;\n            }\n\n            if (!this.identifier) {\n                return;\n            }\n\n            if (!this.currentSetting.id) {\n                this.createUserGridSetting();\n            }\n\n            this.currentSetting.value = {\n                columns: this.currentColumns,\n                compact: this.compact,\n                previews: this.previews,\n            };\n            this.userConfigRepository.save(this.currentSetting, Cicada.Context.api).then(() => {\n                this.findUserSettingById();\n            });\n        },\n\n        getHeaderCellClasses(column, index) {\n            return [\n                {\n                    'sw-data-grid__cell--sortable': column.sortable,\n                    'sw-data-grid__cell--icon-label': column.iconLabel,\n                },\n                `sw-data-grid__cell--${index}`,\n                `sw-data-grid__cell--align-${column.align}`,\n            ];\n        },\n\n        getRowClasses(item, itemIndex) {\n            return [\n                {\n                    'is--inline-edit': this.isInlineEdit(item),\n                    'is--selected': this.isSelected(item.id),\n                    'is--disabled': this.isRecordDisabled(item),\n                },\n                `sw-data-grid__row--${itemIndex}`,\n            ];\n        },\n\n        getCellClasses(column) {\n            return [\n                `sw-data-grid__cell--${column.property.replace(/\\./g, '-')}`,\n                `sw-data-grid__cell--align-${column.align}`,\n                {\n                    'sw-data-grid__cell--multi-line': column.multiLine,\n                },\n            ];\n        },\n\n        onChangeCompactMode(value) {\n            this.compact = value;\n            this.saveUserSettings();\n        },\n\n        onChangePreviews(value) {\n            this.previews = value;\n            this.saveUserSettings();\n        },\n\n        onChangeColumnVisibility(value, index) {\n            this.currentColumns[index].visible = value;\n\n            this.saveUserSettings();\n        },\n\n        onChangeColumnOrder(currentColumnIndex, newColumnIndex) {\n            this.currentColumns = this.orderColumns(this.currentColumns, currentColumnIndex, newColumnIndex);\n\n            this.saveUserSettings();\n        },\n\n        orderColumns(columns, oldColumnIndex, newColumnIndex) {\n            columns.splice(newColumnIndex, 0, columns.splice(oldColumnIndex, 1)[0]);\n\n            return columns;\n        },\n\n        enableInlineEdit() {\n            this.isInlineEditActive = this.hasColumnWithInlineEdit();\n            this.setAllColumnElementWidths();\n        },\n\n        hasColumnWithInlineEdit() {\n            return this.currentColumns.some((item) => {\n                return item.hasOwnProperty('inlineEdit');\n            });\n        },\n\n        isInlineEdit(item) {\n            return this.isInlineEditActive && this.currentInlineEditId === item[this.itemIdentifierProperty];\n        },\n\n        disableInlineEdit() {\n            this.isInlineEditActive = false;\n            this.currentInlineEditId = '';\n        },\n\n        hideColumn(columnIndex) {\n            this.currentColumns[columnIndex].visible = false;\n\n            this.saveUserSettings();\n        },\n\n        renderColumn(item, column) {\n            // horror (pseudo) example: deliveries[0].stateMachineState.transactions.last().name\n            // (name is a translated field - developer forgot translated accessor)\n            // pointer is now the order\n            const accessor = column.property.split('.');\n            let pointer = item;\n\n            // parts:  [`deliveries[0]`, `type`, `name`]\n            accessor.forEach((part) => {\n                // #1 loop: part=deliveries[0]      pointer=order object\n                // #2 loop: part=stateMachineState  pointer=delivery object\n                // #3 loop: part=transactions       pointer=stateMachineState\n                // #4 loop: part=last()             pointer=transactions\n                // #5 loop: part=name               pointer=last entity in transaction collection\n\n                if (typeof pointer !== 'object' || pointer === null) {\n                    utils.debug.warn(`[sw-data-grid] Can not resolve accessor: ${column.property}`);\n                    return false;\n                }\n\n                // check if the current accessor part is a function call like e.g. entity collection \"last()\"\n                if (part.includes('()')) {\n                    part = part.replace('()', '');\n                }\n\n                if (typeof pointer[part] === 'function') {\n                    pointer = pointer[part]();\n                } else if (pointer.hasOwnProperty('translated') && pointer.translated.hasOwnProperty(part)) {\n                    pointer = pointer.translated[part];\n                } else {\n                    // resolve dynamic accessor part: (name, deliveries[0], translated)\n                    pointer = utils.get(pointer, part);\n                }\n\n                return true;\n            });\n\n            return pointer;\n        },\n\n        selectAll(selected) {\n            if (this.isCompatEnabled('INSTANCE_DELETE')) {\n                this.$delete(this.selection);\n            } else {\n                this.selection = {};\n            }\n\n            this.records.forEach((item) => {\n                if (this.isSelected(item[this.itemIdentifierProperty]) !== selected) {\n                    this.selectItem(selected, item);\n                }\n            });\n\n            this.$emit('select-all-items', this.selection);\n        },\n\n        selectItem(selected, item) {\n            if (selected && this.reachMaximumSelectionExceed) {\n                return;\n            }\n\n            if (!this.isRecordSelectable(item)) {\n                return;\n            }\n\n            const key = item[this.itemIdentifierProperty];\n            if (selected) {\n                this.selection = {\n                    ...this.selection,\n                    [key]: item,\n                };\n            } else {\n                this.selection = Object.fromEntries(\n                    Object.entries(this.selection).filter(([selectionKey]) => selectionKey !== key),\n                );\n            }\n            this.$emit('select-item', this.selection, item, selected);\n        },\n\n        isSelected(itemId) {\n            return typeof this.selection[itemId] !== 'undefined';\n        },\n\n        resetSelection() {\n            this.selection = {};\n        },\n\n        onClickSaveInlineEdit(item) {\n            this.$emit('inline-edit-assign', item);\n            this.save(item);\n\n            this.disableInlineEdit();\n        },\n\n        onClickCancelInlineEdit(item) {\n            this.revert(item);\n\n            this.disableInlineEdit();\n        },\n\n        onDbClickCell(record) {\n            if (!this.allowInlineEdit || !this.isRecordEditable(record)) {\n                return;\n            }\n\n            this.enableInlineEdit();\n            this.currentInlineEditId = record[this.itemIdentifierProperty];\n        },\n\n        onClickHeaderCell(event, column) {\n            if (this._isResizing) {\n                return;\n            }\n\n            if (!column.sortable) {\n                return;\n            }\n\n            if (event.target.closest('.sw-context-button') || event.target.closest('.sw-data-grid__cell-resize')) {\n                return;\n            }\n\n            this.setAllColumnElementWidths();\n\n            this.sort(column);\n        },\n\n        onStartResize(event, column, columnIndex) {\n            this.resizeX = event.pageX;\n            this.originalTarget = event.target;\n            this.columnIndex = columnIndex;\n            this._isResizing = true;\n\n            this._handleColumnResizeClasses('add');\n\n            this.enableResizeMode();\n\n            window.addEventListener('mousemove', this.onResize, false);\n            window.addEventListener('mouseup', this.onStopResize, false);\n        },\n\n        onStopResize() {\n            this.resizeX = null;\n\n            this._handleColumnResizeClasses('remove');\n\n            this.currentColumns[this.columnIndex].width = `${this._currentColumnWidth}px`;\n\n            this._currentColumnWidth = null;\n            this.originalTarget = null;\n            this.columnIndex = null;\n\n            Cicada.Utils.debounce(() => {\n                this._isResizing = false;\n            }, 50)();\n\n            window.removeEventListener('mouseup', this.onStopResize, false);\n            window.removeEventListener('mousemove', this.onResize, false);\n        },\n\n        onResize(event) {\n            if (this.resizeX === null) {\n                return;\n            }\n\n            const currentColumnElement = this.originalTarget.parentNode;\n            const pageX = event.pageX;\n            const diffX = pageX - this.resizeX;\n            const newColumnWidth = currentColumnElement.offsetWidth + diffX;\n\n            this.resizeX = pageX;\n            this.trackScrollX();\n\n            if (newColumnWidth < 65) {\n                return;\n            }\n\n            currentColumnElement.style.width = `${newColumnWidth}px`;\n            currentColumnElement.style.minWidth = `${newColumnWidth}px`;\n\n            this._currentColumnWidth = newColumnWidth;\n        },\n\n        _handleColumnResizeClasses(operation) {\n            const resizeElement = this.originalTarget;\n            const columnElement = resizeElement.parentNode;\n\n            this.$el.classList[operation]('is--resizing');\n            resizeElement.classList[operation]('is--column-resizing');\n            columnElement.classList[operation]('is--column-resizing');\n            columnElement.nextElementSibling.classList[operation]('is--column-resizing');\n        },\n\n        enableResizeMode() {\n            if (this._hasColumnsResize) {\n                return;\n            }\n\n            this.setAllColumnElementWidths();\n\n            this.$refs.table.style.tableLayout = 'fixed';\n            this._hasColumnsResize = true;\n        },\n\n        setAllColumnElementWidths() {\n            this.$refs.column.forEach((element) => {\n                const currentWidth = `${element.offsetWidth}px`;\n\n                if (element.offsetWidth) {\n                    element.style.width = currentWidth;\n                    element.style.minWidth = currentWidth;\n                }\n            });\n        },\n\n        trackScrollX() {\n            const el = this.$el;\n            const wrapperEl = this.$refs.wrapper;\n\n            if (!wrapperEl) {\n                return;\n            }\n\n            if (wrapperEl.clientWidth < wrapperEl.scrollWidth) {\n                el.classList.add('is--scroll-x');\n            } else {\n                el.classList.remove('is--scroll-x');\n            }\n        },\n\n        save(item) {\n            this.$emit('inline-edit-save', item);\n        },\n\n        revert(item) {\n            this.$emit('inline-edit-cancel', item);\n        },\n\n        sort(column) {\n            this.$emit('column-sort', column);\n        },\n    },\n});\n"],"names":["template","Component","Criteria","utils","item","currentVisibleIds","record","id","selectedItems","selection","criteria","configurationKey","column","response","userSetting","userSettings","userColumnSettings","index","localValue","serverValue","column1","column2","scopedSlots","scopedSlot","defaults","newUserGrid","itemIndex","value","currentColumnIndex","newColumnIndex","columns","oldColumnIndex","columnIndex","accessor","pointer","part","selected","key","selectionKey","itemId","event","currentColumnElement","pageX","diffX","newColumnWidth","operation","resizeElement","columnElement","element","currentWidth","el","wrapperEl"],"mappings":"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"}