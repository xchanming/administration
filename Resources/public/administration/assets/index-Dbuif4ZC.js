const s=`{% block sw_product_variants_price_field %} <div class="sw-product-variants-price-field" :class="{'is--readonly': readonly}" > {% block sw_product_variants_price_field_gross %} <div class="sw-field"> <sw-number-field v-model:value="price.gross" size="small" class="sw-product-variants-price-field__input" :disabled="readonly" :digits="currency.decimalPrecision" v-bind="$attrs" @update:value="onPriceGrossChange" /> </div> {% endblock %} {% block sw_product_variants_price_field_lock_button %} <button class="sw-product-variants-price-field__lock" :class="{'is--locked': price.linked}" @click="onLockSwitch" > <sw-icon v-if="price.linked" name="regular-lock" size="16" /> <sw-icon v-else name="regular-lock-open" size="16" /> </button> {% endblock %} {% block sw_product_variants_price_field_net %} <div class="sw-field"> <sw-number-field v-model:value="price.net" size="small" class="sw-field sw-product-variants-price-field__input" :disabled="readonly" :digits="currency.decimalPrecision" v-bind="$attrs" @update:value="onPriceNetChange" /> </div> {% endblock %} </div> {% endblock %}`,{Application:n}=Cicada,t=Cicada.Utils,a={template:s,compatConfig:Cicada.compatConfig,emits:["price-lock-change","change","price-calculate","price-gross-change","price-net-change"],props:{price:{type:Object,required:!0},taxRate:{type:String,required:!1,default:null},currency:{type:Object,required:!0},readonly:{type:Boolean,required:!1,default:!1}},computed:{calculatePriceApiService(){return n.getContainer("factory").apiService.getByName("calculate-price")}},watch:{"price.linked":function(i){i===!0&&(this.price.net=this.convertGrossToNet(this.price.gross))},"taxRate.taxRate":function(){this.price.linked===!0&&(this.price.net=this.convertGrossToNet(this.price.gross))}},methods:{onLockSwitch(){return this.readonly?!1:(this.price.linked=!this.price.linked,this.$emit("price-lock-change",this.price.linked),this.$emit("change",this.price),!0)},onPriceGrossChange(e){!e||typeof e!="number"||this.price.linked&&(this.$emit("price-calculate",!0),this.onPriceGrossChangeDebounce(Number(this.price.gross)))},onPriceGrossChangeDebounce:t.debounce(function(i){this.$emit("price-gross-change",i),this.$emit("change",this.price),this.convertGrossToNet(i)},500),onPriceNetChange(e){!e||typeof e!="number"||this.price.linked&&(this.$emit("price-calculate",!0),this.onPriceNetChangeDebounce(Number(this.price.net)))},onPriceNetChangeDebounce:t.debounce(function(i){this.$emit("price-net-change",i),this.$emit("change",this.price),this.convertNetToGross(i)},500),convertNetToGross(e){return!e||typeof e!="number"?!1:(this.$emit("price-calculate",!0),this.requestTaxValue(e,"net").then(i=>{this.price.gross=Number(this.price.net)+i}),!0)},convertGrossToNet(e){return!e||typeof e!="number"?!1:(this.$emit("price-calculate",!0),this.requestTaxValue(e,"gross").then(i=>{this.price.net=Number(this.price.gross)-i}),!0)},requestTaxValue(e,i){return this.$emit("price-calculate",!0),new Promise(r=>{!e||typeof e!="number"||!this.price[i]||!this.taxRate||!i||this.calculatePriceApiService.calculatePrice({taxId:this.taxRate,price:this.price[i],output:i,currencyId:this.currency.id}).then(({data:c})=>{r(c.calculatedTaxes[0].tax),this.$emit("price-calculate",!1)})})}}};export{a as default};
//# sourceMappingURL=index-Dbuif4ZC.js.map
