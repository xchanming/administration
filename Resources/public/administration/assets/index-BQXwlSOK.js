const g=`{% block sw_admin_menu %} <aside class="sw-admin-menu" :class="adminMenuClasses" :aria-expanded="isExpanded ? 'true' : 'false'" @mouseleave="onMenuLeave" > {% block sw_admin_menu_header %} <div class="sw-admin-menu__header"> {% block sw_admin_menu_header_logo %} <div class="sw-admin-menu__header-logo" role="img" ></div> {% endblock %} {% block sw_admin_menu_header_version %} <sw-version class="collapsible-text" /> {% endblock %} </div> {% endblock %} {% block sw_admin_menu_body_container %} <div class="sw-admin-menu__body-container"> {% block sw_admin_menu_body %} <div ref="swAdminMenuBody" class="sw-admin-menu__body" :style="scrollbarOffsetStyle" > {% block sw_admin_menu_navigation_main %} <nav class="sw-admin-menu__navigation" aria-labelledby="mainmenulabel" > <h2 id="mainmenulabel" class="visually-hidden" > {{ $tc('global.sw-admin-menu.navigation.label') }} </h2> {% block sw_admin_menu_navigation_main_list %} <ul class="sw-admin-menu__navigation-list"> {% block sw_admin_menu_navigation_main_items %} <sw-admin-menu-item v-for="(entry, index) in mainMenuEntries" :key="\`\${entry.id || entry.path}-\${entry.children.length}\`" :tabindex="0" :class="{ 'is--entry-expanded': currentExpandedMenuEntries.includes(entry) }" :sidebar-expanded="isExpanded" :entry="entry" @menu-item-click="onMenuItemClick" @menu-item-enter="onMenuItemEnter" @sub-menu-item-enter="onSubMenuItemEnter" /> {% endblock %} </ul> {% endblock %} </nav> {% endblock %} </div> {% endblock %} </div> {% endblock %} {% block sw_admin_menu_footer %} <div class="sw-admin-menu__footer"> {% block sw_admin_menu_toggle_sidebar %} <button class="sw-admin-menu__toggle" @click="onToggleSidebar" > {% block sw_admin_menu_toggle_sidebar_icon %} <sw-icon :name="sidebarCollapseIcon" small /> {% endblock %} {% block sw_admin_menu_toggle_sidebar_text %} <span class="collapsible-text">{{ $tc('global.sw-admin-menu.linkMinimizeMenu') }}</span> {% endblock %} </button> {% endblock %} {% block sw_admin_menu_user_actions_toggle %} <div class="sw-admin-menu__user-actions-toggle" :class="{'is--active': isUserActionsActive}" @click="onToggleUserActions" @mouseenter="openUserActions" > <sw-loader v-if="isUserLoading" size="32px" /> {% block sw_admin_menu_user_actions_avatar %} <sw-avatar class="sw-admin-menu__avatar" :image-url="avatarUrl" :source-context="currentUser" :name="name" /> {% endblock %} {% block sw_admin_menu_user_actions_custom_fields %} <div class="sw-admin-menu__user-custom-fields collapsible-text"> <div class="sw-admin-menu__user-name"> {{ userName }} </div> <div class="sw-admin-menu__user-type"> {{ userTitle }} </div> {% block sw_admin_menu_user_actions_toggle_icon %} <sw-icon :name="userActionsToggleIcon" class="sw-admin-menu__user-actions-indicator" /> {% endblock %} </div> {% endblock %} </div> {% endblock %} {% block sw_admin_menu_user_actions %} <div class="sw-admin-menu__user-actions" :class="{'is--active': isUserActionsActive}" @mouseleave="closeUserActions" > {% block sw_admin_menu_user_actions_label %} <div v-if="!isExpanded" class="sw-admin-menu__user-actions-label" > {{ userName }} </div> {% endblock %} {% block sw_admin_menu_user_actions_list %} <ul class="sw-admin-menu__navigation-list"> {% block sw_admin_menu_user_actions_items %} {# @deprecated tag:v6.7.0 - Remove block #} {% block sw_admin_menu_user_actions_items_keyboard_shortcuts_overview %} {% endblock %} {% block sw_admin_menu_user_actions_items_logout_user %} <li class="sw-admin-menu__navigation-list-item"> <a href="#" class="sw-admin-menu__navigation-link sw-admin-menu__logout-action" @click.prevent="onLogoutUser" > <sw-icon class="sw-admin-menu__navigation-link-icon" name="regular-sign-out" small /> {{ $tc('global.sw-admin-menu.linkLogout') }} </a> </li> {% endblock %} {% endblock %} </ul> {% endblock %} </div> {% endblock %} </div> {% endblock %} {% block sw_admin_menu_flyout_transition %} <transition name="flyout"> <ul v-if="flyoutEntries.length" class="sw-admin-menu_flyout-holder" :style="flyoutStyle" @mouseenter="onFlyoutEnter" @mouseleave="onFlyoutLeave" > <template v-for="entry in flyoutEntries" :key="\`\${entry.id || entry.path}-separator-\${entry.children.length}\`" > <li v-if="isFirstPluginInMenuEntries(entry, flyoutEntries)" :style="{ 'border-color': flyoutColor }" class="sw-admin-menu__separator" > <span class="sw-admin-menu__separator-line"></span> </li> <sw-admin-menu-item :entry="entry" :border-color="flyoutColor" :display-icon="false" /> </template> </ul> </transition> {% endblock %} </aside> {% endblock %}`,{Component:f,Mixin:_}=Cicada,{dom:p,types:y}=Cicada.Utils;f.register("sw-admin-menu",{template:g,compatConfig:Cicada.compatConfig,inject:["menuService","loginService","userService","appModulesService","feature","customEntityDefinitionService"],mixins:[_.getByName("notification")],props:{mouseLocationsTracked:{type:Number,required:!1,default(){return 3}},subMenuDelay:{type:Number,required:!1,default(){return 150}}},data(){return{subMenuTimer:null,mouseLocations:[],lastDelayLocation:null,activeEntry:null,isOffCanvasShown:!1,isUserActionsActive:!1,flyoutEntries:[],lastFlyoutEntries:[],flyoutStyle:{},flyoutColor:"",flyoutLabel:"",subMenuOpen:!1,scrollbarOffset:"",isUserLoading:!0}},computed:{currentUser(){return Cicada.State.get("session").currentUser},isExpanded(){return this.adminMenuStore.isExpanded},userTitle(){return this.currentUser&&this.currentUser.admin?this.$tc("global.sw-admin-menu.administrator"):this.currentUser&&this.currentUser.title&&this.currentUser.title.length>0?this.currentUser.title:this.currentUser&&this.currentUser.aclRoles&&this.currentUser.aclRoles.length>0?this.currentUser.aclRoles[0].name:this.currentUser&&this.currentUser.title?this.currentUser.title:""},currentLocale(){return Cicada.State.get("session").currentLocale},currentExpandedMenuEntries(){return this.adminMenuStore.expandedEntries},adminModuleNavigation(){const e=this.adminMenuStore.adminModuleNavigation;return e.filter(i=>{const t=e.find(a=>i.parent&&a.id===i.parent),n=e.find(a=>(t==null?void 0:t.parent)&&a.id===(t==null?void 0:t.parent));return e.find(a=>(n==null?void 0:n.parent)&&a.id===(n==null?void 0:n.parent))?(Cicada.Utils.debug.error(new Error(`The navigation entry "${i.id}" is nested on level 4 or higher.The admin menu only supports up to three levels of nesting.`)),!1):!0})},appModuleNavigation(){return this.adminMenuStore.appModuleNavigation},navigationEntries(){return[...this.adminModuleNavigation,...this.appModuleNavigation,...this.extensionModuleNavigation,...this.customEntityDefinitionService.getMenuEntries()]},mainMenuEntries(){const e=new Cicada.Helper.FlatTreeHelper((i,t)=>i.position-t.position);return this.navigationEntries.forEach(i=>e.add(i)),e.convertToTree()},sidebarCollapseIcon(){return this.isExpanded?"regular-chevron-circle-left":"regular-chevron-circle-right"},userActionsToggleIcon(){return this.isUserActionsActive?"regular-chevron-down-xs":"regular-chevron-up-xs"},scrollbarOffsetStyle(){return{right:this.scrollbarOffset,"margin-left":this.scrollbarOffset}},adminMenuClasses(){return{"is--expanded":this.isExpanded,"is--collapsed":!this.isExpanded,"is--off-canvas-shown":this.isOffCanvasShown}},userName(){return this.currentUser?`${this.currentUser.name}`:""},avatarUrl(){return this.currentUser&&this.currentUser.avatarMedia?this.currentUser.avatarMedia.url:null},name(){return this.currentUser?this.currentUser.name:""},extensionMenuItems(){return Cicada.State.get("menuItem").menuItems},extensionModuleNavigation(){return this.extensionMenuItems.map(e=>({id:Cicada.Utils.createId(),label:e.label,position:e.position??110,parent:e.parent??"sw-extension",moduleType:"plugin",path:"sw.extension.sdk.index",params:{id:e.moduleId}}))},adminMenuStore(){return Cicada.Store.get("adminMenu")}},watch:{isExpanded(){this.toggleSidebar()}},created(){this.createdComponent()},mounted(){this.mountedComponent(),document.addEventListener("mouseleave",this.onFlyoutLeave)},beforeUnmount(){document.removeEventListener("mousemove",this.onMouseMoveDocument),document.removeEventListener("mouseleave",this.onFlyoutLeave)},methods:{createdComponent(){this.loginService.notifyOnLoginListener(),this.collapseMenuOnSmallViewports(),this.getUser(),this.isCompatEnabled("INSTANCE_EVENT_EMITTER")?this.$root.$on("toggle-offcanvas",e=>{this.isOffCanvasShown=e}):Cicada.Utils.EventBus.on("sw-admin-menu/toggle-offcanvas",e=>{this.isOffCanvasShown=e}),this.initNavigation()},initNavigation(){this.adminMenuStore.adminModuleNavigation=this.menuService.getNavigationFromAdminModules(),this.refreshApps()},refreshApps(){return this.appModulesService.fetchAppModules().then(e=>Cicada.State.commit("cicadaApps/setApps",e))},collapseAdminMenu(){this.adminMenuStore.collapseSidebar()},expandAdminMenu(){this.adminMenuStore.expandSidebar()},mountedComponent(){const e=this;this.$device.onResize({listener(){e.collapseMenuOnSmallViewports()},component:this}),document.addEventListener("mousemove",this.onMouseMoveDocument.bind(this)),this.addScrollbarOffset()},getUser(){this.isUserLoading=!0,this.userService.getUser().then(e=>{const i=e.data;delete i.password,Cicada.State.commit("setCurrentUser",i),this.isUserLoading=!1})},collapseMenuOnSmallViewports(){this.$device.getViewportWidth()<=1200&&this.$device.getViewportWidth()>=500&&this.collapseAdminMenu(),this.$device.getViewportWidth()<=500&&this.expandAdminMenu()},isActiveItem(e){return this.isExpanded&&e.classList.contains("router-link-active")},onToggleSidebar(){this.isExpanded?this.collapseAdminMenu():this.expandAdminMenu(),this.toggleSidebar()},toggleSidebar(){var e;if(!this.isExpanded){this.removeClassesFromElements(Array.from(this.$el.querySelectorAll(".sw-admin-menu__navigation-list-item")),["is--entry-expanded"]);const i=this.$el.querySelector("a.router-link-active"),t=i==null?void 0:i.parentElement,n=(e=t==null?void 0:t.classList)==null?void 0:e.contains("navigation-list-item__level-1"),s=[t];if(i&&!n){const a=i.closest(".navigation-list-item__level-1.navigation-list-item__has-children");s.push(a.firstElementChild)}this.removeClassesFromElements(Array.from(this.$el.querySelectorAll(".navigation-list-item__level-1.navigation-list-item__has-children > .router-link-active")),["router-link-active"],s),this.onFlyoutLeave()}this.isUserActionsActive=!1,this.flyoutEntries=[]},onToggleUserActions(){return this.isUserLoading?!1:(this.isUserActionsActive=!this.isUserActionsActive,!0)},openUserActions(){this.isExpanded||this.isUserLoading||(this.isUserActionsActive=!0)},closeUserActions(){this.isExpanded||(this.isUserActionsActive=!1)},onLogoutUser(){this.loginService.logout(),this.adminMenuStore.clearExpandedMenuEntries(),Cicada.State.commit("removeCurrentUser"),Cicada.State.commit("notification/setNotifications",{}),Cicada.State.commit("notification/clearGrowlNotificationsForCurrentUser"),Cicada.State.commit("notification/clearNotificationsForCurrentUser"),this.$router.push({name:"sw.login.index"})},openKeyboardShortcutOverview(){},addScrollbarOffset(){const e=p.getScrollbarWidth(this.$refs.swAdminMenuBody);this.scrollbarOffset=`-${e}px`},onMouseMoveDocument(e){this.mouseLocations.push({x:e.pageX,y:e.pageY}),this.mouseLocations.length>this.mouseLocationsTracked&&this.mouseLocations.shift()},onMenuItemClick(e,i){const t=i.closest(".sw-admin-menu__navigation-list-item"),n=e.level;if(this.subMenuTimer&&window.clearTimeout(this.subMenuTimer),n>1||!t.classList.contains("navigation-list-item__has-children")||!this.isExpanded)return;const s=t.firstChild;this.removeClassesFromElements(Array.from(this.$el.querySelectorAll(".sw-admin-menu__navigation-list-item")),["is--entry-expanded","is--flyout-expanded"],[t,s]);const a=t.classList.contains("is--entry-expanded");t.querySelector("a.router-link-active")?s.classList.add("router-link-active"):s.classList.remove("router-link-active"),a?(this.adminMenuStore.collapseMenuEntry(e),s.classList.remove("router-link-active"),s.classList.remove("is--entry-expanded")):(this.adminMenuStore.expandMenuEntry(e),s.classList.add("router-link-active"),t.classList.add("is--entry-expanded")),t.classList.remove("is--flyout-expanded"),this.flyoutEntries.length&&(this.flyoutEntries=[])},onMenuLeave(){this.subMenuTimer&&window.clearTimeout(this.subMenuTimer),this.deactivatePreviousMenuItem(),this.flyoutEntries=[]},onMenuItemEnter(e,i,t){const n=i.target;if(this.subMenuTimer&&window.clearTimeout(this.subMenuTimer),!n.classList.contains("is--entry-expanded")){if(!n.classList.contains("navigation-list-item__has-children")){this.deactivatePreviousMenuItem(),this.flyoutEntries=[];return}this.possiblyActivate(e,n,t)}},onSubMenuItemEnter(e,i){const t=i.target,n=t.closest(".is--entry-expanded");if(!n)return;if(this.removeClassesFromElements(Array.from(n.querySelectorAll(".sw-admin-menu__navigation-list-item")),["is--flyout-enabled"],[t]),!this.getChildren(e).length){this.flyoutEntries=[];return}t.classList.add("is--flyout-enabled"),this.flyoutStyle={top:`${t.getBoundingClientRect().top-document.getElementById("app").getBoundingClientRect().top}px`},this.flyoutEntries=this.getChildren(e);const s=this.mainMenuEntries.find(a=>a.id===e.parent||a.path===e.parent);s&&(this.flyoutColor=s.color)},getChildren(e){return e.children.filter(i=>i.privilege?this.acl.can(i.privilege):!0)},isPositionInPolygon(e,i,t){let n=!1;for(let s=0,a=t.length-1;s<t.length;a=s++){const l=t[s][0],u=t[s][1],o=t[a][0],c=t[a][1];u>i!=c>i&&e<(o-l)*(i-u)/(c-u)+l&&(n=!n)}return n},possiblyActivate(e,i,t){const n=this.getActivationDelay(i,e);if(n){this.subMenuTimer=window.setTimeout(this.possiblyActivate.bind(this,e,i,t,!0),n);return}this.activateMenuItem(e,i,t)},activateMenuItem(e,i,t){this.getChildren(e)&&(this.flyoutEntries=this.getChildren(e)),this.flyoutStyle={top:`${i.getBoundingClientRect().top-document.getElementById("app").getBoundingClientRect().top}px`},this.deactivatePreviousMenuItem(),i.classList.add("is--flyout-enabled"),this.subMenuTimer&&window.clearTimeout(this.subMenuTimer),this.flyoutColor=e.color,this.activeEntry={entry:e,target:i,parentEntries:t}},deactivatePreviousMenuItem(){this.activeEntry&&this.activeEntry.target&&this.activeEntry.target.classList.remove("is--flyout-enabled"),this.activeEntry=[]},getPolygonFromMenuItem(e,i){const t=r=>{let m=r.offsetWidth;const h=r.currentStyle||getComputedStyle(r);return m+=parseInt(h.marginLeft,10)||0,m},n=r=>{let m=r.offsetHeight;const h=r.currentStyle||getComputedStyle(r);return m+=parseInt(h.marginTop,10)||0,m},s=e.getBoundingClientRect(),a=n(e),l=t(e),u=this.getChildren(i).length*a,o={x:s.left,y:s.top},c={x:o.x,y:o.y+a},d={x:o.x+l*2,y:o.y},v={x:d.x,y:d.y+u};return[[o.x,o.y],[c.x,c.y],[v.x,v.y],[d.x,d.y]]},getActivationDelay(){const e=this.mouseLocations[this.mouseLocations.length-1];if(!e||!this.flyoutEntries.length||this.lastDelayLocation&&e.x===this.lastDelayLocation.x&&e.y===this.lastDelayLocation.y)return 0;if(this.activeEntry!==null){const i=this.getPolygonFromMenuItem(this.activeEntry.target,this.activeEntry.entry);if(this.isPositionInPolygon(e.x,e.y,i))return this.lastDelayLocation=e,this.subMenuDelay}return 0},onFlyoutEnter(){this.subMenuTimer&&window.clearTimeout(this.subMenuTimer)},onFlyoutLeave(){this.deactivatePreviousMenuItem(),this.activeEntry=null,this.flyoutEntries=[]},removeClassesFromElements(e,i,t=[]){e.forEach(n=>{t.includes(n)||n.classList.remove(i)})},isFirstPluginInMenuEntries(e,i){const t=i.find(n=>n.moduleType==="plugin");return t?y.isEqual(e,t):!1}}});
//# sourceMappingURL=index-BQXwlSOK.js.map
