{"version":3,"file":"index-Pq0CJZsN.js","sources":["../../../app/administration/src/module/sw-customer/view/sw-customer-detail-addresses/sw-customer-detail-addresses.html.twig","../../../app/administration/src/module/sw-customer/view/sw-customer-detail-addresses/index.js"],"sourcesContent":["<!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n{% block sw_customer_detail_addresses %}\n<div class=\"sw-customer-detail-addresses\">\n\n    <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n    {% block sw_customer_detail_addresses_card %}\n    <sw-card\n        position-identifier=\"sw-customer-detail-addresses\"\n        :is-loading=\"isLoading\"\n        :large=\"true\"\n    >\n        <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n        {% block sw_customer_detail_addresses_toolbar %}\n        <template #toolbar>\n            <sw-card-filter\n                placeholder=\"\"\n                @sw-card-filter-term-change=\"onChange\"\n            >\n                <template #filter>\n                    <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n                    {% block sw_customer_detail_addresses_add_button %}\n                    <sw-button\n                        class=\"sw-customer-detail-addresses__add-address-action\"\n                        :disabled=\"!customerEditMode\"\n                        size=\"small\"\n                        @click=\"onCreateNewAddress\"\n                    >\n                        <sw-icon\n                            name=\"regular-plus-circle-s\"\n                            small\n                        />\n                        {{ $tc('sw-customer.detailAddresses.buttonAddAddress') }}\n                    </sw-button>\n                    {% endblock %}\n                </template>\n            </sw-card-filter>\n        </template>\n        {% endblock %}\n\n        <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n        {% block sw_customer_detail_addresses_add_modal %}\n        <sw-modal\n            v-if=\"currentAddress\"\n            :title=\"$tc('sw-customer.detailAddresses.modalTitleAddress')\"\n            @modal-close=\"onCloseAddressModal\"\n        >\n\n            <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n            {% block sw_customer_detail_addresses_add_modal_address_form %}\n            <sw-customer-address-form\n                :address=\"currentAddress\"\n                :customer=\"activeCustomer\"\n            >\n\n                <sw-customer-address-form-options\n                    :address=\"currentAddress\"\n                    :customer=\"activeCustomer\"\n                    :custom-field-sets=\"customerAddressCustomFieldSets\"\n                    @default-address-change=\"onChangeDefaultAddress\"\n                />\n\n            </sw-customer-address-form>\n            {% endblock %}\n\n            <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n            {% block sw_customer_detail_addresses_add_modal_footer %}\n            <template #modal-footer>\n                <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n                {% block sw_customer_detail_addresses_add_modal_cancel %}\n                <sw-button\n                    size=\"small\"\n                    @click=\"onCloseAddressModal\"\n                >\n                    {{ $tc('global.default.cancel') }}\n                </sw-button>\n                {% endblock %}\n\n                <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n                {% block sw_customer_detail_addresses_add_modal_apply %}\n                <sw-button\n                    variant=\"primary\"\n                    size=\"small\"\n                    @click=\"onSaveAddress\"\n                >\n                    {{ $tc('global.default.apply') }}\n                </sw-button>\n                {% endblock %}\n            </template>\n            {% endblock %}\n        </sw-modal>\n        {% endblock %}\n\n        <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n        {% block sw_customer_detail_addresses_grid %}\n        <template #grid>\n            <sw-one-to-many-grid\n                ref=\"addressGrid\"\n                :collection=\"sortedAddresses\"\n                :local-mode=\"false\"\n                :columns=\"addressColumns\"\n                :show-selection=\"false\"\n                :sort-direction=\"addressSortDirection\"\n                :sort-by=\"addressSortProperty\"\n                :is-loading=\"isLoading\"\n                @column-sort=\"setAddressSorting\"\n            >\n                <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n                {% block sw_customer_detail_addresses_grid_columns %}\n                <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n                {% block sw_customer_detail_addresses_grid_columns_default_shipping_address %}\n                <template #column-defaultShippingAddress=\"{ item }\">\n                    <sw-radio-field\n                        v-model:value=\"activeCustomer.defaultShippingAddressId\"\n                        :disabled=\"!customerEditMode\"\n                        name=\"defaultShippingAddress\"\n                        :options=\"[{ value: item.id }]\"\n                        @update:value=\"onChangeDefaultShippingAddress\"\n                    />\n                </template>\n                {% endblock %}\n\n                <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n                {% block sw_customer_detail_addresses_grid_columns_default_billing_address %}\n                <template #column-defaultBillingAddress=\"{ item }\">\n                    <sw-radio-field\n                        v-model:value=\"activeCustomer.defaultBillingAddressId\"\n                        :disabled=\"!customerEditMode\"\n                        name=\"defaultBillingAddress\"\n                        :options=\"[{ value: item.id }]\"\n                        @update:value=\"onChangeDefaultBillingAddress\"\n                    />\n                </template>\n                {% endblock %}\n\n                <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n                {% block sw_customer_detail_addresses_grid_columns_name %}\n                <template #column-name=\"{ item }\">\n                    <a\n                        v-if=\"customerEditMode\"\n                        role=\"link\"\n                        tabindex=\"0\"\n                        @click=\"onEditAddress(item.id)\"\n                        @keydown.enter=\"onEditAddress(item.id)\"\n                    >\n                        {{ item.name }}\n                    </a>\n\n                    <template v-else>\n                        {{ item.name }}\n                    </template>\n                </template>\n                {% endblock %}\n                {% endblock %}\n\n                <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n                {% block sw_customer_detail_addresses_grid_columns_actions %}\n                <template #actions=\"{ item }\">\n\n                    <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n                    {% block sw_customer_detail_addresses_grid_columns_actions_edit %}\n                    <sw-context-menu-item\n                        :disabled=\"!customerEditMode\"\n                        @click=\"onEditAddress(item.id)\"\n                    >\n                        {{ $tc('sw-customer.detailAddresses.contextMenuEdit') }}\n                    </sw-context-menu-item>\n                    {% endblock %}\n\n                    <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n                    {% block sw_customer_detail_addresses_grid_columns_actions_duplicate %}\n                    <sw-context-menu-item\n                        :disabled=\"!customerEditMode\"\n                        @click=\"onDuplicateAddress(item.id)\"\n                    >\n                        {{ $tc('sw-customer.detailAddresses.contextMenuDuplicate') }}\n                    </sw-context-menu-item>\n                    {% endblock %}\n\n                    <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n                    {% block sw_customer_detail_addresses_grid_columns_actions_defaultShippingAddress %}\n                    <sw-context-menu-item\n                        :disabled=\"!customerEditMode\"\n                        @click=\"onChangeDefaultShippingAddress(item.id)\"\n                    >\n                        {{ $tc('sw-customer.detailAddresses.contextMenuDefaultShippingAddress') }}\n                    </sw-context-menu-item>\n                    {% endblock %}\n\n                    <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n                    {% block sw_customer_detail_addresses_grid_columns_actions_defaultBillingAddress %}\n                    <sw-context-menu-item\n                        :disabled=\"!customerEditMode\"\n                        @click=\"onChangeDefaultBillingAddress(item.id)\"\n                    >\n                        {{ $tc('sw-customer.detailAddresses.contextMenuDefaultBillingAddress') }}\n                    </sw-context-menu-item>\n                    {% endblock %}\n\n                    <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n                    {% block sw_customer_detail_addresses_grid_columns_actions_delete %}\n                    <sw-context-menu-item\n                        variant=\"danger\"\n                        :disabled=\"!customerEditMode || isDefaultAddress(item.id)\"\n                        @click=\"onDeleteAddress(item.id)\"\n                    >\n                        {{ $tc('sw-customer.detailAddresses.contextMenuDelete') }}\n                    </sw-context-menu-item>\n                    {% endblock %}\n                </template>\n                {% endblock %}\n\n                <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n                {% block sw_customer_detail_addresses_grid_columns_action_modals %}\n                <template #action-modals=\"{ item }\">\n                    <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n                    {% block sw_customer_detail_addresses_delete_modal %}\n                    <sw-modal\n                        v-if=\"showDeleteAddressModal === item.id\"\n                        :title=\"$tc('global.default.warning')\"\n                        variant=\"small\"\n                        @modal-close=\"onCloseDeleteAddressModal\"\n                    >\n                        <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n                        {% block sw_customer_detail_addresses_delete_modal_confirm_delete_text %}\n                        <p class=\"sw-customer-detail-addresses__confirm-delete-text\">\n                            {{ $tc('sw-customer.detailAddresses.textDeleteAddressConfirm') }}\n                        </p>\n                        {% endblock %}\n\n                        <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n                        {% block sw_customer_detail_addresses_delete_modal_address_item %}\n                        <sw-address\n                            class=\"sw-customer-detail-addresses__confirm-delete-address\"\n                            :address=\"item\"\n                        />\n                        {% endblock %}\n\n                        <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n                        {% block sw_customer_detail_addresses_delete_modal_footer %}\n                        <template #modal-footer>\n                            <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n                            {% block sw_customer_detail_addresses_delete_modal_cancel %}\n                            <sw-button\n                                size=\"small\"\n                                @click=\"onCloseDeleteAddressModal\"\n                            >\n                                {{ $tc('global.default.cancel') }}\n                            </sw-button>\n                            {% endblock %}\n\n                            <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n                            {% block sw_customer_detail_addresses_delete_modal_confirm %}\n                            <sw-button\n                                variant=\"danger\"\n                                size=\"small\"\n                                @click=\"onConfirmDeleteAddress(item.id)\"\n                            >\n                                {{ $tc('sw-customer.detailAddresses.buttonDelete') }}\n                            </sw-button>\n                            {% endblock %}\n                        </template>\n                        {% endblock %}\n                    </sw-modal>\n                    {% endblock %}\n                </template>\n                {% endblock %}\n            </sw-one-to-many-grid>\n        </template>\n        {% endblock %}\n    </sw-card>\n    {% endblock %}\n</div>\n{% endblock %}\n","import { required } from 'src/core/service/validation.service';\nimport template from './sw-customer-detail-addresses.html.twig';\nimport './sw-customer-detail-addresses.scss';\n\n/**\n * @package checkout\n */\n\nconst { CicadaError } = Cicada.Classes;\nconst { Mixin, EntityDefinition } = Cicada;\nconst { Criteria } = Cicada.Data;\n\n// eslint-disable-next-line sw-deprecation-rules/private-feature-declarations\nexport default {\n    template,\n\n    compatConfig: Cicada.compatConfig,\n\n    inject: ['repositoryFactory'],\n\n    mixins: [\n        Mixin.getByName('notification'),\n    ],\n\n    props: {\n        customer: {\n            type: Object,\n            required: true,\n        },\n        customerEditMode: {\n            type: Boolean,\n            required: true,\n        },\n    },\n\n    data() {\n        return {\n            isLoading: false,\n            activeCustomer: this.customer,\n            showAddAddressModal: false,\n            showEditAddressModal: false,\n            showDeleteAddressModal: false,\n            addressSortProperty: null,\n            addressSortDirection: '',\n            currentAddress: null,\n            customerAddressCustomFieldSets: null,\n        };\n    },\n\n    computed: {\n        customerRepository() {\n            return this.repositoryFactory.create('customer');\n        },\n\n        customFieldSetRepository() {\n            return this.repositoryFactory.create('custom_field_set');\n        },\n\n        customerAddressRepository() {\n            return this.repositoryFactory.create('customer_address');\n        },\n\n        addressColumns() {\n            return this.getAddressColumns();\n        },\n\n        addressRepository() {\n            return this.repositoryFactory.create(this.activeCustomer.addresses.entity, this.activeCustomer.addresses.source);\n        },\n\n        sortedAddresses() {\n            if (this.addressSortProperty) {\n                // eslint-disable-next-line vue/no-side-effects-in-computed-properties\n                return this.activeCustomer.addresses.sort((a, b) => {\n                    const aValue = a[this.addressSortProperty];\n                    const bValue = b[this.addressSortProperty];\n\n                    let isBigger = null;\n\n                    if (typeof aValue === 'string' && typeof bValue === 'string') {\n                        isBigger = aValue.toUpperCase() > bValue.toUpperCase();\n                    }\n\n                    if (typeof aValue === 'number' && typeof bValue === 'number') {\n                        isBigger = aValue - bValue > 0;\n                    }\n\n                    if (isBigger !== null) {\n                        if (this.addressSortDirection === 'DESC') {\n                            return isBigger ? -1 : 1;\n                        }\n\n                        return isBigger ? 1 : -1;\n                    }\n\n                    return 0;\n                });\n            }\n\n            return this.activeCustomer.addresses;\n        },\n\n        salutationRepository() {\n            return this.repositoryFactory.create('salutation');\n        },\n\n        salutationCriteria() {\n            const criteria = new Criteria(1, 1);\n\n            criteria.addFilter(Criteria.equals('salutationKey', 'not_specified'));\n\n            return criteria;\n        },\n    },\n\n    created() {\n        this.createdComponent();\n    },\n\n    methods: {\n        createdComponent() {\n            this.isLoading = true;\n\n            if (!this.activeCustomer.id && this.$route.params.id) {\n                this.customerRepository.get(this.$route.params.id).then((customer) => {\n                    this.activeCustomer = customer;\n                    this.isLoading = false;\n                });\n                return;\n            }\n\n            if (!this.activeCustomer.id) {\n                this.$router.push({\n                    name: 'sw.customer.detail.base',\n                    params: { id: this.$route.params.id },\n                });\n                return;\n            }\n\n            const customFieldSetCriteria = new Criteria(1, 25);\n            customFieldSetCriteria.addFilter(Criteria.equals('relations.entityName', 'customer_address'));\n\n            this.customFieldSetRepository.search(customFieldSetCriteria).then((customFieldSets) => {\n                this.customerAddressCustomFieldSets = customFieldSets;\n            });\n\n            this.isLoading = false;\n        },\n\n        getAddressColumns() {\n            return [\n                {\n                    property: 'defaultShippingAddress',\n                    label: this.$tc('sw-customer.detailAddresses.columnDefaultShippingAddress'),\n                    align: 'center',\n                    iconLabel: 'regular-shopping-cart',\n                    iconTooltip: this.$tc('sw-customer.detailAddresses.columnDefaultShippingAddress'),\n                },\n                {\n                    property: 'defaultBillingAddress',\n                    label: this.$tc('sw-customer.detailAddresses.columnDefaultBillingAddress'),\n                    align: 'center',\n                    iconLabel: 'regular-file-text',\n                    iconTooltip: this.$tc('sw-customer.detailAddresses.columnDefaultBillingAddress'),\n                },\n                {\n                    property: 'name',\n                    label: this.$tc('sw-customer.detailAddresses.columnName'),\n                },\n                {\n                    property: 'company',\n                    label: this.$tc('sw-customer.detailAddresses.columnCompany'),\n                },\n                {\n                    property: 'street',\n                    label: this.$tc('sw-customer.detailAddresses.columnStreet'),\n                },\n                {\n                    property: 'zipcode',\n                    label: this.$tc('sw-customer.detailAddresses.columnZipCode'),\n                    align: 'right',\n                },\n                {\n                    property: 'city',\n                    label: this.$tc('sw-customer.detailAddresses.columnCity'),\n                },\n            ];\n        },\n\n        setAddressSorting(column) {\n            this.addressSortProperty = column.property;\n\n            let direction = 'ASC';\n            if (this.addressSortProperty === column.dataIndex) {\n                if (this.addressSortDirection === direction) {\n                    direction = 'DESC';\n                }\n            }\n            this.addressSortProperty = column.dataIndex;\n            this.addressSortDirection = direction;\n        },\n\n        onCreateNewAddress() {\n            this.showAddAddressModal = true;\n            this.createNewCustomerAddress();\n        },\n\n        async createNewCustomerAddress() {\n            const defaultSalutationId = await this.getDefaultSalutation();\n\n            const newAddress = this.addressRepository.create();\n            newAddress.customerId = this.activeCustomer.id;\n            newAddress.salutationId = defaultSalutationId;\n\n            this.currentAddress = newAddress;\n        },\n\n        onSaveAddress() {\n            if (this.currentAddress === null || !this.isValidAddress(this.currentAddress)) {\n                return;\n            }\n\n            let address = this.activeCustomer.addresses.get(this.currentAddress.id);\n\n            if (typeof address === 'undefined' || address === null) {\n                address = this.addressRepository.create(Cicada.Context.api, this.currentAddress.id);\n            }\n\n            Object.assign(address, this.currentAddress);\n\n            if (this.customer.addresses.has(address.id)) {\n                this.customer.addresses.remove(address.id);\n            }\n\n            this.customer.addresses.push(address);\n\n            this.currentAddress = null;\n        },\n\n        isValidAddress(address) {\n            const ignoreFields = ['createdAt'];\n            const requiredAddressFields = Object.keys(EntityDefinition.getRequiredFields('customer_address'));\n            let isValid = true;\n\n            requiredAddressFields.forEach((field) => {\n                if (ignoreFields.indexOf(field) !== -1 || required(address[field])) {\n                    return;\n                }\n\n                isValid = false;\n\n                Cicada.State.dispatch('error/addApiError', {\n                    expression: `customer_address.${this.currentAddress.id}.${field}`,\n                    error: new CicadaError({\n                        code: 'c1051bb4-d103-4f74-8988-acbcafc7fdc3',\n                    }),\n                });\n            });\n\n            return isValid;\n        },\n\n        onCloseAddressModal() {\n            if (this.defaultShippingAddressId) {\n                this.activeCustomer.defaultShippingAddressId = this.defaultShippingAddressId;\n            }\n\n            if (this.defaultBillingAddressId) {\n                this.activeCustomer.defaultBillingAddressId = this.defaultBillingAddressId;\n            }\n\n            if (this.$route.query.detailId) {\n                this.$route.query.detailId = null;\n            }\n\n            this.currentAddress = null;\n        },\n\n        onEditAddress(id) {\n            const currentAddress = this.addressRepository.create(Cicada.Context.api, id);\n\n            // assign values and id to new address\n            Object.assign(currentAddress, this.activeCustomer.addresses.get(id));\n\n            this.currentAddress = currentAddress;\n            this.showEditAddressModal = id;\n        },\n\n        onDeleteAddress(id) {\n            if (this.isDefaultAddress(id)) {\n                return;\n            }\n            this.showDeleteAddressModal = id;\n        },\n\n        onConfirmDeleteAddress(id) {\n            this.onCloseDeleteAddressModal();\n\n            return this.customerAddressRepository.delete(id).then(() => {\n                this.refreshList();\n            });\n        },\n\n        onCloseDeleteAddressModal() {\n            this.showDeleteAddressModal = false;\n        },\n\n        isDefaultAddress(addressId) {\n            return (\n                this.activeCustomer.defaultBillingAddressId === addressId ||\n                this.activeCustomer.defaultShippingAddressId === addressId\n            );\n        },\n\n        onChangeDefaultBillingAddress(billingAddressId) {\n            this.activeCustomer.defaultBillingAddressId = billingAddressId;\n            this.customer.defaultBillingAddressId = billingAddressId;\n        },\n\n        onChangeDefaultShippingAddress(shippingAddressId) {\n            this.activeCustomer.defaultShippingAddressId = shippingAddressId;\n            this.customer.defaultShippingAddressId = shippingAddressId;\n        },\n\n        async onDuplicateAddress(addressId) {\n            const { id } = await this.customerAddressRepository.clone(addressId);\n            const newAddress = await this.customerAddressRepository.get(id);\n\n            this.activeCustomer.addresses.push(newAddress);\n        },\n\n        onChangeDefaultAddress(data) {\n            if (!data.value) {\n                if (this.defaultShippingAddressId) {\n                    this.activeCustomer.defaultShippingAddressId = this.defaultShippingAddressId;\n                }\n\n                if (this.defaultBillingAddressId) {\n                    this.activeCustomer.defaultBillingAddressId = this.defaultBillingAddressId;\n                }\n                return;\n            }\n\n            const preFix = this.createPrefix(data.name, '-address');\n            const name = `default${preFix}AddressId`;\n\n            this[name] = this.activeCustomer[name];\n            this.activeCustomer[name] = data.id;\n            this.customer[name] = data.id;\n        },\n\n        onChange(term) {\n            this.activeCustomer.addresses.criteria.setPage(1);\n            this.activeCustomer.addresses.criteria.setTerm(term);\n\n            this.refreshList();\n        },\n\n        refreshList() {\n            this.$refs.addressGrid.load();\n        },\n\n        createPrefix(string, replace) {\n            const preFix = string.replace(replace, '');\n\n            return `${preFix.charAt(0).toUpperCase()}${preFix.slice(1)}`;\n        },\n\n        async getDefaultSalutation() {\n            const res = await this.salutationRepository.searchIds(this.salutationCriteria);\n\n            return res.data?.[0];\n        },\n    },\n};\n"],"names":["template","CicadaError","Mixin","EntityDefinition","Criteria","index","a","b","aValue","bValue","isBigger","criteria","customer","customFieldSetCriteria","customFieldSets","column","direction","defaultSalutationId","newAddress","address","ignoreFields","requiredAddressFields","isValid","field","required","id","currentAddress","addressId","billingAddressId","shippingAddressId","data","name","term","string","replace","preFix","_a"],"mappings":"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"}