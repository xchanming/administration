const r=`{% block sw_single_select %} <sw-select-base ref="selectBase" class="sw-single-select" :is-loading="isLoading" v-bind="$attrs" :label="label" @clear="clearSelection" @select-expanded="onSelectExpanded" @select-collapsed="onSelectCollapsed" > {% block sw_single_select_base %} {% block sw_single_select_base_selection %} <template #sw-select-selection="{ identification, error, disabled, size, setFocusClass, removeFocusClass }"> {% block sw_single_select_base_selection_slot %} <div class="sw-single-select__selection"> {% block sw_single_select_single_selection_inner %} {% block sw_single_select_single_selection_inner_label %} <div v-if="!isExpanded" class="sw-single-select__selection-text" :class="selectionTextClasses" > <template v-if="singleSelection"> <slot name="selection-label-property" v-bind="{ item: singleSelection, labelProperty, valueProperty, searchTerm, getKey }" > {{ getKey(singleSelection, labelProperty) }} </slot> </template> <template v-else> {{ placeholder }} </template> </div> {% endblock %} {% block sw_single_select_single_selection_inner_input %} <input v-show="isExpanded" ref="swSelectInput" v-model="searchTerm" class="sw-single-select__selection-input" :class="inputClasses" type="text" :aria-label="label" :placeholder="placeholder" :disabled="disableSearchFunction" @input="onInputSearchTerm" > {% endblock %} {% endblock %} </div> {% endblock %} </template> {% endblock %} {% block sw_single_select_base_results %} <template #results-list> {% block sw_single_select_base_results_slot %} <sw-select-result-list ref="resultsList" :popover-classes="popoverClasses" :options="visibleResults" :is-loading="isLoading" :empty-message="$tc('global.sw-single-select.messageNoResults', { term: searchTerm }, 0)" :focus-el="$refs.swSelectInput" @paginate="$emit('paginate')" @item-select="setValue" > {% block sw_single_select_base_results_list %} {% block sw_single_select_base_results_list_before %} <template #before-item-list> <slot name="before-item-list"></slot> </template> {% endblock %} {% block sw_single_select_base_results_list_result %} <template #result-item="{ item, index }"> <slot name="result-item" v-bind="{ item, index, labelProperty, searchTerm, highlightSearchTerm, isSelected, setValue, getKey }" > <sw-select-result :disabled="item.disabled" :class="'sw-select-option--' + item.value" :selected="isSelected(item)" v-bind="{ item, index }" @item-select="setValue" > {% block sw_single_select_base_results_list_result_label %} <slot name="result-label-property" v-bind="{ item, index, labelProperty, valueProperty, searchTerm, highlightSearchTerm, getKey }" > <sw-highlight-text v-if="highlightSearchTerm && !isSelected(item)" :text="getKey(item, labelProperty)" :search-term="searchTerm" /> <template v-else> {{ getKey(item, labelProperty) }} </template> </slot> {% endblock %} </sw-select-result> </slot> </template> {% endblock %} {% block sw_single_select_base_results_list_after %} <template #after-item-list> <slot name="after-item-list"></slot> </template> {% endblock %} {% endblock %} </sw-select-result-list> {% endblock %} </template> {% endblock %} {% endblock %} <template #label> <slot name="label"></slot> </template> <template #hint> <slot name="hint"></slot> </template> </sw-select-base> {% endblock %}`,{Component:a,Mixin:n}=Shopware,{debounce:c,get:o}=Shopware.Utils;a.register("sw-single-select",{template:r,inject:["feature"],emits:["update:value","item-selected","on-open-change","before-selection-clear","search","paginate"],mixins:[n.getByName("remove-api-error")],props:{options:{required:!0,type:Array},value:{required:!0},isLoading:{type:Boolean,required:!1,default:!1},highlightSearchTerm:{type:Boolean,required:!1,default:!0},placeholder:{type:String,required:!1,default:""},labelProperty:{type:String,required:!1,default:"label"},valueProperty:{type:String,required:!1,default:"value"},popoverClasses:{type:Array,required:!1,default(){return[]}},searchFunction:{type:Function,required:!1,default({options:e,labelProperty:t,searchTerm:s}){return e.filter(i=>{const l=this.getKey(i,t);return l?l.toLowerCase().includes(s.toLowerCase()):!1})}},disableSearchFunction:{type:Boolean,required:!1,default:!1},label:{type:String,required:!1,default:void 0}},data(){return{searchTerm:"",isExpanded:!1,results:this.options,itemRecentlySelected:!1}},computed:{currentValue:{get(){return this.value},set(e){this.$emit("update:value",e)}},inputClasses(){return{"is--expanded":this.isExpanded}},selectionTextClasses(){return{"is--placeholder":!this.singleSelection}},singleSelection:{get(){return this.options.find(e=>this.getKey(e,this.valueProperty)===this.currentValue)},set(e){this.currentValue=this.getKey(e,this.valueProperty),this.$emit("item-selected",e)}},visibleResults(){return this.results.filter(e=>!e.hidden)}},methods:{isSelected(e){return this.getKey(e,this.valueProperty)===this.value},onSelectExpanded(){this.isExpanded=!0,this.$emit("on-open-change",!0),this.results=this.options,this.searchTerm=this.tryGetSearchText(this.singleSelection),this.$nextTick(()=>{this.resetActiveItem(),this.$refs.swSelectInput.select(),this.$refs.swSelectInput.focus()})},tryGetSearchText(e){return this.getKey(e,this.labelProperty,"")},onSelectCollapsed(){this.searchTerm===""&&!this.itemRecentlySelected&&(this.$emit("before-selection-clear",this.singleSelection,this.value),this.currentValue=null),this.$refs.swSelectInput.blur(),this.searchTerm="",this.itemRecentlySelected=!1,this.$emit("on-open-change",!1),this.isExpanded=!1},closeResultList(){this.$refs.selectBase.collapse()},setValue(e){this.itemRecentlySelected=!0,this.singleSelection=e,this.closeResultList()},resetActiveItem(e=0){this.$refs.resultsList&&(this.singleSelection&&(e=1),this.$refs.resultsList.setActiveItemIndex(e))},onInputSearchTerm(){this.debouncedSearch()},debouncedSearch:c(function(){this.search()},100),search(){this.$emit("search",this.searchTerm),!this.disableSearchFunction&&(this.results=this.searchFunction({options:this.options,labelProperty:this.labelProperty,valueProperty:this.valueProperty,searchTerm:this.searchTerm}),this.$nextTick(()=>{this.resetActiveItem()}))},getKey(e,t,s){return o(e,t,s)},clearSelection(){this.setValue(null)}}});
