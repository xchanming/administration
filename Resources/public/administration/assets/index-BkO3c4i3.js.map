{"version":3,"file":"index-BkO3c4i3.js","sources":["../../../app/administration/src/module/sw-order/view/sw-order-create-base/sw-order-create-base.html.twig","../../../app/administration/src/module/sw-order/view/sw-order-create-base/index.js"],"sourcesContent":["<!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n{% block sw_order_create %}\n<sw-card-view>\n    <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n    {% block sw_order_create_address_modal %}\n    <sw-order-create-address-modal\n        v-if=\"showAddressModal\"\n        :address=\"address\"\n        :add-address-modal-title=\"addAddressModalTitle\"\n        :edit-address-modal-title=\"editAddressModalTitle\"\n        :customer=\"customer\"\n        :cart=\"cart\"\n        @close-modal=\"closeModal\"\n        @set-customer-address=\"setCustomerAddress\"\n    />\n    {% endblock %}\n\n    <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n    {% block sw_order_create_promotion_modal %}\n    <sw-order-create-promotion-modal\n        v-if=\"showPromotionModal\"\n        :is-loading=\"isLoading\"\n        :currency=\"currency\"\n        :sales-channel-id=\"customer.salesChannelId\"\n        @close=\"onClosePromotionModal\"\n        @save=\"onSavePromotionModal\"\n    />\n    {% endblock %}\n\n    <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n    {% block sw_order_create_details %}\n    <sw-card\n        :title=\"$tc('sw-order.createBase.labelDetailsCard')\"\n        :is-loading=\"isLoadingDetail\"\n        position-identifier=\"sw-order-create-base-details\"\n        class=\"sw-order-create__card\"\n    >\n        <template #grid>\n            <sw-container\n                type=\"row\"\n                class=\"sw-order-user-card\"\n            >\n                <sw-card-section>\n                    <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n                    {% block sw_order_create_details_header %}\n                    <sw-order-create-details-header\n                        :customer=\"customer\"\n                        :order-date=\"orderDate\"\n                        :cart-price=\"cartPrice\"\n                        :currency=\"currency\"\n                        @on-select-existing-customer=\"onSelectExistingCustomer\"\n                    />\n                    {% endblock %}\n                    <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n                    {% block sw_order_create_details_body %}\n                    <sw-order-create-details-body\n                        :customer=\"customer\"\n                        :is-customer-active=\"isCustomerActive\"\n                        @on-edit-billing-address=\"onEditBillingAddress\"\n                        @on-edit-shipping-address=\"onEditShippingAddress\"\n                    />\n                    {% endblock %}\n                </sw-card-section>\n                <sw-card-section\n                    secondary\n                    divider=\"top\"\n                >\n                    <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n                    {% block sw_order_create_details_footer %}\n                    <sw-order-create-details-footer\n                        :customer=\"customer\"\n                        :is-customer-active=\"isCustomerActive\"\n                        :cart=\"cart\"\n                        @loading-change=\"updateLoading\"\n                    />\n                    {% endblock %}\n                </sw-card-section>\n            </sw-container>\n        </template>\n    </sw-card>\n    {% endblock %}\n\n    <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n    {% block sw_order_create_base_line_items_card %}\n    <sw-card\n        :title=\"$tc('sw-order.createBase.cardTitleLineItems')\"\n        :is-loading=\"isLoading\"\n        position-identifier=\"sw-order-create-base-line-items\"\n        class=\"sw-order-create__card sw-order-create-base__line-item-grid-card\"\n    >\n        <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n        {% block sw_order_create_base_line_items_card_rows %}\n        <template #grid>\n            <sw-container type=\"row\">\n                <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n                {% block sw_order_create_base_line_items_grid %}\n                <sw-order-line-items-grid-sales-channel\n                    ref=\"sw-order-line-item-grid-sales-channel\"\n                    :cart=\"cart\"\n                    :currency=\"currency\"\n                    :sales-channel-id=\"salesChannelId\"\n                    :is-loading=\"isLoading\"\n                    :is-customer-active=\"isCustomerActive\"\n                    editable\n                    @on-save-item=\"onSaveItem\"\n                    @on-remove-items=\"onRemoveItems\"\n                />\n                {% endblock %}\n\n                <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n                {% block sw_order_create_base_line_items_summary %}\n                <sw-card-section\n                    v-show=\"cartLineItems.length\"\n                    divider=\"top\"\n                    secondary\n                    slim\n                >\n                    <sw-container\n                        columns=\"1fr 1fr\"\n                        class=\"sw-order-create-summary\"\n                    >\n                        <div>\n                            <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n                            {% block sw_order_create_base_line_items_switch_promotions %}\n                            <sw-switch-field\n                                v-model:value=\"disabledAutoPromotionVisibility\"\n                                class=\"sw-order-create-summary__switch-promotions\"\n                                :label=\"$tc('sw-order.promotionModal.labelTitle')\"\n                            />\n                            {% endblock %}\n                            <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n                            {% block sw_order_create_base_line_items_voucher_field %}\n                            <sw-order-promotion-tag-field\n                                v-model:value=\"promotionCodeTags\"\n                                :disabled=\"!hasLineItem\"\n                                :currency=\"currency\"\n                                :label=\"$tc('sw-order.createBase.labelAddPromotion')\"\n                                :placeholder=\"$tc('sw-order.createBase.placeholderAddPromotion')\"\n                                :error=\"promotionError\"\n                                @on-remove-code=\"onRemoveExistingCode\"\n                            />\n                            {% endblock %}\n                        </div>\n                        <sw-description-list\n                            grid=\"1fr 1fr\"\n                            class=\"sw-order-create-summary__data\"\n                        >\n                            <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n                            {% block sw_order_create_base_line_items_summary_entries %}\n                            <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n                            {% block sw_order_create_base_line_items_summary_amount %}\n                            <dt>{{ $tc('sw-order.createBase.summaryLabelAmount') }}</dt>\n                            <dd>{{ currencyFilter(cartPrice ? cartPrice.positionPrice : 0, currency.isoCode) }}</dd>\n                            {% endblock %}\n\n                            <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n                            {% block sw_order_create_base_line_items_summary_shipping_cost %}\n                            <template v-if=\"cartDelivery\">\n                                <dt>{{ $tc('sw-order.createBase.summaryLabelShippingCosts') }}</dt>\n                                <dd>\n                                    <sw-order-saveable-field\n                                        v-tooltip=\"{\n                                            showDelay: 300,\n                                            message: shippingCostsDetail,\n                                            disabled: taxStatus === 'tax-free'\n                                        }\"\n                                        type=\"number\"\n                                        editable\n                                        :value=\"cartDelivery.shippingCosts.totalPrice\"\n                                        @value-change=\"onShippingChargeEdited\"\n                                        @update:value=\"onShippingChargeUpdated\"\n                                    >\n                                        {{ currencyFilter(cartDelivery.shippingCosts.totalPrice, currency.isoCode) }}\n                                    </sw-order-saveable-field>\n                                </dd>\n                            </template>\n                            <template\n                                v-for=\"(_, index) in cartDeliveryDiscounts\"\n                                :key=\"index\"\n                            >\n                                <dt>\n                                    {{ $tc('sw-order.createBase.discountLabelShippingCosts') }}\n                                </dt>\n                                <dd>\n                                    {{ currencyFilter(delivery.shippingCosts.totalPrice, currency.isoCode) }}\n                                </dd>\n                            </template>\n                            {% endblock %}\n\n                            <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n                            {% block sw_order_create_base_line_items_summary_amount_without_tax %}\n                            <template v-if=\"taxStatus !== 'tax-free'\">\n                                <dt><strong>{{ $tc('sw-order.createBase.summaryLabelAmountWithoutTaxes') }}</strong></dt>\n                                <dd><strong>{{ currencyFilter(cartPrice ? cartPrice.netPrice : 0, currency.isoCode) }}</strong></dd>\n                            </template>\n                            {% endblock %}\n\n                            <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n                            {% block sw_order_create_base_line_items_summary_taxes %}\n                            <template v-if=\"taxStatus !== 'tax-free'\">\n                                <template\n                                    v-for=\"(calculatedTax, index) in filteredCalculatedTaxes\"\n                                    :key=\"index\"\n                                >\n                                    <dt>\n                                        {{ $tc('sw-order.createBase.summaryLabelTaxes', 1, { taxRate: calculatedTax.taxRate }) }}\n                                    </dt>\n                                    <dd>\n                                        {{ currencyFilter(calculatedTax.tax, currency.isoCode) }}\n                                    </dd>\n                                </template>\n                            </template>\n                            {% endblock %}\n\n                            <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n                            {% block sw_order_create_base_line_items_summary_amount_total %}\n                            <template v-if=\"taxStatus !== 'tax-free'\">\n                                <dt><strong>{{ $tc('sw-order.createBase.summaryLabelAmountTotal') }}</strong></dt>\n                                <dd><strong>{{ currencyFilter(orderTotal, currency.isoCode) }}</strong></dd>\n                                <template v-if=\"displayRounded\">\n                                    <dt><strong>{{ $tc('sw-order.createBase.summaryLabelAmountTotalRounded') }}</strong></dt>\n                                    <dd><strong>{{ currencyFilter(cart.price.totalPrice, currency.isoCode) }}</strong></dd>\n                                </template>\n                            </template>\n                            {% endblock %}\n\n                            <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n                            {% block sw_order_create_base_line_items_summary_amount_free_tax %}\n                            <template v-if=\"taxStatus === 'tax-free'\">\n                                <dt><strong>{{ $tc('sw-order.detailBase.summaryLabelAmount') }}</strong></dt>\n                                <dd><strong>{{ currencyFilter(cart.price.totalPrice, currency.isoCode) }}</strong></dd>\n                            </template>\n                            {% endblock %}\n                            {% endblock %}\n                        </sw-description-list>\n                    </sw-container>\n                </sw-card-section>\n                {% endblock %}\n            </sw-container>\n        </template>\n        {% endblock %}\n    </sw-card>\n    {% endblock %}\n</sw-card-view>\n{% endblock %}\n","import template from './sw-order-create-base.html.twig';\n\n/**\n * @package checkout\n */\n\nconst { Component, State, Utils, Data, Service, Mixin } = Cicada;\nconst { Criteria } = Data;\nconst { get, format, array } = Utils;\nconst { mapGetters } = Component.getComponentHelper();\n\n// eslint-disable-next-line sw-deprecation-rules/private-feature-declarations\nexport default {\n    template,\n\n    compatConfig: Cicada.compatConfig,\n\n    inject: ['feature'],\n\n    emits: ['error'],\n\n    mixins: [\n        Mixin.getByName('notification'),\n    ],\n\n    data() {\n        return {\n            isLoading: false,\n            isLoadingDetail: false,\n            address: {\n                data: null,\n            },\n            showAddressModal: false,\n            addAddressModalTitle: null,\n            editAddressModalTitle: null,\n            promotionError: null,\n            showPromotionModal: false,\n            disabledAutoPromotionChecked: false,\n        };\n    },\n\n    computed: {\n        ...mapGetters('swOrder', [\n            'cartErrors',\n        ]),\n\n        customerRepository() {\n            return Service('repositoryFactory').create('customer');\n        },\n\n        customerAddressRepository() {\n            return Service('repositoryFactory').create('customer_address');\n        },\n\n        currencyRepository() {\n            return Service('repositoryFactory').create('currency');\n        },\n\n        customerAddressCriteria() {\n            const criteria = new Criteria(1, 25);\n\n            criteria.addAssociation('salutation');\n            criteria.addAssociation('country');\n            criteria.addAssociation('countryState');\n\n            return criteria;\n        },\n\n        defaultCriteria() {\n            const criteria = new Criteria(1, 25);\n            criteria\n                .addAssociation('addresses')\n                .addAssociation('group')\n                .addAssociation('salutation')\n                .addAssociation('salesChannel')\n                .addAssociation('lastPaymentMethod')\n                .addAssociation('defaultBillingAddress.country')\n                .addAssociation('defaultBillingAddress.countryState')\n                .addAssociation('defaultBillingAddress.salutation')\n                .addAssociation('defaultShippingAddress.country')\n                .addAssociation('defaultShippingAddress.countryState')\n                .addAssociation('defaultShippingAddress.salutation')\n                .addAssociation('tags');\n            return criteria;\n        },\n\n        orderDate() {\n            const today = new Date();\n            return format.date(today);\n        },\n\n        customer() {\n            return State.get('swOrder').customer;\n        },\n\n        salesChannelId() {\n            return this.customer?.salesChannelId ?? '';\n        },\n\n        isCustomerActive() {\n            return State.getters['swOrder/isCustomerActive'];\n        },\n\n        cart() {\n            return State.get('swOrder').cart;\n        },\n\n        cartLineItems() {\n            return this.cart.lineItems;\n        },\n\n        cartAutomaticPromotionItems() {\n            return this.cartLineItems.filter((item) => item.type === 'promotion' && item.payload.code === '');\n        },\n\n        cartPrice() {\n            return this.cart.price;\n        },\n\n        currency() {\n            return State.get('swOrder').context.currency;\n        },\n\n        cartDelivery() {\n            return get(this.cart, 'deliveries[0]', null);\n        },\n\n        promotionCodeTags: {\n            get() {\n                return State.get('swOrder').promotionCodes;\n            },\n\n            set(promotionCodeTags) {\n                State.commit('swOrder/setPromotionCodes', promotionCodeTags);\n            },\n        },\n\n        cartDeliveryDiscounts() {\n            return array.slice(this.cart.deliveries, 1) || [];\n        },\n\n        filteredCalculatedTaxes() {\n            if (!this.cartPrice || !this.cartPrice.calculatedTaxes) {\n                return [];\n            }\n\n            return this.sortByTaxRate(this.cartPrice.calculatedTaxes).filter((price) => price.tax !== 0);\n        },\n\n        promotionCodeLineItems() {\n            return this.cartLineItems.filter((item) => item.type === 'promotion' && get(item, 'payload.code'));\n        },\n\n        hasLineItem() {\n            return this.cartLineItems.filter((item) => item.hasOwnProperty('id')).length > 0;\n        },\n\n        shippingCostsDetail() {\n            if (!this.cartDelivery) {\n                return null;\n            }\n\n            const calcTaxes = this.sortByTaxRate(this.cartDelivery.shippingCosts.calculatedTaxes);\n            const decorateCalcTaxes = calcTaxes.map((item) => {\n                return this.$tc('sw-order.createBase.shippingCostsTax', 0, {\n                    taxRate: item.taxRate,\n                    tax: format.currency(item.tax, this.currency.isoCode),\n                });\n            });\n\n            return `${this.$tc('sw-order.createBase.tax')}<br>${decorateCalcTaxes.join('<br>')}`;\n        },\n\n        disabledAutoPromotionVisibility: {\n            get() {\n                return this.disabledAutoPromotionChecked;\n            },\n            set(visibility) {\n                this.switchAutomaticPromotions(visibility);\n            },\n        },\n\n        taxStatus() {\n            return get(this.cart, 'price.taxStatus', '');\n        },\n\n        displayRounded() {\n            if (!this.cartPrice) {\n                return false;\n            }\n            return this.cartPrice.rawTotal !== this.cartPrice.totalPrice;\n        },\n\n        orderTotal() {\n            if (!this.cartPrice) {\n                return 0;\n            }\n\n            if (this.displayRounded) {\n                return this.cartPrice.rawTotal;\n            }\n\n            return this.cartPrice.totalPrice;\n        },\n\n        currencyFilter() {\n            return Cicada.Filter.getByName('currency');\n        },\n    },\n\n    watch: {\n        cart: {\n            deep: true,\n            handler: 'updatePromotionList',\n        },\n\n        promotionCodeTags: {\n            handler: 'handlePromotionCodeTags',\n        },\n\n        cartErrors: {\n            handler(newValue) {\n                if (!newValue || newValue.length === 0) {\n                    return;\n                }\n\n                Object.values(newValue).forEach((value) => {\n                    switch (value.level) {\n                        case 0: {\n                            this.createNotificationSuccess({\n                                message: value.message,\n                            });\n                            break;\n                        }\n\n                        case 10: {\n                            this.createNotificationWarning({\n                                message: value.message,\n                            });\n                            break;\n                        }\n\n                        default: {\n                            this.createNotificationError({\n                                message: value.message,\n                            });\n                            break;\n                        }\n                    }\n                });\n            },\n        },\n    },\n\n    created() {\n        this.createdComponent();\n    },\n\n    methods: {\n        createdComponent() {\n            const { customer } = this.$route.params;\n\n            if (!customer) {\n                return;\n            }\n\n            State.commit('swOrder/setCustomer', customer);\n            this.onSelectExistingCustomer(customer.id);\n        },\n\n        async createCart(salesChannelId) {\n            await State.dispatch('swOrder/createCart', { salesChannelId });\n        },\n\n        async loadCart() {\n            if (!this.cart.token || this.cart.lineItems.length === 0) return;\n            this.updateLoading(true);\n\n            State.dispatch('swOrder/getCart', {\n                salesChannelId: this.customer.salesChannelId,\n                contextToken: this.cart.token,\n            }).finally(() => this.updateLoading(false));\n        },\n\n        async onSelectExistingCustomer(customerId) {\n            this.isLoadingDetail = true;\n\n            try {\n                const customer = await this.customerRepository.get(customerId, Cicada.Context.api, this.defaultCriteria);\n\n                if (!this.cart.token) {\n                    await this.createCart(customer.salesChannelId);\n                }\n\n                this.setCustomer(customer);\n                this.setCurrency(customer);\n\n                await this.updateCustomerContext();\n            } catch {\n                this.createNotificationError({\n                    message: this.$tc('sw-order.create.messageSwitchCustomerError'),\n                });\n            } finally {\n                this.isLoadingDetail = false;\n            }\n        },\n\n        async updateCustomerContext() {\n            await State.dispatch('swOrder/updateCustomerContext', {\n                customerId: this.customer.id,\n                salesChannelId: this.customer.salesChannelId,\n                contextToken: this.cart.token,\n            });\n        },\n\n        setCustomer(customer) {\n            State.dispatch('swOrder/selectExistingCustomer', { customer });\n        },\n\n        setCurrency(customer) {\n            this.currencyRepository.get(customer.salesChannel.currencyId).then((currency) => {\n                State.commit('swOrder/setCurrency', currency);\n            });\n        },\n\n        onEditBillingAddress() {\n            const contextId = 'billingAddressId';\n            const contextDataKey = 'billingAddress';\n            const contextDataDefaultId = 'defaultBillingAddressId';\n            const data = this.customer[contextDataKey] ? this.customer[contextDataKey] : this.customer.defaultBillingAddress;\n\n            this.addAddressModalTitle = this.$tc('sw-order.addressSelection.modalTitleAddBillingAddress');\n            this.editAddressModalTitle = this.$tc('sw-order.addressSelection.modalTitleEditBillingAddress');\n            this.address = {\n                contextId,\n                contextDataKey,\n                contextDataDefaultId,\n                data,\n            };\n            this.showAddressModal = true;\n        },\n\n        onEditShippingAddress() {\n            const contextId = 'shippingAddressId';\n            const contextDataKey = 'shippingAddress';\n            const contextDataDefaultId = 'defaultShippingAddressId';\n            const data = this.customer[contextDataKey]\n                ? this.customer[contextDataKey]\n                : this.customer.defaultShippingAddress;\n\n            this.addAddressModalTitle = this.$tc('sw-order.addressSelection.modalTitleAddShippingAddress');\n            this.editAddressModalTitle = this.$tc('sw-order.addressSelection.modalTitleEditShippingAddress');\n            this.address = {\n                contextId,\n                contextDataKey,\n                contextDataDefaultId,\n                data,\n            };\n            this.showAddressModal = true;\n        },\n\n        setCustomerAddress({ contextId, data }) {\n            this.customer[contextId] = data.id;\n            const availableCustomerAddresses = [\n                {\n                    id: this.customer.billingAddressId,\n                    dataKey: 'billingAddress',\n                },\n                {\n                    id: this.customer.shippingAddressId,\n                    dataKey: 'shippingAddress',\n                },\n                {\n                    id: this.customer.defaultBillingAddressId,\n                    dataKey: 'defaultBillingAddress',\n                },\n                {\n                    id: this.customer.defaultShippingAddressId,\n                    dataKey: 'defaultShippingAddress',\n                },\n            ];\n\n            this.customerAddressRepository\n                .get(data.id, Cicada.Context.api, this.customerAddressCriteria)\n                .then((updatedAddress) => {\n                    availableCustomerAddresses.forEach((customerAddress) => {\n                        if (customerAddress.id === data.id) {\n                            this.customer[customerAddress.dataKey] = updatedAddress;\n                        }\n                    });\n\n                    this.setCustomer(this.customer);\n                });\n        },\n\n        closeModal() {\n            this.showAddressModal = false;\n            this.address.data = null;\n        },\n\n        save() {\n            this.closeModal();\n        },\n\n        onSaveItem(item) {\n            this.updateLoading(true);\n\n            State.dispatch('swOrder/saveLineItem', {\n                salesChannelId: this.customer.salesChannelId,\n                contextToken: this.cart.token,\n                item,\n            }).finally(() => this.updateLoading(false));\n        },\n\n        onRemoveItems(lineItemKeys) {\n            this.updateLoading(true);\n\n            State.dispatch('swOrder/removeLineItems', {\n                salesChannelId: this.customer.salesChannelId,\n                contextToken: this.cart.token,\n                lineItemKeys: lineItemKeys,\n            })\n                .then(() => {\n                    // Remove promotion code tag if corresponding line item removed\n                    lineItemKeys.forEach((key) => {\n                        const removedTag = this.promotionCodeTags.find((tag) => tag.discountId === key);\n                        if (removedTag) {\n                            this.promotionCodeTags = this.promotionCodeTags.filter((item) => {\n                                return item.discountId !== removedTag.discountId;\n                            });\n                        }\n                    });\n                })\n                .finally(() => this.updateLoading(false));\n        },\n\n        updateLoading(loadingValue) {\n            this.isLoading = loadingValue;\n        },\n\n        sortByTaxRate(price) {\n            return price.sort((prev, current) => {\n                return prev.taxRate - current.taxRate;\n            });\n        },\n\n        onSubmitCode(code) {\n            this.updateLoading(true);\n\n            State.dispatch('swOrder/addPromotionCode', {\n                salesChannelId: this.customer.salesChannelId,\n                contextToken: this.cart.token,\n                code,\n            }).finally(() => this.updateLoading(false));\n        },\n\n        onRemoveExistingCode(item) {\n            if (item.isInvalid) {\n                this.promotionCodeTags = this.promotionCodeTags.filter((tag) => tag.code !== item.code);\n            } else {\n                this.onRemoveItems([item.discountId]);\n            }\n        },\n\n        updatePromotionList() {\n            // Update data and isInvalid flag for each item in promotionCodeTags\n            this.promotionCodeTags = this.promotionCodeTags.map((tag) => {\n                const matchedItem = this.promotionCodeLineItems.find((lineItem) => lineItem.payload.code === tag.code);\n\n                if (matchedItem) {\n                    return { ...matchedItem.payload, isInvalid: false };\n                }\n\n                return { ...tag, isInvalid: true };\n            });\n\n            // Add new items from promotionCodeLineItems which promotionCodeTags doesn't contain\n            this.promotionCodeLineItems.forEach((lineItem) => {\n                const matchedItem = this.promotionCodeTags.find((tag) => tag.code === lineItem.payload.code);\n\n                if (!matchedItem) {\n                    this.promotionCodeTags = [\n                        ...this.promotionCodeTags,\n                        { ...lineItem.payload, isInvalid: false },\n                    ];\n                }\n            });\n        },\n\n        handlePromotionCodeTags(newValue, oldValue) {\n            this.promotionError = null;\n\n            if (newValue.length < oldValue.length) {\n                return;\n            }\n\n            const promotionCodeLength = this.promotionCodeTags.length;\n            const latestTag = this.promotionCodeTags[promotionCodeLength - 1];\n\n            if (newValue.length > oldValue.length) {\n                this.onSubmitCode(latestTag.code);\n            }\n\n            if (promotionCodeLength > 0 && latestTag.isInvalid) {\n                this.promotionError = {\n                    detail: this.$tc('sw-order.createBase.textInvalidPromotionCode'),\n                };\n            }\n        },\n\n        onShippingChargeEdited() {\n            this.updateLoading(true);\n\n            State.dispatch('swOrder/modifyShippingCosts', {\n                salesChannelId: this.customer.salesChannelId,\n                contextToken: this.cart.token,\n                shippingCosts: this.cartDelivery.shippingCosts,\n            })\n                .catch((error) => {\n                    this.$emit('error', error);\n                })\n                .finally(() => {\n                    this.updateLoading(false);\n                });\n        },\n\n        switchAutomaticPromotions(visibility) {\n            this.disabledAutoPromotionChecked = visibility;\n            this.showPromotionModal = visibility;\n            if (!this.showPromotionModal) {\n                this.enableAutomaticPromotions();\n            }\n        },\n\n        enableAutomaticPromotions() {\n            this.updateLoading(true);\n            const additionalParams = {\n                salesChannelId: this.customer.salesChannelId,\n            };\n            Service('cartStoreService')\n                .enableAutomaticPromotions(this.cart.token, additionalParams)\n                .then(() => {\n                    this.loadCart();\n                });\n        },\n\n        onClosePromotionModal() {\n            this.showPromotionModal = false;\n            this.disabledAutoPromotionChecked = false;\n        },\n\n        onSavePromotionModal() {\n            this.showPromotionModal = false;\n            this.disabledAutoPromotionChecked = true;\n\n            this.loadCart();\n        },\n\n        onShippingChargeUpdated(amount) {\n            const positiveAmount = Math.abs(amount);\n            this.cartDelivery.shippingCosts.unitPrice = positiveAmount;\n            this.cartDelivery.shippingCosts.totalPrice = positiveAmount;\n        },\n    },\n};\n"],"names":["template","Component","State","Utils","Data","Service","Mixin","Criteria","get","format","array","mapGetters","index","criteria","today","_a","item","promotionCodeTags","price","decorateCalcTaxes","visibility","newValue","value","customer","salesChannelId","customerId","currency","contextId","contextDataKey","contextDataDefaultId","data","availableCustomerAddresses","updatedAddress","customerAddress","lineItemKeys","key","removedTag","tag","loadingValue","prev","current","code","matchedItem","lineItem","oldValue","promotionCodeLength","latestTag","error","additionalParams","amount","positiveAmount"],"mappings":"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"}