const c=`{% block sw_duplicated_media_v2 %} <sw-modal v-if="showModal" class="sw-duplicated-media-v2" :title="$tc('global.sw-duplicated-media-v2.titleModal')" @modal-close="skipAll" > {% block sw_duplicated_media_v2_body %} {% block sw_duplicated_media_v2_body_description %} <p class="sw-duplicated-media-v2__description"> {{ $tc('global.sw-duplicated-media-v2.description', 1, { fileName: \`\${currentTask.fileName}.\${currentTask.extension}\` }) }} </p> {% endblock %} {% block sw_duplicated_media_v2_body_preview %} <sw-container class="sw-duplicated-media-v2__preview" rows="20px 1fr" columns="1fr 100px 1fr" align="center" > {% block sw_duplicated_media_v2_body_preview_label_old_file %} <label class="sw-duplicated-media-v2__preview_label"> {{ $tc('global.sw-duplicated-media-v2.labelNewFile') }} </label> {% endblock %} <div class="sw-duplicated-media-v2__spacer"></div> {% block sw_duplicated_media_v2_body_preview_label_new_file %} <label class="sw-duplicated-media-v2__preview_label"> {{ $tc('global.sw-duplicated-media-v2.labelOldFile') }} </label> {% endblock %} {% block sw_duplicated_media_v2_body_preview_new_media %} <div class="sw-duplicated-media-v2__target-upload"> {% block sw_media_duplicated_media_target_preview %} <div class="sw-duplicated-media-v2__target-preview"> <sw-media-preview-v2 :source="currentTask.src" /> </div> {% endblock %} {% block sw_media_duplicated_media_target_name %} <span v-if="selectedOption !== 'Rename'" key="sw-duplicated-media-v2__target-label-fileName" class="sw-duplicated-media-v2__target-label" > {{ \`\${currentTask.fileName}.\${currentTask.extension}\` }} </span> <span v-else key="sw-duplicated-media-v2__target-label-suggestedName" class="sw-duplicated-media-v2__target-label" > {{ \`\${suggestedName}.\${currentTask.extension}\` }} </span> {% endblock %} {% block sw_media_duplicated_media_target_details %} <span class="sw-duplicated-media-v2__target-details">{{ currentTaskDetails }}</span> {% endblock %} </div> {% endblock %} {% block sw_duplicated_media_v2_body_preview_separator %} <sw-icon class="sw-duplicated-media-v2__preview-separator" name="regular-long-arrow-right" /> {% endblock %} {% block sw_duplicated_media_v2_body_preview_old_media %} <sw-media-media-item v-if="existingMedia" :item="existingMedia" :selected="false" :show-selection-indicator="false" :is-list="true" :editable="false" :show-context-menu-button="false" /> {% endblock %} </sw-container> {% endblock %} {% block sw_duplicated_media_v2_body_options %} <sw-radio-field v-model:value="selectedOption" class="sw-duplicated-media-v2__options" :options="options" /> {% endblock %} {% endblock %} {% block sw_duplicated_media_v2_footer %} <template #modal-footer> {% block sw_duplicated_media_v2_save_selection %} <sw-checkbox-field v-if="!isLoading && hasAdditionalErrors" v-model:value="shouldSaveSelection" class="sw-duplicated-media-v2__additional-error-count" :label="$tc('global.sw-duplicated-media-v2.labelSaveSelection', additionalErrorCount)" /> {% endblock %} {% block sw_duplicated_media_v2_cancel_button %} <sw-button size="small" :disabled="isLoading" @click="skipCurrentFile" > {{ $tc('global.default.cancel') }} </sw-button> {% endblock %} {% block sw_duplicated_media_v2_upload_button %} <sw-button class="sw-duplicated-media-v2__upload" :disabled="isLoading" size="small" variant="primary" @click="solveDuplicate" > {{ buttonLabel }} </sw-button> {% endblock %} </template> {% endblock %} </sw-modal> {% endblock %}`,{Component:p,Context:t,Filter:o}=Cicada,{Criteria:a}=Cicada.Data,r="sw-duplicate-media-resolve-option",n="sw-duplicate-media-resolve-save-selection";p.register("sw-duplicated-media-v2",{template:c,compatConfig:Cicada.compatConfig,inject:["repositoryFactory","mediaService"],data(){return{isLoading:!1,shouldSaveSelection:!1,selectedOption:"Replace",suggestedName:"",existingMedia:null,targetEntity:null,failedUploadTasks:[],postponedFailedUploads:[]}},computed:{mediaRepository(){return this.repositoryFactory.create("media")},additionalErrorCount(){return this.failedUploadTasks.length-1},hasAdditionalErrors(){return this.additionalErrorCount>0},currentTask(){return this.failedUploadTasks[0]},buttonLabel(){return this.$tc(`global.sw-duplicated-media-v2.button${this.selectedOption}`)},dateFilter(){return o.getByName("date")},fileSizeFilter(){return o.getByName("fileSize")},currentTaskDetails(){if(!this.currentTask)return"";const e=[this.dateFilter(new Date,{month:"long"})];return this.currentTask.src instanceof File&&e.push(this.fileSizeFilter(this.currentTask.src.size)),e.join(", ")},showModal(){return this.failedUploadTasks.length>0&&!this.isWorkingOnMultipleTasks},isWorkingOnMultipleTasks(){return this.isLoading&&this.shouldSaveSelection},options(){return[{value:"Replace",name:this.$tc("global.sw-duplicated-media-v2.labelOptionReplace")},{value:"Rename",name:this.$tc("global.sw-duplicated-media-v2.labelOptionRename")},{value:"Keep",name:this.$tc("global.sw-duplicated-media-v2.labelOptionKeep")},{value:"Skip",name:this.$tc("global.sw-duplicated-media-v2.labelOptionSkip")}]}},watch:{currentTask(){this.updatePreviewData()},showModal(e){if(e){this.loadDefaultOption();return}this.saveDefaultOption()},isLoading(e){e||this.failedUploadTasks.push(...this.postponedFailedUploads.splice(0,this.postponedFailedUploads.length))}},created(){this.createdComponent()},beforeUnmount(){this.beforeDestroyComponent()},methods:{createdComponent(){this.loadDefaultOption(),this.updatePreviewData(),this.mediaService.addDefaultListener(this.handleMediaServiceUploadEvent)},beforeDestroyComponent(){this.mediaService.removeDefaultListener(this.handleMediaServiceUploadEvent)},loadDefaultOption(){this.shouldSaveSelection=localStorage.getItem(n)||!1,this.shouldSaveSelection&&(this.defaultOption=localStorage.getItem(r)||"Replace"),this.selectedOption=this.defaultOption||"Replace"},saveDefaultOption(){localStorage.setItem(n,this.shouldSaveSelection),this.shouldSaveSelection&&localStorage.setItem(r,this.defaultOption)},handleMediaServiceUploadEvent({action:e,payload:i}){if(e==="media-upload-fail"&&this.isDuplicatedNameError(i.error)){if(this.isLoading){this.postponedFailedUploads.push(i);return}this.failedUploadTasks.push(i)}},isDuplicatedNameError(e){return e.response.data.errors.some(i=>i.code==="CONTENT__MEDIA_DUPLICATED_FILE_NAME")},async updatePreviewData(){if(!this.currentTask){this.existingMedia=null,this.suggestedName="";return}const e=new a(1,1).addFilter(a.multi("AND",[a.equals("fileName",this.currentTask.fileName),a.equals("fileExtension",this.currentTask.extension),a.equals("private",this.currentTask.isPrivate)])),i=await this.mediaRepository.search(e,t.api);i!=null&&i[0]&&(this.existingMedia=i[0]);const s=await this.mediaService.provideName(this.currentTask.fileName,this.currentTask.extension);this.suggestedName=s.fileName},solveDuplicate(){if(!this.currentTask){this.isLoading=!1;return}switch(this.isLoading=!0,this.selectedOption){case"Rename":this.renameFile(this.currentTask);break;case"Replace":this.replaceFile(this.currentTask);break;case"Keep":this.keepFile(this.currentTask);break;case"Skip":default:this.skipFile(this.currentTask);break}this.failedUploadTasks.splice(0,1),!this.currentTask||!this.isWorkingOnMultipleTasks?this.isLoading=!1:this.solveDuplicate()},async renameFile(e){const i={...e},{fileName:s}=await this.mediaService.provideName(e.fileName,e.extension);i.fileName=s,this.mediaService.addUpload(i.uploadTag,i),await this.mediaService.runUploads(i.uploadTag)},skipAll(){this.isLoading=!0,this.skipFile(this.currentTask),this.failedUploadTasks.splice(0,1),this.currentTask?this.skipAll():this.isLoading=!1},skipCurrentFile(){this.isLoading=!0,this.skipFile(this.currentTask),this.failedUploadTasks.splice(0,1),this.isLoading=!1},async skipFile(e){const i=await this.mediaRepository.get(e.targetId,t.api);i.hasFile||await this.mediaRepository.delete(i.id,t.api),this.mediaService.cancelUpload(e.uploadTag,e)},async replaceFile(e){const i=new a(1,1).addFilter(a.multi("AND",[a.equals("fileName",e.fileName),a.equals("fileExtension",e.extension),a.equals("private",e.isPrivate)])),d=(await this.mediaRepository.search(i,t.api))[0],l=e.targetId;e.targetId=d.id,this.mediaService.addUpload(e.uploadTag,e),await this.mediaService.runUploads(e.uploadTag),(await this.mediaRepository.get(l,t.api)).hasFile||await this.mediaRepository.delete(l,t.api),await this.mediaRepository.get(e.targetId,t.api)},async keepFile(e){const i=await this.mediaRepository.get(e.targetId,t.api);i.hasFile||await this.mediaRepository.delete(i.id,t.api);const s=new a(1,1).addFilter(a.multi("AND",[a.equals("fileName",e.fileName),a.equals("fileExtension",e.extension),a.equals("private",e.isPrivate)])),l=(await this.mediaRepository.search(s,t.api))[0];e.targetId=l.id,this.mediaService.keepFile(e.uploadTag,e)}}});
//# sourceMappingURL=index-11W0HRP5.js.map
