const a=`<sw-meteor-card class="sw-extension-card-base" :class="extensionCardClasses" > <sw-loader v-if="isLoading" /> <div class="sw-extension-card-base__switch"> {% block sw_extension_card_base_activation_switch_switch %} <sw-switch-field v-model:value="isActive" v-tooltip="{ showDelay: 300, message: $tc('sw-extension-store.component.sw-extension-card-base.allowDisableTooltip'), disabled: allowDisable }" :disabled="extensionManagementDisabled || !isInstalled || (isActive && !allowDisable)" /> {% endblock %} </div> <sw-extension-icon :src="image" /> {% block sw_extension_card_base_activation_switch %} <div class="sw-extension-card-base__info"> <section> <span class="sw-extension-card-base__info-name"> {{ extension.label }} </span> {% block sw_extension_card_base_info_inactive_label %} <span v-if="isInstalled && !extension.active" class="sw-extension-card-base__info-inactive" > {{ $tc('sw-extension-store.component.sw-extension-card-base.inactiveLabel') }} </span> {% endblock %} </section> </div> {% endblock %} <div class="sw-extension-card-base__meta-info"> {% block sw_extension_card_base_info_content %} <section> <span v-if="extension.version" class="sw-extension-card-base__meta-info-version" > {{ $tc('sw-extension.my-extensions.listing.version') }}: {{ extension.version }} </span> <span v-if="!extensionManagementDisabled && isUpdateable"> <a href="#" @click.prevent="updateExtension(false)" > {{ $tc('sw-extension.my-extensions.listing.update') }} </a> </span> </section> {% endblock %} <span v-if="isInstalled"> {{ $tc('sw-extension-store.component.sw-extension-card-base.installedLabel') }} {{ dateFilter(extension.installedAt.date, { month: 'numeric', year: 'numeric', hour: undefined, minute: undefined }) }} </span> <span v-else-if="extension.storeLicense"> {{ $tc('sw-extension-store.component.sw-extension-card-base.purchasedLabel') }} {{ dateFilter(extension.storeLicense.creationDate, { month: 'numeric', year: 'numeric', hour: undefined, minute: undefined }) }} </span> </div> <div class="sw-extension-card-base__main-action"> <span v-if="!isInstalled" class="sw-extension-card-base__open-extension" role="button" tabindex="0" @click="openPermissionsModalForInstall" @keydown.enter="openPermissionsModalForInstall" > {{ $tc('sw-extension-store.component.sw-extension-card-base.installExtensionLabel') }} </span> <router-link v-else-if="extension.configurable" :to="{ name: 'sw.extension.config', params: { namespace: extension.name } }" > {{ $tc('sw-extension-store.component.sw-extension-card-base.contextMenu.config') }} </router-link> </div> <sw-context-button v-if="showContextMenu" class="sw-extension-card-base__context-menu" :menu-width="180" > {% block sw_extension_card_base_context_menu_actions %} <sw-context-menu-item v-if="openLinkExists && extension.active" :disabled="!openLinkExists" :router-link="link" > {{ $tc('sw-extension-store.component.sw-extension-card-base.contextMenu.openExtension') }} </sw-context-menu-item> <sw-context-menu-item v-if="privacyPolicyLink" @click="openPrivacyAndSafety" > <span class="sw-extension-card-base__context-menu-privacy-link"> {{ $tc('sw-extension-store.component.sw-extension-card-base.contextMenu.privacyAndSafetyLabel') }} <sw-icon name="regular-external-link-s" size="10px" /> </span> </sw-context-menu-item> <sw-context-menu-item v-if="isInstalled && extension.privacyPolicyExtension" @click="openPrivacyModal" > {{ $tc('sw-extension-store.component.sw-extension-card-base.contextMenu.policyExtensions') }} </sw-context-menu-item> <sw-context-menu-item v-if="isInstalled && permissions" @click="openPermissionsModal" > {{ $tc('sw-extension-store.component.sw-extension-card-base.contextMenu.permissions') }} </sw-context-menu-item> <sw-context-menu-item v-if="!extensionManagementDisabled && isUpdateable" @click="updateExtension(false)" > {{ $tc('sw-extension-store.component.sw-extension-card-base.contextMenu.updateLabel', 0, { version: extension.latestVersion }) }} </sw-context-menu-item> {% block sw_extension_card_base_context_menu_actions_additional %}{% endblock %} <sw-context-menu-item v-if="!extensionManagementDisabled && extension.storeLicense && extension.storeLicense.variant === 'rent' && extension.storeLicense.expirationDate === null" class="sw-extension-card-base__cancel-and-remove-link" variant="danger" @click="openRemovalModal" > {{ $tc('sw-extension-store.component.sw-extension-card-base.contextMenu.cancelAndRemoveLabel') }} </sw-context-menu-item> <sw-context-menu-item v-else-if="!extensionManagementDisabled && isRemovable" class="sw-extension-card-base__remove-link" variant="danger" @click="openRemovalModal" > {{ $tc('sw-extension-store.component.sw-extension-card-base.contextMenu.removeLabel') }} </sw-context-menu-item> <sw-context-menu-item v-if="!extensionManagementDisabled && isUninstallable" variant="danger" @click="openUninstallModal" > {{ $tc('sw-extension-store.component.sw-extension-card-base.contextMenu.uninstallLabel') }} </sw-context-menu-item> {% endblock %} </sw-context-button> {% block sw_extension_card_base_modals %} <sw-extension-uninstall-modal v-if="showUninstallModal" :extension-name="extension.label" :is-licensed="extension.storeLicense !== null" :is-loading="isLoading" @modal-close="closeUninstallModal" @uninstall-extension="closeModalAndUninstallExtension" /> <sw-extension-removal-modal v-if="showRemovalModal" :extension-name="extension.label" :is-licensed="extension.storeLicense !== null && extension.storeLicense.variant === 'rent'" :is-loading="isLoading" @modal-close="closeRemovalModal" @remove-extension="closeModalAndRemoveExtension" /> <sw-extension-permissions-modal v-if="showPermissionsModal" :extension-label="extension.label" :permissions="permissions" :domains="extension.domains" :action-label="permissionModalActionLabel" @modal-close="closePermissionsModal" @close-with-action="closePermissionsModalAndInstallExtension" /> <sw-extension-privacy-policy-extensions-modal v-if="showPrivacyModal" :extension-name="extension.label" :privacy-policy-extension="extension.privacyPolicyExtension" @modal-close="closePrivacyModal" /> <sw-extension-permissions-modal v-if="showConsentAffirmationModal" :title="consentAffirmationModalTitle" :extension-label="extension.label" :permissions="consentAffirmationDeltas.permissions" :domains="consentAffirmationDeltas.domains" :action-label="consentAffirmationModalActionLabel" :close-label="consentAffirmationModalCloseLabel" :description="consentAffirmationModalDescription" @modal-close="closeConsentAffirmationModal" @close-with-action="closeConsentAffirmationModalAndUpdateExtension" /> {% endblock %} </sw-meteor-card>`,{Utils:s,Filter:l}=Cicada,r={template:a,compatConfig:Cicada.compatConfig,inheritAttrs:!1,inject:["cicadaExtensionService","extensionStoreActionService","cacheApiService"],emits:["update-list"],mixins:["sw-extension-error"],props:{extension:{type:Object,required:!0}},data(){return{isLoading:!1,showUninstallModal:!1,showRemovalModal:!1,showPermissionsModal:!1,permissionsAccepted:!1,showPrivacyModal:!1,permissionModalActionLabel:null,openLink:null,showConsentAffirmationModal:!1,consentAffirmationDeltas:null}},computed:{dateFilter(){return Cicada.Filter.getByName("date")},defaultThemeAsset(){return this.assetFilter("administration/static/img/theme/default_theme_preview.jpg")},extensionCardClasses(){return{"is--deactivated":this.isInstalled&&!this.extension.active,"deactivate-prevented":this.isActive&&!this.allowDisable,"is--not-installed":!this.isInstalled}},licensedExtension(){return this.extension.storeLicense},image(){return this.extension.icon?this.extension.icon:this.extension.iconRaw?`data:image/png;base64, ${this.extension.iconRaw}`:this.defaultThemeAsset},isActive:{get(){return this.isInstalled?this.extension.active:!1},set(e){this.isInstalled&&(this.extension.active=e,this.$nextTick(()=>{this.changeExtensionStatus()},0))}},allowDisable(){return this.extension.allowDisable},isInstalled(){return this.extension.installedAt!==null},privacyPolicyLink(){return this.extension.privacyPolicyLink},permissions(){return Object.keys(this.extension.permissions).length?this.extension.permissions:null},assetFilter(){return l.getByName("asset")},isRemovable(){return this.extension.installedAt===null&&this.extension.source==="local"},isUninstallable(){return this.extension.installedAt!==null},isUpdateable(){return!this.extension||this.extension.latestVersion===null||this.extension.managedByComposer?!1:this.extension.latestVersion!==this.extension.version},openLinkExists(){return!!this.link},extensionMainModule(){return Cicada.State.get("extensionMainModules").mainModules.find(e=>e.extensionName===this.extension.name)},link(){return this.openLink?this.openLink:this.extensionMainModule?{name:"sw.extension.sdk.index",params:{id:this.extensionMainModule.moduleId}}:null},consentAffirmationModalActionLabel(){return this.$tc("sw-extension-store.component.sw-extension-permissions-modal.acceptAndUpdate")},consentAffirmationModalCloseLabel(){return this.$tc("global.default.cancel")},consentAffirmationModalTitle(){return this.$tc("sw-extension-store.component.sw-extension-permissions-modal.titleNewPermissions",1,{extensionLabel:this.extension.label})},consentAffirmationModalDescription(){return this.$tc("sw-extension-store.component.sw-extension-permissions-modal.descriptionNewPermissions",1,{extensionLabel:this.extension.label})},extensionManagementDisabled(){return Cicada.State.get("context").app.config.settings.disableExtensionManagement},showContextMenu(){return!!(this.isInstalled&&this.extension.configurable||this.openLinkExists&&this.extension.active||this.privacyPolicyLink||this.isInstalled&&this.extension.privacyPolicyExtension||this.isInstalled&&this.permissions||!this.extensionManagementDisabled&&this.isUpdateable||!this.extensionManagementDisabled&&this.extension.storeLicense&&this.extension.storeLicense.variant==="rent"&&this.extension.storeLicense.expirationDate===null||!this.extensionManagementDisabled&&this.isRemovable||!this.extensionManagementDisabled&&this.isUninstallable)}},created(){this.createdComponent()},methods:{async createdComponent(){this.openLink=await this.cicadaExtensionService.getOpenLink(this.extension)},emitUpdateList(){this.$emit("update-list")},getHelp(){},openPrivacyAndSafety(){window.open(this.extension.privacyPolicyLink,"_blank")},openRemovalModal(){this.showRemovalModal=!0},openUninstallModal(){this.showUninstallModal=!0},closeRemovalModal(){this.showRemovalModal=!1},closeUninstallModal(){this.showUninstallModal=!1},async closeModalAndUninstallExtension(e){this.showUninstallModal=!1,this.isLoading=!0;try{await this.cicadaExtensionService.uninstallExtension(this.extension.name,this.extension.type,e),this.clearCacheAndReloadPage()}catch(n){this.showExtensionErrors(n)}finally{this.isLoading=!1}},async updateExtension(e=!1){var n,t,o;this.isLoading=!0;try{this.extension.updateSource==="store"&&await this.extensionStoreActionService.downloadExtension(this.extension.name),this.extension.installedAt&&await this.cicadaExtensionService.updateExtension(this.extension.name,this.extension.type,e),this.clearCacheAndReloadPage()}catch(i){if(((o=(t=(n=i.response)==null?void 0:n.data)==null?void 0:t.errors[0])==null?void 0:o.code)==="FRAMEWORK__EXTENSION_UPDATE_REQUIRES_CONSENT_AFFIRMATION"){this.consentAffirmationDeltas=i.response.data.errors[0].meta.parameters.deltas,this.openConsentAffirmationModal();return}this.showExtensionErrors(i)}finally{this.isLoading=!1}},async closeModalAndRemoveExtension(e){if(this.extension.storeLicense===null||this.extension.storeLicense.variant!=="rent"){await this.removeExtension(e),this.showRemovalModal=!1;return}await this.cancelAndRemoveExtension(),this.showRemovalModal=!1},openExtension(){this.link&&this.$router.push(this.link)},async openPermissionsModalForInstall(){if(!this.permissions){this.permissionsAccepted=!0,this.isLoading=!0,await this.installAndActivateExtension();return}this.permissionModalActionLabel=this.$tc("sw-extension-store.component.sw-extension-card-base.labelAcceptAndInstall"),this.showPermissionsModal=!0},openPermissionsModal(){this.permissionModalActionLabel=null,this.showPermissionsModal=!0},closePermissionsModal(){this.permissionModalActionLabel=null,this.showPermissionsModal=!1},async closePermissionsModalAndInstallExtension(){this.permissionsAccepted=!0,this.closePermissionsModal(),await this.installExtension()},async changeExtensionStatus(){s.debug.warn(this._name,"No implementation of changeExtensionStatus found")},installExtension(){s.debug.warn(this._name,"No implementation of installExtension found")},async installAndActivateExtension(){s.debug.warn(this._name,"No implementation of installAndActivateExtension found")},async removeExtension(e){try{this.showRemovalModal=!1,this.isLoading=!0,await this.cicadaExtensionService.removeExtension(this.extension.name,this.extension.type,e),this.extension.active=!1}catch(n){this.showStoreError(n)}finally{this.isLoading=!1}},cancelAndRemoveExtension(){s.debug.warn(this._name,"No implementation of cancelAndRemoveExtension found")},openPrivacyModal(){this.showPrivacyModal=!0},closePrivacyModal(){this.showPrivacyModal=!1},clearCacheAndReloadPage(){return this.cacheApiService.clear().then(()=>{window.location.reload()})},openConsentAffirmationModal(){this.showConsentAffirmationModal=!0},closeConsentAffirmationModal(){this.showConsentAffirmationModal=!1},async closeConsentAffirmationModalAndUpdateExtension(){this.closeConsentAffirmationModal(),await this.updateExtension(!0)}}};export{r as default};
//# sourceMappingURL=index-LVmtmfP_.js.map
