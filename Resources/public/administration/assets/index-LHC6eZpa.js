const o='{% block sw_condition_value_content %} <div class="sw-condition-line-item-property sw-condition__condition-value"> {% block sw_condition_line_item_properties_field_operator %} <sw-condition-operator-select v-bind="{ operators, condition }" :plural="matchesAll" :disabled="disabled || undefined" /> {% endblock %} {% block sw_condition_line_item_properties_field_identifiers %} <sw-entity-multi-select size="medium" entity="property_group_option" :disabled="disabled || undefined" :entity-collection="options" :criteria="optionCriteria" @select-collapsed="onSelectCollapsed" @search-term-change="setSearchTerm" @update:entity-collection="setOptions" > <template #selection-label-property="{ item }"> <slot name="selection-label-property" v-bind="{ item }" > {{ item.group.translated.name || item.group.name }}: {{ item.translated.name || item.name }} </slot> </template> <template #result-label-property="{ item, searchTerm, highlightSearchTerm }"> <slot name="result-label-property" v-bind="{ item, searchTerm, highlightSearchTerm }" > <sw-highlight-text v-if="highlightSearchTerm" :text="item.translated.name || item.name" :search-term="searchTerm" /> <template v-else> {{ item.translated.name || item.name }} </template> </slot> </template> <template #result-description-property="{ item, searchTerm, highlightSearchTerm }"> {% block sw_condition_line_item_properties_field_description %} <slot name="result-description-property" v-bind="{ item, searchTerm, highlightSearchTerm }" > {% block sw_condition_line_item_properties_field_description_default %} <sw-highlight-text v-if="highlightSearchTerm" :text="item.group.translated.name || item.group.name" :search-term="searchTerm" /> <template v-else> {{ item.group.translated.name || item.group.name }} </template> {% endblock %} </slot> {% endblock %} </template> </sw-entity-multi-select> {% endblock %} </div> {% endblock %}',{Component:r,Context:t}=Cicada,{mapPropertyErrors:n}=r.getComponentHelper(),{EntityCollection:s,Criteria:i}=Cicada.Data;r.extend("sw-condition-line-item-property","sw-condition-base-line-item",{template:o,inject:["repositoryFactory","feature"],data(){return{options:null,searchTerm:""}},computed:{operators(){return this.conditionDataProviderService.getOperatorSet("multiStore")},optionRepository(){return this.repositoryFactory.create("property_group_option")},identifiers:{get(){return this.ensureValueExist(),this.condition.value.identifiers||[]},set(e){this.ensureValueExist(),this.condition.value={...this.condition.value,identifiers:e}}},...n("condition",["value.operator","value.identifiers"]),currentError(){return this.conditionValueOperatorError||this.conditionValueIdentifiersError},optionCriteria(){const e=new i(1,25);return e.setIds(this.identifiers),e.addAssociation("group"),typeof this.searchTerm=="string"&&this.searchTerm.length>0&&e.addQuery(i.contains("group.name",this.searchTerm),500),e}},created(){this.createdComponent()},methods:{createdComponent(){return this.options=new s(this.optionRepository.route,this.optionRepository.entityName,t.api,this.optionCriteria),this.identifiers.length<=0?Promise.resolve():this.optionRepository.search(this.optionCriteria,t.api).then(e=>{this.options=e})},setOptions(e){this.identifiers=e.getIds(),this.options=e},setSearchTerm(e){this.searchTerm=e},onSelectCollapsed(){this.searchTerm=""}}});
//# sourceMappingURL=index-LHC6eZpa.js.map
