{"version":3,"file":"index-B-jpTr0y.js","sources":["../../../app/administration/src/module/sw-settings-language/page/sw-settings-language-detail/sw-settings-language-detail.html.twig","../../../app/administration/src/module/sw-settings-language/page/sw-settings-language-detail/index.js"],"sourcesContent":["<!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n{% block sw_settings_language_detail %}\n<sw-page class=\"sw-settings-language-detail\">\n\n    <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n    {% block sw_settings_language_detail_header %}\n    <template #smart-bar-header>\n        <h2\n            v-if=\"languageHasName\"\n        >\n            {{ language.name }}\n        </h2>\n        <h2\n            v-else\n        >\n            {{ $tc('sw-settings-language.detail.textHeadline') }}\n        </h2>\n    </template>\n    {% endblock %}\n\n    <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n    {% block sw_settings_language_detail_actions %}\n    <template #smart-bar-actions>\n        <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n        {% block sw_settings_language_detail_actions_abort %}\n        <sw-button\n            v-tooltip.bottom=\"tooltipCancel\"\n            @click=\"onCancel\"\n        >\n            {{ $tc('global.default.cancel') }}\n        </sw-button>\n        {% endblock %}\n\n        <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n        {% block sw_settings_language_detail_actions_save %}\n        <sw-button-process\n            v-model:processSuccess=\"isSaveSuccessful\"\n            v-tooltip.bottom=\"tooltipSave\"\n            class=\"sw-settings-language-detail__save-action\"\n            :is-loading=\"isLoading\"\n            :disabled=\"isLoading || !allowSave || undefined\"\n            variant=\"primary\"\n            @click.prevent=\"onSave\"\n        >\n            {{ $tc('sw-settings-language.detail.buttonSave') }}\n        </sw-button-process>\n        {% endblock %}\n    </template>\n    {% endblock %}\n\n    <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n    {% block sw_settings_language_detail_content %}\n    <template #content>\n        <sw-card-view>\n            <sw-skeleton v-if=\"isLoading\" />\n\n            <template v-else>\n                <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n                {% block sw_settings_language_detail_content_language_info %}\n                <sw-language-info\n                    :entity-description=\"language.name\"\n                    :is-new-entity=\"isNewLanguage\"\n                />\n                {% endblock %}\n\n                <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n                {% block sw_settings_language_detail_content_card %}\n                <sw-card\n                    :title=\"$tc('sw-settings-language.detail.titleCard')\"\n                    position-identifier=\"sw-settings-language-detail-content\"\n                >\n                    <sw-container\n                        columns=\"repeat(auto-fit, minmax(250px, 1fr))\"\n                        gap=\"0px 30px\"\n                    >\n\n                        <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n                        {% block sw_settings_language_detail_content_field_name %}\n                        <sw-text-field\n                            v-model:value=\"language.name\"\n                            name=\"sw-field--language-name\"\n                            :disabled=\"!acl.can('language.editor') || undefined\"\n                            :label=\"$tc('sw-settings-language.detail.labelName')\"\n                            :placeholder=\"$tc('sw-settings-language.detail.placeholderName')\"\n                            :error=\"languageNameError\"\n                            validation=\"required\"\n                            required\n                        />\n                        {% endblock %}\n\n                        <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n                        {% block sw_settings_language_detail_content_field_localeId %}\n                        <sw-entity-single-select\n                            id=\"locales\"\n                            v-model:value=\"language.localeId\"\n                            name=\"sw-field--language-localeId\"\n                            required\n                            show-clearable-button\n                            class=\"sw-settings-language-detail__select-locale\"\n                            :disabled=\"!acl.can('language.editor') || undefined\"\n                            :label=\"$tc('sw-settings-language.detail.labelLocale')\"\n                            entity=\"locale\"\n                            :placeholder=\"$tc('sw-settings-language.detail.placeholderPleaseSelect')\"\n                            :error=\"languageLocaleIdError\"\n                        >\n                            <template #selection-label-property=\"{ item, getKey }\">\n                                {{ getKey(item, 'translated.name') }}, {{ getKey(item, 'translated.territory') }}\n                            </template>\n\n                            <template #result-label-property=\"{ item, index, labelProperty, searchTerm, highlightSearchTerm, getKey }\">\n                                <sw-highlight-text\n                                    v-if=\"highlightSearchTerm\"\n                                    :text=\"`${getKey(item, 'translated.name')}, ${getKey(item, 'translated.territory')}`\"\n                                    :search-term=\"searchTerm\"\n                                />\n                                <template v-else>\n                                    {{ getKey(item, 'translated.name') }}, {{ getKey(item, 'translated.territory') }}\n                                </template>\n                            </template>\n                        </sw-entity-single-select>\n                        {% endblock %}\n\n                        <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n                        {% block sw_settings_language_detail_content_field_iso_code %}\n                        <sw-entity-single-select\n                            id=\"iso-codes\"\n                            v-model:value=\"language.translationCodeId\"\n                            class=\"sw-settings-language-detail__select-iso-code\"\n                            :disabled=\"!acl.can('language.editor') || undefined\"\n                            label-property=\"code\"\n                            :label=\"$tc('sw-settings-language.detail.labelIsoCode')\"\n                            :required=\"isIsoCodeRequired\"\n                            show-clearable-button\n                            :placeholder=\"$tc('sw-settings-language.detail.placeholderPleaseSelect')\"\n                            entity=\"locale\"\n                        >\n                            <template #result-item=\"{ isSelected, setValue, item, index, labelProperty, searchTerm, highlightSearchTerm, getKey }\">\n                                <sw-select-result\n                                    v-tooltip=\"{\n                                        showDelay: 300,\n                                        message: $tc('sw-settings-language.detail.textIsoCodeIsInUse'),\n                                        disabled: !isLocaleAlreadyUsed(item?.id)\n                                    }\"\n\n                                    :selected=\"isSelected(item)\"\n                                    v-bind=\"{ item, index }\"\n                                    @item-select=\"setValue\"\n                                >\n\n                                    <sw-highlight-text\n                                        v-if=\"highlightSearchTerm\"\n                                        :text=\"(getKey(item,labelProperty) || getKey(item, `translated.${labelProperty}`)) + (isLocaleAlreadyUsed(item?.id) ? '*' : '')\"\n                                        :search-term=\"searchTerm\"\n                                    />\n                                    <template v-else>\n                                        {{ getKey(item,labelProperty) || getKey(item, `translated.${labelProperty}`) }}\n                                    </template>\n                                </sw-select-result>\n                            </template>\n                            <template #hint>\n                                <div v-if=\"isLocaleAlreadyUsed(language.translationCodeId)\">\n                                    {{ $tc('sw-settings-language.detail.textIsoCodeIsInUse') }}\n                                </div>\n                            </template>\n                        </sw-entity-single-select>\n\n                        {% endblock %}\n\n                        <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n                        {% block sw_settings_language_detail_content_field_parentId %}\n                        <sw-entity-single-select\n                            id=\"inherit\"\n                            v-model:value=\"language.parentId\"\n                            name=\"sw-field--language-parentId\"\n                            class=\"sw-settings-language-detail__select-parent\"\n                            :criteria=\"parentLanguageCriteria\"\n                            :disabled=\"!acl.can('language.editor') || isSystemDefaultLanguageId || undefined\"\n                            :label=\"$tc('sw-settings-language.detail.labelParent')\"\n                            :placeholder=\"$tc('sw-settings-language.detail.placeholderPleaseSelect')\"\n                            :help-text=\"inheritanceTooltipText\"\n                            entity=\"language\"\n                            show-clearable-button\n                            @update:value=\"onInputLanguage\"\n                        >\n                            <template #result-item=\"{ isSelected, setValue, item, index, labelProperty, searchTerm, highlightSearchTerm, getKey }\">\n                                <sw-select-result\n                                    v-tooltip=\"{\n                                        showDelay: 300,\n                                        message: $tc('sw-settings-language.detail.textLanguageHasParent'),\n                                        disabled: !item.parentId\n                                    }\"\n                                    :disabled=\"!!item.parentId || undefined\"\n                                    :selected=\"isSelected(item)\"\n                                    v-bind=\"{ item, index }\"\n                                    @item-select=\"setValue\"\n                                >\n                                    <sw-highlight-text\n                                        v-if=\"highlightSearchTerm\"\n                                        :text=\"getKey(item,labelProperty) || getKey(item, `translated.${labelProperty}`)\"\n                                        :search-term=\"searchTerm\"\n                                    />\n                                    <template v-else>\n                                        {{ getKey(item,labelProperty) || getKey(item, `translated.${labelProperty}`) }}\n                                    </template>\n                                </sw-select-result>\n                            </template>\n                        </sw-entity-single-select>\n                        {% endblock %}\n                    </sw-container>\n                    <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n                    {% block sw_settings_language_detail_content_alert_change_parent %}\n                    <sw-alert\n                        v-if=\"showAlertForChangeParentLanguage\"\n                        class=\"sw-settings-language--alert-change-parent\"\n                        :title=\"$tc('global.default.warning')\"\n                        variant=\"warning\"\n                    >\n                        {{ $tc('sw-settings-language.detail.textAlertChangeParent') }}\n                    </sw-alert>\n                    {% endblock %}\n                </sw-card>\n                {% endblock %}\n\n                <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n                {% block sw_settings_language_detail_custom_field_sets %}\n                <sw-card\n                    v-if=\"showCustomFields\"\n                    position-identifier=\"sw-settings-language-detail-custom-field-sets\"\n                    :title=\"$tc('sw-settings-custom-field.general.mainMenuItemGeneral')\"\n                    :is-loading=\"isLoading\"\n                >\n                    <sw-custom-field-set-renderer\n                        :entity=\"language\"\n                        :disabled=\"!acl.can('language.editor') || undefined\"\n                        :sets=\"customFieldSets\"\n                    />\n                </sw-card>\n                {% endblock %}\n            </template>\n        </sw-card-view>\n    </template>\n    {% endblock %}\n</sw-page>\n{% endblock %}\n","/**\n * @package buyers-experience\n */\nimport template from './sw-settings-language-detail.html.twig';\nimport './sw-settings-language-detail.scss';\n\nconst { Mixin } = Cicada;\nconst { Criteria } = Cicada.Data;\nconst { mapPropertyErrors } = Cicada.Component.getComponentHelper();\n\n// eslint-disable-next-line sw-deprecation-rules/private-feature-declarations\nexport default {\n    template,\n\n    compatConfig: Cicada.compatConfig,\n\n    inject: [\n        'repositoryFactory',\n        'acl',\n        'customFieldDataProviderService',\n        'feature',\n    ],\n\n    mixins: [\n        Mixin.getByName('notification'),\n        Mixin.getByName('placeholder'),\n    ],\n\n    shortcuts: {\n        'SYSTEMKEY+S': {\n            active() {\n                return this.allowSave;\n            },\n            method: 'onSave',\n        },\n        ESCAPE: 'onCancel',\n    },\n\n    props: {\n        languageId: {\n            type: String,\n            required: false,\n            default: null,\n        },\n    },\n\n    data() {\n        return {\n            language: null,\n            usedTranslationIds: [],\n            showAlertForChangeParentLanguage: false,\n            isLoading: false,\n            isSaveSuccessful: false,\n            customFieldSets: null,\n            parentTranslationCodeId: null,\n        };\n    },\n\n    metaInfo() {\n        return {\n            title: this.$createTitle(this.identifier),\n        };\n    },\n\n    computed: {\n        identifier() {\n            return this.languageHasName ? this.language.name : '';\n        },\n\n        languageRepository() {\n            return this.repositoryFactory.create('language');\n        },\n\n        isIsoCodeRequired() {\n            return !this.language.parentId;\n        },\n\n        languageHasName() {\n            return this.language !== null && this.language.name;\n        },\n\n        isNewLanguage() {\n            return this.language && typeof this.language.isNew === 'function' ? this.language.isNew() : false;\n        },\n\n        usedLocaleCriteria() {\n            return new Criteria(1, null)\n                .addFilter(\n                    Criteria.not('and', [\n                        Criteria.equals('id', this.languageId),\n                    ]),\n                )\n                .addAggregation(Criteria.terms('usedTranslationIds', 'language.translationCode.id', null, null, null));\n        },\n\n        allowSave() {\n            return this.isNewLanguage ? this.acl.can('language.creator') : this.acl.can('language.editor');\n        },\n\n        tooltipSave() {\n            if (!this.allowSave) {\n                return {\n                    message: this.$tc('sw-privileges.tooltip.warning'),\n                    disabled: this.allowSave,\n                    showOnDisabledElements: true,\n                };\n            }\n\n            const systemKey = this.$device.getSystemKey();\n\n            return {\n                message: `${systemKey} + S`,\n                appearance: 'light',\n            };\n        },\n\n        tooltipCancel() {\n            return {\n                message: 'ESC',\n                appearance: 'light',\n            };\n        },\n\n        parentLanguageCriteria() {\n            const criteria = new Criteria(1, 25);\n            criteria.addFilter(Criteria.not('and', [Criteria.equals('id', this.language.id)]));\n            return criteria;\n        },\n\n        isSystemDefaultLanguageId() {\n            return this.language.id === Cicada.Context.api.systemLanguageId;\n        },\n\n        inheritanceTooltipText() {\n            if (this.isSystemDefaultLanguageId) {\n                return this.$tc('sw-settings-language.detail.tooltipInheritanceNotPossible');\n            }\n\n            return this.$tc('sw-settings-language.detail.tooltipLanguageNotChoosable');\n        },\n\n        showCustomFields() {\n            return this.customFieldSets && this.customFieldSets.length > 0;\n        },\n\n        ...mapPropertyErrors('language', [\n            'localeId',\n            'name',\n        ]),\n    },\n\n    watch: {\n        languageId() {\n            // We must reset the page if the user clicks his browsers back button and navigates back to create\n            if (this.languageId === null) {\n                this.createdComponent();\n            }\n        },\n    },\n\n    created() {\n        this.createdComponent();\n    },\n\n    methods: {\n        createdComponent() {\n            if (!this.languageId) {\n                Cicada.State.commit('context/resetLanguageToDefault');\n                this.language = this.languageRepository.create();\n\n                return;\n            }\n\n            this.loadEntityData()\n                .then(() => {\n                    return this.loadCustomFieldSets();\n                })\n                .then(() => {\n                    this.languageRepository.search(this.usedLocaleCriteria).then((data) => {\n                        this.usedTranslationIds = data.aggregations.usedTranslationIds.buckets.map((item) => item.key);\n                    });\n                });\n        },\n\n        loadEntityData() {\n            this.isLoading = true;\n            return this.languageRepository\n                .get(this.languageId)\n                .then((language) => {\n                    this.isLoading = false;\n                    this.language = language;\n\n                    if (language.parentId) {\n                        this.setParentTranslationCodeId(language.parentId);\n                    }\n                })\n                .catch(() => {\n                    this.isLoading = false;\n                });\n        },\n\n        loadCustomFieldSets() {\n            return this.customFieldDataProviderService.getCustomFieldSets('language').then((sets) => {\n                this.customFieldSets = sets;\n            });\n        },\n\n        checkTranslationCodeInheritance(value) {\n            return value === this.parentTranslationCodeId;\n        },\n\n        setParentTranslationCodeId(parentId) {\n            this.languageRepository.get(parentId, Cicada.Context.api).then((parentLanguage) => {\n                this.parentTranslationCodeId = parentLanguage.translationCodeId;\n            });\n        },\n\n        onInputLanguage(parentId) {\n            if (parentId) {\n                this.setParentTranslationCodeId(parentId);\n            }\n\n            const origin = this.language.getOrigin();\n            if (this.language.isNew() || !origin.parentId) {\n                return;\n            }\n\n            this.showAlertForChangeParentLanguage = origin.parentId !== this.language.parentId;\n        },\n\n        isLocaleAlreadyUsed(itemId) {\n            return this.usedTranslationIds.some((localeId) => {\n                return itemId === localeId;\n            });\n        },\n\n        onSave() {\n            this.isLoading = true;\n\n            this.languageRepository\n                .save(this.language)\n                .then(() => {\n                    this.isLoading = false;\n                    this.isSaveSuccessful = true;\n                    if (!this.languageId) {\n                        this.$router.push({\n                            name: 'sw.settings.language.detail',\n                            params: { id: this.language.id },\n                        });\n                    }\n                })\n                .catch(() => {\n                    this.isLoading = false;\n                });\n        },\n\n        onCancel() {\n            this.$router.push({ name: 'sw.settings.language.index' });\n        },\n    },\n};\n"],"names":["template","Mixin","Criteria","mapPropertyErrors","index","criteria","data","item","language","sets","value","parentId","parentLanguage","origin","itemId","localeId"],"mappings":"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"}