import{K as d,f as h}from"./main-BVD2thQ1.js";import"./channel-Cvr-E4M4.js";import"./administration-d9Z5Qnc-.js";const u=`{% block sw_profile_index %} <sw-page class="sw-profile-index"> <template #smart-bar-back> {% block sw_profile_index_smart_bar_back %} <span></span> {% endblock %} </template> <template #smart-bar-header> {% block sw_profile_index_headline %} <h2>{{ $tc('sw-profile.general.headlineProfile') }}</h2> {% endblock %} </template> <template #smart-bar-actions> {% block sw_profile_index_actions %} <sw-button-process class="sw-profile__save-action" variant="primary" :is-loading="isLoading || isUserLoading" :process-success="isSaveSuccessful" :disabled="isLoading || isUserLoading || !acl.can('user.update_profile') || undefined" @update:process-success="saveFinish" @click.prevent="onSave" > {{ $tc('sw-profile.index.buttonSaveLabel') }} </sw-button-process> {% endblock %} </template> <template #content> <sw-card-view> {% block sw_profile_index_tabs %} <sw-tabs position-identifier="sw-profile-index" > {% block sw_profile_index_tabs_item_general %} <sw-tabs-item :route="{ name: 'sw.profile.index.general' }" :title="$tc('sw-profile.tabGeneral.title')" > {{ $tc('sw-profile.tabGeneral.title') }} </sw-tabs-item> {% endblock %} {% block sw_profile_index_tabs_item_search_preferences %} <sw-tabs-item :route="{ name: 'sw.profile.index.searchPreferences' }" :title="$tc('sw-profile.tabSearchPreferences.title')" > {{ $tc('sw-profile.tabSearchPreferences.title') }} </sw-tabs-item> {% endblock %} </sw-tabs> {% endblock %} {% block sw_profile_index_router_view %} <template v-if="isUserLoading"> <sw-skeleton /> <sw-skeleton /> </template> <template v-else> <router-view v-slot="{ Component }" > <component :is="Component" v-bind="{ user, timezoneOptions, languages, newPassword, newPasswordConfirm, avatarMediaItem, isUserLoading, languageId, isDisabled, userRepository, }" @new-password-change="onChangeNewPassword" @new-password-confirm-change="onChangeNewPasswordConfirm" @media-upload="setMediaItem" @media-remove="onUnlinkAvatar" @media-open="openMediaModal" /> </router-view> </template> {% endblock %} </sw-card-view> {% block sw_profile_index_content_confirm_password_modal %} <sw-verify-user-modal v-if="confirmPasswordModal" @verified="onVerifyPasswordFinished" @close="onCloseConfirmPasswordModal" /> {% endblock %} {% block sw_profile_index_media_upload_actions_media_modal %} <sw-media-modal-v2 v-if="showMediaModal" :allow-multi-select="false" :initial-folder-id="mediaDefaultFolderId" :entity-context="user.getEntityName()" @modal-close="showMediaModal = false" @media-modal-selection-change="onMediaSelectionChange" /> {% endblock %} </template> </sw-page> {% endblock %}`;Shopware.Store.register("swProfile",{state(){return{searchPreferences:[],userSearchPreferences:null}}});const{Component:f,Mixin:p,Store:l}=Shopware,{Criteria:i}=Shopware.Data,{mapPropertyErrors:w}=f.getComponentHelper(),v={template:u,inject:["userService","loginService","mediaDefaultFolderService","repositoryFactory","acl","searchPreferencesService","searchRankingService","userConfigService"],mixins:[p.getByName("notification")],data(){return{user:{username:"",email:""},languages:[],imageSize:140,newPassword:null,newPasswordConfirm:null,confirmPassword:null,avatarMediaItem:null,uploadTag:"sw-profile-upload-tag",isLoading:!1,isUserLoading:!0,isSaveSuccessful:!1,confirmPasswordModal:!1,mediaDefaultFolderId:null,showMediaModal:!1,timezoneOptions:[]}},metaInfo(){return{title:this.$createTitle()}},computed:{searchPreferences:()=>Shopware.Store.get("swProfile").searchPreferences,...w("user",["email","timeZone"]),userSearchPreferences:{get(){return l.get("swProfile").userSearchPreferences},set(e){l.get("swProfile").userSearchPreferences=e}},isDisabled(){return!0},userRepository(){return this.repositoryFactory.create("user")},languageRepository(){return this.repositoryFactory.create("language")},localeRepository(){return this.repositoryFactory.create("locale")},mediaRepository(){return this.repositoryFactory.create("media")},languageId(){return Shopware.Store.get("session").languageId}},watch:{$route(e){!e||e.name==="sw.profile.index.searchPreferences"||this.resetGeneralData()},"user.avatarMedia.id"(){var e;(e=this.user.avatarMedia)!=null&&e.id&&this.acl.can("media.creator")&&this.setMediaItem({targetId:this.user.avatarMedia.id})},languageId(){this.createdComponent()}},created(){this.createdComponent()},beforeMount(){this.beforeMountComponent()},methods:{createdComponent(){this.isUserLoading=!0;const e=new Promise(r=>{r(this.languageId)});this.userPromise=this.getUserData(),this.timezoneOptions=Shopware.Service("timezoneService").getTimezoneOptions();const s=[e,this.userPromise];this.acl.can("media.creator")&&this.getMediaDefaultFolderId().then(r=>{this.mediaDefaultFolderId=r}).catch(()=>{this.mediaDefaultFolderId=null}),Promise.all(s).then(()=>{this.loadLanguages()}).then(()=>{this.isUserLoading=!1})},beforeMountComponent(){this.userPromise.then(e=>{this.user=e,this.user.avatarId&&this.loadMediaItem(this.user.avatarId)})},loadLanguages(){const s=Shopware.Application.getContainer("factory").locale,r=Array.from(s.getLocaleRegistry().keys()),a=new i(1,500);return a.addAssociation("locale"),a.addSorting(i.sort("locale.name","ASC")),a.addSorting(i.sort("locale.territory","ASC")),a.addFilter(i.equalsAny("locale.code",r)),this.languageRepository.search(a).then(c=>{this.languages=[];const o=[];let n="";return c.forEach(t=>{t.customLabel=`${t.locale.translated.name} (${t.locale.translated.territory})`,this.languages.push(t),o.push(t.localeId),t.locale.code===Shopware.Context.app.fallbackLocale&&(n=t.localeId)}),o.includes(this.user.localeId)||(this.user.localeId=n),this.isUserLoading=!1,this.languages})},async getUserData(){const e=this.$route.params.user;if(e)return this.userRepository.get(e.id);const s=await this.userService.getUser();return this.userRepository.get(s.data.id)},resetGeneralData(){this.newPassword=null,this.newPasswordConfirm=null,this.createdComponent(),this.beforeMountComponent()},async saveFinish(){this.isSaveSuccessful=!1,this.user=await this.getUserData()},onSave(){if(this.$route.name==="sw.profile.index.searchPreferences"){this.saveUserSearchPreferences();return}if(this.checkEmail()===!1)return;const e=this.checkPassword();(e===null||e===!0)&&(this.confirmPasswordModal=!0)},checkEmail(){return!this.user.email||!h(this.user.email)?(this.createErrorMessage(this.$tc("sw-profile.index.notificationInvalidEmailErrorMessage")),!1):!0},checkPassword(){return this.newPassword&&this.newPassword.length>0?this.newPassword!==this.newPasswordConfirm?(this.createErrorMessage(this.$tc("sw-profile.index.notificationPasswordErrorMessage")),!1):(this.user.password=this.newPassword,!0):null},createErrorMessage(e){this.createNotificationError({message:e})},saveUser(e){if(!this.acl.can("user:editor")){const s=this.userRepository.getSyncChangeset([this.user]);delete s.changeset[0].changes.id,this.userService.updateUser(s.changeset[0].changes).then(async()=>{await this.updateCurrentUser(),this.isLoading=!1,this.isSaveSuccessful=!0,Shopware.Service("localeHelper").setLocaleWithId(this.user.localeId)}).catch(r=>{var a;Shopware.Store.get("error").addApiError({expression:`user.${(a=this.user)==null?void 0:a.id}.password`,error:new Shopware.Classes.ShopwareError(r.response.data.errors[0])}),this.createNotificationError({message:this.$tc("sw-profile.index.notificationSaveErrorMessage")}),this.isLoading=!1,this.isSaveSuccessful=!1});return}this.userRepository.save(this.user,e).then(async()=>{await this.updateCurrentUser(),Shopware.Service("localeHelper").setLocaleWithId(this.user.localeId),this.newPassword?this.loginService.loginByUsername(this.user.username,this.newPassword).then(()=>{this.isSaveSuccessful=!0}).catch(()=>{this.handleUserSaveError()}).finally(()=>{this.isLoading=!1}):(this.isLoading=!1,this.isSaveSuccessful=!0),this.confirmPassword="",this.newPassword="",this.newPasswordConfirm=""}).catch(()=>{this.handleUserSaveError(),this.isLoading=!1,this.isSaveSuccessful=!1})},updateCurrentUser(){return this.userService.getUser().then(e=>{const s=e.data;return delete s.password,Shopware.Store.get("session").setCurrentUser(s)})},loadMediaItem(e){this.mediaRepository.get(e).then(s=>{this.avatarMediaItem=s})},setMediaItem({targetId:e}){this.user.avatarId=e,this.loadMediaItem(e)},onDropMedia(e){this.setMediaItem({targetId:e.id})},onCloseConfirmPasswordModal(){this.confirmPassword="",this.confirmPasswordModal=!1},onUnlinkAvatar(){this.avatarMediaItem=null,this.user.avatarId=null},openMediaModal(){this.showMediaModal=!0},handleUserSaveError(){this.$route.name.includes("sw.profile.index")&&this.createNotificationError({message:this.$tc("sw-profile.index.notificationSaveErrorMessage")}),this.isLoading=!1},onChangeNewPassword(e){this.newPassword=e},onChangeNewPasswordConfirm(e){this.newPasswordConfirm=e},onMediaSelectionChange([e]){this.avatarMediaItem=e,this.user.avatarId=e.id},getMediaDefaultFolderId(){return this.mediaDefaultFolderService.getDefaultFolderId("user")},saveUserSearchPreferences(){return this.userSearchPreferences=this.userSearchPreferences??this.searchPreferencesService.createUserSearchPreferences(),this.userSearchPreferences.value=this.searchPreferences.map(({entityName:e,_searchable:s,fields:r})=>({[e]:{_searchable:s,...this.searchPreferencesService.processSearchPreferencesFields(r)}})),this.searchRankingService.clearCacheUserSearchConfiguration(),this.isLoading=!0,this.isSaveSuccessful=!1,this.userConfigService.upsert({[d]:this.userSearchPreferences.value}).then(()=>{this.isLoading=!1,this.isSaveSuccessful=!0}).catch(e=>{this.isLoading=!1,this.isSaveSuccessful=!1,this.createNotificationError({message:e.message})})},onVerifyPasswordFinished(e){this.confirmPasswordModal=!1,this.isSaveSuccessful=!1,this.isLoading=!0,this.saveUser(e)}}};export{v as default};
