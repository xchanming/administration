import{d as o,e as n}from"./main-DGszniXu.js";import"./channel-Cvr-E4M4.js";import"./administration-CcAM5iN0.js";const i=`{% block sw_notification_center %} <sw-context-button ref="notificationCenterContextButton" aria-label="global.notification-center.title" class="sw-notification-center__context-button" :class="additionalContextButtonClass" :auto-close="false" :menu-width="360" :menu-offset-top="10" :menu-offset-left="24" :additional-context-menu-classes="additionalContextMenuClasses" @context-menu-after-open="onContextMenuOpen" @context-menu-after-close="onContextMenuClose" > <template #button> {% block sw_notification_center_context_button_button_slot %} <sw-icon name="regular-bell" size="20px" /> {% endblock %} </template> {% block sw_notification_center_content %} <div class="sw-notification-center__content"> {% block sw_notification_center_content_header %} <div class="sw-notification-center__header"> <h3 class="sw-notification-center__title"> {{ $tc('global.notification-center.title') }} </h3> {% block sw_notification_center_content_context_menu %} <sw-context-button> <sw-context-menu-item variant="danger" @click="openDeleteModal" > {{ $tc('global.notification-center.deleteModal.title') }} </sw-context-menu-item> </sw-context-button> {% endblock %} </div> {% endblock %} {% block sw_notification_center_content_notification_container %} <div class="sw-notification-center__notification-container"> <div v-show="notifications.length > 0"> <sw-notification-center-item v-for="notification in notifications" :key="notification.uuid" :notification="notification" @center-close="changeVisibility(false)" /> </div> <div v-show="notifications.length === 0" class="sw-notification-center__empty-text" > {{ $tc('global.notification-center.emptyText') }} </div> </div> {% endblock %} </div> {% endblock %} {% block sw_notification_center_delete_modal %} <sw-modal v-if="showDeleteModal" :title="$tc('global.notification-center.deleteModal.title')" variant="small" @modal-close="onCloseDeleteModal" > {% block sw_notification_center_delete_modal_confirm_delete_text %} <p class="sw_notification_center__confirm-delete-text"> {{ $tc('global.notification-center.deleteModal.textConfirm') }} </p> {% endblock %} {% block sw_notification_center_delete_modal_footer %} <template #modal-footer> {% block sw_notification_center_delete_modal_cancel %} <sw-button size="small" @click="onCloseDeleteModal" > {{ $tc('global.default.cancel') }} </sw-button> {% endblock %} {% block sw_notification_center_delete_modal_confirm %} <sw-button variant="primary" size="small" @click="onConfirmDelete" > {{ $tc('global.default.delete') }} </sw-button> {% endblock %} </template> {% endblock %} </sw-modal> {% endblock %} </sw-context-button> {% endblock %}`,{Component:c,Mixin:a}=Shopware;c.register("sw-notification-center",{template:i,inject:["feature"],mixins:[a.getByName("notification")],data(){return{additionalContextMenuClasses:{"sw-notification-center__context-container":!0},showDeleteModal:!1,unsubscribeFromStore:null}},computed:{notifications(){return Object.values(Shopware.Store.get("notification").notifications).reverse()},additionalContextButtonClass(){return{"sw-notification-center__context-button--new-available":this.notifications.some(t=>!t.visited)}}},created(){this.unsubscribeFromStore=Shopware.Store.get("notification").$onAction(this.createNotificationFromSystemError),Shopware.Utils.EventBus.on("on-change-notification-center-visibility",this.changeVisibility)},beforeDestroyed(){var t;(t=this.unsubscribeFromStore)==null||t.call(this),this.$root.$off("on-change-notification-center-visibility",this.changeVisibility)},methods:{onContextMenuOpen(){Shopware.Store.get("notification").workerProcessPollInterval=n},onContextMenuClose(){Shopware.Store.get("notification").setAllNotificationsVisited(),Shopware.Store.get("notification").workerProcessPollInterval=o},openDeleteModal(){this.showDeleteModal=!0},onConfirmDelete(){Shopware.Store.get("notification").clearNotificationsForCurrentUser(),this.showDeleteModal=!1},onCloseDeleteModal(){this.showDeleteModal=!1},changeVisibility(t){if(this.$refs.notificationCenterContextButton!==void 0){if(t){this.$refs.notificationCenterContextButton.openMenu();return}this.$refs.notificationCenterContextButton.showMenu=!1,this.$refs.notificationCenterContextButton.removeMenuFromBody(),this.$refs.notificationCenterContextButton.$emit("context-menu-after-close")}},createNotificationFromSystemError({name:t,args:e}){t==="addSystemError"&&this.createSystemNotificationError({id:e.id,message:e.error.detail})}}});
