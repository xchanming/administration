const o=`{% block sw_property_detail %} <sw-page class="sw-property-detail"> {% block sw_property_detail_smart_bar_header %} <template #smart-bar-header> {% block sw_property_detail_smart_bar_header_title %} <h2>{{ placeholder(propertyGroup, 'name', $tc('sw-property.detail.textHeadline')) }}</h2> {% endblock %} </template> {% endblock %} {% block sw_property_detail_smart_bar_actions %} <template #smart-bar-actions> {% block sw_property_detail_smart_bar_actions_cancel %} <sw-button v-tooltip.bottom="tooltipCancel" class="sw-property-detail__back-action" :disabled="isLoading || undefined" @click="onCancel" > {{ $tc('global.default.cancel') }} </sw-button> {% endblock %} {% block sw_property_detail_smart_bar_actions_save %} <sw-button-process v-tooltip="tooltipSave" class="sw-property-detail__save-action" :is-loading="isLoading || undefined" :process-success="isSaveSuccessful" :disabled="isLoading || !acl.can('property.editor') || undefined" variant="primary" @update:process-success="saveFinish" @click.prevent="onSave" > {{ $tc('sw-property.detail.buttonSave') }} </sw-button-process> {% endblock %} </template> {% endblock %} {% block sw_property_detail_language_switch %} <template #language-switch> <sw-language-switch :save-changes-function="saveOnLanguageChange" :abort-change-function="abortOnLanguageChange" :save-permission="acl.can('property.editor')" @on-change="onChangeLanguage" /> </template> {% endblock %} {% block sw_property_detail_content %} <template #content> <sw-card-view> <template v-if="isLoading"> <sw-skeleton variant="detail-bold" /> <sw-skeleton /> </template> {# v-show is used here as underlying components influence the loading state and v-if would destroy this behaviour #} <div v-show="!isLoading"> {% block sw_property_detail_content_language_info %} <sw-language-info :entity-description="placeholder(propertyGroup, 'name', $tc('sw-property.detail.textHeadline'))" /> {% endblock %} {% block sw_property_detail_content_detail_base %} <sw-property-detail-base v-if="propertyGroup" :property-group="propertyGroup" :allow-edit="acl.can('property.editor')" /> {% endblock %} {% block sw_property_detail_content_option_list %} <sw-property-option-list v-if="propertyGroup" ref="optionListing" :is-loading="isLoading || undefined" :option-repository="optionRepository" :property-group="propertyGroup" /> {% endblock %} {% block sw_property_detail_custom_field_sets %} <sw-card v-if="showCustomFields" position-identifier="sw-property-detail" :title="$tc('sw-settings-custom-field.general.mainMenuItemGeneral')" > <sw-custom-field-set-renderer :entity="propertyGroup" :disabled="!acl.can('property.editor') || undefined" :sets="customFieldSets" /> </sw-card> {% endblock %} </div> </sw-card-view> </template> {% endblock %} </sw-page> {% endblock %}`,{Mixin:t}=Cicada,{Criteria:a}=Cicada.Data,r={template:o,compatConfig:Cicada.compatConfig,inject:["repositoryFactory","acl","customFieldDataProviderService"],mixins:[t.getByName("notification"),t.getByName("placeholder")],shortcuts:{"SYSTEMKEY+S":{active(){return this.acl.can("product.editor")},method:"onSave"},ESCAPE:"onCancel"},props:{groupId:{type:String,default:null}},data(){return{propertyGroup:null,isLoading:!1,isSaveSuccessful:!1,customFieldSets:null}},metaInfo(){return{title:this.$createTitle(this.identifier)}},computed:{identifier(){return this.placeholder(this.propertyGroup,"name")},optionRepository(){return this.repositoryFactory.create(this.propertyGroup.options.entity,this.propertyGroup.options.source)},propertyRepository(){return this.repositoryFactory.create("property_group")},tooltipSave(){return this.acl.can("property.editor")?{message:`${this.$device.getSystemKey()} + S`,appearance:"light"}:{message:this.$tc("sw-privileges.tooltip.warning"),disabled:this.acl.can("property.editor"),showOnDisabledElements:!0}},tooltipCancel(){return{message:"ESC",appearance:"light"}},defaultCriteria(){const e=new a(this.page,this.limit);return e.addAssociation("options"),e.setTerm(this.term),e},useNaturalSorting(){return this.sortBy==="property.name"},showCustomFields(){return this.propertyGroup&&this.customFieldSets&&this.customFieldSets.length>0}},watch:{groupId(){this.loadEntityData()}},created(){this.createdComponent()},methods:{createdComponent(){Cicada.ExtensionAPI.publishData({id:"sw-property-group-detail__propertyGroup",path:"propertyGroup",scope:this}),this.loadEntityData(),this.loadCustomFieldSets()},loadEntityData(){this.isLoading=!0,this.propertyRepository.get(this.groupId,Cicada.Context.api,this.defaultCriteria).then(e=>{this.propertyGroup=e,this.isLoading=!1}).catch(()=>{this.isLoading=!1})},loadCustomFieldSets(){this.customFieldDataProviderService.getCustomFieldSets("property_group").then(e=>{this.customFieldSets=e})},saveFinish(){this.isSaveSuccessful=!1},saveOnLanguageChange(){return this.onSave()},abortOnLanguageChange(){return this.propertyRepository.hasChanges(this.propertyGroup)},onChangeLanguage(){this.loadEntityData()},onSave(){return this.isSaveSuccessful=!1,this.isLoading=!0,this.propertyRepository.save(this.propertyGroup).then(()=>{this.loadEntityData(),this.isLoading=!1,this.isSaveSuccessful=!0}).catch(e=>{throw this.createNotificationError({message:this.$tc("sw-property.detail.messageSaveError")}),this.isLoading=!1,e})},onCancel(){this.$router.push({name:"sw.property.index"})}}};export{r as default};
//# sourceMappingURL=index-DYSzSwMS.js.map
