{"version":3,"file":"index-D199fYxT.js","sources":["../../../app/administration/src/module/sw-bulk-edit/page/sw-bulk-edit-customer/sw-bulk-edit-customer.html.twig","../../../app/administration/src/module/sw-bulk-edit/page/sw-bulk-edit-customer/index.js"],"sourcesContent":["<!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n{% block sw_bulk_edit_customer %}\n<sw-page class=\"sw-bulk-edit-customer\">\n    <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n    {% block sw_bulk_edit_customer_search_bar %}\n    <template #search-bar>\n        <sw-search-bar />\n    </template>\n    {% endblock %}\n\n    <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n    {% block sw_bulk_edit_customer_smart_bar_header %}\n    <template #smart-bar-header>\n        <h2>{{ $tc('sw-bulk-edit.customer.textTitle', selectedIds.length, { customerTotal: selectedIds.length }) }}</h2>\n    </template>\n    {% endblock %}\n\n    <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n    {% block sw_bulk_edit_customer_content_language_switch %}\n    <template #language-switch>\n        <sw-language-switch @on-change=\"onChangeLanguage\" />\n    </template>\n    {% endblock %}\n\n    <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n    {% block sw_bulk_edit_customer_content_smart_bar_actions %}\n    <template #smart-bar-actions>\n        <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n        {% block sw_bulk_edit_customer_actions_save %}\n        <sw-button-process\n            class=\"sw-bulk-edit-customer__save-action\"\n            variant=\"primary\"\n            :is-loading=\"isLoading\"\n            :process-success=\"false\"\n            :disabled=\"isLoading || !hasChanges\"\n            @click=\"openModal\"\n        >\n            {{ $tc('sw-bulk-edit.applyChanges') }}\n        </sw-button-process>\n        {% endblock %}\n    </template>\n    {% endblock %}\n\n    <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n    {% block sw_bulk_edit_customer_content %}\n    <template #content>\n        <sw-card-view\n            v-if=\"selectedIds.length > 0 && isLoadedData\"\n        >\n            <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n            {% block sw_bulk_edit_customer_content_account_card %}\n            <sw-card\n                class=\"sw-bulk-edit-customer-base__account\"\n                position-identifier=\"sw-bulk-edit-customer-account\"\n                :title=\"$tc('sw-bulk-edit.customer.account.cardTitle')\"\n                :is-loading=\"isLoading\"\n            >\n                <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n                {% block sw_bulk_edit_customer_content_account_section %}\n                <sw-bulk-edit-change-type-field-renderer\n                    :form-fields=\"accountFormFields\"\n                    :bulk-edit-data=\"bulkEditData\"\n                    :entity=\"customer\"\n                />\n                {% endblock %}\n            </sw-card>\n            {% endblock %}\n\n            <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n            {% block sw_bulk_edit_customer_tags_card %}\n            <sw-card\n                class=\"sw-bulk-edit-customer-base__tags\"\n                position-identifier=\"sw-bulk-edit-customer-tags\"\n                :title=\"$tc('sw-bulk-edit.customer.tags.cardTitle')\"\n                :is-loading=\"isLoading\"\n            >\n                <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n                {% block sw_bulk_edit_customer_tags %}\n                <sw-bulk-edit-change-type-field-renderer\n                    :form-fields=\"tagsFormFields\"\n                    :bulk-edit-data=\"bulkEditData\"\n                    :entity=\"customer\"\n                />\n                {% endblock %}\n            </sw-card>\n            {% endblock %}\n\n            <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n            {% block sw_bulk_edit_customer_custom_field_card %}\n            <sw-card\n                class=\"sw-bulk-edit-customer-base__custom_fields\"\n                position-identifier=\"sw-bulk-edit-customer-custom-field\"\n                :title=\"$tc('sw-bulk-edit.customer.customFields.cardTitle')\"\n                :is-loading=\"isLoading\"\n            >\n                <sw-bulk-edit-custom-fields\n                    class=\"sw-bulk-edit__custom-fields\"\n                    :sets=\"customFieldSets\"\n                    @change=\"onCustomFieldsChange\"\n                />\n            </sw-card>\n            {% endblock %}\n        </sw-card-view>\n\n        <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n        {% block sw_bulk_edit_customer_empty_state %}\n        <sw-empty-state\n            v-if=\"selectedIds.length <= 0 && !isLoading\"\n            :title=\"$tc('sw-bulk-edit.customer.messageEmptyTitle')\"\n            :subline=\"$tc('sw-bulk-edit.customer.messageEmptySubline')\"\n        />\n        {% endblock %}\n\n        <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n        {% block sw_bulk_edit_customer_save_modal %}\n        <router-view\n            v-slot=\"{ Component }\"\n        >\n            <component\n                :is=\"Component\"\n                :item-total=\"selectedIds.length\"\n                :is-loading=\"isLoading\"\n                :process-status=\"processStatus\"\n                :bulk-edit-data=\"bulkEditData\"\n                @modal-close=\"closeModal\"\n                @bulk-save=\"onSave\"\n            />\n        </router-view>\n        {% endblock %}\n    </template>\n    {% endblock %}\n</sw-page>\n{% endblock %}\n","import template from './sw-bulk-edit-customer.html.twig';\nimport './sw-bulk-edit-customer.scss';\nimport swBulkEditState from '../../state/sw-bulk-edit.state';\n\nconst { Mixin } = Cicada;\nconst { Criteria } = Cicada.Data;\nconst { types } = Cicada.Utils;\nconst { chunk } = Cicada.Utils.array;\nconst { cloneDeep } = Cicada.Utils.object;\n\n/**\n * @package services-settings\n */\n// eslint-disable-next-line sw-deprecation-rules/private-feature-declarations\nexport default {\n    template,\n\n    compatConfig: Cicada.compatConfig,\n\n    inject: [\n        'feature',\n        'bulkEditApiFactory',\n        'repositoryFactory',\n    ],\n\n    mixins: [\n        Mixin.getByName('notification'),\n    ],\n\n    data() {\n        return {\n            isLoading: false,\n            isLoadedData: false,\n            isSaveSuccessful: false,\n            bulkEditData: {},\n            customFieldSets: [],\n            processStatus: '',\n            customer: {},\n        };\n    },\n\n    metaInfo() {\n        return {\n            title: this.$createTitle(),\n        };\n    },\n\n    computed: {\n        selectedIds() {\n            return Cicada.State.get('cicadaApps').selectedIds;\n        },\n\n        customFieldSetRepository() {\n            return this.repositoryFactory.create('custom_field_set');\n        },\n\n        customerRepository() {\n            return this.repositoryFactory.create('customer');\n        },\n\n        customFieldSetCriteria() {\n            const criteria = new Criteria(1, null);\n\n            criteria.addFilter(Criteria.equals('relations.entityName', 'customer'));\n\n            return criteria;\n        },\n\n        hasChanges() {\n            const customFieldsValue = this.bulkEditData.customFields?.value;\n            const hasFieldsChanged = Object.values(this.bulkEditData).some((field) => field.isChanged);\n            const hasCustomFieldsChanged = !types.isEmpty(customFieldsValue) && Object.keys(customFieldsValue).length > 0;\n\n            return hasFieldsChanged || hasCustomFieldsChanged;\n        },\n\n        actionsRequestGroup() {\n            return [\n                {\n                    value: 'accept',\n                    label: this.$tc('sw-bulk-edit.customer.account.customerGroupRequest.options.accept'),\n                },\n                {\n                    value: 'decline',\n                    label: this.$tc('sw-bulk-edit.customer.account.customerGroupRequest.options.decline'),\n                },\n            ];\n        },\n\n        accountFormFields() {\n            return [\n                {\n                    name: 'groupId',\n                    config: {\n                        componentName: 'sw-entity-single-select',\n                        entity: 'customer_group',\n                        changeLabel: this.$tc('sw-bulk-edit.customer.account.customerGroup.label'),\n                        placeholder: this.$tc('sw-bulk-edit.customer.account.customerGroup.placeholder'),\n                    },\n                },\n                {\n                    name: 'active',\n                    type: 'bool',\n                    config: {\n                        type: 'switch',\n                        changeLabel: this.$tc('sw-bulk-edit.customer.account.status.label'),\n                    },\n                },\n                {\n                    name: 'languageId',\n                    config: {\n                        componentName: 'sw-entity-single-select',\n                        entity: 'language',\n                        changeLabel: this.$tc('sw-bulk-edit.customer.account.language.label'),\n                        placeholder: this.$tc('sw-bulk-edit.customer.account.language.placeholder'),\n                    },\n                },\n                {\n                    name: 'requestedCustomerGroupId',\n                    labelHelpText: this.$tc('sw-bulk-edit.customer.account.customerGroupRequest.helpText'),\n                    config: {\n                        componentName: 'sw-single-select',\n                        entity: 'customer_group',\n                        changeLabel: this.$tc('sw-bulk-edit.customer.account.customerGroupRequest.label'),\n                        placeholder: this.$tc('sw-bulk-edit.customer.account.customerGroupRequest.placeholder'),\n                        options: this.actionsRequestGroup,\n                    },\n                },\n            ];\n        },\n\n        tagsFormFields() {\n            return [\n                {\n                    name: 'tags',\n                    config: {\n                        componentName: 'sw-entity-tag-select',\n                        entityCollection: this.customer.tags,\n                        allowOverwrite: true,\n                        allowClear: true,\n                        allowAdd: true,\n                        allowRemove: true,\n                        changeLabel: this.$tc('sw-bulk-edit.order.tags.changeLabel'),\n                        placeholder: this.$tc('sw-bulk-edit.order.tags.placeholder'),\n                    },\n                },\n            ];\n        },\n    },\n\n    beforeCreate() {\n        Cicada.State.registerModule('swBulkEdit', swBulkEditState);\n    },\n\n    created() {\n        this.createdComponent();\n    },\n\n    beforeUnmount() {\n        Cicada.State.unregisterModule('swBulkEdit');\n    },\n\n    methods: {\n        createdComponent() {\n            this.setRouteMetaModule();\n            if (!Cicada.State.getters['context/isSystemDefaultLanguage']) {\n                Cicada.State.commit('context/resetLanguageToDefault');\n            }\n\n            this.isLoading = true;\n\n            this.customer = this.customerRepository.create(Cicada.Context.api);\n\n            this.loadCustomFieldSets()\n                .then(() => {\n                    this.loadBulkEditData();\n                    this.isLoadedData = true;\n                })\n                .catch((error) => {\n                    this.createNotificationError({\n                        title: this.$tc('global.default.error'),\n                        message: error,\n                    });\n                })\n                .finally(() => {\n                    this.isLoading = false;\n                });\n        },\n\n        setRouteMetaModule() {\n            if (this.isCompatEnabled('INSTANCE_SET')) {\n                this.$set(this.$route.meta.$module, 'color', '#F88962');\n                this.$set(this.$route.meta.$module, 'icon', 'regular-users');\n            } else {\n                if (!this.$route.meta.$module) {\n                    this.$route.meta.$module = {};\n                }\n\n                this.$route.meta.$module.color = '#F88962';\n                this.$route.meta.$module.icon = 'regular-users';\n            }\n        },\n\n        defineBulkEditData(name, value = null, type = 'overwrite', isChanged = false) {\n            if (this.bulkEditData[name]) {\n                return;\n            }\n\n            if (this.isCompatEnabled('INSTANCE_SET')) {\n                this.$set(this.bulkEditData, name, {\n                    isChanged: isChanged,\n                    type: type,\n                    value: value,\n                });\n            } else {\n                this.bulkEditData[name] = {\n                    isChanged: isChanged,\n                    type: type,\n                    value: value,\n                };\n            }\n        },\n\n        loadBulkEditData() {\n            const bulkEditFormGroups = [\n                this.accountFormFields,\n                this.tagsFormFields,\n            ];\n\n            bulkEditFormGroups.forEach((bulkEditForms) => {\n                bulkEditForms.forEach((bulkEditForm) => {\n                    this.defineBulkEditData(bulkEditForm.name);\n                });\n            });\n\n            if (this.isCompatEnabled('INSTANCE_SET')) {\n                this.$set(this.bulkEditData, 'customFields', {\n                    type: 'overwrite',\n                    value: null,\n                });\n            } else {\n                this.bulkEditData.customFields = {\n                    type: 'overwrite',\n                    value: null,\n                };\n            }\n        },\n\n        loadCustomFieldSets() {\n            return this.customFieldSetRepository.search(this.customFieldSetCriteria).then((res) => {\n                this.customFieldSets = res;\n            });\n        },\n\n        onCustomFieldsChange(value) {\n            if (Object.keys(value).length <= 0) {\n                this.bulkEditData = this.bulkEditData.filter((change) => change.field !== 'customFields');\n                return;\n            }\n\n            this.bulkEditData.customFields.value = value;\n        },\n\n        onProcessData() {\n            const data = {\n                requestData: [],\n                syncData: [],\n            };\n\n            Object.keys(this.bulkEditData).forEach((key) => {\n                const bulkEditField = cloneDeep(this.bulkEditData[key]);\n\n                let bulkEditValue = this.customer[key];\n\n                if (key === 'active' && !bulkEditValue) {\n                    bulkEditValue = false;\n                }\n\n                if (key === 'customFields') {\n                    bulkEditValue = bulkEditField.value;\n                }\n\n                const change = {\n                    field: key,\n                    type: bulkEditField.type,\n                    value: bulkEditValue,\n                };\n\n                if (bulkEditField.isChanged || (key === 'customFields' && bulkEditField.value)) {\n                    if (key === 'requestedCustomerGroupId') {\n                        data.requestData.push(change);\n                    } else {\n                        data.syncData.push(change);\n                    }\n                }\n            });\n\n            return data;\n        },\n\n        openModal() {\n            this.$router.push({ name: 'sw.bulk.edit.customer.save' });\n        },\n\n        async onSave() {\n            this.isLoading = true;\n            const { requestData, syncData } = this.onProcessData();\n            const bulkEditCustomerHandler = this.bulkEditApiFactory.getHandler('customer');\n            const payloadChunks = chunk(this.selectedIds, 50);\n            const requests = [];\n\n            if (requestData.length) {\n                requests.push(bulkEditCustomerHandler.bulkEditRequestedGroup(this.selectedIds, requestData));\n            }\n\n            payloadChunks.forEach((payload) => {\n                if (syncData.length) {\n                    requests.push(this.bulkEditApiFactory.getHandler('customer').bulkEdit(payload, syncData));\n                }\n            });\n\n            return Promise.all(requests)\n                .then(() => {\n                    this.processStatus = 'success';\n                })\n                .catch((e) => {\n                    console.error(e);\n                    this.processStatus = 'fail';\n                })\n                .finally(() => {\n                    this.isLoading = false;\n                });\n        },\n\n        closeModal() {\n            this.$router.push({ name: 'sw.bulk.edit.customer' });\n        },\n\n        onChangeLanguage(languageId) {\n            Cicada.State.commit('context/setApiLanguageId', languageId);\n        },\n    },\n};\n"],"names":["template","Mixin","Criteria","types","chunk","cloneDeep","index","criteria","customFieldsValue","_a","hasFieldsChanged","field","hasCustomFieldsChanged","swBulkEditState","error","name","value","type","isChanged","bulkEditForms","bulkEditForm","res","change","data","key","bulkEditField","bulkEditValue","requestData","syncData","bulkEditCustomerHandler","payloadChunks","requests","payload","e","languageId"],"mappings":"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"}