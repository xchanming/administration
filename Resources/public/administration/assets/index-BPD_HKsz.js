const d=`{% block sw_landing_page_tree %} <div class="sw-landing-page-tree"> {% block sw_landing_page_tree_inner %} <sw-tree v-if="!isLoadingInitialData" ref="landingPageTree" class="sw-landing-page-tree__inner" :items="landingPages" :sortable="false || undefined" :searchable="false" :translation-context="translationContext" :on-change-route="changeLandingPage" :disable-context-menu="disableContextMenu" :allow-delete-categories="allowDelete || undefined" :allow-create-categories="false" :active-tree-item-id="landingPageId" @batch-delete="deleteCheckedItems" @delete-element="onDeleteLandingPage" @editing-end="syncLandingPages" @checked-elements-count="checkedElementsCount" > <template #headline> <span></span> </template> <template #items="{ treeItems, sortable, draggedItem, newElementId, checkItem, translationContext, onChangeRoute, disableContextMenu }" > {% block sw_landing_page_tree_items %} <sw-tree-item v-for="item in treeItems" :key="item.id" :item="item" :should-show-active-state="true" :allow-duplicate="true" :allow-new-categories="false || undefined" :allow-delete-categories="allowDelete || undefined" :active="item.active" :translation-context="translationContext" :on-change-route="onChangeRoute" :sortable="sortable || undefined" :dragged-item="draggedItem" :disable-context-menu="disableContextMenu" :display-checkbox="allowEdit || undefined" :context-menu-tooltip-text="contextMenuTooltipText" :new-element-id="newElementId" :get-item-url="getLandingPageUrl" @check-item="checkItem" > <template #grip> <span></span> </template> <template #actions="{ onDuplicate, onChangeRoute, deleteElement, toolTip }" > {% block sw_landing_page_tree_items_actions %} <sw-context-button v-tooltip="toolTip" class="sw-tree-item__context_button" :disabled="disableContextMenu || undefined" > {% block sw_landing_page_tree_items_actions_edit %} <sw-context-menu-item @click="onChangeRoute(item)"> {{ $tc('global.default.edit') }} </sw-context-menu-item> {% endblock %} {% block sw_landing_page_tree_items_actions_duplicate %} <sw-context-menu-item class="sw-context-menu__duplicate-action" @click="onDuplicate(item)" > {{ $tc(\`global.default.duplicate\`) }} </sw-context-menu-item> {% endblock %} {% block sw_landing_page_tree_items_actions_delete %} <sw-context-menu-item class="sw-context-menu__group-button-delete" variant="danger" @click="deleteElement(item)" > {{ $tc('global.default.delete') }} </sw-context-menu-item> {% endblock %} </sw-context-button> {% endblock %} </template> </sw-tree-item> {% endblock %} </template> </sw-tree> {% endblock %} <div v-else> <sw-skeleton variant="tree-item" /> <sw-skeleton variant="tree-item" /> <sw-skeleton variant="tree-item" /> <sw-skeleton variant="tree-item" /> <sw-skeleton variant="tree-item" /> <sw-skeleton variant="tree-item" /> <sw-skeleton variant="tree-item" /> </div> {% block sw_landing_page_tree_action %} <div class="sw-landing-page-tree__add-button"> <sw-button class="sw-landing-page-tree__add-button-button" :router-link="newLandingPageUrl()" size="small" variant="ghost" :disabled="disableContextMenu || !acl.can('landing_page.creator') || undefined" > {{ $tc('sw-landing-page.general.buttonCreate') }} </sw-button> </div> {% endblock %} </div> {% endblock %}`,{Criteria:i}=Shopware.Data,l={template:d,inject:["repositoryFactory","syncService","acl"],emits:["landing-page-checked-elements-count","unsaved-changes"],mixins:["notification"],props:{landingPageId:{type:String,required:!1,default:null},currentLanguageId:{type:String,required:!0},allowEdit:{type:Boolean,required:!1,default:!0},allowCreate:{type:Boolean,required:!1,default:!0},allowDelete:{type:Boolean,required:!1,default:!0}},data(){return{loadedLandingPages:{},translationContext:"sw-landing-page",linkContext:"sw.category.landingPageDetail",isLoadingInitialData:!0}},computed:{landingPagesToDelete(){return Shopware.Store.get("swCategoryDetail").landingPagesToDelete},cmsLandingPageCriteria(){const e=new i(1,500);return e.addSorting(i.sort("name")),e},landingPage(){return Shopware.Store.get("swCategoryDetail").landingPage},landingPageRepository(){return this.repositoryFactory.create("landing_page")},landingPages(){return Object.values(this.loadedLandingPages)},disableContextMenu(){return this.allowEdit?this.currentLanguageId!==Shopware.Context.api.systemLanguageId:!0},contextMenuTooltipText(){return this.allowEdit?null:this.$tc("sw-privileges.tooltip.warning")}},watch:{landingPagesToDelete(e){e!==void 0&&(this.$refs.landingPageTree.onDeleteElements(e),Shopware.Store.get("swCategoryDetail").landingPagesToDelete=void 0)},landingPage(e,t){if(!t&&this.isLoadingInitialData){this.loadLandingPages();return}e!==null&&t&&this.landingPageId!=="create"&&e.id===t.id&&this.landingPageRepository.get(e.id).then(n=>{this.$set(this.loadedLandingPages,n.id,n)})},currentLanguageId(){this.isLoadingInitialData=!0,this.loadedLandingPages={},this.loadLandingPages().finally(()=>{this.isLoadingInitialData=!1})}},created(){this.createdComponent()},methods:{createdComponent(){this.loadLandingPages().catch(()=>{this.createNotificationError({message:this.$tc("global.notification.unspecifiedSaveErrorMessage")})}).finally(()=>{this.isLoadingInitialData=!1})},loadLandingPages(){return this.landingPageRepository.search(this.cmsLandingPageCriteria).then(e=>{this.addLandingPages(e)})},checkedElementsCount(e){this.$emit("landing-page-checked-elements-count",e)},deleteCheckedItems(e){const t=Object.keys(e);this.landingPageRepository.syncDeleted(t).then(()=>{t.forEach(n=>this.removeFromStore(n))})},onDeleteLandingPage({data:e}){return e.isNew()?(delete this.loadedLandingPages[e.id],Promise.resolve()):this.landingPageRepository.delete(e.id).then(()=>{this.removeFromStore(e.id),e.id===this.landingPageId&&this.$router.push({name:"sw.category.index"})})},changeLandingPage(e){const t={name:"sw.category.landingPageDetail",params:{id:e.id}};this.landingPage&&this.landingPageRepository.hasChanges(this.landingPage)?this.$emit("unsaved-changes",t):this.$router.push(t)},duplicateElement(e){const t={cloneChildren:!1,overwrites:{name:`${e.data.name} ${this.$tc("global.default.copy")}`,url:`${e.data.url}-${this.$tc("global.default.copy")}`,active:!1}};this.landingPageRepository.clone(e.id,t,Shopware.Context.api).then(n=>{const a=new i(1,25);a.setIds([n.id]),this.landingPageRepository.search(a).then(s=>{s.forEach(o=>{o.childCount=0,o.parentId=null}),this.addLandingPages(s)})}).catch(()=>{this.createNotificationError({message:this.$tc("global.notification.unspecifiedSaveErrorMessage")})})},createNewElement(e,t,n=""){const a=this.createNewLandingPage(n);return this.addLandingPage(a),a},syncLandingPages(){return this.landingPageRepository.sync(this.landingPages)},createNewLandingPage(e){const t=this.landingPageRepository.create();return t.name=e,t.active=!1,t.save=()=>this.landingPageRepository.save(t).then(()=>{const n=new i(1,25);n.setIds([t.id].filter(a=>a!==null)),this.landingPageRepository.search(n).then(a=>{this.addLandingPages(a)})}),t},addLandingPage(e){e&&(this.loadedLandingPages={...this.loadedLandingPages,[e.id]:e})},addLandingPages(e){if(!e)return;const t=Object.entries(this.loadedLandingPages||{}),n=e.map(a=>[a.id,a]);this.loadedLandingPages=Object.fromEntries([...t,...n])},removeFromStore(e){this.loadedLandingPages=Object.fromEntries(Object.entries(this.loadedLandingPages||{}).filter(([t])=>t!==e))},getLandingPageUrl(e){return this.$router.resolve({name:this.linkContext,params:{id:e.id}}).href},newLandingPageUrl(){return{name:"sw.category.landingPageDetail",params:{id:"create"}}}}};export{l as default};
