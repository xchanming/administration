{"version":3,"file":"index-F9x_QvDa.js","sources":["../../../app/administration/src/module/sw-category/component/sw-category-tree/sw-category-tree.html.twig","../../../app/administration/src/module/sw-category/component/sw-category-tree/index.js"],"sourcesContent":["<!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n{% block sw_category_tree %}\n<div class=\"sw-category-tree\">\n    <sw-tree\n        v-if=\"!isLoadingInitialData\"\n        ref=\"categoryTree\"\n        class=\"sw-category-tree__inner\"\n        after-id-property=\"afterCategoryId\"\n        :items=\"categories\"\n        :sortable=\"sortable\"\n        :searchable=\"false\"\n        :active-tree-item-id=\"categoryId\"\n        :translation-context=\"translationContext\"\n        :on-change-route=\"changeCategory\"\n        :disable-context-menu=\"disableContextMenu\"\n        :allow-delete-categories=\"allowDelete || undefined\"\n        initially-expanded-root\n        @batch-delete=\"deleteCheckedItems\"\n        @delete-element=\"onDeleteCategory\"\n        @drag-end=\"onUpdatePositions\"\n        @get-tree-items=\"onGetTreeItems\"\n        @editing-end=\"syncSiblings\"\n        @checked-elements-count=\"checkedElementsCount\"\n    >\n\n        <template #headline>\n            <span></span>\n        </template>\n\n        <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n        {% block sw_category_tree_items %}\n        <template\n            #items=\"{\n                treeItems,\n                sortable,\n                draggedItem,\n                newElementId,\n                checkItem,\n                translationContext,\n                onChangeRoute,\n                disableContextMenu,\n                selectedItemsPathIds,\n                checkedItemIds,\n            }\"\n        >\n            <sw-tree-item\n                v-for=\"item in treeItems\"\n                :key=\"item.id\"\n                :item=\"item\"\n                :should-show-active-state=\"true\"\n                :allow-duplicate=\"false\"\n                :allow-new-categories=\"allowCreate || undefined\"\n                :allow-delete-categories=\"allowDelete || undefined\"\n                :active=\"item.active\"\n                :translation-context=\"translationContext\"\n                :on-change-route=\"onChangeRoute\"\n                :sortable=\"sortable\"\n                :dragged-item=\"draggedItem\"\n                :disable-context-menu=\"disableContextMenu\"\n                :display-checkbox=\"allowEdit || undefined\"\n                :context-menu-tooltip-text=\"contextMenuTooltipText\"\n                :new-element-id=\"newElementId\"\n                :get-item-url=\"getCategoryUrl\"\n                :get-is-highlighted=\"isHighlighted\"\n                :active-parent-ids=\"selectedItemsPathIds\"\n                :active-item-ids=\"checkedItemIds\"\n                @check-item=\"checkItem\"\n            />\n        </template>\n        {% endblock %}\n    </sw-tree>\n\n    <div v-else>\n        <sw-skeleton variant=\"tree-item\" />\n        <sw-skeleton variant=\"tree-item-nested\" />\n        <sw-skeleton variant=\"tree-item-nested\" />\n        <sw-skeleton variant=\"tree-item-nested\" />\n        <sw-skeleton variant=\"tree-item\" />\n        <sw-skeleton variant=\"tree-item-nested\" />\n        <sw-skeleton variant=\"tree-item-nested\" />\n    </div>\n</div>\n{% endblock %}\n","import template from './sw-category-tree.html.twig';\nimport './sw-category-tree.scss';\n\nconst { Criteria } = Cicada.Data;\nconst { mapState } = Cicada.Component.getComponentHelper();\n\n/**\n * @package discovery\n */\n// eslint-disable-next-line sw-deprecation-rules/private-feature-declarations\nexport default {\n    template,\n\n    compatConfig: Cicada.compatConfig,\n\n    inject: [\n        'repositoryFactory',\n        'syncService',\n    ],\n\n    emits: [\n        'category-checked-elements-count',\n        'unsaved-changes',\n    ],\n\n    mixins: ['notification'],\n\n    props: {\n        categoryId: {\n            type: String,\n            required: false,\n            default: null,\n        },\n\n        currentLanguageId: {\n            type: String,\n            required: true,\n        },\n\n        allowEdit: {\n            type: Boolean,\n            required: false,\n            // eslint-disable-next-line vue/no-boolean-default\n            default: true,\n        },\n\n        allowCreate: {\n            type: Boolean,\n            required: false,\n            // eslint-disable-next-line vue/no-boolean-default\n            default: true,\n        },\n\n        allowDelete: {\n            type: Boolean,\n            required: false,\n            // eslint-disable-next-line vue/no-boolean-default\n            default: true,\n        },\n    },\n\n    data() {\n        return {\n            loadedCategories: {},\n            translationContext: 'sw-category',\n            linkContext: 'sw.category.detail',\n            isLoadingInitialData: true,\n            loadedParentIds: [],\n            sortable: this.allowEdit,\n        };\n    },\n\n    computed: {\n        ...mapState('swCategoryDetail', [\n            'categoriesToDelete',\n        ]),\n\n        categoryRepository() {\n            return this.repositoryFactory.create('category');\n        },\n\n        category() {\n            return Cicada.State.get('swCategoryDetail').category;\n        },\n\n        categories() {\n            return Object.values(this.loadedCategories);\n        },\n\n        disableContextMenu() {\n            if (!this.allowEdit) {\n                return true;\n            }\n\n            return this.currentLanguageId !== Cicada.Context.api.systemLanguageId;\n        },\n\n        contextMenuTooltipText() {\n            if (!this.allowEdit) {\n                return this.$tc('sw-privileges.tooltip.warning');\n            }\n\n            return null;\n        },\n\n        criteria() {\n            return new Criteria(1, 500)\n                .addAssociation('navigationSalesChannels')\n                .addAssociation('footerSalesChannels')\n                .addAssociation('serviceSalesChannels');\n        },\n\n        criteriaWithChildren() {\n            const parentCriteria = Criteria.fromCriteria(this.criteria).setLimit(1);\n            parentCriteria.associations.push({\n                association: 'children',\n                criteria: Criteria.fromCriteria(this.criteria),\n            });\n\n            return parentCriteria;\n        },\n\n        cmsPageRepository() {\n            return this.repositoryFactory.create('cms_page');\n        },\n\n        productRepository() {\n            return this.repositoryFactory.create('product');\n        },\n    },\n\n    watch: {\n        categoriesToDelete(value) {\n            if (value === undefined) {\n                return;\n            }\n\n            this.$refs.categoryTree.onDeleteElements(value);\n\n            Cicada.State.commit('swCategoryDetail/setCategoriesToDelete', {\n                categoriesToDelete: undefined,\n            });\n        },\n\n        allowEdit(value) {\n            this.sortable = value;\n        },\n\n        category(newVal, oldVal) {\n            // load data when path is available\n            if (!oldVal && this.isLoadingInitialData) {\n                this.openInitialTree();\n                return;\n            }\n\n            // back to index\n            if (newVal === null) {\n                return;\n            }\n\n            // reload after save\n            if (oldVal && newVal.id === oldVal.id) {\n                const affectedCategoryIds = [\n                    newVal.id,\n                    ...oldVal.navigationSalesChannels.map((salesChannel) => salesChannel.navigationCategoryId),\n                    ...oldVal.footerSalesChannels.map((salesChannel) => salesChannel.footerCategoryId),\n                    ...oldVal.serviceSalesChannels.map((salesChannel) => salesChannel.serviceCategoryId),\n                ];\n\n                const criteria = Criteria.fromCriteria(this.criteria).setIds(\n                    affectedCategoryIds.filter((value, index, self) => {\n                        return value !== null && self.indexOf(value) === index;\n                    }),\n                );\n\n                this.categoryRepository.search(criteria).then((categories) => {\n                    this.addCategories(categories);\n                });\n            }\n        },\n\n        currentLanguageId() {\n            this.openInitialTree();\n        },\n    },\n\n    created() {\n        this.createdComponent();\n    },\n\n    methods: {\n        createdComponent() {\n            if (this.category !== null) {\n                this.openInitialTree();\n            }\n\n            if (!this.categoryId) {\n                this.loadRootCategories().finally(() => {\n                    this.isLoadingInitialData = false;\n                });\n            }\n        },\n\n        openInitialTree() {\n            this.isLoadingInitialData = true;\n            this.loadedCategories = {};\n            this.loadedParentIds = [];\n\n            this.loadRootCategories().then(() => {\n                if (!this.category || this.category.path === null) {\n                    this.isLoadingInitialData = false;\n                    return Promise.resolve();\n                }\n\n                const parentIds = this.category.path.split('|').filter((id) => !!id);\n                const parentPromises = [];\n\n                parentIds.forEach((id) => {\n                    const promise = this.categoryRepository\n                        .get(id, Cicada.Context.api, this.criteriaWithChildren)\n                        .then((result) => {\n                            this.addCategories([\n                                result,\n                                ...result.children,\n                            ]);\n                        });\n                    parentPromises.push(promise);\n                });\n\n                return Promise.all(parentPromises).then(() => {\n                    this.isLoadingInitialData = false;\n                });\n            });\n        },\n\n        onUpdatePositions: Cicada.Utils.debounce(function onUpdatePositions({ draggedItem, oldParentId, newParentId }) {\n            if (draggedItem.children.length > 0) {\n                draggedItem.children.forEach((child) => {\n                    this.removeFromStore(child.id);\n                });\n                this.loadedParentIds = this.loadedParentIds.filter((id) => id !== draggedItem.id);\n            }\n\n            this.syncSiblings({ parentId: newParentId }).then(() => {\n                if (oldParentId !== newParentId) {\n                    this.syncSiblings({ parentId: oldParentId }).then(() => {\n                        this.syncProducts(draggedItem.id);\n                    });\n                }\n\n                this.sortable = this.allowEdit;\n            });\n        }, 400),\n\n        syncProducts(categoryId) {\n            const criteria = new Criteria(1, 50);\n            criteria.addFilter(\n                Criteria.multi('or', [\n                    Criteria.equals('categoriesRo.id', categoryId),\n                    Criteria.equals('categories.id', categoryId),\n                ]),\n            );\n\n            return this.productRepository.iterateIds(criteria, this.indexProducts);\n        },\n\n        indexProducts(ids) {\n            const headers = this.productRepository.buildHeaders();\n\n            const initContainer = Cicada.Application.getContainer('init');\n            const httpClient = initContainer.httpClient;\n\n            return httpClient.post('/_action/index-products', { ids }, { headers });\n        },\n\n        checkedElementsCount(count) {\n            this.$emit('category-checked-elements-count', count);\n        },\n\n        async deleteCheckedItems(checkedItems) {\n            const ids = Object.keys(checkedItems);\n\n            const hasNavigationCategories = ids.some((id) => {\n                return (\n                    this.loadedCategories[id]?.navigationSalesChannels !== null &&\n                    this.loadedCategories[id]?.navigationSalesChannels.length > 0\n                );\n            });\n\n            if (hasNavigationCategories) {\n                this.createNotificationError({\n                    message: this.$tc('sw-category.general.errorNavigationEntryPointMultiple'),\n                });\n\n                const categories = ids.map((id) => {\n                    return this.loadedCategories[id];\n                });\n\n                // reload to remove selection\n                ids.forEach((deleted) => {\n                    if (this.isCompatEnabled('INSTANCE_DELETE')) {\n                        this.$delete(this.loadedCategories, deleted);\n                    } else {\n                        delete this.loadedCategories[deleted];\n                    }\n                });\n                this.$nextTick(() => {\n                    this.addCategories(categories);\n                });\n\n                return;\n            }\n\n            await this.categoryRepository.syncDeleted(ids, Cicada.Context.api);\n\n            const categories = ids.map((id) => this.loadedCategories[id]);\n\n            await this.fixSortingForCategories(categories);\n\n            ids.forEach((id) => {\n                this.removeFromStore(id);\n            });\n        },\n\n        onDeleteCategory({ data: category, children, checked }) {\n            if (category.isNew()) {\n                if (this.isCompatEnabled('INSTANCE_DELETE')) {\n                    this.$delete(this.loadedCategories, category.id);\n                } else {\n                    delete this.loadedCategories[category.id];\n                }\n                return Promise.resolve();\n            }\n\n            if (this.isErrorNavigationEntryPoint(category)) {\n                // remove delete flags\n                category.isDeleted = false;\n                if (children.length > 0) {\n                    children.forEach((child) => {\n                        child.data.isDeleted = false;\n                    });\n                }\n\n                // reinsert category in sorting because the tree\n                // already overwrites the afterCategoryId of the following category\n                const next = this.getNextCategory(category);\n\n                if (next) {\n                    next.afterCategoryId = category.id;\n                }\n\n                // reload after changes\n                this.loadedCategories = { ...this.loadedCategories };\n\n                this.createNotificationError({\n                    message: this.entryPointWarningMessage(category),\n                });\n                return Promise.resolve();\n            }\n\n            return this.categoryRepository.delete(category.id).then(async () => {\n                this.removeFromStore(category.id);\n\n                if (category.parentId !== null) {\n                    const updatedParent = await this.categoryRepository.get(\n                        category.parentId,\n                        Cicada.Context.api,\n                        this.criteria,\n                    );\n                    this.addCategory(updatedParent);\n                }\n\n                await this.fixSortingForCategories([category], true);\n\n                if (category.id === this.categoryId) {\n                    this.$router.push({ name: 'sw.category.index' });\n                }\n\n                if (checked === true) {\n                    this.$refs.categoryTree.checkedElementsCount -= 1;\n                    this.$emit('category-checked-elements-count', this.$refs.categoryTree.checkedElementsCount);\n                }\n            });\n        },\n\n        fixSortingForCategories(categories, isSorted = false) {\n            const categoriesToBeChanged = [];\n\n            categories.forEach((category) => {\n                // We need the second parameter, because the value of `afterCategoryId` of the actual next category\n                // is either updated already in case of `onDeleteCategory`, but not in case of `deleteCheckedItems`\n                const nextCategory = this.getNextCategory(category, isSorted ? 'afterCategoryId' : 'id');\n\n                if (!nextCategory) {\n                    return;\n                }\n\n                nextCategory.afterCategoryId = category.afterCategoryId;\n\n                if (categories.find((item) => item.id === nextCategory.id)) {\n                    return;\n                }\n\n                categoriesToBeChanged.push(nextCategory);\n            });\n\n            return this.categoryRepository.saveAll(categoriesToBeChanged);\n        },\n\n        getNextCategory(category, key = 'id') {\n            return Object.values(this.loadedCategories).find((item) => {\n                return item.parentId === category.parentId && item.afterCategoryId === category[key];\n            });\n        },\n\n        changeCategory(category) {\n            const route = {\n                name: 'sw.category.detail',\n                params: { id: category.id },\n            };\n            if (this.category && this.categoryRepository.hasChanges(this.category)) {\n                this.$emit('unsaved-changes', route);\n            } else {\n                this.$router.push(route);\n            }\n        },\n\n        onGetTreeItems(parentId) {\n            if (this.loadedParentIds.includes(parentId)) {\n                return Promise.resolve();\n            }\n\n            const criteria = Criteria.fromCriteria(this.criteria);\n            criteria.addFilter(Criteria.equals('parentId', parentId));\n            // in case the criteria has been altered to search specific ids e.g. by dragndrop position change\n            // reset all ids so categories can be found solely by parentId\n            criteria.setIds([]);\n\n            return this.categoryRepository.search(criteria).then((children) => {\n                this.addCategories(children);\n                this.loadedParentIds.push(parentId);\n            });\n        },\n\n        getChildrenFromParent(parentId) {\n            return this.onGetTreeItems(parentId);\n        },\n\n        loadRootCategories() {\n            const criteria = Criteria.fromCriteria(this.criteria).addFilter(Criteria.equals('parentId', null));\n\n            return this.categoryRepository.search(criteria).then((result) => {\n                this.addCategories(result);\n            });\n        },\n\n        createNewElement(contextItem, parentId, name = '') {\n            this.sortable = false;\n\n            if (!parentId && contextItem) {\n                parentId = contextItem.parentId;\n            }\n            const newCategory = this.createNewCategory(name, parentId);\n            this.addCategory(newCategory);\n            return newCategory;\n        },\n\n        createNewCategory(name, parentId) {\n            const newCategory = this.categoryRepository.create();\n\n            newCategory.name = name;\n            newCategory.parentId = parentId;\n            newCategory.childCount = 0;\n            newCategory.active = false;\n            newCategory.visible = true;\n\n            newCategory.save = () => {\n                return this.categoryRepository.save(newCategory).then(() => {\n                    const criteria = Criteria.fromCriteria(this.criteria).setIds(\n                        [\n                            newCategory.id,\n                            parentId,\n                        ].filter((id) => id !== null),\n                    );\n                    this.categoryRepository.search(criteria).then((categories) => {\n                        this.addCategories(categories);\n\n                        this.sortable = this.allowEdit;\n                    });\n                });\n            };\n\n            return newCategory;\n        },\n\n        syncSiblings({ parentId }) {\n            const siblings = this.categories.filter((category) => {\n                return category.parentId === parentId;\n            });\n\n            return this.categoryRepository\n                .sync(siblings)\n                .then(() => {\n                    this.loadedParentIds = this.loadedParentIds.filter((id) => id !== parentId);\n                    return this.getChildrenFromParent(parentId);\n                })\n                .then(() => {\n                    this.categoryRepository.get(parentId, Cicada.Context.api, this.criteria).then((parent) => {\n                        this.addCategory(parent);\n                    });\n                });\n        },\n\n        addCategory(category) {\n            if (!category) {\n                return;\n            }\n\n            if (this.isCompatEnabled('INSTANCE_SET')) {\n                this.$set(this.loadedCategories, category.id, category);\n            } else {\n                this.loadedCategories[category.id] = category;\n            }\n        },\n\n        addCategories(categories) {\n            categories.forEach((category) => {\n                if (this.isCompatEnabled('INSTANCE_SET')) {\n                    this.$set(this.loadedCategories, category.id, category);\n                } else {\n                    this.loadedCategories[category.id] = category;\n                }\n            });\n        },\n\n        removeFromStore(id) {\n            const deletedIds = this.getDeletedIds(id);\n            this.loadedParentIds = this.loadedParentIds.filter((loadedId) => {\n                return !deletedIds.includes(loadedId);\n            });\n\n            deletedIds.forEach((deleted) => {\n                if (this.isCompatEnabled('INSTANCE_DELETE')) {\n                    this.$delete(this.loadedCategories, deleted);\n                } else {\n                    delete this.loadedCategories[deleted];\n                }\n            });\n        },\n\n        getDeletedIds(idToDelete) {\n            const idsToDelete = [idToDelete];\n            Object.keys(this.loadedCategories).forEach((id) => {\n                const currentCategory = this.loadedCategories[id];\n                if (currentCategory.parentId === idToDelete) {\n                    idsToDelete.push(...this.getDeletedIds(id));\n                }\n            });\n            return idsToDelete;\n        },\n\n        getCategoryUrl(category) {\n            return this.$router.resolve({\n                name: this.linkContext,\n                params: { id: category.id },\n            }).href;\n        },\n\n        isHighlighted({ data: category }) {\n            return (\n                (category.navigationSalesChannels !== null && category.navigationSalesChannels.length > 0) ||\n                (category.serviceSalesChannels !== null && category.serviceSalesChannels.length > 0) ||\n                (category.footerSalesChannels !== null && category.footerSalesChannels.length > 0)\n            );\n        },\n\n        isErrorNavigationEntryPoint(category) {\n            const { navigationSalesChannels, serviceSalesChannels, footerSalesChannels } = category;\n\n            return [\n                navigationSalesChannels,\n                serviceSalesChannels,\n                footerSalesChannels,\n            ].some((navigation) => navigation !== null && navigation?.length > 0);\n        },\n\n        entryPointWarningMessage(category) {\n            const { serviceSalesChannels, footerSalesChannels } = category;\n\n            if (serviceSalesChannels !== null && serviceSalesChannels?.length > 0) {\n                return this.$tc('sw-category.general.errorNavigationEntryPoint', 0, {\n                    entryPointLabel: this.$tc('sw-category.base.entry-point-card.types.labelServiceNavigation'),\n                });\n            }\n\n            if (footerSalesChannels !== null && footerSalesChannels?.length > 0) {\n                return this.$tc('sw-category.general.errorNavigationEntryPoint', 0, {\n                    entryPointLabel: this.$tc('sw-category.base.entry-point-card.types.labelFooterNavigation'),\n                });\n            }\n\n            return this.$tc('sw-category.general.errorNavigationEntryPoint', 0, {\n                entryPointLabel: this.$tc('sw-category.base.entry-point-card.types.labelMainNavigation'),\n            });\n        },\n    },\n};\n"],"names":["template","Criteria","mapState","index","parentCriteria","value","newVal","oldVal","affectedCategoryIds","salesChannel","criteria","self","categories","parentIds","id","parentPromises","promise","result","draggedItem","oldParentId","newParentId","child","categoryId","ids","headers","count","checkedItems","_a","_b","deleted","category","children","checked","next","updatedParent","isSorted","categoriesToBeChanged","nextCategory","item","key","route","parentId","contextItem","name","newCategory","siblings","parent","deletedIds","loadedId","idToDelete","idsToDelete","navigationSalesChannels","serviceSalesChannels","footerSalesChannels","navigation"],"mappings":"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"}