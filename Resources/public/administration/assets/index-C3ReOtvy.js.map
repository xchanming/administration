{"version":3,"file":"index-C3ReOtvy.js","sources":["../../../app/administration/src/module/sw-order/component/sw-order-state-history-modal/sw-order-state-history-modal.html.twig","../../../app/administration/src/module/sw-order/component/sw-order-state-history-modal/index.ts"],"sourcesContent":["<!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n{% block sw_order_state_history_modal %}\n<sw-modal\n    :title=\"$tc('sw-order.stateHistoryModal.modalTitle')\"\n    :is-loading=\"isLoading\"\n    variant=\"large\"\n    @modal-close=\"onClose\"\n>\n    <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n    {% block sw_order_state_history_modal_content %}\n    <sw-data-grid\n        :columns=\"columns\"\n        :data-source=\"dataSource\"\n        :is-loading=\"isLoading || statesLoading\"\n        :plain-appearance=\"true\"\n        :show-selection=\"false\"\n        :show-actions=\"false\"\n    >\n\n        <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n        {% block sw_order_state_history_modal_content_columns_created_at %}\n        <template #column-createdAt=\"{ item }\">\n            <sw-time-ago :date=\"item.createdAt\" />\n        </template>\n        {% endblock %}\n\n        <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n        {% block sw_order_state_history_modal_content_columns_entity %}\n        <template #column-entity=\"{ item }\">\n            {{ $tc('global.entities.' + item.entity) }} {{ enumerateTransaction(item) }}\n        </template>\n        {% endblock %}\n\n        <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n        {% block sw_order_state_history_modal_content_columns_user %}\n        <template #column-user=\"{ item }\">\n            {{ item.user?.username ?? $tc('sw-order.stateHistoryModal.labelSystemUser') }}\n        </template>\n        {% endblock %}\n\n        <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n        {% block sw_order_state_history_modal_content_columns_order_state %}\n        <template #column-order=\"{ item }\">\n            <sw-label\n                :variant=\"getVariantState('order', item.order)\"\n                appearance=\"badged\"\n            >\n                {{ item.order.translated.name }}\n            </sw-label>\n        </template>\n        {% endblock %}\n\n        <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n        {% block sw_order_state_history_modal_content_columns_delivery_state %}\n        <template #column-delivery=\"{ item }\">\n            <sw-label\n                v-if=\"item.delivery\"\n                :variant=\"getVariantState('order_delivery', item.delivery)\"\n                appearance=\"badged\"\n            >\n                {{ item.delivery.translated.name }}\n            </sw-label>\n        </template>\n        {% endblock %}\n\n        <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n        {% block sw_order_state_history_modal_content_columns_transaction_state %}\n        <template #column-transaction=\"{ item }\">\n            <sw-label\n                :variant=\"getVariantState('order_transaction', item.transaction)\"\n                appearance=\"badged\"\n            >\n                {{ item.transaction.translated.name }}\n            </sw-label>\n        </template>\n        {% endblock %}\n\n        <template #pagination>\n            <sw-pagination\n                :page=\"page\"\n                :limit=\"limit\"\n                :total=\"total\"\n                :steps=\"steps\"\n                @page-change=\"onPageChange\"\n            />\n        </template>\n    </sw-data-grid>\n    {% endblock %}\n\n    <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n    {% block sw_order_state_history_modal_actions %}\n    <template #modal-footer>\n        <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n        {% block sw_order_state_history_modal_action_close %}\n        <sw-button\n            size=\"small\"\n            @click=\"onClose\"\n        >\n            {{ $tc('global.default.close') }}\n        </sw-button>\n        {% endblock %}\n    </template>\n    {% endblock %}\n</sw-modal>\n{% endblock %}\n\n","import type { Entity } from '@cicada-ag/meteor-admin-sdk/es/_internals/data/Entity';\nimport type EntityCollection from '@cicada-ag/meteor-admin-sdk/es/_internals/data/EntityCollection';\nimport type { PropType } from 'vue';\nimport type RepositoryType from 'src/core/data/repository.data';\nimport type CriteriaType from 'src/core/data/criteria.data';\nimport template from './sw-order-state-history-modal.html.twig';\n\n/**\n * @package checkout\n */\n\nconst { Component, Mixin } = Cicada;\nconst { Criteria } = Cicada.Data;\n\ninterface StateMachineHistoryData {\n    order: Entity<'state_machine_state'>;\n    transaction: Entity<'state_machine_state'>;\n    delivery: Entity<'state_machine_state'>;\n    createdAt: string;\n    user?: {\n        username: string;\n    };\n    entity: string;\n    referencedId?: string;\n}\n\ninterface CombinedStates {\n    order: Entity<'state_machine_state'>;\n    ['order_transaction']: Entity<'state_machine_state'>;\n    ['order_delivery']: Entity<'state_machine_state'>;\n}\n\n// eslint-disable-next-line sw-deprecation-rules/private-feature-declarations\nexport default Component.wrapComponentConfig({\n    template,\n\n    compatConfig: Cicada.compatConfig,\n\n    inject: [\n        'repositoryFactory',\n        'stateStyleDataProviderService',\n    ],\n\n    mixins: [\n        Mixin.getByName('notification'),\n    ],\n\n    props: {\n        order: {\n            type: Object as PropType<Entity<'order'>>,\n            required: true,\n        },\n        isLoading: {\n            type: Boolean,\n            required: true,\n        },\n    },\n\n    data(): {\n        dataSource: StateMachineHistoryData[];\n        statesLoading: boolean;\n        limit: number;\n        page: number;\n        total: number;\n        steps: number[];\n    } {\n        return {\n            dataSource: [],\n            statesLoading: true,\n            limit: 10,\n            page: 1,\n            total: 0,\n            steps: [\n                5,\n                10,\n                25,\n            ],\n        };\n    },\n\n    computed: {\n        stateMachineHistoryRepository(): RepositoryType<'state_machine_history'> {\n            return this.repositoryFactory.create('state_machine_history');\n        },\n\n        stateMachineHistoryCriteria(): CriteriaType {\n            const criteria = new Criteria(this.page, this.limit);\n\n            const entityIds = [\n                this.order.id,\n                ...(this.order.transactions ?? []).map((transaction) => {\n                    return transaction.id;\n                }),\n                ...(this.order.deliveries ?? []).map((delivery) => {\n                    return delivery.id;\n                }),\n            ];\n\n            criteria.addFilter(Criteria.equalsAny('state_machine_history.referencedId', entityIds));\n            criteria.addFilter(\n                Criteria.equalsAny('state_machine_history.entityName', [\n                    'order',\n                    'order_transaction',\n                    'order_delivery',\n                ]),\n            );\n            criteria.addAssociation('fromStateMachineState');\n            criteria.addAssociation('toStateMachineState');\n            criteria.addAssociation('user');\n            criteria.addSorting({\n                field: 'state_machine_history.createdAt',\n                order: 'ASC',\n                naturalSorting: false,\n            });\n\n            return criteria;\n        },\n\n        columns(): Array<{ property: string; label: string }> {\n            return [\n                {\n                    property: 'createdAt',\n                    label: this.$tc('sw-order.stateHistoryModal.column.createdAt'),\n                },\n                {\n                    property: 'entity',\n                    label: this.$tc('sw-order.stateHistoryModal.column.entity'),\n                },\n                {\n                    property: 'user',\n                    label: this.$tc('sw-order.stateHistoryModal.column.user'),\n                },\n                {\n                    property: 'transaction',\n                    label: this.$tc('sw-order.stateHistoryModal.column.transaction'),\n                },\n                {\n                    property: 'delivery',\n                    label: this.$tc('sw-order.stateHistoryModal.column.delivery'),\n                },\n                {\n                    property: 'order',\n                    label: this.$tc('sw-order.stateHistoryModal.column.order'),\n                },\n            ];\n        },\n\n        hasMultipleTransactions(): boolean {\n            return (this.order?.transactions?.filter((v, idx, a) => a.indexOf(v) === idx)?.length ?? 0) > 1;\n        },\n    },\n\n    created() {\n        this.createdComponent();\n    },\n\n    methods: {\n        createdComponent(): void {\n            void this.loadHistory();\n        },\n\n        async loadHistory(): Promise<void> {\n            this.statesLoading = true;\n\n            try {\n                await this.getStateHistoryEntries();\n            } catch (error: unknown) {\n                // @ts-expect-error\n                // eslint-disable-next-line max-len\n                // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access,@typescript-eslint/no-unsafe-assignment\n                const errorMessage = error?.response?.data?.errors?.[0]?.detail || '';\n\n                this.createNotificationError({\n                    // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n                    message: errorMessage,\n                });\n            } finally {\n                this.statesLoading = false;\n            }\n        },\n\n        getStateHistoryEntries(): Promise<EntityCollection<'state_machine_history'>> {\n            return this.stateMachineHistoryRepository.search(this.stateMachineHistoryCriteria).then((fetchedEntries) => {\n                this.dataSource = this.buildStateHistory(fetchedEntries);\n                this.total = fetchedEntries.total ?? 1;\n                return Promise.resolve(fetchedEntries);\n            });\n        },\n\n        buildStateHistory(allEntries: EntityCollection<'state_machine_history'>): StateMachineHistoryData[] {\n            const states = {\n                order:\n                    allEntries.filter((entry) => {\n                        return entry.entityName === 'order';\n                    })[0]?.fromStateMachineState ?? this.order.stateMachineState,\n                order_transaction:\n                    allEntries.filter((entry) => {\n                        return entry.entityName === 'order_transaction';\n                    })[0]?.fromStateMachineState ?? this.order.transactions?.last()?.stateMachineState,\n                order_delivery:\n                    allEntries.filter((entry) => {\n                        return entry.entityName === 'order_delivery';\n                    })[0]?.fromStateMachineState ?? this.order.deliveries?.first()?.stateMachineState,\n            };\n\n            const entries = [] as Array<StateMachineHistoryData>;\n\n            if (this.page === 1) {\n                // @ts-expect-error - states exists\n                // Prepend start state\n                entries.push(this.createEntry(states, this.order));\n            }\n\n            const knownTransactionIds: string[] = [];\n            allEntries.forEach((entry: Entity<'state_machine_history'>) => {\n                if (entry.entityName === 'order_transaction' && !knownTransactionIds.includes(entry.referencedId)) {\n                    if (knownTransactionIds.length > 0) {\n                        entries.push(\n                            this.createEntry(\n                                {\n                                    ...states,\n                                    // @ts-expect-error - states exists\n                                    order_transaction: entry.fromStateMachineState,\n                                },\n                                { ...entry, user: undefined },\n                            ),\n                        );\n                    }\n\n                    knownTransactionIds.push(entry.referencedId);\n                }\n\n                // @ts-expect-error - the entityName have to be order, order_transaction or order_delivery\n                states[entry.entityName] = entry.toStateMachineState;\n                // @ts-expect-error - states exists\n                entries.push(this.createEntry(states, entry));\n            });\n\n            return entries;\n        },\n\n        createEntry(\n            states: CombinedStates,\n            entry: Entity<'state_machine_history'> | Entity<'order'>,\n        ): StateMachineHistoryData {\n            return {\n                order: states.order,\n                transaction: states.order_transaction,\n                delivery: states.order_delivery,\n                createdAt: 'orderDateTime' in entry ? entry.orderDateTime : entry.createdAt,\n                user: 'user' in entry ? entry.user : undefined,\n                entity: 'entityName' in entry ? entry.entityName : 'order',\n                referencedId: 'referencedId' in entry ? entry.referencedId : undefined,\n            };\n        },\n\n        getVariantState(entity: string, state: Entity<'state_machine_state'>): string {\n            // eslint-disable-next-line max-len\n            // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access,@typescript-eslint/no-unsafe-call,@typescript-eslint/no-unsafe-return\n            return this.stateStyleDataProviderService.getStyle(`${entity}.state`, state.technicalName).variant;\n        },\n\n        onClose(): void {\n            this.$emit('modal-close');\n        },\n\n        onPageChange({ page, limit }: { page: number; limit: number }): void {\n            this.page = page;\n            this.limit = limit;\n\n            void this.loadHistory();\n        },\n\n        enumerateTransaction(item: StateMachineHistoryData): string {\n            if (item.entity !== 'order_transaction' || !this.hasMultipleTransactions) {\n                return '';\n            }\n\n            const idx = this.order.transactions?.findIndex((transaction) => transaction.id === item.referencedId) ?? -1;\n\n            return String(idx >= 0 ? idx + 1 : '');\n        },\n    },\n});\n"],"names":["template","Component","Mixin","Criteria","index","criteria","entityIds","transaction","delivery","_a","_b","_c","v","idx","a","_d","error","errorMessage","fetchedEntries","allEntries","_e","_f","_g","states","entry","entries","knownTransactionIds","entity","state","page","limit","item"],"mappings":"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"}