const a=`{% block sw_first_run_wizard_shopware_domain %} <div class="sw-first-run-wizard-shopware-domain"> <h3 class="headline"> {{ $tc('sw-first-run-wizard.shopwareDomain.headline') }} </h3> <p class="message" v-html="$tc('sw-first-run-wizard.shopwareDomain.message')" ></p> <sw-switch-field v-model:value="createShopDomain" :label="$tc('sw-first-run-wizard.shopwareDomain.labelCreateDomain')" /> <div v-if="createShopDomain"> <sw-text-field v-model:value="newShopDomain" name="newShopDomain" validation="required" :label="'Shop domain'" /> <sw-checkbox-field v-model:value="testEnvironment" :label="$tc('sw-first-run-wizard.shopwareDomain.testEnvironment')" /> </div> <div v-else-if="licenceDomains.length > 0"> <sw-select-field v-model:value="selectedShopDomain" label="Shop domain" placeholder="" > <option v-for="domain in licenceDomains" :key="domain.domain" :value="domain.domain" > {{ domain.domain }} </option> </sw-select-field> </div> <div v-if="domainError" class="sw-first-run-wizard-shopware-domain__error" > <sw-alert :title="domainError.title" variant="error" appearance="notification" > {{ domainError.detail }} </sw-alert> </div> <sw-loader v-if="isLoading" /> </div> {% endblock %}`,o={template:a,inject:["firstRunWizardService"],emits:["frw-set-title","buttons-update","frw-redirect"],data(){return{licenceDomains:[],selectedShopDomain:"",createShopDomain:!1,newShopDomain:"",testEnvironment:!1,domainError:null,isLoading:!1}},computed:{domainToVerify(){return this.createShopDomain?this.newShopDomain:this.selectedShopDomain},isDomainEmpty(){return this.domainToVerify.length<=0},nextAction(){return Shopware.Store.get("context").app.config.settings.disableExtensionManagement?"sw.first.run.wizard.index.finish":"sw.first.run.wizard.index.store"}},watch:{isDomainEmpty(){this.updateButtons()}},created(){this.createdComponent()},methods:{createdComponent(){this.isLoading=!0,this.updateButtons(),this.setTitle(),this.firstRunWizardService.getLicenseDomains().then(e=>{const{items:i}=e;!i||i.length<1||(this.licenceDomains=i,this.selectedShopDomain=i[0].domain)}).finally(()=>{this.licenceDomains.length<=0&&(this.createShopDomain=!0),this.isLoading=!1})},setTitle(){this.$emit("frw-set-title",this.$tc("sw-first-run-wizard.shopwareAccount.modalTitle"))},updateButtons(){const e=[{key:"back",label:this.$tc("sw-first-run-wizard.general.buttonBack"),position:"left",variant:null,action:"sw.first.run.wizard.index.shopware.account",disabled:!1},{key:"next",label:this.$tc("sw-first-run-wizard.general.buttonNext"),position:"right",variant:"primary",action:this.verifyDomain.bind(this),disabled:this.isDomainEmpty}];this.$emit("buttons-update",e)},verifyDomain(){const{testEnvironment:e}=this,i=this.domainToVerify;return this.domainError=null,this.firstRunWizardService.verifyLicenseDomain({domain:i,testEnvironment:e}).then(()=>(this.$emit("frw-redirect",this.nextAction),!1)).catch(t=>{const n=t.response.data.errors.pop();return this.domainError=n,!0})}}};export{o as default};
