{"version":3,"file":"index-BpevX6F1.js","sources":["../../../app/administration/src/module/sw-flow/page/sw-flow-detail/sw-flow-detail.html.twig","../../../app/administration/src/module/sw-flow/page/sw-flow-detail/index.js"],"sourcesContent":["<!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n{% block sw_flow_detail %}\n<sw-page class=\"sw-flow-detail\">\n    <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n    {% block sw_flow_detail_header %}\n    <template #smart-bar-header>\n        <h2>{{ placeholder(flow, 'name', $tc('sw-flow.detail.textHeadline')) }}</h2>\n    </template>\n    {% endblock %}\n\n    <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n    {% block sw_flow_detail_smart_bar_actions %}\n    <template #smart-bar-actions>\n        <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n        {% block sw_flow_detail_smart_bar_actions_save %}\n        <sw-button-process\n            v-tooltip=\"{\n                message: $tc('sw-privileges.tooltip.warning'),\n                disabled: acl.can('flow.editor'),\n                position: 'bottom',\n                showOnDisabledElements: true\n            }\"\n            class=\"sw-flow-detail__save\"\n            variant=\"primary\"\n            :is-loading=\"isLoading\"\n            :process-success=\"isSaveSuccessful\"\n            :disabled=\"!acl.can('flow.editor')\"\n            @update:process-success=\"saveFinish\"\n            @click.prevent=\"onSave\"\n        >\n            {{ $tc('global.default.save') }}\n        </sw-button-process>\n        {% endblock %}\n    </template>\n    {% endblock %}\n\n    <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n    {% block sw_flow_content %}\n    <template #content>\n        <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n        {% block sw_flow_leave_page_modal %}\n        <sw-flow-leave-page-modal\n            v-if=\"showLeavePageWarningModal\"\n            @page-leave-cancel=\"onLeaveModalClose\"\n            @page-leave-confirm=\"onLeaveModalConfirm\"\n        />\n        {% endblock %}\n\n        <sw-card-view :class=\"{'sw-flow-detail__template': isTemplate }\">\n            <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n            {% block sw_flow_tabs_header %}\n            <sw-tabs position-identifier=\"sw-flow-detail\">\n                <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n                {% block sw_flow_tabs_header_general %}\n                <sw-tabs-item\n                    class=\"sw-flow-detail__tab-general\"\n                    :route=\"routeDetailTab('general')\"\n                >\n                    {{ $tc('sw-flow.page.tabGeneral') }}\n                </sw-tabs-item>\n                {% endblock %}\n\n                <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n                {% block sw_flow_tabs_header_builder %}\n                <sw-tabs-item\n                    class=\"sw-flow-detail__tab-flow\"\n                    :route=\"routeDetailTab('flow')\"\n                >\n                    {{ $tc('sw-flow.page.tabFlow') }}\n                </sw-tabs-item>\n                {% endblock %}\n\n                <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n                {% block sw_flow_tabs_header_extension %}{% endblock %}\n            </sw-tabs>\n            {% endblock %}\n            <sw-alert\n                v-if=\"isTemplate\"\n                variant=\"warning\"\n                class=\"sw-flow-detail__warning\"\n            >\n                {{ $tc('sw-flow.flowNotification.messageWarningSave') }}\n            </sw-alert>\n            <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n            {% block sw_flow_tabs_content %}\n            <template v-if=\"isLoading\">\n                <sw-skeleton />\n                <sw-skeleton />\n            </template>\n\n            <template v-else>\n                <router-view\n                    v-slot=\"{ Component }\"\n                >\n                    <component\n                        :is=\"Component\"\n                        :is-loading=\"isLoading\"\n                        :is-new-flow=\"isNewFlow\"\n                        :is-template=\"isTemplate\"\n                        :is-unknown-trigger=\"isUnknownTrigger\"\n                    />\n                </router-view>\n            </template>\n            {% endblock %}\n        </sw-card-view>\n\n        <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n        {% block sw_flow_detail_modal_extension %}{% endblock %}\n    </template>\n    {% endblock %}\n</sw-page>\n{% endblock %}\n","import template from './sw-flow-detail.html.twig';\nimport './sw-flow-detail.scss';\n\nconst { Component, Mixin, Context, State, Utils, Service } = Cicada;\nconst { Criteria, EntityCollection } = Cicada.Data;\nconst { cloneDeep } = Cicada.Utils.object;\nconst { mapState, mapGetters, mapPropertyErrors } = Component.getComponentHelper();\n\n/**\n * @private\n * @package services-settings\n */\nexport default {\n    template,\n\n    compatConfig: Cicada.compatConfig,\n\n    inject: [\n        'acl',\n        'repositoryFactory',\n        'feature',\n        'flowBuilderService',\n    ],\n\n    mixins: [\n        Mixin.getByName('placeholder'),\n        Mixin.getByName('notification'),\n    ],\n\n    props: {\n        flowId: {\n            type: String,\n            required: false,\n            default: null,\n        },\n    },\n\n    data() {\n        return {\n            isLoading: false,\n            isSaveSuccessful: false,\n            showLeavePageWarningModal: false,\n            nextRoute: null,\n        };\n    },\n\n    metaInfo() {\n        return {\n            title: this.$createTitle(this.identifier),\n        };\n    },\n\n    computed: {\n        identifier() {\n            return this.flow?.name;\n        },\n\n        flowRepository() {\n            return this.repositoryFactory.create('flow');\n        },\n\n        flowTemplateRepository() {\n            return this.repositoryFactory.create('flow_template');\n        },\n\n        flowSequenceRepository() {\n            return this.repositoryFactory.create('flow_sequence');\n        },\n\n        appFlowActionRepository() {\n            return this.repositoryFactory.create('app_flow_action');\n        },\n\n        isNewFlow() {\n            return !this.flowId;\n        },\n\n        flowCriteria() {\n            const criteria = new Criteria(1, 25);\n\n            criteria.addAssociation('sequences.rule');\n            criteria\n                .getAssociation('sequences')\n                .addSorting(Criteria.sort('displayGroup', 'ASC'))\n                .addSorting(Criteria.sort('parentId', 'ASC'))\n                .addSorting(Criteria.sort('trueCase', 'ASC'))\n                .addSorting(Criteria.sort('position', 'ASC'));\n\n            return criteria;\n        },\n\n        flowTemplateCriteria() {\n            return new Criteria(1, 25);\n        },\n\n        documentTypeRepository() {\n            return this.repositoryFactory.create('document_type');\n        },\n\n        documentTypeCriteria() {\n            const criteria = new Criteria(1, 100);\n            criteria.addSorting(Criteria.sort('name', 'ASC'));\n            return criteria;\n        },\n\n        mailTemplateRepository() {\n            return this.repositoryFactory.create('mail_template');\n        },\n\n        customFieldSetRepository() {\n            return this.repositoryFactory.create('custom_field_set');\n        },\n\n        customFieldRepository() {\n            return this.repositoryFactory.create('custom_field');\n        },\n\n        mailTemplateIdsCriteria() {\n            const criteria = new Criteria(1, 25);\n            criteria.addAssociation('mailTemplateType');\n            criteria.addFilter(Criteria.equalsAny('id', this.mailTemplateIds));\n            return criteria;\n        },\n\n        customerGroupRepository() {\n            return this.repositoryFactory.create('customer_group');\n        },\n\n        customerGroupCriteria() {\n            const criteria = new Criteria(1, 100);\n            criteria.addSorting(Criteria.sort('name', 'ASC'));\n            return criteria;\n        },\n\n        appFlowActionCriteria() {\n            const criteria = new Criteria(1, 25);\n            criteria.addAssociation('app');\n            return criteria;\n        },\n\n        stateMachineStateRepository() {\n            return this.repositoryFactory.create('state_machine_state');\n        },\n\n        stateMachineStateCriteria() {\n            const criteria = new Criteria(1, null);\n            criteria.addSorting({ field: 'name', order: 'ASC' });\n            criteria.addAssociation('stateMachine');\n            criteria.addFilter(\n                Criteria.equalsAny('state_machine_state.stateMachine.technicalName', [\n                    'order.state',\n                    'order_transaction.state',\n                    'order_delivery.state',\n                ]),\n            );\n\n            return criteria;\n        },\n\n        customFieldSetCriteria() {\n            const criteria = new Criteria(1, 25);\n            criteria.addFilter(Criteria.equalsAny('id', this.customFieldSetIds));\n            return criteria;\n        },\n\n        customFieldCriteria() {\n            const criteria = new Criteria(1, 25);\n            criteria.addFilter(Criteria.equalsAny('id', this.customFieldIds));\n            return criteria;\n        },\n\n        ruleRepository() {\n            return this.repositoryFactory.create('rule');\n        },\n\n        isTemplate() {\n            return this.$route.query?.type === 'template';\n        },\n\n        isUnknownTrigger() {\n            if (!this.flowId || this.isLoading) {\n                return false;\n            }\n\n            return !this.triggerEvents.some((event) => {\n                return event.name === this.flow.eventName;\n            });\n        },\n\n        ...mapState('swFlowState', [\n            'flow',\n            'triggerEvents',\n        ]),\n        ...mapGetters('swFlowState', [\n            'sequences',\n            'mailTemplateIds',\n            'customFieldSetIds',\n            'customFieldIds',\n            'hasFlowChanged',\n        ]),\n        ...mapPropertyErrors('flow', [\n            'name',\n            'eventName',\n        ]),\n    },\n\n    watch: {\n        flowId() {\n            if (!this.$route.params.flowTemplateId) {\n                this.getDetailFlow();\n            }\n        },\n    },\n\n    created() {\n        this.createdComponent();\n    },\n\n    beforeRouteLeave(to, from, next) {\n        if (this.flow._isNew) {\n            next();\n            return;\n        }\n\n        if (this.hasFlowChanged) {\n            this.nextRoute = next;\n            this.showLeavePageWarningModal = true;\n        } else {\n            next();\n        }\n    },\n\n    beforeUnmount() {\n        this.beforeDestroyComponent();\n    },\n\n    methods: {\n        createdComponent() {\n            Service('flowBuilderService').addLabels({\n                entity: 'sw-flow.labelDescription.labelEntity',\n                tagIds: 'sw-flow.labelDescription.labelTag',\n            });\n\n            Cicada.ExtensionAPI.publishData({\n                id: 'sw-flow-detail__flow',\n                path: 'flow',\n                scope: this,\n            });\n\n            this.getAppFlowAction();\n\n            if (this.isTemplate) {\n                this.getDetailFlowTemplate();\n                return;\n            }\n\n            if (this.flowId) {\n                this.getDetailFlow();\n                return;\n            }\n\n            this.createNewFlow();\n        },\n\n        beforeDestroyComponent() {\n            State.dispatch('swFlowState/resetFlowState');\n        },\n\n        routeDetailTab(tabName) {\n            if (!tabName) return {};\n\n            if (this.isNewFlow) {\n                if (this.$route.params.flowTemplateId) {\n                    return {\n                        name: `sw.flow.create.${tabName}`,\n                        params: {\n                            flowTemplateId: this.$route.params.flowTemplateId,\n                        },\n                    };\n                }\n\n                return { name: `sw.flow.create.${tabName}` };\n            }\n\n            if (this.isTemplate) {\n                return {\n                    name: `sw.flow.detail.${tabName}`,\n                    query: { type: 'template' },\n                };\n            }\n\n            return { name: `sw.flow.detail.${tabName}` };\n        },\n\n        createNewFlow() {\n            if (this.$route.params.flowTemplateId) {\n                return this.createFromFlowTemplate();\n            }\n\n            const flow = this.flowRepository.create();\n            flow.id = Utils.createId();\n            flow.priority = 0;\n            flow.eventName = '';\n\n            return State.commit('swFlowState/setFlow', flow);\n        },\n\n        getDetailFlow() {\n            this.isLoading = true;\n            Cicada.State.dispatch('swFlowState/fetchTriggerActions');\n\n            return this.flowRepository\n                .get(this.flowId, Context.api, this.flowCriteria)\n                .then((data) => {\n                    State.commit('swFlowState/setFlow', data);\n                    State.commit('swFlowState/setOriginFlow', cloneDeep(data));\n                    this.getDataForActionDescription();\n                })\n                .catch(() => {\n                    this.createNotificationError({\n                        message: this.$tc('sw-flow.flowNotification.messageError'),\n                    });\n                })\n                .finally(() => {\n                    this.isLoading = false;\n                });\n        },\n\n        getAppFlowAction() {\n            return this.appFlowActionRepository.search(this.appFlowActionCriteria, Cicada.Context.api).then((response) => {\n                State.commit('swFlowState/setAppActions', response);\n            });\n        },\n\n        getDetailFlowTemplate() {\n            this.isLoading = true;\n\n            return this.flowTemplateRepository\n                .get(this.flowId, Context.api, this.flowTemplateCriteria)\n                .then((data) => {\n                    State.commit('swFlowState/setFlow', data);\n                    State.commit('swFlowState/setOriginFlow', cloneDeep(data));\n                    this.getDataForActionDescription();\n                    this.getRuleDataForFlowTemplate();\n                })\n                .catch(() => {\n                    this.createNotificationError({\n                        message: this.$tc('sw-flow.flowNotification.messageError'),\n                    });\n                })\n                .finally(() => {\n                    this.isLoading = false;\n                });\n        },\n\n        async onSave() {\n            // Remove selector sequence type before saving\n            this.removeAllSelectors();\n\n            // Validate condition sequence which has empty rule or action sequence has empty action name\n            const invalidSequences = this.validateEmptySequence();\n\n            if (invalidSequences.length) {\n                this.createNotificationWarning({\n                    message: this.$tc('sw-flow.flowNotification.messageRequiredEmptyFields'),\n                });\n\n                return;\n            }\n\n            this.isSaveSuccessful = false;\n            this.isLoading = true;\n\n            if (this.isTemplate) {\n                this.createNotificationError({\n                    message: this.$tc('sw-flow.flowNotification.messageWarningSave'),\n                });\n\n                this.isLoading = false;\n\n                return;\n            }\n\n            if (!(typeof this.flow.isNew === 'function' && this.flow.isNew()) && !this.isTemplate) {\n                await this.updateSequences();\n            }\n\n            this.flowRepository\n                .save(this.flow)\n                .then(() => {\n                    if ((typeof this.flow.isNew === 'function' && this.flow.isNew()) || this.$route.params.flowTemplateId) {\n                        this.createNotificationSuccess({\n                            message: this.$tc('sw-flow.flowNotification.messageCreateSuccess'),\n                        });\n\n                        this.$router.push({\n                            name: 'sw.flow.detail',\n                            params: { id: this.flow.id },\n                        });\n                    } else {\n                        this.getDetailFlow();\n                    }\n\n                    this.isSaveSuccessful = true;\n                })\n                .catch(() => {\n                    this.createNotificationError({\n                        message: this.$tc('sw-flow.flowNotification.messageSaveError'),\n                    });\n\n                    this.handleFieldValiationError();\n                })\n                .finally(() => {\n                    this.isLoading = false;\n                });\n        },\n\n        async updateSequences() {\n            const sequences = this.sequences.map((item) => {\n                item.flowId = this.flow.id;\n                return item;\n            });\n\n            await this.flowSequenceRepository.sync(sequences);\n\n            const deletedSequenceIds = this.getDeletedSequenceIds();\n\n            if (deletedSequenceIds.length > 0) {\n                await this.flowSequenceRepository.syncDeleted(deletedSequenceIds);\n            }\n\n            const updateFlow = await this.flowRepository.get(this.flowId, Context.api);\n\n            Object.keys(updateFlow).forEach((key) => {\n                if (key !== 'sequences') {\n                    updateFlow[key] = this.flow[key];\n                }\n            });\n\n            State.commit('swFlowState/setFlow', updateFlow);\n        },\n\n        getDeletedSequenceIds() {\n            const sequenceIds = this.sequences.map((sequence) => sequence.id);\n            const deletedSequences = this.flow\n                .getOrigin()\n                .sequences.filter((sequence) => !sequenceIds.includes(sequence.id));\n\n            return deletedSequences.map((sequence) => sequence.id);\n        },\n\n        handleFieldValiationError() {\n            if (!this.flowNameError && !this.flowEventNameError) {\n                return;\n            }\n\n            const currentRouteName = this.$router.history.current.name;\n\n            const hasErrorTabFlow =\n                (currentRouteName === 'sw.flow.create.flow' || currentRouteName === 'sw.flow.detail.flow') &&\n                this.flowEventNameError;\n\n            const hasErrorTabGeneral =\n                (currentRouteName === 'sw.flow.create.general' || currentRouteName === 'sw.flow.detail.general') &&\n                this.flowNameError;\n\n            if (hasErrorTabFlow || hasErrorTabGeneral) {\n                return;\n            }\n\n            // Navigate to another tab which contains field errors\n            if (this.flowId) {\n                this.$router.push({\n                    name: this.flowNameError ? 'sw.flow.detail.general' : 'sw.flow.detail.flow',\n                    params: { flowId: this.flowId },\n                });\n\n                return;\n            }\n\n            this.$router.push({\n                name: this.flowNameError ? 'sw.flow.create.general' : 'sw.flow.create.flow',\n            });\n        },\n\n        saveFinish() {\n            this.isLoading = false;\n            this.isSaveSuccessful = false;\n        },\n\n        onLeaveModalClose() {\n            this.nextRoute(false);\n            this.nextRoute = null;\n            this.showLeavePageWarningModal = false;\n        },\n\n        onLeaveModalConfirm() {\n            this.showLeavePageWarningModal = false;\n\n            this.$nextTick(() => {\n                this.nextRoute();\n            });\n        },\n\n        removeAllSelectors() {\n            const newSequences = this.sequences.filter((sequence) => {\n                return sequence.ruleId !== null || sequence.actionName !== null;\n            });\n\n            State.commit('swFlowState/setSequences', newSequences);\n        },\n\n        validateEmptySequence() {\n            const invalidSequences = this.sequences.reduce((result, sequence) => {\n                if (sequence.ruleId === '' || sequence.actionName === '') {\n                    result.push(sequence.id);\n                }\n\n                return result;\n            }, []);\n\n            State.commit('swFlowState/setInvalidSequences', invalidSequences);\n\n            return invalidSequences;\n        },\n\n        getDataForActionDescription() {\n            if (!this.sequences) {\n                return null;\n            }\n\n            const promises = [];\n            // eslint-disable-next-line max-len\n            const hasSetOrderStateAction = this.sequences.some(\n                (sequence) => sequence.actionName === this.flowBuilderService.getActionName('SET_ORDER_STATE'),\n            );\n\n            if (hasSetOrderStateAction) {\n                // get support information for set order state action.\n                promises.push(\n                    this.stateMachineStateRepository.search(this.stateMachineStateCriteria).then((data) => {\n                        State.commit('swFlowState/setStateMachineState', data);\n                    }),\n                );\n            }\n\n            // eslint-disable-next-line max-len\n            const hasDocumentAction = this.sequences.some(\n                (sequence) => sequence.actionName === this.flowBuilderService.getActionName('GENERATE_DOCUMENT'),\n            );\n\n            if (hasDocumentAction) {\n                // get support information for generate document action.\n                promises.push(\n                    this.documentTypeRepository.search(this.documentTypeCriteria).then((data) => {\n                        Cicada.State.commit('swFlowState/setDocumentTypes', data);\n                    }),\n                );\n            }\n\n            // eslint-disable-next-line max-len\n            const hasMailSendAction = this.sequences.some(\n                (sequence) => sequence.actionName === this.flowBuilderService.getActionName('MAIL_SEND'),\n            );\n\n            if (hasMailSendAction) {\n                // get support information for mail send action.\n                promises.push(\n                    this.mailTemplateRepository.search(this.mailTemplateIdsCriteria).then((data) => {\n                        Cicada.State.commit('swFlowState/setMailTemplates', data);\n                    }),\n                );\n            }\n\n            // eslint-disable-next-line max-len\n            const hasChangeCustomerGroup = this.sequences.some(\n                (sequence) => sequence.actionName === this.flowBuilderService.getActionName('CHANGE_CUSTOMER_GROUP'),\n            );\n\n            if (hasChangeCustomerGroup) {\n                // get support information for change customer group action.\n                promises.push(\n                    this.customerGroupRepository.search(this.customerGroupCriteria).then((data) => {\n                        Cicada.State.commit('swFlowState/setCustomerGroups', data);\n                    }),\n                );\n            }\n\n            const customFieldActionConstants = [\n                this.flowBuilderService.getActionName('SET_ORDER_CUSTOM_FIELD'),\n                this.flowBuilderService.getActionName('SET_CUSTOMER_CUSTOM_FIELD'),\n                this.flowBuilderService.getActionName('SET_CUSTOMER_GROUP_CUSTOM_FIELD'),\n            ];\n            // eslint-disable-next-line max-len\n            const hasSetCustomFieldAction = this.sequences.some((sequence) =>\n                customFieldActionConstants.includes(sequence.actionName),\n            );\n\n            if (hasSetCustomFieldAction) {\n                promises.push(\n                    this.customFieldSetRepository.search(this.customFieldSetCriteria).then((data) => {\n                        Cicada.State.commit('swFlowState/setCustomFieldSets', data);\n                    }),\n                );\n\n                promises.push(\n                    this.customFieldRepository.search(this.customFieldCriteria).then((data) => {\n                        Cicada.State.commit('swFlowState/setCustomFields', data);\n                    }),\n                );\n            }\n\n            return Promise.all(promises);\n        },\n\n        createFromFlowTemplate() {\n            const flow = this.flowRepository.create();\n            flow.id = Utils.createId();\n            flow.priority = 0;\n\n            return this.flowTemplateRepository\n                .get(this.$route.params.flowTemplateId, Context.api, this.flowTemplateCriteria)\n                .then((data) => {\n                    flow.name = data.name;\n                    flow.eventName = data.config?.eventName;\n                    flow.description = data.config?.description;\n                    flow.sequences = this.buildSequencesFromConfig(data.config?.sequences ?? []);\n\n                    State.commit('swFlowState/setFlow', flow);\n                    State.commit('swFlowState/setOriginFlow', cloneDeep(flow));\n                    this.getDataForActionDescription();\n                    this.getRuleDataForFlowTemplate();\n                })\n                .catch(() => {\n                    this.createNotificationError({\n                        message: this.$tc('sw-flow.flowNotification.messageError'),\n                    });\n                })\n                .finally(() => {\n                    this.isLoading = false;\n                });\n        },\n\n        createSequenceEntity(flowSequence) {\n            const entity = this.flowSequenceRepository.create();\n            Object.keys(flowSequence).forEach((key) => {\n                if (key === 'trueCase') {\n                    entity[key] = Boolean(flowSequence[key]);\n\n                    return;\n                }\n\n                if (key === 'config') {\n                    entity[key] = { ...flowSequence[key] };\n\n                    return;\n                }\n\n                entity[key] = flowSequence[key];\n            });\n\n            return entity;\n        },\n\n        buildSequencesFromConfig(sequences) {\n            const parentIds = {};\n\n            sequences = sequences.map((sequence) => {\n                sequence = this.createSequenceEntity(sequence);\n\n                parentIds[sequence.id] = Utils.createId();\n                sequence.id = parentIds[sequence.id];\n\n                return sequence;\n            });\n\n            // update parentId of sequence\n            for (let i = 0; i < sequences.length; i += 1) {\n                if (sequences[i].parentId !== null) {\n                    sequences[i].parentId = parentIds[sequences[i].parentId];\n                }\n            }\n\n            sequences = Service('flowBuilderService').rearrangeArrayObjects(sequences);\n\n            return new EntityCollection(\n                this.flowSequenceRepository.source,\n                this.flowSequenceRepository.entityName,\n                Context.api,\n                null,\n                sequences,\n            );\n        },\n\n        getRuleDataForFlowTemplate() {\n            const ruleIds = this.sequences.filter((sequence) => sequence.ruleId !== null).map((sequence) => sequence.ruleId);\n\n            if (!ruleIds.length) {\n                return;\n            }\n\n            const criteria = new Criteria(1, 25);\n            criteria.addFilter(Criteria.equalsAny('id', ruleIds));\n\n            this.ruleRepository.search(criteria).then((rules) => {\n                const sequencesWithRules = this.sequences.map((sequence) => {\n                    if (sequence.ruleId) {\n                        sequence.rule = rules.find((item) => item.id === sequence.ruleId);\n                    }\n\n                    return sequence;\n                });\n\n                State.commit('swFlowState/setSequences', sequencesWithRules);\n                State.commit('swFlowState/setOriginFlow', cloneDeep(this.flow));\n            });\n        },\n    },\n};\n"],"names":["template","Component","Mixin","Context","State","Utils","Service","Criteria","EntityCollection","cloneDeep","mapState","mapGetters","mapPropertyErrors","index","_a","criteria","event","to","from","next","tabName","flow","data","response","sequences","item","deletedSequenceIds","updateFlow","key","sequenceIds","sequence","currentRouteName","hasErrorTabFlow","hasErrorTabGeneral","newSequences","invalidSequences","result","promises","customFieldActionConstants","_b","_c","flowSequence","entity","parentIds","i","ruleIds","rules","sequencesWithRules"],"mappings":"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"}