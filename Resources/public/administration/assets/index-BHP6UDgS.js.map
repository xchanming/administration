{"version":3,"file":"index-BHP6UDgS.js","sources":["../../../app/administration/src/app/component/rule/condition-type/sw-condition-script/sw-condition-script.html.twig","../../../app/administration/src/app/component/rule/condition-type/sw-condition-script/index.js"],"sourcesContent":["<!-- eslint-disable vue/no-v-for-template-key -->\n<!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n{% block sw_condition_value_content %}\n<div\n    class=\"sw-condition-script sw-condition__condition-value\"\n    :class=\"conditionClasses\"\n>\n    <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n    {% block sw_condition_script_fields %}\n    <template\n        v-for=\"(field, index) in config\"\n        :key=\"index\"\n    >\n        <sw-form-field-renderer\n            v-bind=\"getBind(field)\"\n            :disabled=\"disabled || undefined\"\n            :value=\"values[field.name]\"\n            size=\"medium\"\n            show-clearable-button\n            @update:value=\"updateFieldValue(field.name, $event)\"\n        />\n    </template>\n    {% endblock %}\n</div>\n{% endblock %}\n\n","import template from './sw-condition-script.html.twig';\nimport './sw-condition-script.scss';\n\nconst { Component } = Cicada;\nconst { Criteria } = Cicada.Data;\n\n/**\n * @public\n * @package services-settings\n * @description Condition for the ScriptRule. This component must a be child of sw-condition-tree.\n * @status prototype\n * @example-type code-only\n * @component-example\n * <sw-condition-script :condition=\"condition\" :level=\"0\"></sw-condition-script>\n */\nComponent.extend('sw-condition-script', 'sw-condition-base', {\n    template,\n    inheritAttrs: false,\n\n    computed: {\n        config() {\n            if (!this.condition.appScriptCondition) {\n                return [];\n            }\n\n            return this.condition.appScriptCondition.config;\n        },\n\n        values() {\n            const values = {};\n\n            // Iterate the config of fields to define nested reactive properties with getters/setters for values\n            Object.values(this.config).forEach((field) => {\n                const { name, type, config } = field;\n\n                Object.defineProperty(values, name, {\n                    get: () => {\n                        this.ensureValueExist();\n\n                        if (type === 'bool' && !this.condition.value.hasOwnProperty(name)) {\n                            this.condition.value = {\n                                ...this.condition.value,\n                                [name]: false,\n                            };\n                        }\n\n                        if (\n                            [\n                                'sw-entity-multi-id-select',\n                                'sw-multi-select',\n                            ].includes(config.componentName)\n                        ) {\n                            return this.condition.value[name] || [];\n                        }\n\n                        return this.condition.value[name];\n                    },\n                    set: (value) => {\n                        this.ensureValueExist();\n                        this.condition.value = {\n                            ...this.condition.value,\n                            [name]: value,\n                        };\n                    },\n                });\n            });\n\n            return values;\n        },\n\n        currentError() {\n            let error = null;\n\n            Object.values(this.config).forEach((config) => {\n                if (error) {\n                    return;\n                }\n\n                const errorProperty = Cicada.State.getters['error/getApiError'](this.condition, `value.${config.name}`);\n\n                if (errorProperty) {\n                    error = errorProperty;\n                }\n            });\n\n            return error;\n        },\n\n        conditionClasses() {\n            return {\n                'has--operator-first': this.config.length > 1 && this.config[0].name === 'operator',\n            };\n        },\n    },\n\n    methods: {\n        getBind(field) {\n            const fieldClone = Cicada.Utils.object.cloneDeep(field);\n\n            if (fieldClone.type === 'html') {\n                fieldClone.type = 'text';\n                fieldClone.config.componentName = 'sw-field';\n                fieldClone.config.type = 'text';\n                fieldClone.config.customFieldType = 'text';\n            }\n\n            if (fieldClone.type === 'price') {\n                fieldClone.type = 'float';\n                fieldClone.config.componentName = 'sw-field';\n                fieldClone.config.type = 'number';\n                fieldClone.config.customFieldType = 'number';\n            }\n\n            if (fieldClone.type === 'entity' && fieldClone.config.entity === 'product') {\n                const criteria = new Criteria(1, 25);\n\n                criteria.addAssociation('options.group');\n\n                fieldClone.config.criteria = criteria;\n                fieldClone.config.displayVariants = true;\n            }\n\n            delete fieldClone.config.label;\n            delete fieldClone.config.helpText;\n\n            return fieldClone;\n        },\n\n        updateFieldValue(fieldName, value) {\n            if (this.isCompatEnabled('INSTANCE_SET')) {\n                this.$set(this.values, fieldName, value);\n                return;\n            }\n\n            this.values[fieldName] = value;\n        },\n    },\n});\n"],"names":["template","Component","Criteria","values","field","name","type","config","value","error","errorProperty","fieldClone","criteria","fieldName"],"mappings":"AAAA,MAAeA,EAAA,geCGT,CAAE,UAAAC,CAAW,EAAG,OAChB,CAAE,SAAAC,CAAQ,EAAK,OAAO,KAW5BD,EAAU,OAAO,sBAAuB,oBAAqB,CACzD,SAAAD,EACA,aAAc,GAEd,SAAU,CACN,QAAS,CACL,OAAK,KAAK,UAAU,mBAIb,KAAK,UAAU,mBAAmB,OAH9B,EAId,EAED,QAAS,CACL,MAAMG,EAAS,CAAA,EAGf,cAAO,OAAO,KAAK,MAAM,EAAE,QAASC,GAAU,CAC1C,KAAM,CAAE,KAAAC,EAAM,KAAAC,EAAM,OAAAC,CAAM,EAAKH,EAE/B,OAAO,eAAeD,EAAQE,EAAM,CAChC,IAAK,KACD,KAAK,iBAAgB,EAEjBC,IAAS,QAAU,CAAC,KAAK,UAAU,MAAM,eAAeD,CAAI,IAC5D,KAAK,UAAU,MAAQ,CACnB,GAAG,KAAK,UAAU,MAClB,CAACA,CAAI,EAAG,EACxC,GAI4B,CACI,4BACA,iBAChC,EAA8B,SAASE,EAAO,aAAa,EAExB,KAAK,UAAU,MAAMF,CAAI,GAAK,CAAA,EAGlC,KAAK,UAAU,MAAMA,CAAI,GAEpC,IAAMG,GAAU,CACZ,KAAK,iBAAgB,EACrB,KAAK,UAAU,MAAQ,CACnB,GAAG,KAAK,UAAU,MAClB,CAACH,CAAI,EAAGG,CACpC,CACqB,CACrB,CAAiB,CACjB,CAAa,EAEML,CACV,EAED,cAAe,CACX,IAAIM,EAAQ,KAEZ,cAAO,OAAO,KAAK,MAAM,EAAE,QAASF,GAAW,CAC3C,GAAIE,EACA,OAGJ,MAAMC,EAAgB,OAAO,MAAM,QAAQ,mBAAmB,EAAE,KAAK,UAAW,SAASH,EAAO,IAAI,EAAE,EAElGG,IACAD,EAAQC,EAE5B,CAAa,EAEMD,CACV,EAED,kBAAmB,CACf,MAAO,CACH,sBAAuB,KAAK,OAAO,OAAS,GAAK,KAAK,OAAO,CAAC,EAAE,OAAS,UACzF,CACS,CACJ,EAED,QAAS,CACL,QAAQL,EAAO,CACX,MAAMO,EAAa,OAAO,MAAM,OAAO,UAAUP,CAAK,EAgBtD,GAdIO,EAAW,OAAS,SACpBA,EAAW,KAAO,OAClBA,EAAW,OAAO,cAAgB,WAClCA,EAAW,OAAO,KAAO,OACzBA,EAAW,OAAO,gBAAkB,QAGpCA,EAAW,OAAS,UACpBA,EAAW,KAAO,QAClBA,EAAW,OAAO,cAAgB,WAClCA,EAAW,OAAO,KAAO,SACzBA,EAAW,OAAO,gBAAkB,UAGpCA,EAAW,OAAS,UAAYA,EAAW,OAAO,SAAW,UAAW,CACxE,MAAMC,EAAW,IAAIV,EAAS,EAAG,EAAE,EAEnCU,EAAS,eAAe,eAAe,EAEvCD,EAAW,OAAO,SAAWC,EAC7BD,EAAW,OAAO,gBAAkB,EACvC,CAED,cAAOA,EAAW,OAAO,MACzB,OAAOA,EAAW,OAAO,SAElBA,CACV,EAED,iBAAiBE,EAAWL,EAAO,CAC/B,GAAI,KAAK,gBAAgB,cAAc,EAAG,CACtC,KAAK,KAAK,KAAK,OAAQK,EAAWL,CAAK,EACvC,MACH,CAED,KAAK,OAAOK,CAAS,EAAIL,CAC5B,CACJ,CACL,CAAC"}