"use strict";(window.webpackJsonpAdministration=window.webpackJsonpAdministration||[]).push([[87542],{87542:function(e,t,i){i.r(t),i.d(t,{default:function(){return n}});let{Criteria:r}=Cicada.Data;var n=Cicada.Component.wrapComponentConfig({template:'\n{% block sw_string_filter %}\n<sw-base-filter\n    :title="filter.label"\n    :show-reset-button="!!filter.value"\n    :active="active"\n    @filter-reset="resetFilter"\n>\n    \n    {% block sw_string_filter_content %}\n    <mt-text-field\n        :model-value="filter.value"\n        :placeholder="filter.placeholder"\n        @change="updateFilter"\n    />\n    {% endblock %}\n</sw-base-filter>\n{% endblock %}\n',compatConfig:Cicada.compatConfig,props:{filter:{type:Object,required:!0},active:{type:Boolean,required:!0},criteriaFilterType:{type:String,required:!1,default:"contains",validValues:["contains","equals","equalsAny","prefix","suffix"],validator(e){return["contains","equals","equalsAny","prefix","suffix"].includes(e)}}},methods:{updateFilter(e){let t;if(!e||"string"!=typeof this.filter.property){this.resetFilter();return}let i=e;"equalsAny"===this.criteriaFilterType?(i=e.split(",").map(e=>e.trim()),t=r.equalsAny(this.filter.property,i)):t=r[this.criteriaFilterType](this.filter.property,i),this.$emit("filter-update",this.filter.name,[t],i)},resetFilter(){this.$emit("filter-reset",this.filter.name)}}})}}]);