(window.webpackJsonpAdministration=window.webpackJsonpAdministration||[]).push([[31916],{674714:function(){},874243:function(e,t,i){"use strict";i.r(t),i.d(t,{default:function(){return o}});var n=i(978527);i(217908);var a=i(869599),r=i(195866);i(427271),i(775094);let{Mixin:s}=Cicada,l=["onChange","onClose","onDestroy","onMonthChange","onOpen","onYearChange","onValueUpdate","onDayCreate","onParseConfig","onReady","onPreCalendarPosition","onKeyDown"];var o={template:'\n{% block sw_datepicker %}\n<sw-contextual-field\n    class="sw-field--datepicker"\n    :class="{ \'has--focus\': isDatepickerOpen }"\n    v-bind="{\n        ...additionalAttrs,\n        ...inheritanceAttrs\n    }"\n    :required="required"\n    :name="formFieldName"\n    :disabled="disabled"\n    @sw-contextual-field-suffix-clicked="openDatepicker"\n    @inheritance-restore="$emit(\'inheritance-restore\', $event)"\n    @inheritance-remove="$emit(\'inheritance-remove\', $event)"\n    @base-field-mounted="createFlatpickrInstance"\n    v-on="additionalEventListeners"\n>\n\n    <template #sw-field-input="{ identification, disabled }">\n        \n        <input\n            :id="identification"\n            ref="flatpickrInput"\n            type="text"\n            :name="identification"\n            :disabled="disabled"\n            :placeholder="placeholderText"\n        >\n        <sw-icon\n            v-if="!required && timezoneFormattedValue && !disabled"\n            class="sw-field--datepicker__button-reset-value"\n            name="regular-times-xs"\n            @click="unsetValue"\n        />\n    </template>\n\n    <template\n        v-if="showTimeZoneHint"\n        #hint\n    >\n        <sw-icon\n            name="solid-clock"\n            size="12px"\n        />\n        {{ timeZoneHint }}\n    </template>\n\n    <template #sw-contextual-field-suffix>\n        <sw-icon\n            :name="suffixName"\n            @click.stop="openDatepicker"\n        />\n    </template>\n\n    <template #label>\n        <slot name="label"></slot>\n    </template>\n</sw-contextual-field>\n{% endblock %}\n',inheritAttrs:!1,compatConfig:Cicada.compatConfig,emits:["update:value","inheritance-restore","inheritance-remove"],inject:["feature"],mixins:[s.getByName("sw-form-field"),s.getByName("remove-api-error")],props:{value:{type:String,required:!1,default:null},config:{type:Object,default(){return{}}},dateType:{type:String,default:"date",validValues:["time","date","datetime"],validator(e){return["time","date","datetime"].includes(e)}},placeholder:{type:String,default:"",required:!1},required:{type:Boolean,default:!1,required:!1},disabled:{type:Boolean,default:!1,required:!1},hideHint:{type:Boolean,default:!1,required:!1}},data(){return{flatpickrInstance:null,isDatepickerOpen:!1,defaultConfig:{}}},computed:{locale(){return Cicada.State.getters.adminLocaleLanguage||"en"},currentFlatpickrConfig(){return null===this.flatpickrInstance?{}:this.flatpickrInstance.config},placeholderText(){return this.placeholder.length>0?this.placeholder:null===this.flatpickrInstance?this.defaultConfig.altFormat:this.flatpickrInstance.config.altFormat},suffixName(){return this.noCalendar?"regular-clock":"regular-calendar"},noCalendar(){return"time"===this.dateType},enableTime(){return this.noCalendar||"datetime"===this.dateType},additionalEventListeners(){let e={};return this.isCompatEnabled("INSTANCE_LISTENERS")&&Object.keys(this.$listeners).forEach(t=>{["change","input"].includes(t)||(e[t]=this.$listeners[t])}),e},additionalAttrs(){let e={};return Object.keys(this.$attrs).forEach(t=>{["onChange","onInput"].includes(t)||(e[t]=this.$attrs[t])}),e},userTimeZone(){return Cicada?.State?.get("session")?.currentUser?.timeZone??"Asia/Shanghai"},timezoneFormattedValue:{get(){return this.value?["time","date"].includes(this.dateType)?this.value:(0,a.Z)(this.value,this.userTimeZone).toISOString():null},set(e){if(null===e){this.$emit("update:value",null);return}if(["time","date"].includes(this.dateType)){this.$emit("update:value",e);return}let t=(0,r.Z)(new Date(e),this.userTimeZone);this.$emit("update:value",t.toISOString())}},showTimeZoneHint(){return!this.hideHint},timeZoneHint(){return"datetime"===this.dateType?this.userTimeZone:"UTC"},is24HourFormat(){let e=Cicada.State.get("session").currentLocale;return!new Intl.DateTimeFormat(e,{hour:"numeric"}).resolvedOptions().hour12}},watch:{config:{deep:!0,handler(){this.updateFlatpickrInstance()}},dateType(){this.createConfig(),this.updateFlatpickrInstance()},locale:{immediate:!0,handler(){this.defaultConfig.locale=this.locale,this.updateFlatpickrInstance(this.config)}},timezoneFormattedValue(e){this.setDatepickerValue(e)},disabled(e){this.flatpickrInstance._input.disabled=e}},created(){this.createdComponent()},mounted(){this.mountedComponent()},methods:{createdComponent(){this.createConfig()},mountedComponent(){null!==this.flatpickrInstance&&this.updateFlatpickrInstance()},beforeDestroyComponent(){this.$nextTick(()=>{null!==this.flatpickrInstance&&(this.flatpickrInstance.destroy(),this.flatpickrInstance=null)})},setDatepickerValue(e){null!==this.flatpickrInstance&&this.flatpickrInstance.setDate(e,!1)},getMergedConfig(e){return void 0!==e.mode&&console.warn("[sw-datepicker] The only allowed mode is the default 'single' mode (the specified mode will be ignored!). The modes 'multiple' or 'range' are currently not supported"),"string"==typeof e.time_24hr&&(e.time_24hr="true"===e.time_24hr),{...this.defaultConfig,enableTime:this.enableTime,noCalendar:this.noCalendar,...e,mode:"single"}},updateFlatpickrInstance(){if(null===this.flatpickrInstance)return;let e=this.getMergedConfig(this.config);if(void 0!==e.enableTime&&e.enableTime!==this.currentFlatpickrConfig.enableTime){this.createFlatpickrInstance(this.config);return}l.forEach(t=>{delete e[t]}),this.flatpickrInstance.set(e),["locale","showMonths"].forEach(t=>{void 0!==e[t]&&this.flatpickrInstance.set(t,e[t])})},createFlatpickrInstance(){null!==this.flatpickrInstance&&(this.flatpickrInstance.destroy(),this.flatpickrInstance=null);let e=this.getMergedConfig(this.config);this.getEventNames().forEach(({kebabCase:t,camelCase:i})=>{e[i]=(...e)=>{this.$emit(t,...e)}}),this.flatpickrInstance=new n.Z(this.$refs.flatpickrInput,e),this.flatpickrInstance.config.onOpen.push(()=>{this.isDatepickerOpen=!0}),this.flatpickrInstance.config.onClose.push((...e)=>{this.emitValue(e[1]),this.isDatepickerOpen=!1}),this.flatpickrInstance.config.onChange.push((...e)=>{this.emitValue(e[1])}),this.setDatepickerValue(this.timezoneFormattedValue)},getEventNames(){let e=[];return Object.keys(this.additionalEventListeners).forEach(t=>{e.push({kebabCase:t,camelCase:this.kebabToCamel(t)})}),e},openDatepicker(){this.$nextTick(()=>{this.flatpickrInstance.open()})},kebabToCamel(e){return e.replace(/-([a-z])/g,(e,t)=>t.toUpperCase())},unsetValue(){this.$nextTick(()=>{this.emitValue(null)})},emitValue(e){""===e&&(e=null),e!==this.timezoneFormattedValue&&(this.timezoneFormattedValue=e)},createConfig(){this.defaultConfig={time_24hr:this.is24HourFormat,locale:this.locale,altInput:!0,allowInput:!0};let e="Y-m-dTH:i:S",t=this.getDateStringFormat({year:"numeric",month:"2-digit",day:"2-digit",hour:"2-digit",minute:"2-digit"});"time"===this.dateType&&(e="H:i:S",t=this.getDateStringFormat({hour:"2-digit",minute:"2-digit"})),"date"===this.dateType&&(t=this.getDateStringFormat({year:"numeric",month:"2-digit",day:"2-digit"})),Object.assign(this.defaultConfig,{dateFormat:e,altFormat:t})},getDateStringFormat(e){let t=Cicada.State.get("session").currentLocale,i=new Intl.DateTimeFormat(t,e).formatToParts(new Date(2e3,0,1,0,0,0)),n=this.getMergedConfig(this.config),a={year:"Y",month:"m",day:"d",hour:n.time_24hr?"H":"h",minute:"i",dayPeriod:n.time_24hr?"":"K"};return i.map(e=>"literal"===e.type?e.value:a[e.type]).join("")}}}},775094:function(e,t,i){var n=i(674714);n.__esModule&&(n=n.default),"string"==typeof n&&(n=[[e.id,n,""]]),n.locals&&(e.exports=n.locals),i(745346).Z("d83b132e",n,!0,{})}}]);